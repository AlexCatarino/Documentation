import pathlib
import re
from urllib.request import urlopen

raw = urlopen("https://www.quantconnect.com/services/inspector?type=T:QuantConnect.Algorithm.QCAlgorithm").read().decode("utf-8") \
    .replace("true", "True") \
    .replace("false", "False") \
    .replace("null", "None")
raw_dict = eval(raw)
methods = raw_dict["methods"]

names = {}
descriptions = {}
args = {}
plots = {}
updates = {}

for method in methods:
    if 'QuantConnect.Indicators' in str(method["method-return-type-full-name"]) \
    and str(method["method-return-type-short-name"]) != 'IndicatorBase<IndicatorDataPoint>':
        item = str(method["method-return-type-short-name"])
        names[item] = str(method["method-name"])
        descriptions[item] = [str(method["method-description"])]
        args[item] = tuple(x["argument-name"] for x in method["method-arguments"] if not x["argument-optional"])
        plots[item] = []
        
        ind = urlopen(f"https://www.quantconnect.com/services/inspector?type=T:QuantConnect.Indicators.{item}").read().decode("utf-8") \
                .replace("true", "True") \
                .replace("false", "False") \
                .replace("null", "None")
        ind_dict = eval(ind)
        
        detail_description = str(ind_dict['description']).replace("Represents", "This indicator represents")
        if "Source: " in detail_description:
            link_split = detail_description.split("http")
            detail_description = link_split[0].replace("Source: ", f'<sup><a href="https{link_split[1]}">source</a></sup>')
        descriptions[item].append(detail_description)
        
        for prop in ind_dict["properties"]:
            prop_name = str(prop["property-name"])
            if prop_name != "MovingAverageType" \
            or prop_name != "IsReady" \
            or prop_name != "WarmUpPeriod" \
            or prop_name != "Name" \
            or prop_name != "Samples":
                plots[item].append(prop_name)
                
        while True:
            if "QuantConnect.Indicators.Indicator" in ind_dict["base-type-full-name"]:
                updates[item] = ("time", "value")
                update_value = "time/decimal pair"
                break
            
            elif "QuantConnect.Indicators.BarIndicator" in ind_dict["base-type-full-name"]:
                updates[item] = ("quotebar")
                update_value = "a trade bar, a quote bar, or a custom data bar"
                break
            
            elif "QuantConnect.Indicators.TradeBarIndicator" in ind_dict["base-type-full-name"]:
                updates[item] = ("tradebar")
                update_value = "a trade bar"
                break
            
            else:
                end = ind_dict["base-type-full-name"].split(".")[-1]
                ind = urlopen(f"https://www.quantconnect.com/services/inspector?type=T:QuantConnect.Indicators.{end}").read().decode("utf-8") \
                        .replace("true", "True") \
                        .replace("false", "False") \
                        .replace("null", "None")
                ind_dict = eval(ind)
        
i = 1

for full, short in dict(sorted(names.items())).items():
    name = " ".join(re.split('(?=[A-Z])', full))
    base = f"02 Writing Algorithms/02 User Guides/10 Indicators/07 Indicator Reference/{i:02}{name}"
    destination_folder = pathlib.Path(base)
    destination_folder.mkdir(parents=True, exist_ok=True)
    
    with open(destination_folder / "01 Introduction.html", "w", encoding="utf-8") as html_file:
        creation = descriptions[full][0].replace(full, '<code>'+full+'</code>')
        html_file.write(f"""<!-- Code generated by Indicator-Reference-Code-Generator.py -->
                        
<p>This page explains how to {creation[0].lower() + creation[1:]}</p>
                        
<p>{descriptions[full][1]}</p>""")
    
    api = []
    with open("02 Writing Algorithms/04 API Reference/02.html", "r", encoding="utf-8") as fin:
        lines = fin.readlines()
        active = False
        
        for line in lines:
            if not active and f'<a id="{short}-header"></a>' in line:
                active = True
                
            if active and 'button class="method-tag"' not in line:
                api.append(line)
                
                if "</div>" in line and "    " not in line:
                    active = False
        
    with open(destination_folder / "02 Automatic Usage.html", "w", encoding="utf-8") as html_file:
        html_file.write(f"""<!-- Code generated by Indicator-Reference-Code-Generator.py -->
                        
<style>

    .method-container {{
        border: 1px solid #D9E1EB;
        border-top: 0;
        border-radius: 4px;
        margin-top: 2rem;
    }}

    .method-container > div {{
        padding-left: 1.5rem;
        padding-right: 1rem;
        margin-bottom: 2rem;
    }}

    .method-details > div {{
        margin-bottom: 2rem;
        display: block;
    }}

    .method-header {{
        background: #FBFCFD;
        border-bottom: 1px solid #D9E1EB;
        border-top: 1px solid #D9E1EB;
        padding: 1.5rem;
    }}

    .method-header > pre {{
        white-space: pre-line;
    }}

    .method-header:first-child {{
        border-radius: 4px 4px 0px 0px;
    }}

    .method-order {{
        color: #8F9CA3;
        font-size: 14px;
        margin-left: 0.5rem;
    }}

    .parameter-table{{
        margin: 2rem 0 2rem -0.25rem;
        display: block;
        overflow-x: auto;
    }}

    .parameter-table th {{
        padding-bottom: 1rem;
        text-align: left;
    }}

    .parameter-table td {{
        padding: 1rem 3rem 0 0;
        vertical-align: top;
    }}
    
    .show-hide-detail {{
        background: none;
        border: none;
        padding: 0;
        color: #069;
        cursor: pointer;
    }}

</style>

<script>
function ShowHide(event, idName) {{
    var x = document.getElementById(idName);
    if (x.style.display == "none") {{
        x.style.display = "block";
        event.target.innerHTML = "<span>Hide Details <img src='https://cdn.quantconnect.com/i/tu/api-chevron-hide.svg' alt='arrow-hide'></span>";
    }}
    else {{
        x.style.display = "none";
        event.target.innerHTML = "<span>Show Details <img src='https://cdn.quantconnect.com/i/tu/api-chevron-show.svg' alt='arrow-show'></span>";
    }}
}};
</script>
                        
<p><code>QCAlgorithm</code> provides a shortcut method for each indicator available. Each method creates an indicator object, hooks it up for automatic updates, and returns it to be used in your algorithm.</p>

<p>You can determine the specific requirements of the indicator from the reference table below.</p>

{"".join(api)}
<br/>
<p>The indicator resolution can be different from the resolution of your securities data. However, the resolution of the indicator should be equal to or higher than the resolution of your security. In most cases, this usage should be in the Initialize method. If you call this method several times, it will create a new indicator that is not ready to use.</p>

<p>To retrieve the numerical value of any indicator, you can use the <code>Current.Value</code> attribute of the indicator.</p>

<div class="section-example-container">
    <pre class="csharp">private {full} _{short.lower()};
// In Initialize()
_{short.lower()} = {short}{str(args[full]).replace("'", "").replace('"', '').replace(',)', ')')};

// In OnData()
if (_{short.lower()}.IsReady)
{{
    var indicatorValue = _{short.lower()}.Current.Value;
}}</pre>
    <pre class="python"># In Initialize()
self.{short.lower()} = self.{short}{str(args[full]).replace("'", "").replace('"', '').replace(',)', ')')}

# In OnData()
if self.{short.lower()}.IsReady:
    indicator_value = self.{short.lower()}.Current.Value
</pre>
</div>""")
        
    with open(destination_folder / "03 Manual Usage.html", "w", encoding="utf-8") as html_file:
        html_file.write(f"""<!-- Code generated by Indicator-Reference-Code-Generator.py -->
                        
<style>

    .method-container {{
        border: 1px solid #D9E1EB;
        border-top: 0;
        border-radius: 4px;
        margin-top: 2rem;
    }}

    .method-container > div {{
        padding-left: 1.5rem;
        padding-right: 1rem;
        margin-bottom: 2rem;
    }}

    .method-details > div {{
        margin-bottom: 2rem;
        display: block;
    }}

    .method-header {{
        background: #FBFCFD;
        border-bottom: 1px solid #D9E1EB;
        border-top: 1px solid #D9E1EB;
        padding: 1.5rem;
    }}

    .method-header > pre {{
        white-space: pre-line;
    }}

    .method-header:first-child {{
        border-radius: 4px 4px 0px 0px;
    }}

    .method-order {{
        color: #8F9CA3;
        font-size: 14px;
        margin-left: 0.5rem;
    }}

    .parameter-table{{
        margin: 2rem 0 2rem -0.25rem;
        display: block;
        overflow-x: auto;
    }}

    .parameter-table th {{
        padding-bottom: 1rem;
        text-align: left;
    }}

    .parameter-table td {{
        padding: 1rem 3rem 0 0;
        vertical-align: top;
    }}
    
    .show-hide-detail {{
        background: none;
        border: none;
        padding: 0;
        color: #069;
        cursor: pointer;
    }}

</style>

<script>
function ShowHide(event, idName) {{
    var x = document.getElementById(idName);
    if (x.style.display == "none") {{
        x.style.display = "block";
        event.target.innerHTML = "<span>Hide Details <img src='https://cdn.quantconnect.com/i/tu/api-chevron-hide.svg' alt='arrow-hide'></span>";
    }}
    else {{
        x.style.display = "none";
        event.target.innerHTML = "<span>Show Details <img src='https://cdn.quantconnect.com/i/tu/api-chevron-show.svg' alt='arrow-show'></span>";
    }}
}};
</script>

<p>You can create an indicator object that is not bound to any automatic update and choose which data it should use. To use an indicator like this, you create an indicator with its constructor.</p>

<p>To see the LEAN indicator classes available and their constructor arguments, please look them up in the reference table below.</p>
""")
        for line in api:
            if "<p>Definition at" in line:
                html_file.write(f'            <p>Definition at <a href="https://github.com/QuantConnect/Lean/blob/master/Indicators/{full}.cs">file Indicators/{full}.cs.</a></p>\n')
                
            elif "<code>Symbol</code>" not in line and "<td>symbol</td>" not in line and " symbol " not in line:
                html_file.write(line.replace(f"<h3>{short}", f"<h3>{full}")\
                    .replace(f"QuantConnect.Algorithm.QCAlgorithm.{short}", f"QuantConnect.Indicators.{full}")\
                    .replace(f"ShowHide(event, '{short}", f"ShowHide(event, '{full}")\
                    .replace(f'id="{short}', f'id="{full}'))

        html_file.write(f"""<br/>
<p>You can use two methods to update the indicator: automatic or manual.</p>

<h4>Automatic Update</h4>
<p>In this method, you will recreate the basic indicator usage: create an indicator with its constructor and register the indicator for automatic updates with the <code>RegisterIndicator()</code> method.</p>
        
<div class="section-example-container">
    <pre class="csharp">private {full} _{short.lower()};
// In Initialize()
_{short.lower()} = new {full}{str(tuple(args[full][i] for i in range(len(args[full])) if i != 0)).replace("'", "").replace('"', '').replace(',)', ')')};
_{short.lower()}.Updated += IndicatorUpdateMethod;

var thirtyMinuteConsolidator = new TradeBarConsolidator(TimeSpan.FromMinutes(30));
SubscriptionManager.AddConsolidator(symbol, thirtyMinuteConsolidator);

RegisterIndicator(symbol, _{short.lower()}, thirtyMinuteConsolidator);

// In IndicatorUpdateMethod()
if (_{short.lower()}.IsReady)
{{
    var indicatorValue = _{short.lower()}.Current.Value;
}}</pre>
    <pre class="python"># In Initialize()
self.{short.lower()} = {full}{str(tuple(args[full][i] for i in range(len(args[full])) if i != 0)).replace("'", "").replace('"', '').replace(',)', ')')}
self.{short.lower()}.Updated += self.IndicatorUpdateMethod

thirty_minute_consolidator = TradeBarConsolidator(timedelta(minutes=30))
self.SubscriptionManager.AddConsolidator(symbol, thirty_minute_consolidator)

self.RegisterIndicator(symbol, self.{short.lower()}, thirty_minute_consolidator)

# In IndicatorUpdateMethod()
if self.{short.lower()}.IsReady:
    indicator_value = self.{short.lower()}.Current.Value</pre>
</div>

<h4>Manual Update</h4>
<p>Updating your indicator manually allows you to control which data is used and create indicators of other non-price fields. The indicator objects have the <code>Update()</code> method that updates the state of the <code>{full}</code> indicator with the given {update_value}.</p>

<p>With this method, the indicator will only be ready after the <code>Update()</code> method has been used to pump enough data.</p>

<div class="section-example-container">
    <pre class="csharp">private {full} _{short.lower()};
// In Initialize()
_{short.lower()} = new {full}{str(tuple(args[full][i] for i in range(len(args[full])) if i != 0)).replace("'", "").replace('"', '').replace(',)', ')')};

// In OnData()
if (data.Bars.ContainsKey(symbol))
{{
    _{short.lower()}.Update{str(updates[full]).replace("'", "").replace('"', '').replace(',)', ')')};
}}
if (_{short.lower()}.IsReady)
{{
    var indicatorValue = _{short.lower()}.Current.Value;
}}</pre>
    <pre class="python"># In Initialize()
self.{short.lower()} = {full}{str(tuple(args[full][i] for i in range(len(args[full])) if i != 0)).replace("'", "").replace('"', '').replace(',)', ')')}

# In OnData()
if data.Bars.ContainsKey(symbol):
    self.{short.lower()}.Update{str(updates[full]).replace("'", "").replace('"', '').replace(',)', ')')}
if self.{short.lower()}.IsReady:
    indicator_value = self.{short.lower()}.Current.Value</pre>
</div>""")
        
    with open(destination_folder / "04 Visualization.html", "w", encoding="utf-8") as html_file:
        html_file.write(f"""<!-- Code generated by Indicator-Reference-Code-Generator.py -->
                        
<p>We provide a helper method which aims to make plotting indicators simple. For further information on the <a href="/docs/v2/writing-algorithms/user-guides/charting">charting</a> API please see our Charting section.</p>
                        
<div class="section-example-container">
    <pre class="csharp">private {full} _{short.lower()};
// In Initialize()
_{short.lower()} = {short}{str(args[full]).replace("'", "").replace('"', '').replace(',)', ')')};

// In OnData()
if (_{short.lower()}.IsReady)
{{
""")
        
        for x in plots[full]:
            html_file.write(f'''    Plot("My Indicators", "{short}{" ".join(re.split("(?=[A-Z])", x))}", _{short.lower()}.{x});
''')
                            
        html_file.write(f"""}}</pre>
    <pre class="python"># In Initialize()
self.{short.lower()} = self.{short}{str(args[full]).replace("'", "").replace('"', '').replace(',)', ')')}

# In OnData()
if self.{short.lower()}.IsReady:
""")
                            
        for x in plots[full]:
            html_file.write(f'''    self.Plot("My Indicators", "{short}{" ".join(re.split("(?=[A-Z])", x))}", self.{short.lower()}.{x});
''')
                            
        html_file.write(f"""}}</pre>
</div>""")
        
    i += 1