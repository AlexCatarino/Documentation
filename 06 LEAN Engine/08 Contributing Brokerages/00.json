{
  "type" : "landing",
  "heading" : "Contributing Brokerages",
  "subHeading" : "",
  "content" : "<p>Creating a fully supported brokerage is a challenging endeavor. LEAN requires a number of individual pieces which work together to form a complete brokerage implementation. This guide aims to describe in as much detail as possible what you need to do for each module.</p> <p>The end goal is to submit a pull request that passes all tests. Partially-completed brokerage implementations are acceptable if they are merged to a branch. It's easy to fall behind master, so be sure to keep your branch updated with the master branch. Before you start, read LEAN's <a rel='nofollow' target='_blank' href='https://github.com/QuantConnect/Lean/blob/master/CONTRIBUTING.md#code-style-and-testing'>coding style guidelines</a> to comply with the code commenting and design standards.</p> <p>The root of the brokerage system is the algorithm job packets, which hold configuration information about how to run LEAN. The program logic is a little convoluted. It moves from <i>config.json > create job packet > create brokerage factory matching name > set job packet brokerage data > factory creates brokerage instance</i>. As a result, we'll start creating a brokerage at the root, the configuration and brokerage factory.</p>",
  "alsoLinks" : [
    { "text" : "Dataset Market" , "href" : "https://www.quantconnect.com/datasets" },
    { "text" : "Purchasing Datasets" , "href" : "https://www.quantconnect.com/docs/v2/cloud-platform/datasets/licensing" }
  ],
  "featureShortDescription": {
    "01" : "Set up your local brokerage repository.",
    "02" : "(<code>IBrokerageFactory</code>) Stub out the implementation and initialize a brokerage instance.",
    "03" : "(<code>IBrokerage</code>) Instal key brokerage application logic, where possible using a brokerage SDK.",
    "04" : "(<code>ISymbolMapper</code>) Translate brokerage specific tickers to LEAN format for a uniform algorithm design experience.",
    "05" : "(<code>IBrokerageModel</code>) Describe brokerage support of orders and set transaction models.",
    "06" : "(<code>IDataQueueHandler</code>) Set up a live streaming data service from a brokerage-supplied source.",
    "07" : "(<code>IHistoryProvider</code>) Tap into the brokerage historical data API to serve history for live algorithms.",
    "08" : "(<code>IDataDownloader</code>) Save data from the brokerage to disk in LEAN format.",
    "09" : "(<code>IFeeModel</code>) Enable accurate backtesting with specific fee structures of the brokerage.",
    "10" : "(<code>ISecurityTransactionModel</code>) Combine the various models together to form a brokerage set."
  }
}
