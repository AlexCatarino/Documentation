[{"name":"US Equity Security Master","url":"\/datasets\/quantconnect-us-equity-security-master","short_description":"Corporate action data source for splits, dividends, mergers, acquisitions, IPOs, and delisting's since January 1998 for running a US Equities backtest.","about":[{"title":"Introduction","content":"<p>\nCorporate Actions Security Master by QuantConnect tracks US-Equities corporate actions. The data covers more than 30,000 US equities, starting in January 1998, and is delivered on a daily update frequency. With the map and factor files installed in LEAN, all corporate actions are automatically handled and passed into your algorithm as events.\n<\/p>"},{"title":"About the Provider","content":"<p>\nQuantConnect was founded in 2012 to serve quants everywhere with the best possible algorithmic trading technology. Seeking to disrupt a notoriously closed-source industry, QuantConnect takes a radically open-source approach to algorithmic trading.  Through the QuantConnect web platform, more than 50,000 quants are served every month. \n<\/p>"},{"title":"Data Summary","content":"<p>\nData is delivered as a daily updated zip archive of map and factor files. The data is designed to be used in the LEAN Engine and cannot be consumed another way. \n<\/p>\n<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 1998<\/td><\/tr><tr><td>Data Properties<\/td><td>Splits, Dividends, Mergers, IPO, Delistings<\/td><\/tr><tr><td>Asset Coverage<\/td><td>30,000 US Equities<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Timezone<\/td><td>New York<\/td><\/tr><\/table>"},{"title":"Getting Started","content":"<p>\nNo special code is required to utilize the QuantConnect Security Master. It is automatically loaded on requesting US Equities data.  \n<\/p>"},{"title":"Example Applications","content":"<p>\nThe QuantConnect US Security Master enables researchers to accurately design strategies harnessing any core corporate actions. Examples include: \n<\/p>\n<ul><li>Post-dividend announcement trading strategies.<\/li>\n<li>Trading on new equities by monitoring for IPOs.<\/li>\n<li>Harnessing split announcements for reverse-split announcement momentum.<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<h4>Split Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.Split\"><\/div>\n\n<h4>Dividend Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.Dividend\"><\/div>\n\n<h4>Delisting Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.Delisting\"><\/div>\n\n<h4>SymbolChangedEvent Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.SymbolChangedEvent\"><\/div>"}],"documentation":[{"title":"Accessing Data - Split","content":"<p>Split data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. You can see an example of the slice accessor in the code below.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\ndef OnData(self, data):\n    split = data.Splits.get(self.symbol)\n    if split:\n        splitType = {0: \"Warning\", 1: \"SplitOccurred\"}.get(split.Type)\n        self.Log(f'Split: {split.Symbol}\\t{split.SplitFactor}\\t{split.ReferencePrice}\\t{splitType}')\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\npublic override void OnData(Slice data)\n{\n    if (data.Splits.ContainsKey(_symbol))\n    {\n        var split = data.Splits[_symbol];\n        Log($\"Split: {split.Symbol}\\t{split.SplitFactor}\\t{split.ReferencePrice}\\t{split.Type}\");\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data - Dividend","content":"<p>Dividend data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. You can see an example of the slice accessor in the code below.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\ndef OnData(self, data):\n    dividend = data.Dividends.get(self.symbol)\n    if dividend:\n        self.Log(f'Dividend: {dividend.Symbol}\\t{dividend.Distribution}\\t{dividend.ReferencePrice}')\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\npublic override void OnData(Slice data)\n{\n    if (data.Dividends.ContainsKey(_symbol))\n    {\n        var dividend = data.Dividends[_symbol];\n        Log($\"Dividend: {dividend.Symbol}\\t{dividend.Distribution}\\t{dividend.ReferencePrice}\");\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data - Delistings","content":"<p>Delistings data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. You can see an example of the slice accessor in the code below.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\ndef OnData(self, data):\n    delisting = data.Delistings.get(self.symbol)\n    if delisting:\n        delistingType = {0: \"Warning\", 1: \"Delisted\"}.get(delisting.Type)\n        self.Log(f'Delistings: {delistingType}')\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\npublic override void OnData(Slice data)\n{\n    if (data.Delistings.ContainsKey(_symbol))\n    {\n        var delisting = data.Delistings[_symbol];\n        Log($\"Delistings: {delisting.Type}\");\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data - Symbol Change Events","content":"<p>Symbol change events can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. You can see an example of the slice accessor in the code below.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\ndef OnData(self, data):\n    symbolChangedEvent = data.SymbolChangedEvents.get(self.symbol)\n    if symbolChangedEvent:\n        self.Log(f\"Symbol changed: {symbolChangedEvent.OldSymbol} -&gt; {symbolChangedEvent.NewSymbol}\")\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\npublic override void OnData(Slice data)\n{\n    if (data.SymbolChangedEvents.ContainsKey(_symbol))\n    {\n        var symbolChangedEvent = data.SymbolChangedEvents[_symbol];\n        Log($\"Symbol changed: {symbolChangedEvent.OldSymbol} -&gt; {symbolChangedEvent.NewSymbol}\");\n    }\n}<\/code><\/pre>\n<\/div>"}]},{"name":"US Congress Trading","url":"\/datasets\/quiver-quantitative-congress-trading","short_description":"Tracking trading activity of US Senators and members of the House for potential insider trading signals based on early access to regulation changes.","about":[{"title":"Introduction","content":"<p>Congress by Quiver Quantitative tracks US Equity trades made by members of Congress in the Senate and the House of Representatives. The data covers 1,800 US Equities, starting in January 2016, and is delivered on a daily frequency if there is data on that day. The dataset is created by scraping SEC reports.<\/p>"},{"title":"About the Provider","content":"<p><a href=\"https:\/\/www.quiverquant.com\/\">Quiver Quantitative<\/a> was founded by two college students in February 2020 with the goal of bridging the information gap between Wall Street and non-professional investors. Quiver allows retail investors to tap into the power of big data and have access to actionable, easy to interpret data that hasn\u2019t already been dissected by Wall Street.<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\naapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nquiver_congress_symbol = self.AddData(QuiverCongress, aapl).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\nvar aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\nvar quiverCongressSymbol = AddData&lt;QuiverCongress&gt;(aapl).Symbol;<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 2016<\/td><\/tr><tr><td>Asset Coverage<\/td><td>1,800 US Equities<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Sparse<\/td><\/tr><tr><td>Timezone<\/td><td>UTC<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>The Quiver Quantitative Congress dataset enables researchers to take immediate action on trades made by informed Members of Congress. Examples include: <\/p>\n<ul><li>Following the trades of specific representatives on the premise that the representatives are more informed<\/li>\n <li>Assigning a long\/short-bias to securities on a daily frequency based on how Members of Congress are trading them<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.QuiverCongress\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add Congress data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass QuiverCongressDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        aapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        quiver_congress_symbol = self.AddData(QuiverCongress, aapl).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class QuiverCongressDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n            var aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            var quiverCongressSymbol = AddData&lt;QuiverCongress&gt;(aapl).Symbol;\n        }\n    }\n}\n<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(QuiverCongress)\n    for point in points.Values:\n        self.Log(f\"Symbol: {point.Symbol.Underlying} Report date: {point.ReportDate}; Transaction date: {point.TransactionDate}; Representative: {point.Representative}; Transaction: {point.Transaction}; Amount: {point.Amount}; House: {point.House}\")\n<\/code><\/pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var points = data.Get&lt;QuiverCongress&gt;();\n    foreach (var point in points.Values)\n    {\n        Log($\"Symbol: {point.Symbol.Underlying}; Report date: {point.ReportDate}; Transaction date: {point.TransactionDate}; Representative: {point.Representative}; Transaction: {point.Transaction}; Amount: {point.Amount}; House: {point.House}\");\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for Congress by using the History API.<\/p>\n\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(QuiverCongress, quiver_congress_symbol, 60, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History&lt;QuiverCongress&gt;(quiverCongressSymbol, 60, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.QuiverCongress\"><\/div>"}]},{"name":"Wikipedia Page Views","url":"\/datasets\/quiver-quantitative-wikipedia-views","short_description":"Wikipedia Page Views by Quiver Quantitative tracks daily page views for corporate Wikipedia pages. ","about":[{"title":"Introduction","content":"<p>Wikipedia Page Views by Quiver Quantitative tracks Wikipedia page views for US Equities. The data covers 1,300 US Equities, starting in October 2016, and is delivered on a daily frequency if there is data on that day. The dataset is created by scraping the company\u2019s Wikipedia page.<\/p>"},{"title":"About the Provider","content":"<p><a href=\"https:\/\/www.quiverquant.com\/\">Quiver Quantitative<\/a> was founded by two college students in February 2020 with the goal of bridging the information gap between Wall Street and non-professional investors. Quiver allows retail investors to tap into the power of big data and have access to actionable, easy to interpret data that hasn\u2019t already been dissected by Wall Street.<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\naapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nquiver_wiki_symbol = self.AddData(QuiverWikipedia, aapl).Symbol\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\nvar aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\nvar quiverWikiSymbol = AddData&lt;QuiverWikipedia&gt;(aapl).Symbol;\n<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>October 2016<\/td><\/tr><tr><td>Asset Coverage<\/td><td>1,300 US Equities<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Sparse<\/td><\/tr><tr><td>Timezone<\/td><td>UTC<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>The Quiver Quantitative Wikipedia Page Views dataset enables researchers to observe patterns in the traffic of company Wikipedia pages. Examples include:<\/p>\n<ul><li>Capitalizing on companies that have experienced a sharp increase in Wikipedia traffic on the premise that volatility in traffic will translate to volatility in price<\/li>\n   <li>Mitigating risk by avoiding companies that have a decreasing web presence on the premise that a reduction in traffic will result in a reduction in price<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.QuiverWikipedia\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add Wikipedia Page Views data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass QuiverWikipediaPageViewsDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        aapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        quiver_wiki_symbol = self.AddData(QuiverWikipedia, aapl).Symbol<\/code><\/pre><pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class QuiverWikipediaPageViewsDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n            var aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            var quiverWikiSymbol = AddData&lt;QuiverWikipedia&gt;(aapl).Symbol;\n        }\n    }\n}<\/code><\/pre><\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(QuiverWikipedia)\n    for point in points.Values:\n        self.Log(f\"Symbol: {point.Symbol.Underlying} Date: {point.Date}; PageViews: {point.PageViews}; WeekPercentChange: {point.WeekPercentChange}; MonthPercentChange: {point.MonthPercentChange}\") <\/code><\/pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var points = data.Get&lt;QuiverWikipedia&gt;();\n    foreach (var point in points.Values)\n    {\n        Log($\"Symbol: {point.Symbol.Underlying}; Date: {point.Date}; PageViews: {point.PageViews}; WeekPercentChange: {point.WeekPercentChange}; MonthPercentChange: {point.MonthPercentChange}\");\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for Wikipedia Page Views by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(QuiverWikipedia, quiver_wiki_symbol, 60, Resolution.Daily) <\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History&lt;QuiverWikipedia&gt;(quiverWikiSymbol, 60, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.QuiverWikipedia\"><\/div>"}]},{"name":"WallStreetBets","url":"\/datasets\/quiver-quantitative-wallstreetbets","short_description":"WallStreetBets by Quiver Quantitative tracks mentions of US equities on the social media site Reddit. Useful for trading or avoiding popular meme stocks.","about":[{"title":"Introduction","content":"<p>WallStreetBets by Quiver Quantitative tracks daily mentions of different equities on Reddit\u2019s popular WallStreetBets forum. The data covers 6,000 Equities, starting in August 2018, and is delivered on a daily frequency if there is data on that day. The dataset is created by scraping the daily discussion threads on WallStreetBets and parsing the comments for ticker mentions.<\/p>"},{"title":"About the Provider","content":"<p><a href=\"https:\/\/www.quiverquant.com\/\">Quiver Quantitative<\/a> was founded by two college students in February 2020 with the goal of bridging the information gap between Wall Street and non-professional investors. Quiver allows retail investors to tap into the power of big data and have access to actionable, easy to interpret data that hasn\u2019t already been dissected by Wall Street.<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\naapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nself.quiverWSBSymbol = self.AddData(QuiverWallStreetBets, aapl).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\nvar aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\nvar quiverWSBSymbol = AddData&lt;QuiverWallStreetBets&gt;(aapl).Symbol;<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>August 2018<\/td><\/tr><tr><td>Asset Coverage<\/td><td>6,000 US Equities<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Sparse<\/td><\/tr><tr><td>Timezone<\/td><td>UTC<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>The Quiver Quantitative WallStreetBets dataset enables researchers to create strategies using the latest activity on the WallStreetBets daily discussion thread. Examples include:<\/p>\n<ul><li>Trading any security that is being mentioned<\/li>\n<li>Trading securities that are receiving more\/less mentions than they were previously<\/li>\n<li>Trading the security that is being mentioned the most\/least for the day<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.QuiverWallStreetBets\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add WallStreetBets data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass QuiverWallStreetBetsDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        aapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        quiverWSBSymbol = self.AddData(QuiverWallStreetBets, aapl).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class QuiverWallStreetBetsDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n            var aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            var quiverWSBSymbol = AddData&lt;QuiverWallStreetBets&gt;(aapl).Symbol;\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(QuiverWallStreetBets)\n    for kvp in points:\n        Log(f\u2019Symbol: {kvp.Key} - Mentions: {kvp.Value.Mentions}\u2019)\n<\/code><\/pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var points = data.Get&lt;QuiverWallStreetBets&gt;();\n    foreach (var point in points.Values)\n    {\n        Log($\"Symbol: {point.Symbol.Underlying} - Mentions: {point.Mentions}\");\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for WallStreetBets mentions by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(QuiverWallStreetBets, quiverWSBSymbol, 60, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History&lt;QuiverWallStreetBets&gt;(quiverWSBSymbol, 60, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.QuiverWallStreetBets\"><\/div>"}]},{"name":"US SEC Filings","url":"\/datasets\/us-security-exchange-commission-filings","short_description":"Semi-parsed Quarterly Financial Reports (10-Q) and Annual Financial Report (8-K) filings of companies for US Equities.","about":[{"title":"Introduction","content":"<p>The United States Securities and Exchange Commission (SEC) requires that publicly traded companies in the U.S. report their quarterly financial earnings each quarter. The data is sourced from the SEC's Electronic Data Gathering, Analysis, and Retrieval (EDGAR) system. QuantConnect downloads and formats the Quarterly Financial Reports (10-Q) and Annual Financial Report (8-K) filings of companies into a format for easy consumption by LEAN.\n<\/p>"},{"title":"About the Provider","content":"<p>The mission of the U.S. Securities and Exchange Commission is to protect investors, maintain fair, orderly, and efficient markets, and facilitate capital formation. The SEC oversees the key participants in the securities world, including securities exchanges, securities brokers and dealers, investment advisors, and mutual funds. The SEC is concerned primarily with promoting the disclosure of important market-related information, maintaining fair dealing, and protecting against fraud.<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nself.aapl= self.AddEquity(\"AAPL\", Resolution.Minute).Symbol\nself.report8K = self.AddData(SECReport8K, self.aapl).Symbol\nself.report10K = self.AddData(SECReport10K, self.aapl).Symbol\nself.report10Q = self.AddData(SECReport10Q, self.aapl).Symbol\n<\/code><\/pre>\n\n<pre><code class=\"language-cs\">\n_aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n_report8K = AddData&lt;SECReport8K&gt;(_aapl, Resolution.Daily).Symbol;\n_report10K = AddData&lt;SECReport10K&gt;(_aapl, Resolution.Daily).Symbol;\n_report10Q = AddData&lt;SECReport10Q&gt;(_aapl, Resolution.Daily).Symbol;\n<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>Jan 1998<\/td><\/tr><tr><td>Asset Coverage<\/td><td>15,000 US Equities<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Sparse<\/td><\/tr><tr><td>Timezone<\/td><td>UTC<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>The US SEC Filings dataset enables researchers to create strategies using information found in SEC reports. Examples include:<\/p>\n\n<ul><li>Information about corporate earnings can be found in the documents and extracted for further analysis<\/li>\n<li>The text content of the documents can be used for sentiment analysis (e.g.: keyword scoring and ranking)<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<h4>Report 8K Attributes<\/h4>\n<div data-tree=\"QuantConnect.DataSource.SECReport8K\"><\/div>\n\n<h4>Report 10K Attributes<\/h4>\n<div data-tree=\"QuantConnect.DataSource.SECReport10K\"><\/div>\n\n<h4>Report 10Q Attributes<\/h4>\n<div data-tree=\"QuantConnect.DataSource.SECReport10Q\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add SEC Fillings data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass SECReportAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2019, 8, 21)\n        self.SetCash(100000)\n\n        self.aapl= self.AddEquity(\"AAPL\", Resolution.Minute).Symbol\n        self.report8K = self.AddData(SECReport8K, self.aapl).Symbol\n        self.report10K = self.AddData(SECReport10K, self.aapl).Symbol\n        self.report10Q = self.AddData(SECReport10Q, self.aapl).Symbol\n<\/code><\/pre>\n\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class SECReportAlgorithm : QCAlgorithm\n    {\n        private Symbol _aapl;\n        private Symbol _report8K;\n        private Symbol _report10K;\n        private Symbol _report10Q;\n\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2019, 8, 21);\n            SetCash(100000);\n\n            _aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            _report8K = AddData&lt;SECReport8K&gt;(_aapl, Resolution.Daily).Symbol;\n            _report10K = AddData&lt;SECReport10K&gt;(_aapl, Resolution.Daily).Symbol;\n            _report10Q = AddData&lt;SECReport10Q&gt;(_aapl, Resolution.Daily).Symbol;\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass SECReportAlgorithm(QCAlgorithm):\n    def OnData(self, data):\n        if self.report8K in data:\n            report8K_data = data.Get(SECReport8K, self.report8K)\n            documentsCount = len(report8K_data.Report.Documents);\n            self.Log(f'{documentsCount} found for {self.aapl} on {self.Time}');\n<\/code><\/pre>\n\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class SECReportAlgorithm : QCAlgorithm\n    {\n        if (data.ContainsKey(_report8K))\n        {\n            var report8KData = data.Get(_report8K);\n            var documentsCount = report8KData.Report.Documents.Count;\n            Log($\"{documentsCount} found for {_aapl} on {Time}\");\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for SEC Fillings data by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nreport8K_history = self.History(SECReport8K, self.report8K, 60, Resolution.Daily)\nreport10K_history = self.History(SECReport10K, self.report10K, 60, Resolution.Daily)\nreport10Q_history = self.History(SECReport10Q, self.report10Q, 60, Resolution.Daily)\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\nvar report8KHistory = History&lt;SECReport8K&gt;(_report8K, 60, Resolution.Daily);\nvar report10KHistory = History&lt;SECReport10K&gt;(_report10K, 60, Resolution.Daily);\nvar report10QHistory = History&lt;SECReport10Q&gt;(_report10Q, 60, Resolution.Daily);\n<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<h4>Report 8K Attributes<\/h4>\n<div data-tree=\"QuantConnect.DataSource.SECReport8K\"><\/div>\n\n<h4>Report 10K Attributes<\/h4>\n<div data-tree=\"QuantConnect.DataSource.SECReport10K\"><\/div>\n\n<h4>Report 10Q Attributes<\/h4>\n<div data-tree=\"QuantConnect.DataSource.SECReport10Q\"><\/div>"}]},{"name":"US Federal Reserve (FRED)","url":"\/datasets\/us-federal-reserve-economic-data","short_description":"The US Federal Reserve Economic Database (FRED) is a collection of thousands of economic datasets maintained by the US Government. QuantConnect caches the most active 560 of these datasets.","about":[{"title":"Introduction","content":"<p>Federal Reserve Economic Data (FRED) by the Research Division of the Federal Reserve bank of St. Louis, MO provides various time series relating to macro-economic data. The data covers 560 datasets, starting in January 1999, and is delivered on a daily frequency if there is data on that day. The data is created by aggregating daily updates from more than 85 public and proprietary sources.<\/p>"},{"title":"About the Provider","content":"<p>The <a href=\"https:\/\/fred.stlouisfed.org\/\">Research Division of the Federal Reserve bank of St. Louis, MO<\/a> expands the frontier of economic knowledge by producing high-quality original research in the areas of macroeconomics, money and banking, and applied microeconomics. They contribute to monetary policy discussions by advising the Bank president on a range of topics, especially in preparation for Federal Open Market Committee (FOMC) meetings. The Research Division is in the top 1% of all economics research departments worldwide.<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nself.fred_peak_to_trough = self.AddData(Fred, Fred.OECDRecessionIndicators.UnitedStatesFromPeakThroughTheTrough, Resolution.Daily).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\n_fredPeakToTrough = AddData(Fred.OECDRecessionIndicators.UnitedStatesFromPeakThroughTheTrough, Resolution.Daily).Symbol;<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 1990<\/td><\/tr><tr><td>Asset Coverage<\/td><td>560 Datasets<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Sparse<\/td><\/tr><tr><td>Timezone<\/td><td>New York<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>The FRED dataset enables researchers to accurately design strategies utilizing macroeconomic indicators. Examples include: <\/p>\n\n<ul><li>Trading on macroeconomic factors<\/li>\n  <li>Macroeconomic risk modeling<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.Fred\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add FRED data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p><div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass FredAlternativeDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2003, 1, 1)\n        self.SetEndDate(2019, 10, 11)\n        self.SetCash(100000)\n\n        self.fred_peak_to_trough = self.AddData(Fred, Fred.OECDRecessionIndicators.UnitedStatesFromPeakThroughTheTrough, Resolution.Daily).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class FredAlternativeDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _fredPeakToTrough;\n\n        public override void Initialize()\n        {\n            SetStartDate(2003, 1, 1);\n            SetEndDate(2019, 10, 11);\n            SetCash(100000);\n            \n            _fredPeakToTrough = AddData&lt;Fred&gt;(Fred.OECDRecessionIndicators.UnitedStatesFromPeakThroughTheTrough, Resolution.Daily).Symbol;\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    if data.ContainsKey(self.fred_peak_to_trough):\n        peak_to_trough = data.Get(Fred, self.fred_peak_to_trough)\n        self.Log(f\"Time: {peak_to_trough.Time}; EndTime: {peak_to_trough.EndTime}; Value: {peak_to_trough.Value}\")<\/code><\/pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    if (data.ContainsKey(_fredPeakToTrough))\n    {\n        var peakToTrough = data.Get&lt;Fred&gt;(_fredPeakToTrough);\n        Log($\"Time: {peak_to_trough.Time}; EndTime: {peak_to_trough.EndTime}; Value: {peak_to_trough.Value}\");\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for FRED datasets by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(Fred, self.fred_peak_to_trough, 60, Resolution.Daily)\/code&gt;<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History&lt;Fred&gt;(_fredPeakToTrough, 60, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.Fred\"><\/div>"}]},{"name":"US Energy Information Administration (EIA)","url":"\/datasets\/quantconnect-us-energy-information-agency","short_description":"The US Energy Information Administration (EIA) collects supply and demand information for US Crude Products. QuantConnect collects and caches 190 of these datasets.","about":[{"title":"Introduction","content":"<p>US Energy Information Administration (EIA) by the Department of the Treasury tracks national and international oil production and consumption. The data covers 190 datasets, starting in January 1991, and is delivered on a daily frequency. This dataset is created by QuantConnect processing and caching the EIA archives.<\/p>"},{"title":"About the Provider","content":"<p>The <a href=\"https:\/\/home.treasury.gov\/\">Treasury Department<\/a> is the executive agency responsible for promoting economic prosperity and ensuring the financial security of the United States. The Department is responsible for a wide range of activities such as advising the President on economic and financial issues, encouraging sustainable economic growth, and fostering improved governance in financial institutions. The Department of the Treasury operates and maintains systems that are critical to the nation's financial infrastructure, such as the production of coin and currency, the disbursement of payments to the American public, revenue collection, and the borrowing of funds necessary to run the federal government. <\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">us_energy_symbol = self.AddData(USEnergy, USEnergy.Petroleum.UnitedStates.WeeklyNetImportsOfTotalPetroleumProducts).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\nvar USEnergySymbol = AddData&lt;USEnergy&gt;(USEnergy.Petroleum.UnitedStates.WeeklyNetImportsOfTotalPetroleumProducts).Symbol;<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 1991<\/td><\/tr><tr><td>Asset Coverage<\/td><td>190 Datasets<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Sparse<\/td><\/tr><tr><td>Timezone<\/td><td>New York<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>The US Energy Information Administration dataset enables researchers to monitor national and international oil production and consumption in their trading strategies. Examples include:<\/p>\n\n<ul><li>Trading petroleum companies when there is a change in net imports of petroleum products<\/li>\n<li>Trading country ETFs when there is a change in the country's net import of resources<\/li>\n<li>Adjusting exposure to vehicle manufacturer stocks when the supply of gasoline is higher\/lower than historical levels<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.USEnergy\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add US Energy data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass USEnergyDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        us_energy_symbol = self.AddData(USEnergy, USEnergy.Petroleum.UnitedStates.WeeklyNetImportsOfTotalPetroleumProducts).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class USEnergyDataAlgorithm: QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n            var USEnergySymbol = AddData&lt;USEnergy&gt;(USEnergy.Petroleum.UnitedStates.WeeklyNetImportsOfTotalPetroleumProducts).Symbol;\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(USEnergy)\n    for point in points.Values:\n        self.Log(f'Date: {self.Time}; Symbol: {point.Symbol}; Value: {point.Value}')<\/code><\/pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var points = data.Get&lt;USEnergy&gt;();\n    foreach (var point in points.Values)\n    {\n        Log($\"Date: {Time}; Symbol: {point.Symbol}; Value: {point.Value}\");\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for US Energy by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(USEnergy, us_energy_symbol, 60, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History&lt;USEnergy&gt;(USEnergySymbol, 60, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.USEnergy\"><\/div>"}]},{"name":"US Treasury Yield Curve","url":"\/datasets\/us-treasury-yield-curve","short_description":"Daily export of yield curve rates for US Government bonds over all common maturity dates. Scraped from the US Treasury website and cached by QuantConnect.  ","about":[{"title":"Introduction","content":"<p>This dataset is produced by the US Department of the Treasury to track the yield curve rate. The data covers 1 dataset, starting in January 1990, and is delivered on a daily frequency. This dataset is calculated from composites of indicative, bid-side market quotations (not actual transactions) obtained by the Federal Reserve Bank of New York at or near 3:30 PM each trading day. <\/p>"},{"title":"About the Provider","content":"<p>The <a href=\"https:\/\/home.treasury.gov\/\">Treasury Department<\/a> is the executive agency responsible for promoting economic prosperity and ensuring the financial security of the United States. The Department is responsible for a wide range of activities such as advising the President on economic and financial issues, encouraging sustainable economic growth, and fostering improved governance in financial institutions. The Department of the Treasury operates and maintains systems that are critical to the nation's financial infrastructure, such as the production of coin and currency, the disbursement of payments to the American public, revenue collection, and the borrowing of funds necessary to run the federal government. <\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.Data.DataSource import *\n\nyield_curve_symbol = self.AddData(USTreasuryYieldCurveRate, \"USTYCR\").Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">using QuantConnect.DataSource;\n\nvar yieldCurveSymbol = AddData&lt;USTreasuryYieldCurveRate&gt;(\"USTYCR\").Symbol<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 1990<\/td><\/tr><tr><td>Asset Coverage<\/td><td>1 Dataset<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Sparse<\/td><\/tr><tr><td>Timezone<\/td><td>New York<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>The US Treasury Yield Curve dataset enables researchers to monitor the yields of bonds with numerous maturities in their strategies. Examples include:<\/p>\n\n<ul><li>Short selling SPY when the yield curve inverts<\/li>\n<li>Buying short-term Treasuries and short selling long-term Treasuries when the yield curve becomes steeper (aka curve steepener trade)<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.USTreasuryYieldCurveRate\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add US Treasury Yield Curve data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.DataSource import *\n\nclass QuiverCongressDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        yield_curve_symbol = self.AddData(USTreasuryYieldCurveRate, \"USTYCR\").Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">using QuantConnect.DataSource;\n\nnamespace QuantConnect.Algorithm.CSharp.AltData\n{\n    public class USTreasuryYieldCurveDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n\n            var yieldCurveSymbol = AddData&lt;USTreasuryYieldCurveRate&gt;(\"USTYCR\").Symbol;\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(USTreasuryYieldCurveRate)\n    for point in points.Values:\n        self.Log(f\"Date {self.Time}; OneMonth: {point.OneMonth}; TwoMonth: {point.TwoMonth}; ThreeMonth: {point.ThreeMonth}; SixMonth: {point.SixMonth}; OneYear: {point.OneYear}; TwoYear: {point.TwoYear}; ThreeYear: {point.ThreeYear}; FiveYear: {point.FiveYear}; SevenYear: {point.SevenYear}; TenYear: {point.TenYear}; TwentyYear: {point.TwentyYear}; ThirtyYear: {point.ThirtyYear}\")<\/code><\/pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var points = data.Get&lt;USTreasuryYieldCurveRate&gt;();\n    foreach (var point in points.Values)\n    {\n        Log($\"Date {Time}; OneMonth: {point.OneMonth}; TwoMonth: {point.TwoMonth}; ThreeMonth: {point.ThreeMonth}; SixMonth: {point.SixMonth}; OneYear: {point.OneYear}; TwoYear: {point.TwoYear}; ThreeYear: {point.ThreeYear}; FiveYear: {point.FiveYear}; SevenYear: {point.SevenYear}; TenYear: {point.TenYear}; TwentyYear: {point.TwentyYear}; ThirtyYear: {point.ThirtyYear}\");    \n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for the US Treasury Yield Curve by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(USTreasuryYieldCurveRate, yield_curve_symbol, 60, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History&lt;USTreasuryYieldCurveRate&gt;(yieldCurveSymbol, 60, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.USTreasuryYieldCurveRate\"><\/div>"}]},{"name":"VIX Central Contango","url":"\/datasets\/quantconnect-vixcentral-contango","short_description":"Contango rates over time for the VIX Contract provided by VIXCentral and cached by QuantConnect.","about":[{"title":"Introduction","content":"<p>VIXCentralContango by VIX Central tracks VIX Futures (VX) contango data. The data covers 12 Futures contracts closest to expiry\/maturity, starting in June 2010, and is delivered on a daily frequency. The dataset is created by QuantConnect downloading data from VIX Central website, which collects and analyses VIX and VX (VIX Futures) data.<\/p>\n\n<p>Contango and Backwardation are terms used to describe if participants in the Futures market are overpaying or underpaying relative to the \"spot\" price of the underlying commodity when trading a Futures contract (\"spot\" price is the price of the actual commodity\/asset at a given moment in time). Contango and backwardation can be used to determine forward-looking expectations of the commodity's spot price by the time the Future has expired\/matured and is set to be delivered by participants of the Futures market. As Futures near their expiration\/maturity date, contango and backwardation curves tend to converge on the spot price of the commodity at the time of expiration.<\/p>"},{"title":"About the Provider","content":"<p><a href=\"http:\/\/vixcentral.com\/\">VIX Central<\/a> was founded by Eli Mintz in 2012 with goal of displaying historical VIX term structures in a simple and intuitive interface. VIX Central provides access to real-time and historical VIX data for individual investors.<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-cs\">\n_contango = AddData&lt;VIXCentralContango&gt;(\"VIX\", Resolution.Daily).Symbol;\n<\/code><\/pre>\n<pre><code class=\"language-python\">\nself.contango = self.AddData(VIXCentralContango, \"VIX\", Resolution.Daily).Symbol\n<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>Jun 2010<\/td><\/tr><tr><td>Asset Coverage<\/td><td>1 Futures Chain with 12 contracts<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Regular<\/td><\/tr><tr><td>Timezone<\/td><td>New York<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>The VIX Central Contango dataset by VIX Central enable users to explore VIX Future contracts pricing data. Possible usages include:<\/p><ul><li>Determine forward-looking expectations by Futures market participants of the underlying commodity's spot price by the time of expiration\/maturity<\/li><li>Create cash-and-carry arbitrage strategies by trading the spread\/convergence of the contango\/backwardation curves as a Future nears expiration\/maturity<\/li><\/ul>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.VIXCentralContango\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add VIX Central Contango data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass VixCentralContangoAlgorithm(QCAlgorithm):\n \n    def Initialize(self):\n        self.SetStartDate(2014, 1, 1)\n        self.SetEndDate(2018, 1, 1)\n        self.SetCash(25000)\n \n        self.contango = self.AddData(VIXCentralContango, \"VX\", Resolution.Daily).Symbol\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class VixCentralContangoAlgorithm : QCAlgorithm\n    {\n        private Symbol _contango;\n\n        public override void Initialize()\n        {\n            SetStartDate(2014, 1, 1);\n            SetEndDate(2018, 1, 1);\n            SetCash(25000);\n\n            _contango = AddData&lt;VIXCentralContango&gt;(\"VX\", Resolution.Daily).Symbol;\n        }\n    }\n}<\/code><\/pre><\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass VixCentralContangoAlgorithm(QCAlgorithm):\n \n    def OnData(self):\n        contangoData = data.Get(VIXCentralContango, self.contango)\n        self.Log(f'Contango: {contangoData}')\n\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class VixCentralContangoAlgorithm : QCAlgorithm\n    {\n        public override void OnData(Slice data)\n        {\n            var contangoData = data.Get&lt;VIXCentralContango&gt;(_contango);\n            Log($\"Contango {contangoData}\");\n        }\n    }\n}<\/code><\/pre><\/div>"},{"title":"Historical Data","content":"<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for VIX Central Contango data by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(VIXCentralContango, self.contango, 60, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History&lt;VIXCentralContango&gt;(_contango, 60, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.VIXCentralContango\"><\/div>"}]},{"name":"VIX Daily Price","url":"\/datasets\/cboe-vix-daily","short_description":"Daily export of OHLC daily price for 8 VIX related products supplied by the CBOE, cached by QuantConnect.","about":[{"title":"Introduction","content":"<p>VIX by CBOE covers some US volatility indexes. The data covers 8 volatility indexes, starting in Jan 1990, and is delivered on a daily frequency. The dataset is cached daily from the CBOE website. The volatility index measures the stock market's expectation of volatility on the market index (e.g.:  S&amp;P500) using implied volatility from its Options for a fixed time horizon.<\/p>"},{"title":"About the Provider","content":"<p>The Chicago Board Options Exchange (<a href=\"https:\/\/www.cboe.com\/\">CBOE<\/a>) is the largest U.S. options exchange with annual trading volume that hovered around 1.27 billion contracts at the end of 2014. CBOE offers Options on over 2,200 companies, 22 Equity indices, and 140 exchange-traded funds (ETFs).<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-cs\">\n_cboeVix = AddData&lt;CBOE&gt;(\"VIX\", Resolution.Daily).Symbol;\n<\/code><\/pre>\n<pre><code class=\"language-python\">\nself.cboeVix = self.AddData(CBOE, \"VIX\", Resolution.Daily).Symbol\n<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>Jan 1990*<\/td><\/tr><tr><td>Asset Coverage<\/td><td>8 US Volatility Indexes<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Regular<\/td><\/tr><tr><td>Timezone<\/td><td>New York<\/td><\/tr><\/table><br \/><p><\/p>"},{"title":"Volatility Indexes","content":"<table class=\"table qc-table table-dense table-striped\"><tr><th>Ticker<\/th><th>Index<\/th><th>Expiry<\/th><th>Start Date<\/th><\/tr><tr><td>VIX<\/td> <td>S&amp;P500<\/td><td>30 Days<\/td><td>Jan 1990<\/td><\/tr><tr><td>VIX9D<\/td><td>S&amp;P500<\/td><td>9 Days<\/td><td>Apr 2011<\/td><\/tr><tr><td>VIX3M<\/td><td>S&amp;P500<\/td><td>3 Months<\/td><td>Sep 2009<\/td><\/tr><tr><td>VIX6M<\/td><td>S&amp;P500<\/td><td>6 Months<\/td><td>Jan 2008<\/td><\/tr><tr><td>VXO<\/td><td>S&amp;P100<\/td><td>30 Days<\/td><td>Feb 1993<\/td><\/tr><tr><td>VXN<\/td><td>Nasdaq 100<\/td><td>30 Days<\/td><td>Sep 2009<\/td><\/tr><tr><td>RVX<\/td><td>Russell 2000<\/td><td>30 Days<\/td><td>Sep 2009<\/td><\/tr><tr><td>TYVIX<\/td><td>10-year US Treasury Note<\/td><td>30 Days<\/td><td>Jan 2003<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<ul><li>Understanding the stock market's level of expected forward-looking volatility, also known as the \"fear index\".\nWhen the VIX starts moving higher, it is telling you that traders are getting nervous. When the VIX starts moving lower, it is telling you that traders are gaining confidence.<\/li>\n<li>Determine forward-looking volatility by comparing the VIX against volatility indexes with other volatility. By comparing the value of the VIX to the value of the VIX3M, we can identify periods when trader sentiment has turned extremely bearish and when it has normalized.<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.CBOE\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add CBOE data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass CboeDataAlgorithm(QCAlgorithm):\n \n    def Initialize(self):\n        self.SetStartDate(2003, 1, 1)\n        self.SetEndDate(2019, 10, 11)\n        self.SetCash(100000)\n \n        self.cboeVix = self.AddData(CBOE, \"VIX\", Resolution.Daily).Symbol\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class CboeDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _cboeVix;\n \n        public override void Initialize()\n        {\n            SetStartDate(2003, 1, 1);\n            SetEndDate(2019, 10, 11);\n            SetCash(100000);\n \n            _cboeVix = AddData&lt;CBOE&gt;(\"VIX\", Resolution.Daily).Symbol;\n        }\n    }\n}\n<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class CboeDataAlgorithm(QCAlgorithm):\n    \n   def OnData(self, data):\n        if data.ContainsKey(self.cboeVix):\n            vix = data.Get(CBOE, self.cboeVix)\n            self.Log(f\"VIX: {vix}\")\n\n<\/code><\/pre>\n<pre><code class=\"language-cs\">namespace QuantConnect.Algorithm.CSharp.AltData\n{    \n    public class CboeDataAlgorithm : QCAlgorithm\n    {\n       public override void OnData(Slice data)\n        {\n            if (data.ContainsKey(_cboeVix))\n            {\n                var vix = data.Get(_cboeVix);\n                Log($\"VIX: {vix}\");\n            }\n        }\n    }\n}\n<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for CBOE data by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(CBOE, self.vix, 60, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History&lt;CBOE&gt;(_vix, 60, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.CBOE\"><\/div>"}]},{"name":"US Equities","url":"\/datasets\/algoseek-us-equities","short_description":"Market data for all US listed and delisted Equities, ETFs, ETNs, ADRs, and Warrants from January 2007 to present.","about":[{"title":"Introduction","content":"<p>US Equity price data by AlgoSeek is survivorship bias-free daily coverage of every stock traded in the US SIP (CTA\/UTP) feed since 2007. The data covers approximately 24,000 securities, starting in January 2007, and is delivered daily down to tick resolution. Data is collected from the full SIP (Securities Information Processors) feed via our Equinix co-lo servers, including all trades and quotes published to every exchange as well as FINRA.\n<\/p>"},{"title":"About the Provider","content":"<p>\nAlgoSeek is a leading historical intraday US market data provider offering the most comprehensive and detailed market data and analytics products in the financial industry covering Equities, Futures, Options, cash FOREX, and Cryptocurrencies. AlgoSeek data is built for quantitative trading and machine learning.  For more information about AlgoSeek, visit <a href=\"https:\/\/www.algoseek.com\">algoseek.com<\/a>.\n<\/p>"},{"title":"Getting Started","content":"<p>\nAlgoSeek is the default US Equities dataset on QuantConnect. You can request this data with the AddEquity API method.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">self.symbol = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol <\/code><\/pre>\n<pre><code class=\"language-cs\">_symbol = AddEquity(\"AAPL\", Resolution.Daily).Symbol;<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 2007<\/td><\/tr><tr><td>Asset Coverage<\/td><td>24,000 US Equities<\/td><\/tr><tr><td>Resolution<\/td><td>Tick, Second, Minute, Hour and Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Dense<\/td><\/tr><tr><td>Timezone<\/td><td>New York<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nThe AlgoSeek US Equities dataset enables researchers to accurately design Equity trading strategies. Examples include: \n<\/p>\n<ul><li>Momentum strategies using historical returns on the premise that the momentum will continue<\/li>\n<li>Value strategies using fundamental factors on the premise that the price of undervalued securities will rise<\/li>\n<li>Factor investing with periodic rebalancing<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<h4>TradeBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"><\/div>\n\n<h4>QuoteBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"><\/div>\n\n<h4>Tick Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add US Equities data to your algorithm, use the AddEquity() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on requesting market data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class USEquityDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2018, 1, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000) \n        self.symbol = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class USEquityDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _symbol; \n    \t\n        public override void Initialize()\n        {\n            SetStartDate(2018, 1, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            _symbol = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    if data.ContainsKey(self.symbol) and data[self.symbol] is not None:\n        # The marketData object can be a TradeBar, QuoteBar, or a List of Tick\n        marketData = data[self.symbol]\n\n        # If it's TradeBar or QuoteBar:\n        self.Log(f\"Time: {self.Time}; Symbol: {self.symbol}; Open: {marketData.Open}; High: {marketData.High}; Low: {marketData.Low}; Close: {marketData.Close}; Volume: {marketData.Volume}\")\n\n        # it's Tick data:\n        for tick in marketData:\n            self.Log(f\"Time: {tick.EndTime}; Symbol: {self.symbol}; Ask Price: {tick.AskPrice}; Bid Price: {tick.BidPrice}\")\n<\/code><\/pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{    \n    public override void OnData(Slice data)\n    {\n        if (data.ContainsKey(_symbol) &amp;&amp; data[_symbol] != null)\n        {\n            \/\/ The marketData object can be a TradeBar, QuoteBar, or a List of Tick\n            var marketData = data[_symbol];\n            \n            \/\/ If it's TradeBar or QuoteBar:\n            Log($\"Time: {Time}; Symbol: {_symbol} Open: {marketData.Open}; High: {marketData.High}; Low: {marketData.Low}; Close: {marketData .Close}\");\n\n            \/\/ If it's Tick data:\n            foreach (var tick in marketData)\n            {\n                 Log($\"Time: {tick.EndTime}; Symbol: {_symbol} Ask Price: {tick.AskPrice}; Bid Price: {tick.BidPrice}\");\n            }\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical data in your algorithm using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for US Equities by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.symbol, 60, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History(_symbol, 60, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<h4>TradeBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"><\/div>\n\n<h4>QuoteBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"><\/div>\n\n<h4>Tick Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"><\/div>"}]},{"name":"Corporate Buybacks","url":"\/datasets\/smart-insider-corporate-buybacks","short_description":"US Equity buyback announcements and transactions from 2015 to the present. Scraped from SEC reports and secondary sources.","about":[{"title":"Introduction","content":"<p>Corporate Buybacks by Smart Insider tracks US Equities share buyback programs. The data covers 3,000 US Equities, starting in May 2015, and is delivered on a second frequency. This dataset is created by analyzing daily buyback announcements and by using secondary data sources to ensure records are accurate and complete.<\/p>"},{"title":"About the Provider","content":"<p><a href=\"https:\/\/www.smartinsider.com\/\">Smart Insider<\/a> was founded by Michael Tindale in 2016 with the goal of forming the most progressive insider data vendor in the field. Smart Insider provides access to buyback intention and transactions for quantitative researchers. In addition to their Corporate Buybacks dataset, Smart Insider provides data on stock trades made by US politicians and thousands of high net worth individuals around the globe.<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.Data.Custom.SmartInsider import *\n\nself.aapl = self.AddEquity(\"AAPL\", Resolution.Minute).Symbol\nself.smart_insider_intention = self.AddData(SmartInsiderIntention, self.aapl).Symbol\nself.smart_insider_transaction = self.AddData(SmartInsiderTransaction, self.aapl).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">using QuantConnect.Data.Custom.SmartInsider;\n\n_aapl = AddEquity(\"AAPL\", Resolution.Minute).Symbol;\n_smartInsiderIntention = AddData&lt;SmartInsiderIntention&gt;(_aapl).Symbol;\n_smartInsiderTransaction = AddData&lt;SmartInsiderTransaction&gt;(_aapl).Symbol;\n<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>May 2015<\/td><\/tr><tr><td>Asset Coverage<\/td><td>Intentions, Transactions<\/td><\/tr><tr><td>Resolution<\/td><td>Second<\/td><\/tr><tr><td>Data Density<\/td><td>Sparse<\/td><\/tr><tr><td>Timezone<\/td><td>New York<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>Smart Insider Corporate Buybacks enables researchers to design strategies using information on company buyback programs. Examples include:<\/p>\n<ul><li>Buying securities when the company announces an upcoming share buyback on the premise that the reduction in supply (shares outstanding) will drive up the remaining shares price<\/li>\n<li>Buying securities when the company executes an upcoming share buyback on the premise that the reduction in supply (shares outstanding) will drive up the remaining shares price<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<h4>SmartInsiderIntention Attributes<\/h4>\n<div data-tree=\"QuantConnect.DataSource.SmartInsiderIntention\"><\/div>\n\n<h4>SmartInsiderTransactionAttributes<\/h4>\n<div data-tree=\"QuantConnect.DataSource.SmartInsiderTransaction\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add Corporate Buybacks data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.Data.Custom.SmartInsider import *\n\nclass CorporateBuybacksDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2016, 1, 1)\n        self.SetEndDate(2021, 1, 1)\n        self.SetCash(100000)\n \n        self.aapl = self.AddEquity(\"AAPL\", Resolution.Minute).Symbol\n        self.smart_insider_intention = self.AddData(SmartInsiderIntention, self.aapl).Symbol\n        self.smart_insider_transaction = self.AddData(SmartInsiderTransaction, self.aapl).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">using QuantConnect.Data.Custom.SmartInsider;\n\nnamespace QuantConnect.Algorithm.CSharp.AltData\n{\n    public class CorporateBuybacksDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _aapl;\n        private Symbol _smartInsiderIntention;\n        private Symbol _smartInsiderTransaction;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2016, 1, 1);\n            SetEndDate(2021, 1, 1);\n            SetCash(100000);\n\n            _aapl = AddEquity(\"AAPL\", Resolution.Minute).Symbol;\n            _smartInsiderIntention = AddData&lt;SmartInsiderIntention&gt;(_aapl).Symbol;\n            _smartInsiderTransaction = AddData&lt;SmartInsiderTransaction&gt;(_aapl).Symbol;\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    if data.ContainsKey(self.smart_insider_intention):\n        intention = data[self.smart_insider_intention]\n        self.Log(f\"Intention to buyback for company {intention.CompanyName}\")\n        \n    if data.ContainsKey(self.smart_insider_transaction):\n        intention = data[self.smart_insider_transaction]\n        self.Log(f\"Buyback transaction took place for company {intention.CompanyName}\")<\/code><\/pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    if (data.ContainsKey(_smartInsiderIntention))\n    {\n        var intention = data[_smartInsiderIntention];\n        Log($\"Intention to buyback for company {intention.CompanyName}\");\n    }\n    \n    if (data.ContainsKey(_smartInsiderTransaction))\n    {\n        var transaction = data[_smartInsiderTransaction];\n        Log($\"Buyback transaction took place for company {transaction.CompanyName}\");\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for Corporate Buybacks by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">intention_history = self.History(self.smart_insider_intention, 365, Resolution.Daily)\ntransaction_history = self.History(self.smart_insider_transaction, 365, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">var intentionHistory = History&lt;SmartInsiderIntention&gt;(_smartInsiderIntention, 365, Resolution.Daily);\nvar transactionHistory = History&lt;SmartInsiderTransaction&gt;(_smartInsiderTransaction, 365, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<h4>SmartInsiderIntention Attributes<\/h4>\n<div data-tree=\"QuantConnect.DataSource.SmartInsiderIntention\"><\/div>\n\n<h4>SmartInsiderTransactionAttributes<\/h4>\n<div data-tree=\"QuantConnect.DataSource.SmartInsiderTransaction\"><\/div>"}]},{"name":"Tiingo News Feed","url":"\/datasets\/tiingo-news-feed","short_description":"News releases for 8,000 US Equities from over 120 different news providers. Data is received at a second resolution and ready to be parsed for sentiment.","about":[{"title":"Introduction","content":"<p>Tiingo News Feed by Tiingo tracks US Equity news releases. The data covers 8,000 US Equities, starting in January 2014, and is delivered on a second frequency. This dataset is creating by Tiingo integrating over 120 different news providers into their platform.<\/p>"},{"title":"About the Provider","content":"<p><a href=\"https:\/\/www.tiingo.com\/\">Tiingo<\/a> was founded by Rishi Singh in 2014. Tiingo goes beyond traditional news sources and focuses on finding rich, quality content written by knowledgeable writers. Their proprietary algorithms scan unstructured, non-traditional news and other information sources while tagging companies, topics, and assets. This refined system is backed by over ten years of research and development, and is written by former institutional quant traders. Because of this dedicated approach, Tiingo's News API is a trusted tool used by quant funds, hedge funds, pension funds, social media companies, and tech companies around the world.<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nself.aapl = self.AddEquity(\"AAPL\", Resolution.Minute).Symbol\nself.tiingo_symbol = self.AddData(TiingoNews, self.aapl).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\n_aapl = AddEquity(\"AAPL\", Resolution.Minute).Symbol;\n_tiingoSymbol = AddData&lt;TiingoNews&gt;(_aapl).Symbol;<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 2014<\/td><\/tr><tr><td>Asset Coverage<\/td><td>8,000 US Equities<\/td><\/tr><tr><td>Resolution<\/td><td>Second<\/td><\/tr><tr><td>Data Density<\/td><td>Sparse<\/td><\/tr><tr><td>Timezone<\/td><td>UTC<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>The Tiingo News Feed enables researchers to accurately design strategies harnessing news articles on the companies they're trading. Examples include: \n<\/p>\n<ul><li>Creating a dictionary of sentiment scores for various words and assigning a sentiment score to the content of each news release<\/li>\n<li>Calculating the sentiment of news releases with Natural Language Processing (NLP)<\/li>\n<li>Trading securities when their news releases are tagged by Tiingo with current buzzwords<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.TiingoNews\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add Tiingo News Feed data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.DataSource import *\nclass TiingoNewsDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        self.aapl = self.AddEquity(\"AAPL\", Resolution.Minute).Symbol\n        self.tiingo_symbol = self.AddData(TiingoNews, self.aapl).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">using QuantConnect.DataSource;\nnamespace QuantConnect.Algorithm.CSharp.AltData\n{\n    public class TiingoNewsDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _aapl;\n        private Symbol _tiingoSymbol;\n\n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n\n            _aapl = AddEquity(\"AAPL\", Resolution.Minute).Symbol;\n            _tiingoSymbol = AddData&lt;TiingoNews&gt;(_aapl).Symbol;\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in second resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    if data.ContainsKey(self.tiingo_symbol):\n        description = data[self.tiingo_symbol].Description\n        self.Log(f\"Received Tiingo News article at {self.Time} with description {description}\")\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\npublic override void OnData(Slice data)\n{\n    if (data.ContainsKey(_tiingoSymbol)\n    {\n        var description = data[_tiingoSymbol].Description;\n        Log($\"Received Tiingo News article at {Time} with description {description}\");\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for Tiingo News by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.tiingo_symbol, 14, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History&lt;TiingoNews&gt;(_tiingoSymbol, 14, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.TiingoNews\"><\/div>"}]},{"name":"FOREX Data ","url":"\/datasets\/oanda-forex","short_description":"Foreign Exchange Market (Forex) quote data from OANDA and hosted on the QuantConnect Cloud. The data covers 185 Forex pairs contracts with daily down to tick resolution.","about":[{"title":"Introduction","content":"<p>FOREX price data by OANDA serves 185 <a href=\"https:\/\/www.investopedia.com\/terms\/f\/forex.asp\">foreign exchange<\/a> (FOREX) pairs, starting on various dates from Jan 2007, and is delivered daily down to tick resolution. This dataset is created by QuantConnect that processes raw tick data from OANDA.<\/p>"},{"title":"About the Provider","content":"<p>\n<a href=\"https:\/\/www.oanda.com\">OANDA<\/a> was co-founded by Dr. Stumm, a computer scientist and Dr. Olsen, an economist, in 1997. The company was born out of the belief that the Internet and technology would open up the markets for both currency data and trading. OANDA uses innovative computer and financial technology to provide Internet-based forex trading and currency information services to everyone, from individuals to large corporations, from portfolio managers to financial institutions. OANDA is a market maker and a trusted source for currency data. It has access to one of the world's largest historical, high-frequency, filtered currency databases.\n<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\neurusd = self.AddForex(\"EURUSD\", Resolution.Daily, Market.Oanda).Symbol\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\nvar eurusd = AddForex(\"EURUSD\", Resolution.Daily, Market.Oanda).Symbol;\n<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>Jan 2007<\/td><\/tr><tr><td>Asset Coverage<\/td><td>185 pairs<\/td><\/tr><tr><td>Resolution<\/td><td>Tick, Second, Minute, Hour and Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Dense<\/td><\/tr><tr><td>Timezone<\/td><td>New York<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nThe FOREX price data gives researchers an asset class that tracks the global markets. Examples include: \n<\/p>\n<ul><li>Explore the daily worldwide news cycles with FOREX that tracks international currencies;<\/li>\n<li>Carry Trade: borrowing from a lower interest currency pair to fund the purchase of a currency pair with a higher interest rate;<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<h4>QuoteBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"><\/div>\n\n<h4>Tick Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add FOREX price data to your algorithm, use the AddForex() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on requesting market data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass ForexAlgorithm (QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 2, 20)\n        self.SetEndDate(2019, 2, 21)\n        self.SetCash(100000)\n\n        self.symbol = self.AddForex('EURUSD', Resolution.Minute, Market.Oanda).Symbol\n\n        self.SetBenchmark(self.symbol)\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect.Algorithm.CSharp\n{\n    public class ForexAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 2, 20);\n            SetEndDate(2019, 2, 21);\n            SetCash(100000);\n\n            _symbol = AddForex(\"EURUSD\", Resolution.Minute, Market.Oanda).Symbol;\n\n            SetBenchmark(_symbol);\n        }\n    }\n}\n<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Quote data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Quote data is available in daily down to tick resolution.  You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass ForexAlgorithm(QCAlgorithm):\n    def OnData(self, data):\n        # The marketData object can be a QuoteBar or a List of Tick\n        marketData = data[self.symbol]\n\n        # If it's QuoteBar:\n        self.Log(f'Symbol: {self.symbol} - Data: {marketData}')\n\n        # If it's Tick data:\n        for tick in marketData:\n            self.Log(f\"Time: {tick.EndTime}; Symbol: {self.symbol}; Tick: {tick}\")\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect.Algorithm.CSharp\n{\n    public class ForexAlgorithm : QCAlgorithm\n    {\n        public override void OnData(Slice data)\n        {\n            \/\/ The marketData object can be a QuoteBar or a List of Tick\n            var marketData = data[_symbol];\n\n            \/\/ If it's QuoteBar:\n            Log($\"Symbol: {_symbol} - Data: {marketData}\");\n\n            \/\/ If it's Tick data:\n            foreach (var tick in marketData)\n            {\n                 Log($\"Time: {tick.EndTime}; Symbol: {_symbol} Tick: {tick}\");\n            }\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical quote data in your algorithm using the FOREX price data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no FOREX price data in the period you request, the history result will be empty. The following example gets the historical data for FOREX price data by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nhistory = self.History(self.symbol, 60, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">\nvar history = History(_symbol, 60, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<h4>QuoteBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"><\/div>\n\n<h4>Tick Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"><\/div>"}]},{"name":"CFD Data","url":"\/datasets\/oanda-cfd-data","short_description":"Contracts for Difference (CFD) quote data from OANDA and hosted on the QuantConnect Cloud. The data covers 268 contracts from tick to daily resolution.","about":[{"title":"Introduction","content":"<p>CFD price data by OANDA serves 269 <a href=\"https:\/\/www.investopedia.com\/terms\/c\/contractfordifferences.asp\">contracts for differences<\/a> (CFD), starting on various dates from May 2002, and is delivered daily down to tick resolution. This dataset is created by QuantConnect that processes raw tick data from OANDA.<\/p>"},{"title":"About the Provider","content":"<p>\n<a href=\"https:\/\/www.oanda.com\">OANDA<\/a> was co-founded by Dr. Stumm, a computer scientist and Dr. Olsen, an economist, in 1997. The company was born out of the belief that the Internet and technology would open up the markets for both currency data and trading. OANDA uses innovative computer and financial technology to provide Internet-based forex trading and currency information services to everyone, from individuals to large corporations, from portfolio managers to financial institutions. OANDA is a market maker and a trusted source for currency data. It has access to one of the world's largest historical, high-frequency, filtered currency databases.\n<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nxauusd = self.AddCfd(\"XAUUSD\", Resolution.Daily, Market.Oanda).Symbol\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\nvar xauusd = AddCfd(\"XAUUSD\", Resolution.Daily, Market.Oanda).Symbol;\n<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>Mixed, earliest starts May 2002<\/td><\/tr><tr><td>Asset Coverage<\/td><td>268 contracts<\/td><\/tr><tr><td>Resolution<\/td><td>Tick, Second, Minute, Hour and Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Dense<\/td><\/tr><tr><td>Timezone<\/td><td>Mixed, in which the contract is listed*<\/td><\/tr><\/table><p>\n* E.g.: DE30EUR tracks DAX30 Index which is listed in Europe\/Berlin timezone.\n<\/p>"},{"title":"Example Applications","content":"<p>\nThe CFD price data gives researchers an asset class that tracks the price movement of other securities and derivatives. Examples include: \n<\/p>\n<ul><li>Explore the daily worldwide news cycles with CFDs that tracks international indexes;<\/li>\n<li>Trade price movements of commodities with no delivery of physical goods. E.g.: pairs trading between gold and silver, corn and wheat, brent and crude oil, etc<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<h4>QuoteBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"><\/div>\n\n<h4>Tick Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add CFD price data to your algorithm, use the AddCfd() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on requesting market data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass CfdAlgorithm (QCAlgorithm):\n    def Initialize(self):\n        self.SetAccountCurrency('EUR');\n\n        self.SetStartDate(2019, 2, 20)\n        self.SetEndDate(2019, 2, 21)\n        self.SetCash('EUR', 100000)\n\n        self.symbol = self.AddCfd('DE30EUR', Resolution.Minute, Market.Oanda).Symbol\n\n        self.SetBenchmark(self.symbol)\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect.Algorithm.CSharp\n{\n    public class CfdAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetAccountCurrency(\"EUR\");\n\n            SetStartDate(2019, 2, 20);\n            SetEndDate(2019, 2, 21);\n            SetCash(\"EUR\", 100000);\n\n            _symbol = AddCfd(\"DE30EUR\", Resolution.Minute, Market.Oanda).Symbol;\n\n            SetBenchmark(_symbol);\n        }\n    }\n}\n<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Quote data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Quote data is available in daily down to tick resolution.  You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass CfdAlgorithm(QCAlgorithm):\n    def OnData(self, data):\n        # The marketData object can be a QuoteBar or a List of Tick\n        marketData = data[self.symbol]\n\n        # If it's QuoteBar:\n        self.Log(f'Symbol: {self.symbol} - Data: {marketData}')\n\n        # If it's Tick data:\n        for tick in marketData:\n            self.Log(f\"Time: {tick.EndTime}; Symbol: {self.symbol}; Tick: {tick}\")\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect.Algorithm.CSharp\n{\n    public class CfdAlgorithm : QCAlgorithm\n    {\n        public override void OnData(Slice data)\n        {\n            \/\/ The marketData object can be a QuoteBar or a List of Tick\n            var marketData = data[_symbol];\n\n            \/\/ If it's QuoteBar:\n            Log($\"Symbol: {_symbol} - Data: {marketData}\");\n\n            \/\/ If it's Tick data:\n            foreach (var tick in marketData)\n            {\n                 Log($\"Time: {tick.EndTime}; Symbol: {_symbol} Tick: {tick}\");\n            }\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical quote data in your algorithm using the CFD price data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no CFD price data in the period you request, the history result will be empty. The following example gets the historical data for CFD price data by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nhistory = self.History(self.symbol, 60, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">\nvar history = History(_symbol, 60, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<h4>QuoteBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"><\/div>\n\n<h4>Tick Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"><\/div>"}]},{"name":"Crypto Price Data","url":"\/datasets\/crypto-price-data","short_description":"Price data for Coinbase and Bitfinex crypto exchanges collected by CoinAPI and hosted on the QuantConnect Cloud.","about":[{"title":"Introduction","content":"<p>Crypto Price Data by CoinAPI is for Cryptocurrency price and volume data points. The data covers 232 Cryptocurrency pairs, starting in January 2015, and is delivered on any frequency from tick to daily. This dataset is created by monitoring the trading activity on the crypto-currencies markets\/exchanges supported by QuantConnect.\n<\/p>"},{"title":"About the Provider","content":"<p><a href=\"https:\/\/www.cryptotick.com\/\">CoinAPI<\/a> was founded by Artur Pietrzyk in 2016 with the goal of providing real-time and historical cryptocurrency market data, collected from hundreds of exchanges. CoinAPI provides access to Cryptocurrencies for traders, market makers, and developers building third-party applications.<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">self.coinbase_btcusd = self.AddCrypto(\"BTCUSD\", Resolution.Minute, Market.GDAX).Symbol\nself.bitfinex_btcusd = self.AddCrypto(\"BTCUSD\", Resolution.Minute, Market.Bitfinex).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">_coinbaseBtcusd = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.GDAX).Symbol;\n_bitfinexBtcusd = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.Bitfinex).Symbol;<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 2015<\/td><\/tr><tr><td>Asset Coverage<\/td><td>232 Currency Pairs<\/td><\/tr><tr><td>Resolution<\/td><td>Tick, Second, Minute, Hourly, Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Dense<\/td><\/tr><tr><td>Timezone<\/td><td>UTC<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nThe CoinAPI Crypto Price Data enables researchers to accurately design strategies for Cryptocurrencies. Examples include: \n<\/p>\n<ul><li>Buy and hold<\/li>\n<li>Trading Cryptocurrency volatility and price action<\/li>\n<li>Allocating a small portion of your portfolio to Cryptocurrencies to hedge against inflation<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<h4>TradeBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"><\/div>\n\n<h4>QuoteBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"><\/div>\n\n<h4>Tick Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add CoinAPI data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. When requesting data, you have the option to use the Bitfinex or Coinbase (GDAX) markets. For detailed documentation on requesting market data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class CoinAPIDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n        \n        self.coinbase_btcusd = self.AddCrypto(\"BTCUSD\", Resolution.Minute, Market.GDAX).Symbol\n        self.bitfinex_btcusd = self.AddCrypto(\"BTCUSD\", Resolution.Minute, Market.Bitfinex).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class CoinAPIDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _coinbaseBtcusd;\n        private Symbol _bitfinexBtcusd;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            \n            _coinbaseBtcusd = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.GDAX).Symbol;\n            _bitfinexBtcusd = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.Bitfinex).Symbol;\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in every resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    bitfinex_btc_price = data[self.bitfinex_btcusd].Price\n    coinbase_btc_price = data[self.coinbase_btcusd].Price\n    self.Log(f\u201dTime: {self.Time}; Bitfinex price: {bitfinex_btc_price}; Coinbase price: {coinbase_btc_price}\u201d)<\/code><\/pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var bitfinexBtcPrice = data[_bitfinexBtcusd].Price;\n    var coinbaseBtcPrice = data[_coinbaseBtcusd].Price;\n    Log($\u201dTime: {Time}; Bitfinex price: {bitfinexBtcPrice}; Coinbase price: {coinbaseBtcPrice}\u201d);\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical data in your algorithm using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for CoinAPI by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">bitfinex_history = self.History(self.bitfinex_btcusd, 30, Resolution.Daily)\ncoinbase_history = self.History(self.coinbase_btcusd, 30, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">var bitfinexHistory = History(_bitfinexBtcusd, 30, Resolution.Daily);\nvar coinbaseHistory = History(_coinbaseBtcusd, 30, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<h4>TradeBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"><\/div>\n\n<h4>QuoteBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"><\/div>\n\n<h4>Tick Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"><\/div>"}]},{"name":"US Regulatory Alerts","url":"\/datasets\/regalytics-us-regulatory-alerts","short_description":"RegAlytics is the leading provider of daily regulatory updates, sourced from over 3000 regulators. ","about":[{"title":"Introduction","content":"<p>US Regulatory Alerts by RegAlytics tracks US regulatory changes. The data covers 40,000 alerts, from January 2020 to the present day, and is delivered on a daily basis. This dataset is created by sourcing information from over 3,000 regulators and using proprietary technology to gather and structure the regulatory data. Once prepared, the data is thoroughly reviewed by RegAlytics' team of regulatory experts, and delivered each morning by 8 am for industry use.<\/p>"},{"title":"About the Provider","content":"<p><a href=\"https:\/\/regalytics.ai\/\">RegAlytics<\/a> was founded by Mary Kopczynski, Aaron Heisler, Alexander Appugliese, and Werner Pauliks in 2019 with the goal of significantly reducing the time and cost required to mitigate regulatory risk. RegAlytics provides access to accurate and clean regulatory data from US regulators that is enriched by regulatory experts for risk and compliance teams everywhere.<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nregalytics_symbol = self.AddData(RegalyticsRegulatoryArticle, \"REG\").Symbol\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\nvar regAnalyticsSymbol = AddData&lt;RegalyticsRegulatoryArticle&gt;(\"REG\").Symbol;\n<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 2020<\/td><\/tr><tr><td>Asset Coverage<\/td><td>40,000 Alerts<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Sparse<\/td><\/tr><tr><td>Timezone<\/td><td>New York<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nThe RegAlytics US Regulator Alters dataset enables researchers to accurately design strategies while mitigating regulatory risk. Examples include: \n<\/p>\n<ul><li>Temporarily increasing\/decreasing exposure to securities when new regulations are announced<\/li>\n<li>Parsing the content of regulatory announcements to determine market or sector impact<\/li>\n<\/ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"><\/div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https:\/\/www.quantconnect.com\/terminal\/processCache?request=embedded_backtest_17ad96de486698b84297c1a157996a10.html\" scrolling=\"no\"><\/iframe><\/div><\/div>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.RegalyticsRegulatoryArticle\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add US Regulatory Alerts data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass RegalyticsDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000) \n        \n        self.regalytics_symbol = self.AddData(RegalyticsRegulatoryArticle, \"REG\").Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class RegalyticsDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _regAnalyticsSymbol;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            \n            _regAnalyticsSymbol = AddData&lt;RegalyticsRegulatoryArticle&gt;(\"REG\").Symbol;\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    if data.ContainsKey(self.regalytics_symbol):\n        alert = data[self.regalytics_symbol]\n        self.Debug(f\"Regulatory Alert received at {alert.Time}. Id: {alert.Id}; Title: {alert.Title}; Summary: {alert.Summary}; Status: {alert.Status}; Classification: {alert.Classification}; FilingType: {alert.FilingType}; InFederalRegister: {alert.InFederalRegister}; FederalRegisterNumber: {alert.FederalRegisterNumber}; ProposedCommentsDueDate: {alert.ProposedCommentsDueDate}; OriginalPublicationDate: {alert.OriginalPublicationDate}; FederalRegisterPublicationDate: {alert.FederalRegisterPublicationDate}; RuleEffectiveDate: {alert.RuleEffectiveDate}; LatestUpdate: {alert.LatestUpdate}; AlertType: {alert.AlertType}; States: {alert.States}; Agencies: {alert.Agencies}; AnnouncementUrl: {alert.AnnouncementUrl}\");<\/code><\/pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    if (data.ContainsKey(_regAnalyticsSymbol))\n    {\n        var alert = data[_regAnalyticsSymbol];\n        Debug($\"Regulatory Alert received at {alert.Time}. Id: {alert.Id}; Title: {alert.Title}; Summary: {alert.Summary}; Status: {alert.Status}; Classification: {alert.Classification}; FilingType: {alert.FilingType}; InFederalRegister: {alert.InFederalRegister}; FederalRegisterNumber: {alert.FederalRegisterNumber}; ProposedCommentsDueDate: {alert.ProposedCommentsDueDate}; OriginalPublicationDate: {alert.OriginalPublicationDate}; FederalRegisterPublicationDate: {alert.FederalRegisterPublicationDate}; RuleEffectiveDate: {alert.RuleEffectiveDate}; LatestUpdate: {alert.LatestUpdate}; AlertType: {alert.AlertType}; States: {alert.States}; Agencies: {alert.Agencies}; AnnouncementUrl: {alert.AnnouncementUrl}\");\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for US Regulatory Alerts by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.regalytics_symbol, 14, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History&lt;RegalyticsRegulatoryArticle&gt;(_regAnalyticsSymbol, 14, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.RegalyticsRegulatoryArticle\"><\/div>"}]},{"name":"US Equity Options","url":"\/datasets\/algoseek-us-equity-options","short_description":"Trade and quote US Equity Options data by AlgoSeek for 4,000 tickers since 2021. Data is available at minute resolution only.","about":[{"title":"Introduction","content":"<p>US Equity Options by AlgoSeek is for Option data including prices, strikes, expires, implied volatility, and Greeks. The data covers 4,000 Symbols, starting in January 2012, and is delivered on a minute frequency. This dataset is created by monitoring Options Price Reporting Authority (OPRA) data feed, which consolidates last sale and quotation information originating from the national securities exchanges that have been approved by the Securities and Exchange Commission.\n<\/p>"},{"title":"About the Provider","content":"<p><a href=\"https:\/\/www.algoseek.com\/\">AlgoSeek<\/a> was in 2014 with the goal of providing the highest quality, most accurate, ready-to-use data in the financial data industry. AlgoSeek provides access to Equities, ETFs, ETNs, Equity Indices, Equity Options, Futures, and Future Options for quantitative firms and traders.<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">option = self.AddOption(\"GOOG\")\nself.option_symbol = option.Symbol\noption.SetFilter(-2, +2, 0, 180)\n<\/code><\/pre>\n<pre><code class=\"language-cs\">var option = AddOption(\"GOOG\");\n_optionSymbol = option.Symbol;\noption.SetFilter(-2, +2, 0, 180);<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 2012<\/td><\/tr><tr><td>Asset Coverage<\/td><td>4,000 Symbols<\/td><\/tr><tr><td>Resolution<\/td><td>Minute<\/td><\/tr><tr><td>Data Density<\/td><td>Dense<\/td><\/tr><tr><td>Timezone<\/td><td>New York<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nThe AlgoSeek US Equity Options dataset enables researchers to accurately design Option strategies. Examples include: \n<\/p>\n<ul><li>Buying put Options to hedge against downward price movement in positive Equity positions<\/li>\n<li>Exploiting arbitrage opportunities that arise when the price of Option contracts deviate from their theoretical value<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<h4>TradeBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"><\/div>\n\n<h4>QuoteBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add US Equity Options data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on requesting market data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class USEquityOptionsDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        option = self.AddOption(\"GOOG\")\n        self.option_symbol = option.Symbol\n        # Set our strike\/expiry filter for this option chain\n        option.SetFilter(-2, +2, 0, 180)\n<\/code><\/pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class USEquityOptionsDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _optionSymbol;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            \n            \/\/ Requesting data\n            var option = AddOption(\"GOOG\");\n            _optionSymbol = option.Symbol;\n            \/\/ Set our strike\/expiry filter for this option chain\n            option.SetFilter(-2, +2, 0, 180);\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in minute resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    for kvp in data.OptionChains:\n        for contract in kvp.Value:\n            self.Debug(f\"Time: {self.Time}; Canonical Symbol: {kvp.Key}; Contract: {contract}; Right: {contract.Right}; Expiry: {contract.Expiry}; Bid price: {contract.BidPrice}; Ask price: {contract.AskPrice}; ImpliedVolatility: {contract.ImpliedVolatility}; Delta: {contract.Greeks.Delta}; Gamma: {contract.Greeks.Gamma}; Vega: {contract.Greeks.Vega}; Rho: {contract.Greeks.Rho}; Lambda: {contract.Greeks.Lambda}\")<\/code><\/pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    foreach (var kvp in data.OptionChains)\n    {\n        foreach (var contract in kvp.Value)\n        {\n            Log($\"Time: {Time}; Canonical Symbol: {kvp.Key}; Contract: {contract}; Right: {contract.Right}; Expiry: {contract.Expiry}; Bid price: {contract.BidPrice}; Ask price: {contract.AskPrice}; ImpliedVolatility: {contract.ImpliedVolatility}; Delta: {contract.Greeks.Delta}; Gamma: {contract.Greeks.Gamma}; Vega: {contract.Greeks.Vega}; Rho: {contract.Greeks.Rho}; Lambda: {contract.Greeks.Lambda}\");    \n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical Options data by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for US Options by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(contract.Symbol, 10, Resolution.Minute)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History(contract.Symbol, 10, Resolution.Minute);<\/code><\/pre>\n<\/div>\n\n<p>You can request historical Options data in the Research environment by using the GetOptionHistory method of the QuantBook class. To learn more about historical data requests for Options in the Research environment, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/research\/historical-data#Historical-Data-Historical-Options-Data\">Research Historical Data<\/a> documentation. The following example gets the historical data for US Options in the Research environment.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">qb = QuantBook()\noption = qb.AddOption(\"GOOG\") \noption.SetFilter(-2, +2, timedelta(0), timedelta(180))\nhistory = qb.GetOptionHistory(option.Symbol, datetime(2020, 6, 1), datetime(2020, 6, 5))\nhistory.GetAllData()<\/code><\/pre>\n<pre><code class=\"language-cs\">var qb = new QuantBook();\nvar option = qb.AddOption(\"GOOG\");\noption.SetFilter(-2, +2, TimeSpan.FromDays(0), TimeSpan.FromDays(180));\nvar history = qb.GetOptionHistory(option.Symbol, new DateTime(2020, 6, 1), new DateTime(2020, 6, 5));\nvar historicalOptionData = history.GetAllData();<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<h4>TradeBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"><\/div>\n\n<h4>QuoteBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"><\/div>"}]},{"name":"US Futures","url":"\/datasets\/algoseek-us-futures","short_description":"Trade and quote US Futures data for the 142 most liquid tickers across the CME, CBOT, NYMEX, and COMEX markets.","about":[{"title":"Introduction","content":"<p>US Futures by AlgoSeek is for Futures data including price, volume, open interest, and expiry. The data covers the 142 most liquid contracts, starting in May 2009, and is delivered on a tick, second, or minute frequency. This dataset is created by monitoring the trading activity on the  CME, CBOT, NYMEX, and COMEX markets.<\/p>"},{"title":"About the Provider","content":"<p>\nAlgoSeek is a leading historical intraday US market data provider offering the most comprehensive and detailed market data and analytics products in the financial industry covering equities, futures, options, cash forex, and cryptocurrencies. AlgoSeek data is built for quantitative trading and machine learning.  For more information about AlgoSeek, visit <a href=\"https:\/\/www.algoseek.com\">algoseek.com<\/a>.\n<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">self.gold = self.AddFuture(Futures.Metals.Gold) \nself.gold.SetFilter(0, 90)<\/code><\/pre>\n<pre><code class=\"language-cs\">_gold = AddFuture(Futures.Metals.Gold);\n_gold.SetFilter(0, 90);<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>May 2009<\/td><\/tr><tr><td>Asset Coverage<\/td><td>142 Tickers<\/td><\/tr><tr><td>Resolution<\/td><td>Tick, Second, Minute<\/td><\/tr><tr><td>Data Density<\/td><td>Dense<\/td><\/tr><tr><td>Timezone<\/td><td>Chicago (CME or CBOT) \/ New York (NYMEX or COMEX)<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nThe AlgoSeek US Futures dataset enables researchers to accurately design Futures strategies. Examples include: \n<\/p>\n<ul><li>Buying the Futures contract with the most open interest to reduce slippage and market impact<\/li>\n<li>Trading bull calendar spreads to reduce volatility and margin requirements<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<h4>DataNormalizationMode Values<\/h4>\n<div data-tree=\"QuantConnect.DataNormalizationMode\"><\/div>\n\n<h4>DataMappingMode Values<\/h4>\n<div data-tree=\"QuantConnect.DataMappingMode\"><\/div>\n\n<h4>Future Attributes<\/h4>\n<div data-tree=\"QuantConnect.Securities.Future.Future\"><\/div>\n\n<h4>FuturesChain Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.FuturesChain\"><\/div>\n\n<h4>OpenInterest Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.OpenInterest\"><\/div>\n\n<h4>Reference Table<\/h4>\n<div class=\"sub-heading-content\"><p>The following reference table lists the Future assets available for use on QuantConnect. They can be requested using either the short code ticker or the helper static class below.\n<\/p>\n<table class=\"table futures-table table-reflow\"><thead><tr><th colspan=\"2\">\n                Grains            <\/th><\/tr><tr><th>Name<\/th><th>Accessor Code<\/th><\/tr><\/thead><tbody><tr><td>\n                    <p>Black Sea Corn Financially Settled (Platts) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Grains.BlackSeaCornFinanciallySettledPlatts<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Black Sea Wheat Financially Settled (Platts) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Grains.BlackSeaWheatFinanciallySettledPlatts<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Chicago SRW Wheat Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Grains.SRWWheat<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Default wheat contract is SRWWheat<\/p><br \/><\/td><td>\n                    <code>Futures.Grains.Wheat<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>KC HRW Wheat Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Grains.HRWWheat<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Corn Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Grains.Corn<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Soybeans Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Grains.Soybeans<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Soybean Meal Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Grains.SoybeanMeal<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Soybean Oil Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Grains.SoybeanOil<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Oats Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Grains.Oats<\/code>\n                <\/td><\/tr><\/tbody><\/table><table class=\"table futures-table table-reflow\"><thead><tr><th colspan=\"2\">\n                Currencies            <\/th><\/tr><tr><th>Name<\/th><th>Accessor Code<\/th><\/tr><\/thead><tbody><tr><td>\n                    <p>British Pound Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Currencies.GBP<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Canadian Dollar Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Currencies.CAD<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Japanese Yen Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Currencies.JPY<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Swiss Franc Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Currencies.CHF<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Euro FX Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Currencies.EUR<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Australian Dollar Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Currencies.AUD<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>New Zealand Dollar Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Currencies.NZD<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Russian Ruble Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Currencies.RUB<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Brazillian Real Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Currencies.BRL<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Mexican Peso Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Currencies.MXN<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>South African Rand Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Currencies.ZAR<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Australian Dollar\/Canadian Dollar Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Currencies.AUDCAD<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Australian Dollar\/Japanese Yen Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Currencies.AUDJPY<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Australian Dollar\/New Zealand Dollar Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Currencies.AUDNZD<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Bitcoin Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Currencies.BTC<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Canadian Dollar\/Japanese Yen Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Currencies.CADJPY<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Standard-Size USD\/Offshore RMB (CNH) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Currencies.StandardSizeUSDOffshoreRMBCNH<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>E-mini Euro FX Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Currencies.EuroFXEmini<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Euro\/Australian Dollar Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Currencies.EURAUD<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Euro\/Canadian Dollar Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Currencies.EURCAD<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Euro\/Swedish Krona Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Currencies.EURSEK<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>E-mini Japanese Yen Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Currencies.JapaneseYenEmini<\/code>\n                <\/td><\/tr><\/tbody><\/table><table class=\"table futures-table table-reflow\"><thead><tr><th colspan=\"2\">\n                Energies            <\/th><\/tr><tr><th>Name<\/th><th>Accessor Code<\/th><\/tr><\/thead><tbody><tr><td>\n                    <p>Propane Non LDH Mont Belvieu (OPIS) BALMO Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.PropaneNonLDHMontBelvieu<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Argus Propane Far East Index BALMO Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.ArgusPropaneFarEastIndexBALMO<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Mini European 3.5% Fuel Oil Barges FOB Rdam (Platts) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.MiniEuropeanThreePointPercentFiveFuelOilBargesPlatts<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Mini Singapore Fuel Oil 180 cst (Platts) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.MiniSingaporeFuelOil180CstPlatts<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Gulf Coast ULSD (Platts) Up-Down BALMO Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.GulfCoastULSDPlattsUpDownBALMO<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Gulf Coast Jet (Platts) Up-Down BALMO Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.GulfCoastJetPlattsUpDownBALMO<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Propane Non-LDH Mont Belvieu (OPIS) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.PropaneNonLDHMontBelvieuOPIS<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>European Propane CIF ARA (Argus) BALMO Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.EuropeanPropaneCIFARAArgusBALMO<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Premium Unleaded Gasoline 10 ppm FOB MED (Platts) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.PremiumUnleadedGasoline10ppmFOBMEDPlatts<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Argus Propane Far East Index Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.ArgusPropaneFarEastIndex<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Gasoline Euro-bob Oxy NWE Barges (Argus) Crack Spread BALMO Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.GasolineEurobobOxyNWEBargesArgusCrackSpreadBALMO<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Mont Belvieu Natural Gasoline (OPIS) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.MontBelvieuNaturalGasolineOPIS<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Mont Belvieu Normal Butane (OPIS) BALMO Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.MontBelvieuNormalButaneOPISBALMO<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Conway Propane (OPIS) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.ConwayPropaneOPIS<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Mont Belvieu LDH Propane (OPIS) BALMO Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.MontBelvieuLDHPropaneOPISBALMO<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Argus Propane Far East Index vs. European Propane CIF ARA (Argus) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.ArgusPropaneFarEastIndexVsEuropeanPropaneCIFARAArgus<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Argus Propane (Saudi Aramco) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.ArgusPropaneSaudiAramco<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Group Three ULSD (Platts) vs. NY Harbor ULSD Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.GroupThreeULSDPlattsVsNYHarborULSD<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Group Three Sub-octane Gasoliine (Platts) vs. RBOB Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.GroupThreeSuboctaneGasolinePlattsVsRBOB<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Singapore Fuel Oil 180 cst (Platts) BALMO Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.SingaporeFuelOil180cstPlattsBALMO<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Singapore Fuel Oil 380 cst (Platts) BALMO Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.SingaporeFuelOil380cstPlattsBALMO<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Mont Belvieu Ethane (OPIS) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.MontBelvieuEthaneOPIS<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Mont Belvieu Normal Butane (OPIS) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.MontBelvieuNormalButaneOPIS<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Brent Crude Oil vs. Dubai Crude Oil (Platts) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.BrentCrudeOilVsDubaiCrudeOilPlatts<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Argus LLS vs. WTI (Argus) Trade Month Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.ArgusLLSvsWTIArgusTradeMonth<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Singapore Gasoil (Platts) vs. Low Sulphur Gasoil Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.SingaporeGasoilPlattsVsLowSulphurGasoilFutures<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Los Angeles CARBOB Gasoline (OPIS) vs. RBOB Gasoline Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.LosAngelesCARBOBGasolineOPISvsRBOBGasoline<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Los Angeles Jet (OPIS) vs. NY Harbor ULSD Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.LosAngelesJetOPISvsNYHarborULSD<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Los Angeles CARB Diesel (OPIS) vs. NY Harbor ULSD Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.LosAngelesCARBDieselOPISvsNYHarborULSD<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>European Naphtha (Platts) BALMO Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.EuropeanNaphthaPlattsBALMO<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>European Propane CIF ARA (Argus) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.EuropeanPropaneCIFARAArgus<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Mont Belvieu Natural Gasoline (OPIS) BALMO Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.MontBelvieuNaturalGasolineOPISBALMO<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>RBOB Gasoline Crack Spread Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.RBOBGasolineCrackSpread<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Gulf Coast HSFO (Platts) BALMO Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.GulfCoastHSFOPlattsBALMO<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Mars (Argus) vs. WTI Trade Month Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.MarsArgusVsWTITradeMonth<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Mars (Argus) vs. WTI Financial Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.MarsArgusVsWTIFinancial<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Ethanol T2 FOB Rdam Including Duty (Platts) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.EthanolT2FOBRdamIncludingDutyPlatts<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Mont Belvieu LDH Propane (OPIS) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.MontBelvieuLDHPropaneOPIS<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Gasoline Euro-bob Oxy NWE Barges (Argus) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.GasolineEurobobOxyNWEBargesArgus<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>WTI-Brent Financial Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.WTIBrentFinancial<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>3.5% Fuel Oil Barges FOB Rdam (Platts) Crack Spread (1000mt) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.ThreePointFivePercentFuelOilBargesFOBRdamPlattsCrackSpread1000mt<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Gasoline Euro-bob Oxy NWE Barges (Argus) BALMO Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.GasolineEurobobOxyNWEBargesArgusBALMO<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Brent Last Day Financial Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.BrentLastDayFinancial<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Crude Oil WTI Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.CrudeOilWTI<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Gulf Coast CBOB Gasoline A2 (Platts) vs. RBOB Gasoline Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.GulfCoastCBOBGasolineA2PlattsVsRBOBGasoline<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Clearbrook Bakken Sweet Crude Oil Monthly Index (Net Energy) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.ClearbrookBakkenSweetCrudeOilMonthlyIndexNetEnergy<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>WTI Financial Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.WTIFinancial<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Chicago Ethaanol (Platts) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.ChicagoEthanolPlatts<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Singapore Mogas 92 Unleaded (Platts) Brent Crack Spread Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.SingaporeMogas92UnleadedPlattsBrentCrackSpread<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Dubai Crude Oil (Platts) Financial Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.DubaiCrudeOilPlattsFinancial<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Japan C&amp;amp;F Naphtha (Platts) BALMO Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.JapanCnFNaphthaPlattsBALMO<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Ethanol Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.Ethanol<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>European Naphtha (Platts) Crack Spread Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.EuropeanNaphthaPlattsCrackSpread<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>European Propane CIF ARA (Argus) vs. Naphtha Cargoes CIF NWE (Platts) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.EuropeanPropaneCIFARAArgusVsNaphthaCargoesCIFNWEPlatts<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Singapore Fuel Oil 380 cst (Platts) vs. European 3.5% Fuel Oil Barges FOB Rdam (Platts) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.SingaporeFuelOil380cstPlattsVsEuropeanThreePointFivePercentFuelOilBargesFOBRdamPlatts<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>East-West Gasoline Spread (Platts-Argus) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.EastWestGasolineSpreadPlattsArgus<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>East-West Naphtha: Japan C&amp;amp;F vs. Cargoes CIF NWE Spread (Platts) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.EastWestNaphthaJapanCFvsCargoesCIFNWESpreadPlatts<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>RBOB Gasoline vs. Euro-bob Oxy NWE Barges (Argus) (350,000 gallons) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.RBOBGasolineVsEurobobOxyNWEBargesArgusThreeHundredFiftyThousandGallons<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>3.5% Fuel Oil Barges FOB Rdam (Platts) Crack Spread Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.ThreePointFivePercentFuelOilBargesFOBRdamPlattsCrackSpread<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Freight Route TC14 (Baltic) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.FreightRouteTC14Baltic<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>1% Fuel Oil Cargoes FOB NWE (Platts) vs. 3.5% Fuel Oil Barges FOB Rdam (Platts) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.OnePercentFuelOilCargoesFOBNWEPlattsVsThreePointFivePercentFuelOilBargesFOBRdamPlatts<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Gulf Coast HSFO (Platts) vs. European 3.5% Fuel Oil Barges FOB Rdam (Platts) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.GulfCoastHSFOPlattsVsEuropeanThreePointFivePercentFuelOilBargesFOBRdamPlatts<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>WTI Houston Crude Oil Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.WTIHoustonCrudeOil<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Natural Gas (Henry Hub) Last-day Financial Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.NaturalGasHenryHubLastDayFinancial<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Heating Oil Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.HeatingOil<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Natural Gas (Henry Hub) Penultimate Financial Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.NaturalGasHenryHubPenultimateFinancial<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>WTI Houston (Argus) vs. WTI Trade Month Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.WTIHoustonArgusVsWTITradeMonth<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Gasoline RBOB Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.Gasoline<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Natural Gas Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Energies.NaturalGas<\/code>\n                <\/td><\/tr><\/tbody><\/table><table class=\"table futures-table table-reflow\"><thead><tr><th colspan=\"2\">\n                Financials            <\/th><\/tr><tr><th>Name<\/th><th>Accessor Code<\/th><\/tr><\/thead><tbody><tr><td>\n                    <p>30Y U.S. Treasury Bond Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Financials.Y30TreasuryBond<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>10Y U.S. Treasury Note Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Financials.Y10TreasuryNote<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>5Y U.S. Treasury Note Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Financials.Y5TreasuryNote<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>2Y U.S. Treasury Note Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Financials.Y2TreasuryNote<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>EuroDollar Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Financials.EuroDollar<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>5-Year USD MAC Swap Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Financials.FiveYearUSDMACSwap<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Ultra U.S. Treasury Bond Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Financials.UltraUSTreasuryBond<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Ultra 10-Year U.S. Treasury Note Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Financials.UltraTenYearUSTreasuryNote<\/code>\n                <\/td><\/tr><\/tbody><\/table><table class=\"table futures-table table-reflow\"><thead><tr><th colspan=\"2\">\n                Indices            <\/th><\/tr><tr><th>Name<\/th><th>Accessor Code<\/th><\/tr><\/thead><tbody><tr><td>\n                    <p>E-mini S&amp;amp;P 500 Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Indices.SP500EMini<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>E-mini NASDAQ 100 Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Indices.NASDAQ100EMini<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>E-mini Dow Indu 30 Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Indices.Dow30EMini<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>CBOE Volatility Index Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Indices.VIX<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>E-mini Russell 2000 Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Indices.Russell2000EMini<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Nikkei-225 Dollar Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Indices.Nikkei225Dollar<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Bloomberg Commodity Index Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Indices.BloombergCommodityIndex<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>E-mini Nasdaq-100 Biotechnology Index Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Indices.NASDAQ100BiotechnologyEMini<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>E-mini FTSE Emerging Index Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Indices.FTSEEmergingEmini<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>E-mini S&amp;amp;P MidCap 400 Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Indices.SP400MidCapEmini<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>S&amp;amp;P-GSCI Commodity Index Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Indices.SPGSCICommodity<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>USD-Denominated Ibovespa Index Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Indices.USDDenominatedIbovespa<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>USD-Denominated MSCI Taiwan Index Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Indices.MSCITaiwanIndex<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Nikkei-225 Yen denominated Index Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Indices.Nikkei225Yen<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Nifty 50 Index Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Indices.Nifty50<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Hang Seng Index<\/p><br \/><\/td><td>\n                    <code>Futures.Indices.HangSeng<\/code>\n                <\/td><\/tr><\/tbody><\/table><table class=\"table futures-table table-reflow\"><thead><tr><th colspan=\"2\">\n                Forestry            <\/th><\/tr><tr><th>Name<\/th><th>Accessor Code<\/th><\/tr><\/thead><tbody><tr><td>\n                    <p>Random Length Lumber Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Forestry.RandomLengthLumber<\/code>\n                <\/td><\/tr><\/tbody><\/table><table class=\"table futures-table table-reflow\"><thead><tr><th colspan=\"2\">\n                Meats            <\/th><\/tr><tr><th>Name<\/th><th>Accessor Code<\/th><\/tr><\/thead><tbody><tr><td>\n                    <p>Live Cattle Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Meats.LiveCattle<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Feeder Cattle Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Meats.FeederCattle<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Lean Hogs Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Meats.LeanHogs<\/code>\n                <\/td><\/tr><\/tbody><\/table><table class=\"table futures-table table-reflow\"><thead><tr><th colspan=\"2\">\n                Metals            <\/th><\/tr><tr><th>Name<\/th><th>Accessor Code<\/th><\/tr><\/thead><tbody><tr><td>\n                    <p>Gold Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Metals.Gold<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Silver Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Metals.Silver<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Platinum Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Metals.Platinum<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Palladium Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Metals.Palladium<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Aluminum MW U.S. Transaction Premium Platts (25MT) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Metals.AluminumMWUSTransactionPremiumPlatts25MT<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Aluminium European Premium Duty-Paid (Metal Bulletin) Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Metals.AluminiumEuropeanPremiumDutyPaidMetalBulletin<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Copper Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Metals.Copper<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>U.S. Midwest Domestic Hot-Rolled Coil Steel (CRU) Index Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Metals.USMidwestDomesticHotRolledCoilSteelCRUIndex<\/code>\n                <\/td><\/tr><\/tbody><\/table><table class=\"table futures-table table-reflow\"><thead><tr><th colspan=\"2\">\n                Softs            <\/th><\/tr><tr><th>Name<\/th><th>Accessor Code<\/th><\/tr><\/thead><tbody><tr><td>\n                    <p>Sugar #11 Futures CME<\/p><br \/><\/td><td>\n                    <code>Futures.Softs.Sugar11CME<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Cocoa Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Softs.Cocoa<\/code>\n                <\/td><\/tr><\/tbody><\/table><table class=\"table futures-table table-reflow\"><thead><tr><th colspan=\"2\">\n                Dairy            <\/th><\/tr><tr><th>Name<\/th><th>Accessor Code<\/th><\/tr><\/thead><tbody><tr><td>\n                    <p>Cash-settled Butter Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Dairy.CashSettledButter<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Cash-settled Cheese Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Dairy.CashSettledCheese<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Class III Milk Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Dairy.ClassIIIMilk<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Dry Whey Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Dairy.DryWhey<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Class IV Milk Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Dairy.ClassIVMilk<\/code>\n                <\/td><\/tr><tr><td>\n                    <p>Non-fat Dry Milk Futures<\/p><br \/><\/td><td>\n                    <code>Futures.Dairy.NonfatDryMilk<\/code>\n                <\/td><\/tr><\/tbody><\/table><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add US Futures data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on requesting market data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class USFuturesDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2013, 12, 20) \n        self.SetEndDate(2014, 2, 20) \n        self.SetCash(1000000) \n        \n        self.gold = self.AddFuture(Futures.Metals.Gold) \n        self.gold.SetFilter(0, 90)<\/code><\/pre>\n<pre><code class=\"language-cs\">using QuantConnect.Securities;\nusing QuantConnect.Securities.Future;\n\nnamespace QuantConnect\n{\n    public class USFuturesDataAlgorithm : QCAlgorithm\n    {\n        private Future _gold;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2013, 12, 20);\n            SetEndDate(2014, 2, 20);\n            SetCash(1000000);\n            \n            _gold = AddFuture(Futures.Metals.Gold);\n            _gold.SetFilter(0, 90);\n        }\n    }\n}\n<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in tick, second, and minute resolutions. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    for kvp in data.FutureChains:\n        for contract in kvp.Value:\n            self.Log(f\"Time: {self.Time}; Underlying Symbol: {kvp.Key}; Contract: {contract}; Open Interest: {contract.OpenInterest}; Expiry: {contract.Expiry}; Last price: {contract.LastPrice}; Volume: {contract.Volume}; Bid price: {contract.BidPrice}; Bid size: {contract.BidSize}; Ask price: {contract.AskPrice}; Ask size: {contract.AskSize};\")<\/code><\/pre>\n<pre><code class=\"language-cs\">\npublic override void OnData(Slice data)\n{\n    foreach (var kvp in data.FutureChains)\n    {\n        foreach (var contract in kvp.Value)\n        {\n            Log($\"Time: {Time}; Underlying Symbol: {kvp.Key}; Contract: {contract}; Open Interest: {contract.OpenInterest}; Expiry: {contract.Expiry}; Last price: {contract.LastPrice}; Volume: {contract.Volume}; Bid price: {contract.BidPrice}; Bid size: {contract.BidSize}; Ask price: {contract.AskPrice}; Ask size: {contract.AskSize};\");\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical Futures data by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for US Futures by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(contract.Symbol, 10, Resolution.Minute)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History(contract.Symbol, 10, Resolution.Minute);<\/code><\/pre>\n<\/div>\n\n<p>You can request historical Futures data in the Research environment by using the GetFutureHistory method of the QuantBook class. To learn more about historical data requests for Futures in the Research environment, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/research\/historical-data#Historical-Data-Historical-Futures-Data\">Research Historical Data<\/a> documentation. The following example gets the historical data for US Futures in the Research environment.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">qb = QuantBook()\ngold = qb.AddFuture(Futures.Metals.Gold) \ngold.SetFilter(0, 90)\nhistory = qb.GetFutureHistory(gold.Symbol, datetime(2020, 6, 1), datetime(2020, 6, 5))\nhistory.GetAllData()<\/code><\/pre>\n<pre><code class=\"language-cs\">var qb = new QuantBook();\nvar gold = qb.AddFuture(Futures.Metals.Gold);\ngold.SetFilter(0, 90);\nvar history = qb.GetFutureHistory(gold.Symbol, new DateTime(2020, 6, 1), new DateTime(2020, 6, 5));\nvar historicalFutureData = history.GetAllData();<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<h4>DataNormalizationMode Values<\/h4>\n<div data-tree=\"QuantConnect.DataNormalizationMode\"><\/div>\n\n<h4>DataMappingMode Values<\/h4>\n<div data-tree=\"QuantConnect.DataMappingMode\"><\/div>\n\n<h4>Future Attributes<\/h4>\n<div data-tree=\"QuantConnect.Securities.Future.Future\"><\/div>\n\n<h4>FuturesChain Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.FuturesChain\"><\/div>\n\n<h4>OpenInterest Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.OpenInterest\"><\/div>"}]},{"name":"US Future Options","url":"\/datasets\/algoseek-us-future-options","short_description":"Future Options data by AlgoSeek provides data for 15 liquid US CME Future commodity contracts at minute resolution.","about":[{"title":"Introduction","content":"<p>US Future Options by AlgoSeek is for Option data on US Future contracts including prices, strikes, expires, implied volatility, and Greeks. The data covers 15 Monthly Future contracts, starting in January 2012, and is delivered on a minute frequency. This dataset is created by monitoring the trading activity on the CME, CBOT, NYMEX, and COMEX markets.<\/p>"},{"title":"About the Provider","content":"<p>\nAlgoSeek is a leading historical intraday US market data provider offering the most comprehensive and detailed market data and analytics products in the financial industry covering equities, futures, options, cash forex, and cryptocurrencies. AlgoSeek data is built for quantitative trading and machine learning.  For more information about AlgoSeek, visit <a href=\"https:\/\/www.algoseek.com\">algoseek.com<\/a>.\n<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">gold_futures = self.AddFuture(Futures.Metals.Gold, Resolution.Minute)\ngold_futures.SetFilter(0, 90)\nself.AddFutureOption(gold_futures.Symbol, lambda universe: universe.Strikes(-5, +5))<\/code><\/pre>\n<pre><code class=\"language-cs\">var goldFutures = AddFuture(Futures.Metals.Gold, Resolution.Minute);\ngoldFutures.SetFilter(0, 90);\nAddFutureOption(goldFutures.Symbol, universe =&gt; universe.Strikes(-5, +5));<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 2012<\/td><\/tr><tr><td>Asset Coverage<\/td><td>15 Monthly Future Contracts<\/td><\/tr><tr><td>Resolution<\/td><td>Minute<\/td><\/tr><tr><td>Data Density<\/td><td>Dense<\/td><\/tr><tr><td>Timezone<\/td><td>New York<\/td><\/tr><\/table><h4>Supported Contracts<\/h4>\n<table class=\"table qc-table table-dense table-striped\"><tr><th>Ticker<\/th><th>Underlying Ticker<\/th><th>Underlying Futures Name<\/th>\n<\/tr><tr><td>DC<\/td><td>DC<\/td><td>Class III Milk<\/td><\/tr><tr><td>ES<\/td><td>ES<\/td><td>E-mini\u00a0S&amp;P\u00a0500<\/td><\/tr><tr><td>HXE<\/td><td>HG<\/td><td>Copper<\/td><\/tr><tr><td>LO<\/td><td>CL<\/td><td>Crude Oil WTI<\/td><\/tr><tr><td>NQ<\/td><td>NQ<\/td><td>E-mini\u00a0NASDAQ\u00a0100<\/td><\/tr><tr><td>OB<\/td><td>RB<\/td><td>Gulf Coast CBOB vs. RBOB Gasoline<\/td><\/tr><tr><td>OG<\/td><td>GC<\/td><td>Gold<\/td><\/tr><tr><td>OH<\/td><td>HO<\/td><td>Heating Oil<\/td><\/tr><tr><td>ON<\/td><td>NG<\/td><td>Natural Gas<\/td><\/tr><tr><td>OZB<\/td><td>ZB<\/td><td>30Y U.S. Treasury Bond<\/td><\/tr><tr><td>OZC<\/td><td>ZC<\/td><td>Corn<\/td><\/tr><tr><td>OZS<\/td><td>ZS<\/td><td>Soybeans<\/td><\/tr><tr><td>OZT<\/td><td>ZT<\/td><td>2Y U.S. Treasury Note<\/td><\/tr><tr><td>OZW<\/td><td>ZW<\/td><td>Chicago SRW Wheat<\/td><\/tr><tr><td>SO<\/td><td>SI<\/td><td>Hang Seng<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nThe AlgoSeek US Future Options dataset enables researchers to accurately design Future Option strategies. Examples include: \n<\/p>\n<ul><li>Selling out of the money Future Option contracts to collect the premium paid by the Option buyer<\/li>\n<li>Buying put Options to hedge against downward price movement in Futures you have a positive position in<\/li>\n<li>Exploiting arbitrage opportunities that arise when the price of Option contracts deviate from their theoretical value<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<h4>TradeBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"><\/div>\n\n<h4>QuoteBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"><\/div>\n\n<h4>OpenInterest Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.OpenInterest\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add US Future Options data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on requesting market data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class FutureOptionDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 1, 28)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        gold_futures = self.AddFuture(Futures.Metals.Gold, Resolution.Minute)\n        gold_futures.SetFilter(0, 90)\n        self.AddFutureOption(gold_futures.Symbol, lambda universe: universe.Strikes(-5, +5))<\/code><\/pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class FutureOptionDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2020, 1, 28);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n            \n            var goldFutures = AddFuture(Futures.Metals.Gold, Resolution.Minute);\n            goldFutures.SetFilter(0, 90);\n            AddFutureOption(goldFutures.Symbol, universe =&gt; universe.Strikes(-5, +5));\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in minute resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    for kvp in data.OptionChains:\n        underlying_future_contract = kvp.Key.Underlying\n        chain = kvp.Value\n        for contract in chain:\n            self.Debug(f\"Time: {self.Time}; Canonical Symbol: {kvp.Key}; Underlying Future contract: {underlying_future_contract} Contract: {contract}; Right: {contract.Right}; Expiry: {contract.Expiry}; Bid price: {contract.BidPrice}; Ask price: {contract.AskPrice}; ImpliedVolatility: {contract.ImpliedVolatility}; Delta: {contract.Greeks.Delta}; Gamma: {contract.Greeks.Gamma}; Vega: {contract.Greeks.Vega}; Rho: {contract.Greeks.Rho}; Lambda: {contract.Greeks.Lambda}\")<\/code><\/pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    foreach (var kvp in data.OptionChains)\n    {\n        var underlyingFutureContract = kvp.Key.Underlying;\n        var chain = kvp.Value;\n        foreach (var contract in chain)\n        {\n            algorithm.Debug($\"Time: {algorithm.Time}; Canonical Symbol: {kvp.Key}; Underlying Future contract: {underlyingFutureContract} Contract: {contract}; Right: {contract.Right}; Expiry: {contract.Expiry}; Bid price: {contract.BidPrice}; Ask price: {contract.AskPrice}; ImpliedVolatility: {contract.ImpliedVolatility}; Delta: {contract.Greeks.Delta}; Gamma: {contract.Greeks.Gamma}; Vega: {contract.Greeks.Vega}; Rho: {contract.Greeks.Rho}; Lambda: {contract.Greeks.Lambda}\");\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical Future Options data in your algorithm using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for US Future Options by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(security.Symbol, 10, Resolution.Minute)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History(security.Symbol, 10, Resolution.Minute);<\/code><\/pre>\n<\/div>\n\n\n<div class=\"panel-group\">\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h4 class=\"panel-title\">\n        <a href=\"#collapseOne\">CBOE<\/a>\n      <\/h4>\n    <\/div>\n    <div class=\"panel-collapse collapse in\">\n      <div class=\"panel-body\">\n                <p>VIX On Google<\/p>\n                <pre>AddData&lt;Fred&gt;(Fred.CBOE.VIXOnGoogle);<\/pre>\n                <pre>self.AddData(Fred, Fred.CBOE.VIXOnGoogle)<\/pre>\n      <\/div>\n    <\/div>\n  <\/div>\n<\/div>"},{"title":"Data Point Attributes","content":"<h4>TradeBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"><\/div>\n\n<h4>QuoteBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"><\/div>\n\n<h4>OpenInterest Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.OpenInterest\"><\/div>"}]},{"name":"Benzinga News Feed","url":"\/datasets\/benzinga-news-feed","short_description":"Mainstream US media articles and financial news publications condensed into a news feed with titles and article bodies for sentiment analysis","about":[{"title":"Introduction","content":"<p>Benzinga News Feed by Benzinga tracks US Equity news releases. The data covers about 10,000 articles per day across 15,000 Equities, starting in January 2015, and is delivered on a second frequency. This dataset is created by structuring the content produced by Benzinga's editorial team.<\/p>"},{"title":"About the Provider","content":"<p>\nBenzinga was founded by Jason Raznick in 2010 with goal of connecting the world with news, data, and education that makes the path to financial prosperity easier for everyone, everyday. Benzinga provides access to real-time news for individual investors.\n<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\naapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nbenzingaSymbol = self.AddData(BenzingaNews, aapl).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\nvar aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\nvar benzingaSymbol = AddData&lt;BenzingaNews&gt;(aapl).Symbol;<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 2015<\/td><\/tr><tr><td>Asset Coverage<\/td><td>10,000 Articles\/Day, 15,000 Equities<\/td><\/tr><tr><td>Resolution<\/td><td>Second<\/td><\/tr><tr><td>Data Density<\/td><td>Sparse<\/td><\/tr><tr><td>Timezone<\/td><td>New York<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nThe Benzinga News Feed enables researchers to accurately design strategies harnessing real-time news releases. Examples include: \n<\/p>\n<ul><li>Creating a dictionary of sentiment scores for various words and assigning a sentiment score to the content of each news release<\/li>\n<li>Calculating the sentiment of news releases with Natural Language Processing (NLP)<\/li>\n<li>Trading securities when their news releases are tagged by Benzinga with current buzzwords<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.BenzingaNews\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add Benzinga News Feed data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass BenzingaNewsDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n        \n        self.aapl = self.AddEquity(\"AAPL\", Resolution.Minute).Symbol\n        self.benzinga_symbol = self.AddData(BenzingaNews, self.aapl).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">using System.Linq;\nusing QuantConnect.Data;\n\nnamespace QuantConnect.Algorithm.CSharp.AltData\n{\n    public class BenzingaNewsDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _aapl;\n        private Symbol _benzingaSymbol;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            \n            _aapl = AddEquity(\"AAPL\", Resolution.Minute).Symbol;\n            _benzingaSymbol = AddData&lt;BenzingaNews&gt;(_aapl).Symbol;\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in second resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    if data.ContainsKey(self.benzinga_symbol):\n        article = data[self.benzinga_symbol]\n        self.Log(f\"Received Benzinga News article at {self.Time}; ID: {article.Id}; Author {article.Author}; Created at: {article.CreatedAt}; Updated at: {article.UpdatedAt}; Title: {article.Title}; Teaser {article.Teaser}; Contents: {article.Contents}; Symbols: {article.Symbols}; Tags: {article.Tags}; EndTime {article.EndTime}\")\n<\/code><\/pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    if (data.ContainsKey(_benzingaSymbol))\n    {\n        var article = data[_benzingaSymbol];\n        Log($\"Received Benzinga News article at {Time}; ID: {article.Id}; Author {article.Author}; Created at: {article.CreatedAt}; Updated at: {article.UpdatedAt}; Title: {article.Title}; Teaser {article.Teaser}; Contents: {article.Contents}; Symbols: {article.Symbols}; Tags: {article.Tags}; EndTime {article.EndTime}\");\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for Benzinga News by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.benzinga_symbol, 14, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History&lt;BenzingaNews&gt;(_benzingaSymbol, 14, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.BenzingaNews\"><\/div>"}]},{"name":"Brain Sentiment Indicator","url":"\/datasets\/brain-sentiment-indicator","short_description":"Proprietary sentiment analysis algorithm for 4,000 US Equities. Data is provided on a daily frequency since January 2016.","about":[{"title":"Introduction","content":"<p>Brain Sentiment by  Brain measures the public sentiment around US Equities. The data covers 4,500 US Equities, starting in August 2016, and is delivered on a daily frequency. This dataset is created by analyzing financial news using Natural Language Processing techniques while taking into account the similarity and repetition of news on the same topic. The sentiment score assigned to each stock is a value ranging from -1 (most negative) to +1 (most positive) that is updated with a daily frequency. The sentiment score corresponds to the average sentiment for each piece of news and it is available on two time scales; 7 days and 30 days. <\/p>\n\n<p>For more information, refer to Brain's <a href=\"https:\/\/braincompany.co\/assets\/files\/BSI_summary.pdf\">summary paper<\/a>.<\/p>"},{"title":"About the Provider","content":"<p><a href=\"https:\/\/braincompany.co\/bsr.html\">Brain<\/a> is a Research Company that creates proprietary datasets and algorithms for investment strategies, combining experience in financial markets with strong competencies in Statistics, Machine Learning, and Natural Language Processing. The founders share a common academic background of research in Physics as well as extensive experience in Financial markets. <\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nself.symbol = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nself.dataset_7day_symbol = self.AddData(BrainSentimentIndicator7Day, self.symbol).Symbol\nself.dataset_30day_symbol = self.AddData(BrainSentimentIndicator30Day, self.symbol).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\n_symbol = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n_dataset7DaySymbol = AddData&lt;BrainSentimentIndicator7Day&gt;(_symbol).Symbol;\n_dataset30DaySymbol = AddData&lt;BrainSentimentIndicator30Day&gt;(_symbol).Symbol;<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>August 2016<\/td><\/tr><tr><td>Asset Coverage<\/td><td>4,500 US Equities<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Sparse<\/td><\/tr><tr><td>Timezone<\/td><td>UTC<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nThe Brain Sentiment Indicator dataset enables researchers to incorporate sentiment from financial news sources into their strategies. Possible approaches to be tested include:\n<\/p>\n<ul><li>Buying when the public sentiment for a security is increasing<\/li>\n<li>Short selling when the public sentiment for a security is decreasing<\/li>\n<li>Scaling the position sizing of securities based on how many times they are mentioned in financial news articles<\/li> \n<\/ul><p>\nDisclaimer: The dataset is provided by the data provider for informational purposes only and does not constitute an offer to sell, a solicitation to buy, or a recommendation or endorsement for any security or strategy, nor do they constitute an offer to provide investment advisory or other services by the data provider.\n<\/p>\n<div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"><\/div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https:\/\/www.quantconnect.com\/terminal\/processCache?request=embedded_backtest_b84766e6d2b693bdc59d14c66e257c68.html\" scrolling=\"no\"><\/iframe><\/div><\/div>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.BrainSentimentIndicatorBase\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add Brain Sentiment data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass BrainSentimentDataAlgorithm(QCAlgorithm):\n    \n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2021, 7, 8)\n        self.SetCash(100000) \n        \n        self.symbol = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        self.dataset_symbol = self.AddData(BrainSentimentIndicator30Day, self.symbol).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class BrainSentimentDataAlgorithm : QCAlgorithm\n    {\n    \tprivate Symbol _symbol;\n    \tprivate Symbol _datasetSymbol;\n    \t\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2021, 7, 8);\n            SetCash(100000);\n            \n            _symbol = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            _datasetSymbol = AddData&lt;BrainSentimentIndicator30Day&gt;(_symbol).Symbol;\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    if data.ContainsKey(self.dataset_symbol):\n        point = data[self.dataset_symbol]\n        self.Log(f\"Data point received for {self.dataset_symbol} at {data.Time}. Sentiment: {point.Sentiment}\")<\/code><\/pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    if (data.ContainsKey(_datasetSymbol))\n    {\n        var point = data[_datasetSymbol];\n        Log($\"Data point received for {_datasetSymbol} at {data.Time}. Sentiment: {point.Sentiment}\");\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for Brain Sentiment by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.dataset_symbol, 100, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History&lt;BrainSentimentIndicator30Day&gt;(_datasetSymbol, 100, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.BrainSentimentIndicator30Day\"><\/div>"}]},{"name":"Brain ML Stock Ranking","url":"\/datasets\/brain-ml-stock-ranking","short_description":"Proprietary machine learning ranking algorithm for 1,000 US Equities. Data is provided on a daily frequency since January 2010.","about":[{"title":"Introduction","content":"<p>\nBrain ML Stock Ranking by Brain generates a daily ranking for US Equities based on their predicted ranking of future returns relative to the universe median across four-time horizons: next 2, 3, 5, 10, and 21 days (one trading month). The data covers 1,000 US Equities (universe updated yearly by including the largest 1,000 US companies of the previous year) starting in January 2010 and is delivered on a daily frequency. This dataset is created by a voting scheme of machine learning classifiers that non-linearly combine a variety of features with a series of techniques aimed at mitigating the well-known overfitting problem for financial data with a low signal-to-noise ratio. Examples of features are time-varying stock-specific features like price and volume-related metrics or fundamentals; time-fixed stock-specific features like the sector and other database information; market regime features such as volatility and other financial stress indicators; calendar features representing possible anomalies, for example, the month of the year. \n<\/p>\n<p>\nMore precisely the ML Stock Ranking score is related to the confidence of a Machine Learning classifier in predicting top or bottom quintile returns for the next N trading days (e.g. next 21 days) for a stock with the respect to the median of the universe and ranges from -1 to +1.\n<\/p>\n<p>\nA negative score means that the system is more confident that the stock belongs to the lower returns quintile, a positive score means that the system is more confident that the stock belongs to the higher returns quintile. It is important to note that the score has a meaning only if used to compare different stocks to perform a ranking.\n<\/p>\n<p>\nTypical use is to download the score for a large stock universe for a given day, e.g. 500 stocks or the full universe of 1000 stocks, order the stocks by mlAlpha score and go long the top K stocks, or build a long-short strategy going long the top K and short the bottom K stocks.\n<\/p>\n\n<p>For more information, refer to Brain's <a href=\"https:\/\/braincompany.co\/assets\/files\/BSI_summary.pdf\">summary paper<\/a>.<\/p>"},{"title":"About the Provider","content":"<p><a href=\"https:\/\/braincompany.co\/bsr.html\">Brain<\/a> is a Research Company that creates proprietary datasets and algorithms for investment strategies, combining experience in financial markets with strong competencies in Statistics, Machine Learning, and Natural Language Processing. The founders share a common academic background of research in Physics as well as extensive experience in Financial markets. <\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.DataSource import *\n\nself.symbol = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nself.dataset_symbol = self.AddData(BrainStockRanking2Day, symbol).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">using QuantConnect.DataSource;\n\n_symbol = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n_datasetSymbol = AddData&lt;BrainStockRanking2Day&gt;(_symbol).Symbol;<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 2010<\/td><\/tr><tr><td>Asset Coverage<\/td><td>4,000 US Equities<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Sparse<\/td><\/tr><tr><td>Timezone<\/td><td>UTC<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nThe Brain ML Stock Ranking dataset enables researchers to test strategies using the machine learning ranking provided by Brain also in combination with other datasets. Examples to be tested include:\n<\/p>\n<ul><li>Constructing a portfolio of securities with each security's weight in the portfolio reflecting its Brain ML Rank<\/li>\n<li>Test a strategy that goes long a certain number of  stocks at the top of the Brain ML Stock Ranking<\/li>\n<li>Build a market-neutral strategy based on  the top N and bottom N stocks ranked by the dataset<\/li>\n<\/ul><p>\nDisclaimer: The dataset is provided by the data provider for informational purposes only and do not constitute an offer to sell, a solicitation to buy, or a recommendation or endorsement for any security or strategy, nor do they constitute an offer to provide investment advisory or other services by the data provider.\n<\/p>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.BrainStockRankingBase\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add Brain ML Ranking data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.DataSource import *\n\nclass BrainMLRankingDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 7, 8)\n        self.SetCash(100000) \n        \n        self.symbol = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        self.dataset_symbol = self.AddData(BrainStockRanking2Day, symbol).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">using QuantConnect.DataSource;\n\nnamespace QuantConnect\n{\n    public class BrainMLRankingDataAlgorithm : QCAlgorithm\n    {\n    \tprivate Symbol _symbol;\n    \tprivate Symbol _datasetSymbol;\n    \t\n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 7, 8);\n            SetCash(100000);\n            \n            _symbol = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            _datasetSymbol = AddData&lt;BrainStockRanking2Day&gt;(symbol).Symbol;\n        }\n    }\n}<\/code><\/pre><\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(BrainStockRanking2Day)\n    for point in points.Values:\n        self.Log(f\"Ranking for {point.Symbol} at {data.Time}: {point.Rank}\")\n<\/code><\/pre>\n\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var points = data.Get&lt;BrainStockRanking2Day&gt;();\n    foreach (var point in points.Values)\n    {\n        Log($\"Ranking for {point.Symbol} at {data.Time}: {point.Rank}\");\n    }\n}<\/code><\/pre><\/div>"},{"title":"Historical Data","content":"<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for Brain ML Ranking by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.dataset_symbol, 365, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History&lt;BrainStockRanking2Day&gt;(_datasetSymbol, 365, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"Demonstration Algorithm","content":"<div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"><\/div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https:\/\/www.quantconnect.com\/terminal\/processCache?request=embedded_backtest_2fe7e709f4265ecb7b01cdc7d6c2202c.html\" scrolling=\"no\"><\/iframe><\/div><\/div>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.BrainSentiment\"><\/div>"}]},{"name":"Brain Language Metrics on Company Filings","url":"\/datasets\/brain-language-metrics-company-filings","short_description":"Proprietary NLP algorithm that monitors several language metrics on 10-K and 10-Q company reports for 3,000 US Equities. Data is provided on a daily frequency since January 2007.","about":[{"title":"Introduction","content":"<p>Brain Company Filings NLP monitors several language metrics on 10-K and 10-Q company reports for US Equities. The data covers 5,000 US Equities, starting in January 2010, and is delivered on a daily frequency. The dataset is made of two parts; the first one includes the language metrics of the most recent 10-K or 10-Q report for each firm, namely:<\/p>\n<ol><li>Financial sentiment<\/li>\n<li>Percentage of words belonging to financial domain classified by language types (e.g. \u201clitigious\u201d or \u201cconstraining\u201d language)<\/li>\n<li>Readability score<\/li>\n<li>Lexical metrics such as lexical density and richness<\/li>\n<li>Text statistics such as the report length and the average sentence length<\/li>\n<\/ol><p>The second part includes the differences between the two most recent 10-Ks or 10-Qs reports of the same period for each company, namely:<\/p>\n<ol><li>Difference of the various language metrics (e.g. delta sentiment, delta readability score, delta percentage of a specific language type etc.)<\/li>\n<li>Similarity metrics between documents, also with respect to a specific language type (for example similarity with respect to \u201clitigious\u201d language or \u201cuncertainty\u201d language)<\/li>\n<\/ol><p>The analysis is available for the whole report and for specific sections of the report (e.g. Risk Factors and MD&amp;A).<\/p>\n\n<p>For more information, refer to Brain's <a href=\"https:\/\/braincompany.co\/assets\/files\/BLM_CF_V2_summary.pdf\">summary paper<\/a>.<\/p>"},{"title":"About the Provider","content":"<p><a href=\"https:\/\/braincompany.co\/bsr.html\">Brain<\/a> is a Research Company that creates proprietary datasets and algorithms for investment strategies, combining experience in financial markets with strong competencies in Statistics, Machine Learning, and Natural Language Processing. The founders share a common academic background of research in Physics as well as extensive experience in Financial markets.<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.DataSource import *\n\nself.symbol = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nself.dataset_10k_symbol = self.AddData(BrainCompanyFilingLanguageMetrics10K , self.symbol).Symbol\nself.dataset_all_symbol = self.AddData(BrainCompanyFilingLanguageMetricsAll, self.symbol).Symbol\n<\/code><\/pre>\n<pre><code class=\"language-cs\">using QuantConnect.DataSource;\n\n_symbol = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n_dataset10KSymbol = AddData&lt;BrainCompanyFilingLanguageMetrics10K&gt;(_symbol).Symbol;\n_datasetAllSymbol = AddData&lt;BrainCompanyFilingLanguageMetricsAll&gt;(_symbol).Symbol;\n<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 2010<\/td><\/tr><tr><td>Asset Coverage<\/td><td>5,000 US Equities<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Sparse<\/td><\/tr><tr><td>Timezone<\/td><td>UTC<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nBrain Language Metrics on Company Filings dataset enables researchers to test strategies using language metrics and their differences gathered from 10K and 10Q reports. Possible applications to be tested include:\n<\/p>\n<p>Possible applications to be tested include:\n<\/p>\n<ul><li>Using the similarity among reports to determine position sizing of securities (some examples are discussed in the paper <a href=\"https:\/\/papers.ssrn.com\/sol3\/papers.cfm?abstract_id=1658471\">Lazy Prices, Cohen et al. 2018<\/a> or <a href=\"https:\/\/papers.ssrn.com\/sol3\/papers.cfm?abstract_id=3690461\">The Positive Similarity of Company Filings and the Cross-section of Stock Returns, M. Padys\u030ca\u0301k 2020<\/a><\/li>\n<li>Using the sentiment of the latest report to determine the portfolio allocation to give to each security in the universe<\/li>\n<li>Using levels of uncertainty, readability, or litigious language in the report to determine position sizing of securities<\/li>\n<\/ul><p>\nDisclaimer: The dataset is provided by the data provider for informational purposes only and does not constitute an offer to sell, a solicitation to buy, or a recommendation or endorsement for any security or strategy, nor do they constitute an offer to provide investment advisory or other services by the data provider.\n<\/p>\n<div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"><\/div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https:\/\/www.quantconnect.com\/terminal\/processCache?request=embedded_backtest_924348c60ea15eebd8bdd14aa223bba2.html\" scrolling=\"no\"><\/iframe><\/div><\/div>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.BrainSentimentIndicatorBase\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add Brain Company Filings NLP data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.DataSource import *\n\nclass BrainCompanyFilingNLPDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2010, 1, 1)\n        self.SetEndDate(2021, 7, 8)\n        self.SetCash(100000) \n        \n        self.symbol = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        self.dataset_symbol = self.AddData(BrainCompanyFilingLanguageMetrics10K , self.symbol).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">using QuantConnect.DataSource;\n\nnamespace QuantConnect\n{\n    public class BrainCompanyFilingNLPDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _symbol;\n        private Symbol _datasetSymbol;\n    \t\n        public override void Initialize()\n        {\n            SetStartDate(2010, 1, 1);\n            SetEndDate(2021, 7, 8);\n            SetCash(100000);\n            \n            _symbol = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            _datasetSymbol = AddData&lt;BrainCompanyFilingLanguageMetrics10K&gt;(_symbol).Symbol;\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    if data.ContainsKey(self.dataset_symbol):\n        point = data[self.dataset_symbol]\n        self.Log(f\"Data point received for {self.dataset_symbol} at {data.Time}. Sentiment: {point.ReportSentiment.Sentiment}\")<\/code>\n<\/pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    if (data.ContainsKey(_datasetSymbol))\n    {\n        var point = data[_datasetSymbol];\n        Log(f\"Data point received for {_datasetSymbol} at {data.Time}. Sentiment: {point.ReportSentiment.Sentiment}\");\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for Brain Company Filings NLP by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.dataset_symbol, 365, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History&lt;BrainCompanyFilingLanguageMetrics10K&gt;(_datasetSymbol, 365, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.BrainSentimentIndicatorBase\"><\/div>"}]},{"name":"US Coarse Universe","url":"\/datasets\/quantconnect-us-coarse-universe-constituents","short_description":"Universe of all US Equities with closing price and volume, generated each trading day since 1998. Dataset powers the Coarse Universe function of LEAN.","about":[{"title":"Introduction","content":"<p>The US Coarse Universe Constituents by QuantConnect is a daily universe of all trading stocks in the US for a given day, with the end of day price and volume. The data covers 30,000 US Equities in total, with approximately 8,000 equities per day. The data starts in January 1998 and is delivered each trading day. This dataset is created by taking the closing auction price tick from the daily L1 trade and quote exchange dumps.\n<\/p>"},{"title":"About the Provider","content":"<p>\nQuantConnect was founded in 2012 to serve quants everywhere with the best possible algorithmic trading technology. Seeking to disrupt a notoriously closed-source industry, QuantConnect takes a radically open-source approach to algorithmic trading. Through the QuantConnect web platform, more than 50,000 quants are served every month.\n<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">self.AddUniverse(self.CoarseSelectionFunction)<\/code><\/pre>\n<pre><code class=\"language-cs\">AddUniverse(CoarseSelectionFunction);<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 1998<\/td><\/tr><tr><td>Asset Coverage<\/td><td>30,000 US Equities<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Dense<\/td><\/tr><tr><td>Timezone<\/td><td>New York<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nThe QuantConnect US Security Master enables researchers to accurately design a universe of securities. Examples include: \n<\/p>\n<ul><li>Selecting securities with the largest dollar volume<\/li>\n<li>Selecting securities within a specific price range<\/li>\n<li>Selecting securities that have fundamental data available (requires an additional fine universe selection model)<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.Data.UniverseSelection.CoarseFundamental\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add US Coarse Universe Constituents data to your algorithm, use the AddUniverse() method to request the data. To select which constituents occupy the universe, you need to provide a selection function.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class USCoarseUniverseConstituentsDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 7, 1)\n        self.SetCash(100000)\n        \n        self.AddUniverse(self.CoarseSelectionFunction)\n<\/code><\/pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class USCoarseUniverseConstituentsDataAlgorithm : QCAlgorithm\n    {    \t\n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 7, 1);\n            SetCash(100000);\n            \n            AddUniverse(CoarseSelectionFunction);\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via the IEnumerable object that is piped into the user-defined selector function. Coarse data is available in daily resolution. You can see an example of using this data in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def CoarseSelectionFunction(self, coarse):\n\n    sortedByDollarVolume = sorted(coarse, key=lambda x: x.DollarVolume, reverse=True)[:3]\n    for cf in sortedByDollarVolume :\n        self.Debug(f\"{cf.EndTime} :: {cf.Symbol} : {cf.AdjustedPrice} :: {cf.DollarVolume}\")\n\n    return [ x.Symbol for x in sortedByDollarVolume]    \n\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\npublic IEnumerable&lt;Symbol&gt; CoarseSelectionFunction(IEnumerable&lt;CoarseFundamental&gt; coarse)\n{\n    var sortedByDollarVolume = coarse\n        .OrderByDescending(x =&gt; x.DollarVolume)\n        .Take(3).ToList();\n\n    foreach (var cf in sortedByDollarVolume)\n    {\n        Debug($\"{cf.EndTime} :: {cf.Symbol} : {cf.AdjustedPrice} :: {cf.DollarVolume}\");\n    }\n\n    return sortedByDollarVolume.Select(x =&gt; x.Symbol);\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can't request historical values for CoarseFundamental members, but you can request historical market data on the security by using the data Symbol object of the CoarseFundamental membrs. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for securities by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def CoarseSelectionFunction(self, coarse):\n\n    selectedSymbols = [x.Symbol \n        for x in sorted(coarse, key=lambda x: x.DollarVolume, reverse=True)[:3]]\n\n    history = History(selectedSymbols, 10, Resolution.Daily)\n\n    return selectedSymbols\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\npublic IEnumerable&lt;Symbol&gt; CoarseSelectionFunction(IEnumerable&lt;CoarseFundamental&gt; coarse)\n{\n    var selectedSymbols = coarse\n        .OrderByDescending(x =&gt; x.DollarVolume)\n        .Take(3)\n        .Select(x =&gt; x.Symbol)\n        .ToList();\n\n    var history = History(selectedSymbols, 10, Resolution.Daily);\n\n    return selectedSymbols;\n}<\/code><\/pre>\n<\/div>"},{"title":"Data Point Properties","content":"<div data-tree=\"QuantConnect.Data.UniverseSelection.CoarseFundamental\"><\/div>"}]},{"name":"US Equities Short Availability","url":"\/datasets\/atreyu-group-us-equities-short-availability","short_description":"Short Availability by Atreyu provides the available shares for open short positions in the US Equity market. The data covers 10,500 US Equities, starting in January 2018.","about":[{"title":"Introduction","content":"<p>US Equity Short Availability by Atreyu provides the available shares for open short positions in the US Equity market. The data covers 10,500 US Equity, starting in January 2018, and is delivered on a daily frequency. This dataset is created by Atreyu using information from the exchanges.\n<\/p>"},{"title":"About the Provider","content":"<p>\n<a href=\"https:\/\/www.atreyugroup.com\/\">Atreyu<\/a> is a high-tech electronic brokerage connecting quantitative managers to U.S. markets founded in 2015. They offer an institutional platform, modern APIs, expert support, and competitive pricing.\n\nAs a technology firm and introducing broker, Atreyu focuses on systematic managers whose expertise is designing trading models, not trading infrastructure.\n<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Requesting data:\nself.SetBrokerageModel(AtreyuBrokerageModel())\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\/\/ Requesting data:\nSetBrokerageModel(new AtreyuBrokerageModel())\n<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 2018<\/td><\/tr><tr><td>Asset Coverage<\/td><td>10,500 US Equities<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Sparse<\/td><\/tr><tr><td>Timezone<\/td><td>New York<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nThe QuantConnect US Equities Short Availability enables researchers to accurately design strategies harnessing information about short availability. Examples include: \n<\/p>\n<ul><li>Avoid placing orders that will be rejected<\/li>\n<li>Select securities based on how many shares are available to short<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"US Equities Short Availability data is Symbol\/decimal pair."}],"documentation":[{"title":"Requesting Data","content":"<p>To add Short Availability data to your algorithm, use the SetBrokerageModel() method to request the data as the ShortableProvider is a brokerage property. The AtreyuBrokerageModel includes the AtreyuShortableProvider ready to use. If we want to extend other brokerage models, we need to create a custom brokerage model. to use this data. For detailed documentation on using brokerage models, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/reality-modelling\">Reality Modelling<\/a>.\n\n<\/p><div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass ShortAvailabilityDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000) \n        aapl = self.AddEquity(\"AAPL\", Resolution.Minute).Symbol\n        self.SetBrokerageModel(InteractiveBrokersBrokerageModelWithShortable())\n \nclass InteractiveBrokersBrokerageModelWithShortable(InteractiveBrokersBrokerageModel):\n    def __init__(self):\n        super().__init__()\n        self.ShortableProvider = AtreyuShortableProvider(SecurityType.Equity, Market.USA)\n<\/code><\/pre>\n\n<pre><code class=\"language-cs\">\nusing QuantConnect.Data.Shortable;\nnamespace QuantConnect\n{\n    public class ShortAvailabilityDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n            var aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            SetBrokerageModel(new InteractiveBrokersBrokerageModelWithShortable());\n        }\n        \n        public override void OnEndOfDay(Symbol symbol) =&gt;\n            Plot(symbol, \"EOD\", (int)((Equity)Securities[symbol]).TotalShortableQuantity.Value);\n\t\t\n        public class InteractiveBrokersBrokerageModelWithShortable : InteractiveBrokersBrokerageModel\n        {\n            public InteractiveBrokersBrokerageModelWithShortable() : base()\n            {\n                ShortableProvider = new AtreyuShortableProvider(SecurityType.Equity, Market.USA);\n            }\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via QCAlgorithm methods: AllShortableSymbols, ShortableQuantity, and Shortable.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    # Gets all Symbols that are shortable, as well as the quantity shortable for them.\n    # Returns a Dictionary of quantity shortable (long) keyed by Symbol.\n    all_shortable_symbols = self.AllShortableSymbols()\n\n    # Gets the quantity shortable for the given asset. Zero if not shortable\n    shortable_quantity = self.ShortableQuantity(self.appl)\n\n    # Determines if the Symbol is shortable at the brokerage.\n    # Use a given order's quantity to check if it is currently shortable,\n    # taking into account current holdings and open orders.\n    is_shortable = self.Shortable(self.appl, 1000000)\n<\/code><\/pre>\n<pre><code class=\"language-cs\">namespace QuantConnect.Algorithm\n{    \n        public override void OnData(Slice data)\n        {\n            \/\/ Gets all Symbols that are shortable, as well as the quantity shortable for them.\n            \/\/ Returns a Dictionary of quantity shortable (long) keyed by Symbol.\n            var AllShortableSymbols = AllShortableSymbols();\n            \n            \/\/ Gets the quantity shortable for the given asset. Zero if not shortable\n            var shortableQuantity = ShortableQuantity(_appl);\n\n            \/\/ Determines if the Symbol is shortable at the brokerage.\n            \/\/ Use a given order's quantity to check if it is currently shortable,\n            \/\/ taking into account current holdings and open orders.\n            var isShortable = self.Shortable(_appl, 1000000);\n        }\n    }\n}<\/code><\/pre>\n<\/div>"}]},{"name":"US ETF Constituents","url":"\/datasets\/quantconnect-us-etf-constituents","short_description":"Equity constituent components and weightings for 2650 US ETF listings. Ideal for universe selection without imposing selection bias.","about":[{"title":"Introduction","content":"<p>The US ETF Constituents by QuantConnect tracks the constituents and weighting of US Equities in 2,650 ETF listings. The data starts in 2009 and is delivered on a daily basis. This dataset is created by tracking the host ETF websites and can be delayed by up to 1 week.\n<\/p>"},{"title":"About the Provider","content":"<p>\nQuantConnect was founded in 2012 to serve quants everywhere with the best possible algorithmic trading technology. Seeking to disrupt a notoriously closed-source industry, QuantConnect takes a radically open-source approach to algorithmic trading. Through the QuantConnect web platform, more than 160,000 quants are served every month.\n<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Requesting data:\nspy = self.AddEquity(\"SPY\").Symbol\nself.AddUniverse(self.Universe.ETF(spy, self.UniverseSettings, self.ETFConstituentsFilter))\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\/\/ Requesting data:\nvar spy = AddEquity(\"SPY\").Symbol;\nAddUniverse(Universe.ETF(spy, UniverseSettings, ETFConstituentsFilter));\n<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 2009<\/td><\/tr><tr><td>Asset Coverage<\/td><td>2,650 US ETF Listings<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Dense<\/td><\/tr><tr><td>Timezone<\/td><td>New York<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nETF Constituents lists provide an excellent source of tradable universes for strategies without selection bias. When the ETF constituents are used for universe selection, the original ETF can serve as an excellent benchmark for your strategy performance. Other applications are covered below:\n<\/p>\n<ul><li>Create index-tracking algorithm for customized passive portfolio management.<\/li>\n<li>Statistical arbitrage with the base ETF.<\/li>\n<li>Hedging by portfolio composed of some of the underlyings.<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.Data.UniverseSelection.ETFConstituentData\"><\/div>"},{"title":"","content":""}],"documentation":[{"title":"Requesting Data","content":"<p>To add US ETF Constituents data to your algorithm, use the AddUniverse() and Universe.ETF() methods to request the data. To select which constituents occupy the universe, you need to provide the ETF Symbol and a selection function.\n<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class ETFConstituentsDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2018, 1, 1)\n        self.SetEndDate(2020, 8, 25)\n        self.SetCash(100000)\n        \n        spy = self.AddEquity(\"SPY\").Symbol\n        self.UniverseSettings.Resolution = Resolution.Minute\n\n        self.AddUniverse(self.Universe.ETF(spy, self.UniverseSettings, self.ETFConstituentsFilter))\n<\/code><\/pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n   public class ETFConstituentsDataAlgorithm : QCAlgorithm\n   {\n       public override void Initialize()\n       {\n           SetStartDate(2018, 1, 1);\n           SetEndDate(2020, 8, 25);\n           SetCash(100000);\n\n           var spy = AddEquity(\"SPY\").Symbol;\n           UniverseSettings.Resolution = Resolution.Minute;\n\n           AddUniverse(Universe.ETF(spy, UniverseSettings, ETFConstituentsFilter));\n       }\n    }\n}\n<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via the IEnumerable object that is piped into the user-defined selection function. US ETF constituent data is available in daily resolution. You can see an example of using this data in the code below.\n<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def ETFConstituentsFilter(self, constituents):\n    for c in constituents:\n        self.Debug(f'{c.EndTime} :: {c.LastUpdate} :: {c.Weight} :: {c.SharesHeld} :: {c.MarketValue}')\n    return [x.Symbol for x in constituents]    \n <\/code><\/pre>\n<pre><code class=\"language-cs\">\npublic IEnumerable&lt;Symbol&gt; ETFConstituentsFilter(IEnumerable&lt;ETFConstituentData&gt; constituents)\n{\n    foreach (var c in constituents)\n    {\n        Debug($\"{c.EndTime} :: {c.LastUpdate} :: {c.Weight} :: {c.SharesHeld} :: {c.MarketValue}\");\n    }\n\n    return constituents.Select(c =&gt; c.Symbol);\n}\n<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can't request historical values for ETFConstituentData members, but you can request historical market data on the security by using the data Symbol object of the ETFConstituentData members. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for securities by using the History API.\n<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\ndef ETFConstituentsFilter(self, constituents):\n    # Get the 20 largest weighting constituents\n    selected = sorted([c for c in constituents if c.Weight],\n        key=lambda c: c.Weight, reverse=True)[:20]\n    selectedSymbols = [c.Symbol for c in selected]\n\n    history = History(selectedSymbols, 10, Resolution.Daily)\n                \n    return selectedSymbols \n<\/code><\/pre>\n<pre><code class=\"language-cs\">\nprivate IEnumerable&lt;Symbol&gt; ETFConstituentsFilter(IEnumerable&lt;ETFConstituentData&gt; constituents)\n{\n    \/\/ Get the 20 largest weighting constituents\n    var selectedSymbols = constituents\n        .OrderByDescending(c =&gt; c.Weight)\n        .Take(10)\n        .Select(c =&gt; c.Symbol)\n\n    var history = History(selectedSymbols, 10, Resolution.Daily);\n\n    return selectedSymbols;\n}\n<\/code><\/pre>\n<\/div>"},{"title":"Data Point Properties","content":"<div data-tree=\"QuantConnect.Data.UniverseSelection.ETFConstituentData\"><\/div>"},{"title":"","content":""}]},{"name":"US Cash Indexes","url":"\/datasets\/tickdata-us-cash-indexes","short_description":"Cash Index data for NDX, SPX and VIX since January 1998, Data is provided from tick to daily resolution. ","about":[{"title":"Introduction","content":"<p>US Cash Indexes by TickData covers 3 US Indexes: SPX, VIX, and NDX, starting on various dates from Jan 1998, and is delivered on daily down to tick resolution. TickData negotiates directly with exchanges for their official archive or partner with quality real-time data providers who have direct exchange connections, multiple, redundant ticker plants.\n<\/p>"},{"title":"About the Provider","content":"<p>\n<a href=\"https:\/\/www.tickdata.com\/\">TickData<\/a> was founded by a futures broker and a programmer in 1984 as the first company in the world to offer historical tick-by-tick prices on the futures and index markets. TickData provides access to comprehensive and detailed market data and analytics products in the financial industry covering Equities, Futures, Options, cash FOREX, and Cash indexes.\n<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Requesting data:\nvix = self.AddIndex(\"VIX\", Resolution.Daily).Symbol\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\/\/ Requesting data:\nvar vix = AddIndex(\"VIX\", Resolution.Daily).Symbol;\n<\/code><\/pre><\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>\tJan 1998*<\/td><\/tr><tr><td>Asset Coverage<\/td><td>3 US Indexes<\/td><\/tr><tr><td>Resolution<\/td><td>Tick, Second, Minute, Hour, Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Dense<\/td><\/tr><tr><td>Timezone<\/td><td>New York<\/td><\/tr><\/table>"},{"title":"US Cash Indexes","content":"<table class=\"table qc-table table-dense table-striped\"><tr><th>Ticker<\/th><th>Index<\/th><th>Expiry<\/th><th>Start Date<\/th><\/tr><tr><td>VIX<\/td> <td>S&amp;P500<\/td><td>30 Days<\/td><td>Jul 2003<\/td><\/tr><tr><td>SPX<\/td><td>S&amp;P500<\/td><td>-<\/td><td>Jan 1998<\/td><\/tr><tr><td>NDX<\/td><td>NASDAQ-100<\/td><td>-<\/td><td>Jan 1998<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<ul><li>Explore the difference between the Index and the ETF that tracks it<\/li>\n<li>Underlying asset for US Index Options strategies.<\/li>\n<li>Understanding the stock market's level of expected forward-looking volatility, also known as the \"fear index\". When the VIX starts moving higher, it is telling you that traders are getting nervous. When the VIX starts moving lower, it is telling you that traders are gaining confidence.<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<h4>TradeBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"><\/div>\n\n<h4>Tick Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add US Cash Index Options data to your algorithm, use the AddIndex() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on requesting market data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class USCashIndexAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        self.vix = self.AddIndex(\"VIX\").Symbol\n<\/code><\/pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class USCashIndexAlgorithm : QCAlgorithm\n    {\n        private Symbol _vix;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            \n            \/\/ Requesting data\n            _vix = AddIndex(\"VIX\").Symbol;\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass USCashIndexAlgorithm(QCAlgorithm):\n    def OnData(self, data):\n        # The marketData object can be a TradeBar or a List of Tick\n        marketData = data[self.vix]\n\n        # If it's TradeBar:\n        self.Log(f'Symbol: {self.vix} - Data: {marketData}')\n\n        # If it's Tick data:\n        for tick in marketData:\n            self.Log(f\"Time: {tick.EndTime}; Symbol: {self.symbol}; Tick: {tick}\")\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class USCashIndexAlgorithm : QCAlgorithm\n    {\n        public override void OnData(Slice data)\n        {\n            \/\/ The marketData object can be a TradeBar or a List of Tick\n            var marketData = data[_vix];\n\n            \/\/ If it's TradeBar:\n            Log($\"Symbol: {_vix} - Data: {marketData}\");\n\n            \/\/ If it's Tick data:\n            foreach (var tick in marketData)\n            {\n                 Log($\"Time: {tick.EndTime}; Symbol: {_vix} Tick: {tick}\");\n            }\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical US Cash Indexes data by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for US Equity Indexes by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.vix, 10, Resolution.Minute)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History(_vix, 10, Resolution.Minute);<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<h4>TradeBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"><\/div>\n\n<h4>Tick Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"><\/div>"}]},{"name":"US Index Options","url":"\/datasets\/algoseek-us-index-options","short_description":"Minute resolution European Option contract data for 3 US Indexes: SPX, VIX, and NDX.","about":[{"title":"Introduction","content":"<p>US Index Options by AlgoSeek covers European Option contracts for 3 US Indexes: SPX, VIX, and NDX, starting from Jun 2010, and is delivered on minute resolution. This dataset is created by monitoring Options Price Reporting Authority (OPRA) data feed, which consolidates last sale and quotation information originating from the national securities exchanges that have been approved by the Securities and Exchange Commission.<\/p>"},{"title":"About the Provider","content":"<p>\nAlgoSeek is a leading historical intraday US market data provider offering the most comprehensive and detailed market data and analytics products in the financial industry covering Equities, Futures, Options, cash FOREX, and Cryptocurrencies. AlgoSeek data is built for quantitative trading and machine learning.  For more information about AlgoSeek, visit <a href=\"https:\/\/www.algoseek.com\">algoseek.com<\/a>.\n<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">self.indexSymbol = self.AddIndex('VIX').Symbol\noption = self.AddIndexOption(self.indexSymbol)\noption.SetFilter(-2, 2, 0, 90)\nself.option_symbol = option.Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">_indexSymbol = AddIndex(\"VIX\").Symbol;\nvar option = AddIndexOption(_indexSymbol);\noption.SetFilter(-2, 2, 0, 90);\n_optionSymbol = option.Symbol;<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>June 2010<\/td><\/tr><tr><td>Asset Coverage<\/td><td>3 Index Options<\/td><\/tr><tr><td>Resolution<\/td><td>Minute<\/td><\/tr><tr><td>Data Density<\/td><td>Regular<\/td><\/tr><tr><td>Timezone<\/td><td>New York<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nThe AlgoSeek US Index Options dataset enables researchers to accurately design strategies for Index Options. Examples include: \n<\/p>\n<ul><li>Buying VIX call Options to hedge against upcoming volatility<\/li>\n<li>Buying VIX put Options to capture the natural downward price movement in the VIX index<\/li>\n<li>Buying SPX put Options to protect against downward price movement in the S&amp;P 500<\/li>\n<\/ul>"},{"title":"Data Point Properties","content":"<h4>TradeBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"><\/div>\n\n<h4>QuoteBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add US Index Options data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class IndexOptionsDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1);\n        self.SetEndDate(2021, 6, 1);\n        self.SetCash(1000000);\n        \n        self.indexSymbol = self.AddIndex('VIX').Symbol\n        option = self.AddIndexOption(self.indexSymbol)\n        option.SetFilter(-2, 2, 0, 90)\n        self.option_symbol = option.Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class IndexOptionsDataAlgorithm : QCAlgorithm\n    {\n    \tprivate Symbol _indexSymbol;\n    \tprivate Symbol _optionSymbol;\n\n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            \n            _indexSymbol = AddIndex(\"VIX\").Symbol;\n            var option = AddIndexOption(_indexSymbol);\n            option.SetFilter(-2, 2, 0, 90);\n            _optionSymbol = option.Symbol;\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in minute resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    chain = data.OptionChains.get(self.option_symbol)\n    if chain:\n        for contract in chain:\n            self.Log(f\"Bar received for {contract.Symbol} at {data.Time}\")\n<\/code><\/pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    if (data.OptionChains.ContainsKey(_optionSymbol))\n    {\n        var chain = data.OptionChains[_optionSymbol];\n\n        foreach (var contract in chain)\n        {\n            Log($\"Bar received for {contract.Symbol} at {data.Time}\");\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical Options data by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for US Index Options by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(contract.Symbol, 10, Resolution.Minute)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History(contract.Symbol, 10, Resolution.Minute);<\/code><\/pre>\n<\/div>"},{"title":"Data Point Attributes","content":"<h4>TradeBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"><\/div>\n\n<h4>QuoteBar Attributes<\/h4>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"><\/div>"}]},{"name":"US Fundamental Data","url":"\/datasets\/morning-star-us-fundamentals","short_description":"US Equities Fundamental data for use with LEAN for fine universe selection based on industry classification, and underlying company performance indicators.","about":[{"title":"Introduction","content":"<p>US Fundamental Data by Morningstar tracks US Equity fundamentals. The data covers 5,000 US Equities, starting in January 1998, and is delivered on a daily frequency. This dataset is created by using a combination of string matching, Regular Expressions, and Machine Learning to gather the fundamental data published by companies.<\/p>"},{"title":"About the Provider","content":"<p>\nMorningstar was founded by Joe Mansueto in 1984 with the goal of empowering investors by connecting people to the investing information and tools they need. Morningstar provides access extensive line of products and services for individual investors, financial advisors, asset managers, and retirement plan providers. Morningstar provides data on approximately 525,000 investment offerings including stocks, mutual funds, and similar vehicles, along with real-time global market data on nearly 18 million equities, indexes, futures, options, commodities, and precious metals, in addition to foreign exchange and Treasury markets. Morningstar also offers investment management services through its investment advisory subsidiaries, with $244 billion in assets under advisement or management as of 2021.<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">self.AddUniverse(self.SelectCoarse, self.SelectFine)<\/code><\/pre>\n<pre><code class=\"language-cs\">AddUniverse(SelectCoarse, SelectFine);<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 1998<\/td><\/tr><tr><td>Asset Coverage<\/td><td>5,000 US Equities<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Sparse<\/td><\/tr><tr><td>Timezone<\/td><td>New York<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nThe MorningStar US Fundamentals dataset enables researchers to design strategies harnessing fundamental data points. Examples include: \n<\/p>\n<ul><li>Ranking a universe of securities by a value factor like the book-to-market ratio and buying a subset of universe with the best factor ranking<\/li>\n<li>Using the Morningstar asset classification to target specific industries or to ensure your strategy is diversified across several sectors<\/li>\n<li>Trading securities that recently performed an IPO<\/li>\n\n<\/ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"><\/div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https:\/\/www.quantconnect.com\/terminal\/processCache?request=embedded_backtest_dae6cac9d770781a0dc8a9bb0b632d80.html\" scrolling=\"no\"><\/iframe><\/div><\/div>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.Data.Fundamental.FineFundamental\"><\/div>\n\n<div data-tree=\"QuantConnect.Data.Fundamental.MorningstarIndustryCode\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add US Fundamental data to your algorithm, you need to provide a fine universe selection method to AddUniverse() or AddUniverseSelection(). For detailed documentation on using fundamental data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/universes#Universes-Fundamentals-Selection\">Fundamentals Selection<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class MorningStarDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 7, 1)\n        self.SetCash(100000) \n        \n        self.AddUniverse(self.SelectCoarse, self.SelectFine)<\/code><\/pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class MorningStarDataAlgorithm : QCAlgorithm\n    {    \t\n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 7, 1);\n            SetCash(100000);\n            \n            AddUniverse(SelectCoarse, SelectFine);\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via the IEnumerable object that is piped into the user-defined selector function. The symbol objects that are selected by the coarse selection function are the symbols that comprise the Fine Fundamental IEnumerable object passed to the fine fundamental selection function. Fundamental data is available in daily resolution. You can see an example of using this data in the code below.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def SelectCoarse(self, coarse):\n    selected = [c for c in coarse if c.HasFundamentalData]\n    sorted_by_dollar_volume = sorted(selected, key=lambda c: c.DollarVolume, reverse=True)\n    return [ c.Symbol for c in sorted_by_dollar_volume[:20] ]\n    \ndef SelectFine(self, fine):\n    sorted_by_pe_ratio = sorted(fine, key=lambda f: f.ValuationRatios.PERatio, reverse=True)\n    return [ f.Symbol for f in sorted_by_pe_ratio[:5] ]<\/code><\/pre>\n<pre><code class=\"language-cs\">public IEnumerable&lt;Symbol&gt; SelectCoarse(IEnumerable&lt;CoarseFundamental&gt; coarse)\n{\n    return coarse.OrderByDescending(x =&gt; x.DollarVolume).Take(20).Select(x =&gt; x.Symbol);\n}\n        \npublic IEnumerable&lt;Symbol&gt; SelectFine(IEnumerable&lt;FineFundamental&gt; fine)\n{\n    return fine.OrderByDescending(x =&gt; x.ValuationRatios.PERatio).Take(5).Select(x =&gt; x.Symbol);\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>It's currently only possible to retrieve historical fundamental data from the Research environment. You can request historical fundamental data by using the data Symbol object. To learn more about historical fundamental data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/research\/fundamental-data#Fundamental-Data-Accessing-Historical-Fundamental-Data\">Accessing Historical Fundamental Data<\/a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical fundamental data by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = qb.GetFundamental(symbol, \"ValuationRatios.PERatio\", datetime(2021, 1, 1), datetime(2021, 7, 1))<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = qb.GetFundamental(symbol, \"ValuationRatios.PERatio\", new DateTime(2021, 1, 1), new DateTime(2021, 7, 1));<\/code><\/pre>\n<\/div>"},{"title":"Demonstration Algorithm","content":"<div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"><\/div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https:\/\/www.quantconnect.com\/terminal\/processCache?request=embedded_backtest_dae6cac9d770781a0dc8a9bb0b632d80.html\" scrolling=\"no\"><\/iframe><\/div><\/div>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.Data.Fundamental.FineFundamental\"><\/div>"}]},{"name":"Twitter Followers","url":"\/datasets\/quiver-quantitative-twitter-followers","short_description":"Corporate twitter follower growth over the preceding day, week, and month for use in socially based investment strategies.","about":[{"title":"Introduction","content":"<p>Twitter Followers Data by Quiver Quantitative tracks the number of followers on the official Twitter pages of US-listed companies. The data covers 2,000 equities, starting in May 2020, and is delivered on a daily frequency. This dataset is created by scraping the number of Twitter followers from the official Twitter page of the security.<\/p>"},{"title":"About the Provider","content":"<p><a href=\"https:\/\/www.quiverquant.com\/\">Quiver Quantitative<\/a> was founded by two college students in February 2020 with the goal of bridging the information gap between Wall Street and non-professional investors. Quiver allows retail investors to tap into the power of big data and have access to actionable, easy to interpret data that hasn\u2019t already been dissected by Wall Street.<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nfrom QuantConnect.DataSource import QuiverQuantTwitterFollowers\n\naapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nquiverQuantTwitterFollowers = self.AddData(QuiverQuantTwitterFollowers, aapl).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\nusing from QuantConnect.DataSource;\n\nvar aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\nvar quiverQuantTwitterFollowers = AddData&lt;QuiverQuantTwitterFollowers&gt;(aapl).Symbol;<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>May 2020<\/td><\/tr><tr><td>Asset Coverage<\/td><td>2,000 US Equities<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Sparse<\/td><\/tr><tr><td>Timezone<\/td><td>Chicago<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nThe Quiver Quantitative Twitter Followers dataset enables researchers to create strategies using the number of Twitter followers for companies. Examples include:\n<\/p>\n<ul><li>Trading securities that are on a upward\/downward trend for number of followers<\/li>\n<li>Trading the security that has the highest\/lowest increase in followers on a given day<\/li>\n<li>Trading securities with big changes in their follower count, prices, and volume<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.QuiverQuantTwitterFollowers\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add QuiverQuantTwitterFollowers data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.DataSource import *\nclass QuiverQuantTwitterFollowersDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        aapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        quiverQuantTwitterFollowers = self.AddData(QuiverQuantTwitterFollowers, aapl).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">using QuantConnect.DataSource;\nnamespace QuantConnect\n{\n    public class QuiverQuantTwitterFollowersDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            var aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            var quiverQuantTwitterFollowers = AddData&lt;QuiverQuantTwitterFollowers&gt;(aapl).Symbol;\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(QuiverQuantTwitterFollowers)\n    for kvp in points:\n        Log(f\u2019Symbol: {kvp.Key} - Followers: {kvp.Value.Followers} - Day Change: {kvp.Value.DayPercentChange}\u2019)\n<\/code><\/pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{    \n        public override void OnData(Slice data)\n        {\n            var points = data.Get&lt;QuiverQuantTwitterFollowers&gt;();\n            foreach (var point in points.Values)\n            {\n                Log($\"Symbol: {kvp.Key} - Followers: {kvp.Value.Followers} - Day Change: {kvp.Value.DayPercentChange}\");\n            }\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for Twitter followers by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(QuiverQuantTwitterFollowers, quiverQuantTwitterFollowers, 60, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History&lt;QuiverQuantTwitterFollowers&gt;(quiverQuantTwitterFollowers, 60, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"Demonstration Algorithm","content":"<div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"><\/div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https:\/\/www.quantconnect.com\/terminal\/processCache?request=embedded_backtest_b18217c5456dd958a43433382b1c48e5.html\" scrolling=\"no\"><\/iframe><\/div><\/div>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.QuiverQuantTwitterFollowers\"><\/div>"}]},{"name":"Estimize","url":"\/datasets\/extractalpha-estimize","short_description":"Estimize by ExtractAlpha estimates companies\u2019 financials include EPS, revenues, industry-specific KPIs, and macroeconomic indicators by crowdsourcing from 100,000+ prediction.","about":[{"title":"Introduction","content":"<p>Estimize by ExtractAlpha estimates companies\u2019 financials include EPS, revenues, industry-specific KPIs, macroeconomic indicators, and more. The data covers over 2,800 US-listed equities\u2019 EPS\/Revenue, over 200 company KPIs, 27 US and 55 international macroeconomic indicator datasets, and more, starting in January 2011, and is delivered on a daily frequency. This dataset is crowdsourced from a community of 100,000+ contributors via the data provider\u2019s web platform.\n<\/p>"},{"title":"About the Provider","content":"<p>\n<a href=\"https:\/\/extractalpha.com\/\">ExtractAlpha<\/a> was founded by Vinesh Jha in 2013 with the goal of providing alternative data for investors. ExtractAlpha's rigorously researched data sets and quantitative stock selection models leverage unique sources and analytical techniques, allowing users to gain an investment edge.\n<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Requesting data:\nself.aapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nestimize_consensus_symbol = self.AddData(EstimizeConsensus, self.aapl).Symbol\nestimize_estimate_symbol = self.AddData(EstimizeEstimate, self.aapl).Symbol\nestimize_release_symbol = self.AddData(EstimizeRelease, self.aapl).Symbol\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\/\/ Requesting data:\nvar aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\nvar estimizeConsensusSymbol = AddData&lt;EstimizeConsensus&gt;(aapl).Symbol;\nvar estimizeEstimateSymbol = AddData&lt;EstimizeEstimate&gt;(aapl).Symbol; \nvar estimizeReleaseSymbol = AddData&lt;EstimizeRelease&gt;(aapl).Symbol; <\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 2011<\/td><\/tr><tr><td>Asset Coverage<\/td><td>2,800 US Equities<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Sparse<\/td><\/tr><tr><td>Timezone<\/td><td>UTC<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nThe Estimize dataset by ExtractAlpha enables researchers to estimates the financial data of a company more accurately for alpha. Examples include:\n<\/p>\n<ul><li>Better fundamental estimates for ML regression\/classification.<\/li>\n<li>Arbitrage\/Sentiment trading on market \u201csurprise\u201d from ordinary expectations based on the better expectation by the dataset.<\/li>\n<li>Use industry-specific KPIs for specific individual sectors\u2019 return prediction.<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<h4>EstimizeConsensus Attributes<\/h4>\n<div data-tree=\"QuantConnect.DataSource.EstimizeConsensus\"><\/div>\n\n<h4>EstimizeEstimate Attributes<\/h4>\n<div data-tree=\"QuantConnect.DataSource.EstimizeEstimate\"><\/div>\n\n<h4>EstimizeRelease Attributes<\/h4>\n<div data-tree=\"QuantConnect.DataSource.EstimizeRelease\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add Estimize dataset by ExtractAlpha to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class ExtractAlphaEstimizeDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        self.aapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        estimize_consensus_symbol = self.AddData(EstimizeConsensus, self.aapl).Symbol\n        estimize_estimate_symbol = self.AddData(EstimizeEstimate, self.aapl).Symbol\n        estimize_release_symbol = self.AddData(EstimizeRelease, self.aapl).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class ExtractAlphaEstimizeDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n\n            var aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            var estimizeConsensusSymbol = AddData&lt;EstimizeConsensus&gt;(aapl).Symbol;\n            var estimizeEstimateSymbol = AddData&lt;EstimizeEstimate&gt;(aapl).Symbol; \n            var estimizeReleaseSymbol = AddData&lt;EstimizeRelease&gt;(aapl).Symbol;\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    consensus = data.Get(EstimizeConsensus)\n    for symbol, value in consensus.items():\n        self.Log(f\"\"\"Symbol: {symbol} - Consensus Source: {value.Source},\n                  Consensus Type: {value.Type}, Mean: {value.Mean}, \n                  Value: {value.Value}, High: {value.High}, Low: {value.Low}, \n                  Standard Deviation: {value.StandardDeviation}, Count: {value.Count},\n                  Fiscal Year: {value.FiscalYear}, Fiscal Quarter: {value.FiscalQuarter}\"\"\")\n\n    estimate = data.Get(EstimizeEstimate)\n    for symbol, value in estimate.items():\n        self.Log(f\"\"\"Symbol: {symbol} - EPS: {value.Eps}, Revenue: {value.Revenue},\n                  Fiscal Year: {value.FiscalYear}, Fiscal Quarter: {value.FiscalQuarter},\n                  User Name: {value.UserName}, Analyst Id: {value.AnalystId}, \n                  Flagged: {value.Flagged}\"\"\")\n\n    release = data.Get(EstimizeRelease)\n    for symbol, value in release.items():\n        self.Log(f\"\"\"Symbol: {symbol} - EPS: {value.Eps}, Revenue: {value.Revenue},\n                  Fiscal Year: {value.FiscalYear}, Fiscal Quarter: {value.FiscalQuarter},\n                  Wall Street EPS Estimate: {value.WallStreetEpsEstimate}, \n                  Wall Street Revenue Estimate: {value.WallStreetRevenueEstimate},\n                  Consensus Street EPS Estimate: {value.ConsensusEpsEstimate}, \n                  Consensus Revenue Estimate: {value.ConsensusRevenueEstimate},\n                  Consensus Weighted Street EPS Estimate: {value.ConsensusWeightedEpsEstimate}, \n                  Consensus Weighted Revenue Estimate: {value.ConsensusWeightedRevenueEstimate}\"\"\")\n<\/code><\/pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{    \n        public override void OnData(Slice data)\n        {\n            var consensus = data.Get&lt;EstimizeConsensus&gt;();\n            foreach (var kvp in consensus)\n            {\n                Log($@\"Symbol: {kvp.Key} - Consensus Source: {kvp.Value.Source},\n                      Consensus Type: {kvp.Value.Type}, Mean: {kvp.Value.Mean}, \n                      Value: {kvp.Value.Value}, High: {kvp.Value.High}, Low: {kvp.Value.Low}, \n                      Standard Deviation: {kvp.Value.StandardDeviation}, Count: {kvp.Value.Count},\n                      Fiscal Year: {kvp.Value.FiscalYear}, Fiscal Quarter: {kvp.Value.FiscalQuarter}\");\n            }\n            \n            var estimate = data.Get&lt;EstimizeEstimate&gt;();\n            foreach (var kvp in estimate)\n            {\n                Log($@\"Symbol: {kvp.Key} - EPS: {kvp.Value.Eps}, Revenue: {kvp.Value.Revenue},\n                      Fiscal Year: {kvp.Value.FiscalYear}, Fiscal Quarter: {kvp.Value.FiscalQuarter},\n                      User Name: {kvp.Value.UserName}, Analyst Id: {kvp.Value.AnalystId}, \n                      Flagged: {kvp.Value.Flagged}\");\n            }\n            \n            var release = data.Get&lt;EstimizeRelease&gt;();\n            foreach (var kvp in release)\n            {\n                Log($@\"Symbol: {kvp.Key} - EPS: {kvp.Value.Eps}, Revenue: {kvp.Value.Revenue},\n                      Fiscal Year: {kvp.Value.FiscalYear}, Fiscal Quarter: {kvp.Value.FiscalQuarter},\n                      Wall Street EPS Estimate: {kvp.Value.WallStreetEpsEstimate}, \n                      Wall Street Revenue Estimate: {kvp.Value.WallStreetRevenueEstimate},\n                      Consensus Street EPS Estimate: {kvp.Value.ConsensusEpsEstimate}, \n                      Consensus Revenue Estimate: {kvp.Value.ConsensusRevenueEstimate},\n                      Consensus Weighted Street EPS Estimate: {kvp.Value.ConsensusWeightedEpsEstimate}, \n                      Consensus Weighted Revenue Estimate: {kvp.Value.ConsensusWeightedRevenueEstimate}\");\n            }\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request the alternative dataset\u2019s historical data by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the alternative dataset\u2019s historical data by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nconsensus_history = self.History(estimize_consensus_symbol, 10, Resolution.Daily)\nestimate_history = self.History(estimize_estimate_symbol, 10, Resolution.Daily)\nrelease_history = self.History(estimize_release_symbol, 10, Resolution.Daily)\n\nhistory = self.History([estimize_consensus_symbol,\n                        estimize_estimate_symbol,\n                        estimize_release_symbol],\n                       10,\n                       Resolution.Daily)\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\nvar consensusHistory = History(new[]{estimizeConsensusSymbol}, 10, Resolution.Daily);\nvar estimateHistory = History(new[]{estimizeEstimateSymbol}, 10, Resolution.Daily);\nvar releaseHistory = History(new[]{estimizeReleaseSymbol}, 10, Resolution.Daily);\n\nvar history = History(new[]{estimizeConsensusSymbol,\n                            estimizeEstimateSymbol,\n                            estimizeReleaseSymbol},\n                           10,\n                           Resolution.Daily)\n<\/code><\/pre>\n<\/div>"}]},{"name":"True Beats","url":"\/datasets\/extractalpha-true-beats","short_description":"True Beats by ExtractAlpha are quantitative predictions of EPS and Revenues for U.S. equities based on expert opinion, historical performance and peer competition","about":[{"title":"Introduction","content":"<p>True Beats by ExtractAlpha are quantitative predictions of EPS and Revenues for U.S. Equities. The data covers a dynamic universe of around 4,000-5,000 US-listed Equities on a daily average. The data dates back to January 2000 and is delivered on a daily frequency. This dataset is created by incorporating the opinions of expert analysts, historical earnings, revenue trends for the company and its peers, and metrics on company earnings management.\n<\/p>"},{"title":"About the Provider","content":"<p>\n<a href=\"https:\/\/extractalpha.com\/\">ExtractAlpha<\/a> was founded by Vinesh Jha in 2013 with the goal of providing alternative data for investors. ExtractAlpha's rigorously researched data sets and quantitative stock selection models leverage unique sources and analytical techniques, allowing users to gain an investment edge.\n<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Requesting data:\naapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nextract_alpha_true_beats_symbol = self.AddData(ExtractAlphaTrueBeats, aapl).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\/\/ Requesting data:\nvar aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\nvar extractAlphaTrueBeatsSymbol = AddData&lt;ExtractAlphaTrueBeats&gt;(aapl).Symbol;<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 2000<\/td><\/tr><tr><td>Asset Coverage<\/td><td>Over 5,000 US Equities<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Sparse<\/td><\/tr><tr><td>Timezone<\/td><td>UTC<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nThe True Beats dataset by ExtractAlpha enables researchers to predict EPS and revenue of US-listed Equities for trading. Examples include:\n<\/p>\n<ul><li>Finding surprise in EPS or revenue for sentiment\/arbitrage trading<\/li>\n<li>Stock or sector selections based on EPS or revenue predictions<\/li>\n<li>Calculate expected return by valuation models based on EPS or revenue predictions (e.g. Black-Litterman)<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.ExtractAlphaTrueBeat\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add True Beats dataset by ExtractAlpha to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class ExtractAlphaTrueBeatsDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        aapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        extract_alpha_true_beats_symbol = self.AddData(ExtractAlphaTrueBeats, aapl).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class ExtractAlphaTrueBeatsDataAlgorithm: QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n\n            var aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            var extractAlphaTrueBeatsSymbol = AddData&lt;ExtractAlphaTrueBeats&gt;(aapl).Symbol;\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(ExtractAlphaTrueBeats)\n    for kvp in points:\n        for trueBeat in kvp.Value:\n            self.Log(f\"\"\"Symbol: {point.Key} - Fiscal Period: {trueBeat.FiscalPeriod.Annual}\n\t\t             - Analyst Estimates Count: {trueBeat.AnalystEstimatesCount} - True Beats: {trueBeat.TrueBeat}\n\t\t             - Expert Beats: {trueBeat.ExpertBeat} - Trend Beats: {trueBeat.TrendBeat}\n\t\t             - Management Beats: {trueBeat.ManagementBeat}\"\"\")  \n<\/code><\/pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var points = data.Get&lt;ExtractAlphaTrueBeats&gt;();\n    foreach (var point in points)\n    {\n        foreach (ExtractAlphaTrueBeat trueBeat in point.Value)\n        {\n            Log($@\"Symbol: {point.Key} - Fiscal Period: {trueBeat.FiscalPeriod.Annual} - \n\t\t            Analyst Estimates Count: {trueBeat.AnalystEstimatesCount} - True Beats: {trueBeat.TrueBeat}\n\t\t            - Expert Beats: {trueBeat.ExpertBeat} - Trend Beats: {trueBeat.TrendBeat}\n\t\t            - Management Beats: {trueBeat.ManagementBeat}\");\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request the alternative dataset\u2019s historical data by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the alternative dataset\u2019s historical data by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(extract_alpha_true_beats_symbol, 10, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History(new[]{extractAlphaTrueBeatsSymbol}, 10, Resolution.Daily);<\/code><\/pre>\n<\/div>"}]},{"name":"Tactical","url":"\/datasets\/extractalpha-tactical","short_description":"Tactical by Extract Alpha is a likelihood score of short-term price movements drive by technical indicators. ","about":[{"title":"Introduction","content":"<p>Tactical by ExtractAlpha is a stock selection model scoring algorithm designed to capture the technical dynamics of single US Equities over one to ten trading day horizons. It can assist a longer-horizon investor in timing their entry or exit points, or be used in combination with existing systematic or qualitative strategies with similar holding periods.\n<br \/><br \/>\nThe data covers a dynamic universe of around 4,700 US Equities on a daily average, starting in January 2000, and is delivered on a daily frequency. The Tactical dataset expands upon simple reversal factors in several key factors, to identify stocks that are likely to trend or reverse, and by incorporating liquidity and seasonality effects.\n\n<\/p>"},{"title":"About the Provider","content":"<p>\n<a href=\"https:\/\/extractalpha.com\/\">ExtractAlpha<\/a> was founded by Vinesh Jha in 2013 with the goal of providing alternative data for investors. ExtractAlpha's rigorously researched data sets and quantitative stock selection models leverage unique sources and analytical techniques, allowing users to gain an investment edge.\n<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Requesting data:\naapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nextract_alpha_tactical_model_symbol = self.AddData(ExtractAlphaTacticalModel, aapl).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\/\/ Requesting data:\nvar aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\nvar extractAlphaTacticalModelSymbol = AddData&lt;ExtractAlphaTacticalModel&gt;(aapl).Symbol;<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 2000<\/td><\/tr><tr><td>Asset Coverage<\/td><td>over 5,000 US Equities<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Sparse<\/td><\/tr><tr><td>Timezone<\/td><td>UTC<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nThe Tactical dataset by ExtractAlpha enables researchers to gain insight into short-term stock dynamics for trading. Examples include:\n<\/p>\n<ul><li>Optimizing entry and exit times in a portfolio construction model.<\/li>\n<li>Using the raw factor values as technical indicators.<\/li>\n<li>Inputting the data into machine learning classifier models as trend\/reversal labels.<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.ExtractAlphaTacticalModel\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add Tactical dataset by ExtractAlpha to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass ExtractAlphaTacticalModelDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        aapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        extract_alpha_tactical_model_symbol = self.AddData(ExtractAlphaTacticalModel, aapl).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class ExtractAlphaTacticalModelDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n\n            var aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            var extractAlphaTacticalModelSymbol = AddData&lt;ExtractAlphaTacticalModel&gt;(aapl).Symbol;\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(ExtractAlphaTacticalModel)\n    for kvp in points:\n        self.Log(f'Symbol: {kvp.Key} - Reversal: {kvp.Value.Reversal} - Factor Momentum: {kvp.Value.FactorMomentum} - '\n            f'Liquidity Shock: {kvp.Value.LiquidityShock} - Seasonality: {kvp.Value.Seasonality} - Score: {kvp.Value.Score}')\n<\/code><\/pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{    \n    public override void OnData(Slice data)\n    {\n        var points = data.Get&lt;ExtractAlphaTacticalModel&gt;();\n        foreach (var point in points.Values)\n        {\n            Log($@\"Symbol: {kvp.Key} - Reversal: {kvp.Value.Reversal} - Factor Momentum: {kvp.Value.FactorMomentum} - \n                Liquidity Shock: {kvp.Value.LiquidityShock} - Seasonality: {kvp.Value.Seasonality} - Score: {kvp.Value.Score}\");\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request the alternative dataset\u2019s historical data by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the alternative dataset\u2019s historical data by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(extract_alpha_tactical_model_symbol, 10, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History(new[]{extractAlphaTacticalModelSymbol}, 10, Resolution.Daily);<\/code><\/pre>\n<\/div>"}]},{"name":"Cross Asset Model","url":"\/datasets\/extractalpha-cross-asset-model","short_description":"Cross Asset Model by ExtractAlpha is a scoring algorithm based on put-call spread of equity options, volatility skewness, and volume.","about":[{"title":"Introduction","content":"<p>Cross Asset Model by ExtractAlpha is a stock selection model scoring algorithm designed to capture the information contained in Options market prices and volumes. Since the Options market has a higher proportion of institutional traders than the Equities market, the Options market is composed of investors who are more informed and information-driven on average. \n<br \/><br \/>\nThe data covers a dynamic universe of over 3,000 US Equities, starting in July 2005, and is delivered on a daily frequency. This dataset is created by feature engineering on the Options market put-call spread, volatility skewness, and volume.<\/p>"},{"title":"About the Provider","content":"<p>\n<a href=\"https:\/\/extractalpha.com\/\">ExtractAlpha<\/a> was founded by Vinesh Jha in 2013 with the goal of providing alternative data for investors. ExtractAlpha's rigorously researched data sets and quantitative stock selection models leverage unique sources and analytical techniques, allowing users to gain an investment edge.\n<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Requesting data:\naapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nextract_alpha_cross_asset_model_symbol = self.AddData(ExtractAlphaCrossAssetModel, aapl).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\/\/ Requesting data:\nvar aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\nvar extractAlphaCrossAssetModelSymbol = AddData&lt;ExtractAlphaCrossAssetModel&gt;(aapl).Symbol;<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>July 2005<\/td><\/tr><tr><td>Asset Coverage<\/td><td>Over 3,000 US Equities<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Sparse<\/td><\/tr><tr><td>Timezone<\/td><td>UTC<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nThe Cross Asset Model dataset by ExtractAlpha enables researchers to utilize Options market information for alpha extraction. Examples include:\n<\/p>\n<ul><li>Predicting price and volatility changes in Equities.<\/li>\n<li>Signaling arbitrage opportunities between Options and underlying assets.<\/li>\n<li>Using it as a stock selection indicator.<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.ExtractAlphaCrossAssetModel\"><\/div>"},{"title":"","content":""}],"documentation":[{"title":"Requesting Data","content":"<p>To add the Cross Asset Model dataset by ExtractAlpha to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class ExtractAlphaCrossAssetModelDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        aapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        extract_alpha_cross_asset_model_symbol = self.AddData(ExtractAlphaCrossAssetModel, aapl).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class ExtractAlphaCrossAssetModelDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n\n            var aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            var extractAlphaCrossAssetModelSymbol = AddData&lt;ExtractAlphaCrossAssetModel&gt;(aapl).Symbol;\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to the slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(ExtractAlphaCrossAssetModel)\n    for kvp in points:\n        self.Log(f\"Symbol: {kvp.Key} - Score: {kvp.Value.Score} - Slow Score: {kvp.Value.ScoreSlow}\")\n<\/code><\/pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{    \n    public override void OnData(Slice data)\n    {\n        var points = data.Get&lt;ExtractAlphaCrossAssetModel&gt;();\n        foreach (var point in points.Values)\n        {\n            Log($\"Symbol: {kvp.Key} - Score: {kvp.Value.Score} - Slow Score: {kvp.Value.ScoreSlow}\");\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request the alternative dataset\u2019s historical data by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the alternative dataset\u2019s historical data by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(extract_alpha_cross_asset_model_symbol, 10, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = algorithm.History(new[]{extractAlphaCrossAssetModelSymbol}, 10, Resolution.Daily);<\/code><\/pre>\n<\/div>"}]},{"name":"Composite Factor Bundle","url":"\/datasets\/kavout-composite-factor-bundle","short_description":"Daily proprietary signals for quality, value, momentum, growth, and low volatility. Used by leading quant funds globally.","about":[{"title":"Introduction","content":"<p>\nKavout signals are machine-learning enhanced scores that capture the returns of systematic factors such as quality, value, momentum, growth, and low volatility. There are many different anomalies discovered by researchers and practitioners across these factor categories, and there is no good common definition of each style across the literature. Kavout creates an ensemble score for each style that gauges the different factors considered in the literature and industry practice.\n<\/p>\n\n<p>\nIn this data set, you will find Kavout proprietary signals for quality, value, momentum, growth, and low volatility, which have been adopted by some of the multi-billion dollar quant funds in New York and London. Each signal is generated by an ensemble model consisting of inputs from hundreds of anomalies. The data is generated on a daily basis and covers all the stocks traded in US major markets such as NYSE and Nasdaq since 2003. You could leverage this abundant set of signals to construct and backtest your strategies.\n<\/p>"},{"title":"About the Provider","content":"<p>\nKavout was created by ex-Googlers and the founding team used to work at Google, Microsoft, Baidu, and financial firms with a proven track record of building many mission-critical machine learning systems where billions of data points were processed in real-time to predict the best outcome for core search ranking, ads monetization, recommendations, and trading platforms.\n<\/p>\n<p>\nTheir mission is to build machine investing solutions to find alpha with adaptive learning algorithms and to create an edge by assimilating vast quantities of complex data through the latest AI and Machine Learning methods to generate signals to uncover hidden, dynamic, and nonlinear patterns in the financial markets.\n<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Requesting data:\naapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nkavout_composite_factor_bundle_symbol = self.AddData(KavoutCompositeFactorBundle, aapl).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\/\/ Requesting data:\nvar aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\nvar kavoutCompositeFactorBundleSymbol = AddData&lt;KavoutCompositeFactorBundle&gt;(aapl).Symbol;<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 2003<\/td><\/tr><tr><td>Asset Coverage<\/td><td>8,000 US Equities<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Regular<\/td><\/tr><tr><td>Timezone<\/td><td>UTC<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nThe Kavout Composite Factor Bundle dataset enables researchers to access the performance of 5 different factors in order to engineer strategies. Examples include: \n<\/p>\n<ul><li>Performing return-risk optimization based on performance and volatility scoring.<\/li>\n<li>Weighing stocks based on regression analysis in factor-vector space.<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.KavoutCompositeFactorBundle\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add the Composite Factor Bundle data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass KavoutCompositeFactorBundleAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        aapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        kavout_composite_factor_bundle_symbol = self.AddData(KavoutCompositeFactorBundle, aapl).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect.Algorithm.CSharp.AltData\n{\n    public class KavoutCompositeFactorBundleAlgorithm: QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n\n            var aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            var kavoutCompositeFactorBundleSymbol = AddData&lt;KavoutCompositeFactorBundle&gt;(aapl).Symbol;\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to the slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(KavoutCompositeFactorBundle)\n    for kvp in points:\n        Log(f'Symbol: {kvp.Key} - Growth: {kvp.Value.Growth} - Low Volatility: {kvp.Value.LowVolatility}'\n            f'Momentum: {kvp.Value.Momentum} - Quality: {kvp.Value.Quality} - Value Factor: {kvp.Value.ValueFactor}')\n<\/code><\/pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{    \n    public override void OnData(Slice data)\n    {\n        var points = data.Get&lt;KavoutCompositeFactorBundle&gt;();\n        foreach (var point in points.Values)\n        {\n            Log($@\"Symbol: {kvp.Key} - Growth: {kvp.Value.Growth} - Low Volatility: {kvp.Value.LowVolatility}\n                Momentum: {kvp.Value.Momentum} - Quality: {kvp.Value.Quality} - Value Factor: {kvp.Value.ValueFactor}\");\n        }\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request the alternative dataset\u2019s historical data by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the alternative dataset\u2019s historical data by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(kavout_composite_factor_bundle_symbol, 10, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History(new[]{kavoutCompositeFactorBundleSymbol}, 10, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"","content":""},{"title":"","content":""}]},{"name":"Bitcoin Metadata","url":"\/datasets\/bitcoin-metadata","short_description":"Bitcoin processing fundamental data such as hash rate, miner revenue, and number of transactions.","about":[{"title":"Introduction","content":"<p> The Bitcoin Metadata dataset by Blockchain provides 23 fundamental metadata of Bitcoin directly fetched from the Bitcoin blockchain, dated back from January 2009 and delivered on a daily frequency. This dataset contains mining statistics like hash rate and miner revenue; transaction metadata like transaction per block, transaction fee and number addresses; and blockchain metadata like blockchain size and block size, etc.\n<\/p>"},{"title":"About the Provider","content":"<p>\n<a href=\"https:\/\/www.blockchain.com\">Blockchain<\/a> is a website that publishes data related to Bitcoin. It has been online since 2011 and publishes the Bitcoin Metadata history back to 2009.\n<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Requesting data:\nself.btcusd = self.AddCrypto(\"BTCUSD\", Resolution.Daily, Market.Bitfinex).Symbol\nbitcoin_metadata_symbol = self.AddData(BitcoinMetadata, self.btcusd).Symbol <\/code><\/pre>\n<pre><code class=\"language-cs\">\/\/ Requesting data:\nbtcusd = AddCrypto(\"BTCUSD\", Resolution.Daily, Market.Bitfinex).Symbol;\nbitcoinMetadataSymbol = AddData&lt;BitcoinMetadata&gt;(btcusd).Symbol; <\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 2009<\/td><\/tr><tr><td>Asset Coverage<\/td><td>1 Blockchain (BTC)<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Regular<\/td><\/tr><tr><td>Timezone<\/td><td>UTC<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nThe Bitcoin Metadata dataset by Blockchain enables researchers to incorporate metadata from the Bitcoin blockchain into their strategies. Examples include:\n<\/p>\n<ul><li>Comparing mining and transaction statistics to provide insight on the supply-demand relationship of the Bitcoin blockchain service.<\/li>\n<li>Measuring the activity and popularity of the Bitcoin blockchain to predict the price movements of the Cryptocurrency.<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.BitcoinMetadata\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p> To add Bitcoin Metadata dataset to your algorithm, use the AddData() method to request the data. Note that the data has to be accessed by the symbol \u201cBTCUSD\u201d. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\"> class BlockchainBitcoinMetadataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        self.btcusd = self.AddCrypto(\"BTCUSD\", Resolution.Daily, Market.Bitfinex).Symbol\n        bitcoin_metadata_symbol = self.AddData(BitcoinMetadata, self.btcusd).Symbol <\/code><\/pre>\n<pre><code class=\"language-cs\"> namespace QuantConnect\n{\n    public class BlockchainBitcoinMetadataAlgorithm: QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n\n            var btcusd = AddCrypto(\"BTCUSD\", Resolution.Daily, Market.Bitfinex).Symbol;\n            var bitcoinMetadataSymbol = AddData&lt;BitcoinMetadata&gt;(btcusd).Symbol;\n        }\n    }\n}\n<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\"> def OnData(self, data):\n    points = data.Get(BlockchainBitcoinData)\n    for kvp in points:\n        Log(f\"\"\"{Symbol} - Difficulty {Difficulty},\n                My Wallet Number of Users {MyWalletNumberofUsers},\n                Average Block Size {AverageBlockSize},\n                Blockchain Size {BlockchainSize},\n                Median Transaction Confirmation Time {MedianTransactionConfirmationTime},\n                Miners Revenue {MinersRevenue},\n                Hash Rate {HashRate},\n                Cost Per Transaction {CostPerTransaction},\n                Cost Percent of Transaction Volume {CostPercentofTransactionVolume},\n                Estimated Transaction Volume USD {EstimatedTransactionVolumeUSD},\n                Estimated Transaction Volume {EstimatedTransactionVolume},\n                Total Output Volume {TotalOutputVolume},\n                Number of Transaction per Block {NumberofTransactionperBlock},\n                Number of Unique Bitcoin Addresses Used {NumberofUniqueBitcoinAddressesUsed},\n                Number of Transactions Excluding Popular Addresses {NumberofTransactionsExcludingPopularAddresses},\n                Total Number of Transactions {TotalNumberofTransactions},\n                Number of Transactions {NumberofTransactions},\n                Total Transaction Fees USD {TotalTransactionFeesUSD},\n                Total Transaction Fees {TotalTransactionFees},\n                Market Capitalization {MarketCapitalization},\n                Total Bitcoins {TotalBitcoins},\n                My Wallet Number of Transaction Per Day {MyWalletNumberofTransactionPerDay},\n                My Wallet Transaction Volume {MyWalletTransactionVolume}\"\"\")\n<\/code><\/pre>\n<pre><code class=\"language-cs\"> public override void OnData(Slice data)\n{\n    var points = data.Get&lt;BitcoinMetadata&gt;();\n    foreach (var point in points.Values)\n    {\n        Log($@\"{Symbol} - Difficulty {Difficulty},\n                My Wallet Number of Users {MyWalletNumberofUsers},\n                Average Block Size {AverageBlockSize},\n                Blockchain Size {BlockchainSize},\n                Median Transaction Confirmation Time {MedianTransactionConfirmationTime},\n                Miners Revenue {MinersRevenue},\n                Hash Rate {HashRate},\n                Cost Per Transaction {CostPerTransaction},\n                Cost Percent of Transaction Volume {CostPercentofTransactionVolume},\n                Estimated Transaction Volume USD {EstimatedTransactionVolumeUSD},\n                Estimated Transaction Volume {EstimatedTransactionVolume},\n                Total Output Volume {TotalOutputVolume},\n                Number of Transaction per Block {NumberofTransactionperBlock},\n                Number of Unique Bitcoin Addresses Used {NumberofUniqueBitcoinAddressesUsed},\n                Number of Transactions Excluding Popular Addresses {NumberofTransactionsExcludingPopularAddresses},\n                Total Number of Transactions {TotalNumberofTransactions},\n                Number of Transactions {NumberofTransactions},\n                Total Transaction Fees USD {TotalTransactionFeesUSD},\n                Total Transaction Fees {TotalTransactionFees},\n                Market Capitalization {MarketCapitalization},\n                Total Bitcoins {TotalBitcoins},\n                My Wallet Number of Transaction Per Day {MyWalletNumberofTransactionPerDay},\n                My Wallet Transaction Volume {MyWalletTransactionVolume}\");\n    }\n}\n<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request historical Options data by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for US Options by using the History API.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(bitcoin_metadata_symbol, 10, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History(new[]{bitcoinMetadataSymbol}, 10, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"Demonstration Algorithm","content":"<div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"><\/div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https:\/\/www.quantconnect.com\/terminal\/processCache?request=embedded_backtest_6ed5685f4e52917fec89e5d7c7cc2f67.html\" scrolling=\"no\"><\/iframe><\/div><\/div>"}]},{"name":"NFT Sales","url":"\/datasets\/cryptoslam-nft-sales","short_description":"NFT sales data from 5 blockchains, provided by CryptoSlam! and cached by QuantConnect.","about":[{"title":"Introduction","content":"<p> The NFT Sales dataset by CryptoSlam! provides Non-Fungible Tokens (NFT) sales volume data in various blockchain marketplaces. The data covers 5 blockchains that have their own cryptocurrencies open for trading, including Ethereum (ETH), Wax (WAX), Solana (SOL, binance), Polygon (MATIC, binance) and Theta (THETA, binance). The data dates back to June 2017 and is delivered on a daily frequency. This dataset fetches the number of transactions, unique buyers, unique sellers and the dollar volume of NFT transactions on all secondary marketplaces tracked by CryptoSlam, which includes owner-to-owner sales only (not initial sales from the product directly to the owners).\n<\/p>"},{"title":"About the Provider","content":"<p>\n<a href=\"http:\/\/cryptoslam.io\/\">CryptoSlam!<\/a> is an NFT industry data aggregator backed by Mark Cuban. Features project analytics, NFT values, rarity, scarcity, most popular collections, activity history &amp; more.\n<\/p>"},{"title":"Getting Started","content":"<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Requesting data:\nself.ethusd = self.AddCrypto(\"ETHUSD\", Resolution.Daily, Market.Bitfinex).Symbol\ncryptoSlam_nft_sales_symbol = self.AddData(CryptoSlamNFTSales, self.ethusd).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">\/\/ Requesting data:\nethusd = AddCrypto(\"ETHUSD\", Resolution.Daily, Market.Bitfinex).Symbol;\ncryptoSlamNFTSalesSymbol = AddData&lt;CryptoSlamNFTSales&gt;(ethusd).Symbol;<\/code><\/pre>\n<\/div>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>June 2017<\/td><\/tr><tr><td>Asset Coverage<\/td><td>5 Blockchains with Cryptos<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Sparse<\/td><\/tr><tr><td>Timezone<\/td><td>UTC<\/td><\/tr><\/table>"},{"title":"Supported Blockchains and Symbols","content":"<table class=\"table qc-table table-dense table-striped\"><tr><th>Symbol<\/th><th>Blockchain represented<\/th><th>Market<\/th><th>Start Date<\/th><\/tr><tr><td>ETHUSD<\/td> <td>Ethereum<\/td><td>Coinbase, Bitfinex<\/td><td>Jun 2017<\/td><\/tr><tr><td>WAXUSD<\/td><td>Wax<\/td><td>Bitfinex<\/td><td>Mar 2020<\/td><\/tr><tr><td>SOLBUSD<\/td><td>Solana<\/td><td>Binance<\/td><td>Aug 2021<\/td><\/tr><tr><td>MATICBUSD<\/td><td>Polygon<\/td><td>Binance<\/td><td>Mar 2021<\/td><\/tr><tr><td>THETABUSD<\/td><td>Theta<\/td><td>Binance<\/td><td>Jun 2021<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>The NFT Sales dataset by CryptoSlam! enables researchers to incorporate NFT sales information into their strategies. Examples include:<\/p>\n<ul><li>Studying the correlation between the supply-demand trend of NFTs and the price changes of the underlying cryptocurrencies.<\/li>\n<li>Measuring the activity\/popularity blockchains to provide insight on the future price movements of the underlying cryptocurrencies.<\/li><\/ul>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.DataSource.CryptoSlamNFTSales\"><\/div>"}],"documentation":[{"title":"Requesting Data","content":"<p>To add NFT Sales dataset by CryptoSlam! to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/importing-custom-data\">Importing Custom Data<\/a>.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class CryptoSlamNFTSalesAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        self.ethusd = self.AddCrypto(\"ETHUSD\", Resolution.Daily, Market.Bitfinex).Symbol\n        cryptoSlam_nft_sales_symbol = self.AddData(CryptoSlamNFTSales, self.ethusd).Symbol<\/code><\/pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class CryptoSlamNFTSalesAlgorithm: QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n\n            var ethusd = AddCrypto(\"ETHUSD\", Resolution.Daily, Market.Bitfinex).Symbol;\n            var cryptoSlamNFTSalesSymbol = AddData&lt;CryptoSlamNFTSales&gt;(ethusd).Symbol;\n        }\n    }\n}\n<\/code><\/pre>\n<\/div>"},{"title":"Accessing Data","content":"<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(CryptoSlamNFTSales)\n    for kvp in points:\n        Log(f\"\"\"Symbol: {kvp.Key} - Number of Transactions: {TotalTransactions} - Number of Unique Buyers: {UniqueBuyers}\n             - Number of Unique Sellers: {UniqueSellers} - Total Transaction Value (in USD): {TotalPriceUSD}\"\"\")\n<\/code><\/pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var points = data.Get&lt;CryptoSlamNFTSales&gt;();\n    foreach (var point in points.Values)\n    {\n        Log($@\"Symbol: {kvp.Key} - Number of Transactions: {TotalTransactions} - Number of Unique Buyers: {UniqueBuyers}\n             - Number of Unique Sellers: {UniqueSellers} - Total Transaction Value (in USD): {TotalPriceUSD}\");\n    }\n}\n<\/code><\/pre>\n<\/div>"},{"title":"Historical Data","content":"<p>You can request NFT Sales dataset by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https:\/\/www.quantconnect.com\/docs\/algorithm-reference\/historical-data\">Historical Data<\/a> documentation.<\/p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(cryptoSlam_nft_sales_symbol, 10, Resolution.Daily)<\/code><\/pre>\n<pre><code class=\"language-cs\">var history = History(new[]{cryptoSlamNFTSalesSymbol}, 10, Resolution.Daily);<\/code><\/pre>\n<\/div>"},{"title":"Demonstration Algorithm","content":"<div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"><\/div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https:\/\/www.quantconnect.com\/terminal\/processCache?request=embedded_backtest_f5ede868a29b4177bb572ad3f2ffafea.html\" scrolling=\"no\"><\/iframe><\/div><\/div>"}]},{"name":"US Futures Security Master","url":"\/datasets\/quantconnect-us-futures-security-master","short_description":"Rolling reference data for 75 popular CME futures contracts. Data is provided on a daily frequency since 2012.","about":[{"title":"Introduction","content":"<p>US Futures Security Master by QuantConnect provides mapping reference data for the most liquid contracts of the CME Group exchanges, calculated with popular rolling techniques. The data covers 75 root Future contracts, starting in 2012, and is delivered on a daily frequency with a zip file with all the contract mappings. This dataset is created by daily processing of the US historical Future chains.\n<\/p>\n\n<p>Using this data source paired with raw Futures data, multiple rolling techniques are supported including; ForwardPanamaCanal, BackwardsPanamaCanal, and Backwards Ratio. The specific date of rolling can also be configured with options including; LastTradingDay, FirstDayMonth, or the greatest OpenInterest.<\/p>"},{"title":"About the Provider","content":"<p>\nQuantConnect was founded in 2012 to serve quants everywhere with the best possible algorithmic trading technology. Seeking to disrupt a notoriously closed-source industry, QuantConnect takes a radically open-source approach to algorithmic trading. Through the QuantConnect web platform, more than 50,000 quants are served every month.\n<\/p>"},{"title":"Getting Started","content":"<p>No special code is required to utilize the QuantConnect US Futures Security Master. It is automatically loaded on requesting US Futures data.<\/p>"},{"title":"Data Summary","content":"<table class=\"table qc-table table-dense table-striped\"><tr><td>Start Date<\/td><td>January 2012<\/td><\/tr><tr><td>Asset Coverage<\/td><td>75 Liquid Future Contracts<\/td><\/tr><tr><td>Resolution<\/td><td>Daily<\/td><\/tr><tr><td>Data Density<\/td><td>Regular<\/td><\/tr><\/table>"},{"title":"Example Applications","content":"<p>\nThe QuantConnect US Futures Security Master enables researchers to design strategies harnessing continuous Futures contracts. Examples include: \n<\/p>\n<ul><li>Trading cyclical patterns in commodity Futures.<\/li>\n<li>Buying gold Futures as an inflation hedge with automatic contract roll overs.<\/li>\n<li>Detecting arbitrage opportunities between index Futures and Equities.<\/li>\n<\/ul>"},{"title":"Data Point Attributes","content":"<div data-tree=\"QuantConnect.Data.Market.SymbolChangedEvent\"><\/div>"}],"documentation":[{"title":"Introduction","content":"<p>This dataset allows users to construct continuous futures, allowing the access of normalized historical data of the underlying assets, as well as trading the \u201clead\u201d future contracts for those assets.\n<br \/><br \/>\nContinuous futures refer to sets of rolling lead future contracts during their actively trading periods. Since future contracts will expire at their maturities, to retrieve the historical price movement of the underlying assets, continuous futures are needed for their time series analysis.\n<br \/><br \/>\nIn LEAN, a continuous future can be accessed by a canonical symbol object:<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nself.continuous_contract = self.AddFuture(Futures.Energies.CrudeOilWTI,\n                                          dataNormalizationMode = DataNormalizationMode.BackwardsRatio,\n                                          dataMappingMode = DataMappingMode.OpenInterest,\n                                          contractDepthOffset = 0)\nself.symbol = self.continuous_contract.Symbol\n<\/code><\/pre>\n<pre><code class=\"language-cs\">var _continuousContract = AddFuture(Futures.Energies.CrudeOilWTI,\n    dataNormalizationMode: DataNormalizationMode.BackwardsRatio,\n    dataMappingMode: DataMappingMode.OpenInterest,\n    contractDepthOffset: 0\n);\nvar _symbol = _continuousContract.Symbol;<\/code><\/pre>\n<\/div>\n<p>Note that in order to have a seamless transition of the underlying contracts, it is necessary to have the <i>dataNormalizationMode<\/i> and <i>dataMappingMode<\/i> inputs. For technical details, please refer to the later part of this doc.\n<br \/><br \/>\nHowever, a canonical symbol is only mapped to the security added by <i>AddFuture<\/i> as a reference but not any underlying future contract. It works fine to trade within the backtest, but could be subjected to friction costs during live trading, as the order price used could be a normalized price. Please refer to \u201cLive Trading Considerations\u201d part of this docs for details.<\/p>"},{"title":"Data Normalization Modes","content":"<p>This is the price scaling mode to use. For continuous futures, the following data normalization modes could be accepted:<\/p>\n<table class=\"table qc-table table-dense table-striped\"><tr><td><b>Data Normalization Mode<\/b><\/td><td><b>Definition<\/b><\/td><\/tr><tr><td>DataNormalizationMode.Raw<\/td><td>The raw price.<\/td><\/tr><tr><td>DataNormalizationMode.ForwardPanamaCanal<\/td><td>Eliminates price jumps between two consecutive contracts, adding a factor based on the difference of their prices.\n<br \/><br \/>The first contract has the true price.<\/td><\/tr><tr><td>DataNormalizationMode.BackwardsPanamaCanal<\/td><td>Eliminates price jumps between two consecutive contracts, adding a factor based on the difference of their prices.<br \/><br \/>The last contract has the true price.<\/td><\/tr><tr><td>DataNormalizationMode.BackwardsRatio<\/td><td>Eliminates price jumps between two consecutive contracts, multiplying the prices by their ratio.<br \/><br \/>The last contract has the true price.<\/td><\/tr><\/table><p>If any other data normalization mode is used, it will be converted to <i>DataNormalizationMode.BackwardsRatio<\/i> automatically.<\/p>\n<br \/><p>Example on how to use:<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nself.continuous_contract = self.AddFuture(Futures.Energies.CrudeOilWTI,\n                                          dataNormalizationMode = DataNormalizationMode.BackwardsRatio,\n                                          dataMappingMode = DataMappingMode.OpenInterest,\n                                          contractDepthOffset = 0)\n<\/code><\/pre>\n<pre><code class=\"language-cs\">_continuousContract = AddFuture(Futures.Energies.CrudeOilWTI,\n    dataNormalizationMode: DataNormalizationMode.BackwardsRatio,\n    dataMappingMode: DataMappingMode.OpenInterest,\n    contractDepthOffset: 0\n);<\/code><\/pre>\n<\/div>"},{"title":"Data Mapping Modes","content":"<p>The below are the continuous contracts mapping modes accepted by continuous futures. It will decide when should the underlying contract changes. It must be selected from the below, otherwise, an Exception will be thrown.<\/p>\n<table class=\"table qc-table table-dense table-striped\"><tr><td><b>Data Mapping Mode<\/b><\/td><td><b>Definition<\/b><\/td><\/tr><tr><td>DataMappingMode.LastTradingDay<\/td><td>The contract maps on the previous day of expiration of the front month.<\/td><\/tr><tr><td>DataMappingMode.FirstDayMonth<\/td><td>The contract maps on the first date of the delivery month of the front month. If the contract expires prior to this date, then it rolls on the contract's last trading date instead.<\/td><\/tr><tr><td>DataMappingMode.OpenInterest<\/td><td>The contract maps when the back month contract has a higher volume that the current front month.<\/td><\/tr><\/table><br \/><p>Example on how to use:<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nself.continuous_contract = self.AddFuture(Futures.Energies.CrudeOilWTI,\n                                          dataNormalizationMode = DataNormalizationMode.BackwardsRatio,\n                                          dataMappingMode = DataMappingMode.OpenInterest,\n                                          contractDepthOffset = 0)\n<\/code><\/pre>\n<pre><code class=\"language-cs\">_continuousContract = AddFuture(Futures.Energies.CrudeOilWTI,\n    dataNormalizationMode: DataNormalizationMode.BackwardsRatio,\n    dataMappingMode: DataMappingMode.OpenInterest,\n    contractDepthOffset: 0\n);<\/code><\/pre>\n<\/div>"},{"title":"Tracking Contract Changes ","content":"<p>Symbol change events can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the Symbol object when you add the data for easy access to the slice later. You can see an example of the slice accessor in the code below.<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    symbolChangedEvent = data.SymbolChangedEvents.get(self.symbol)\n    if symbolChangedEvent:\n        self.Log(f\"Symbol changed: {symbolChangedEvent.OldSymbol} -&gt; {symbolChangedEvent.NewSymbol}\")\n<\/code><\/pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    if (data.SymbolChangedEvents.ContainsKey(_symbol))\n    {\n        var symbolChangedEvent = data.SymbolChangedEvents[_symbol];\n        Log($\"Symbol changed: {symbolChangedEvent.OldSymbol} -&gt; {symbolChangedEvent.NewSymbol}\");\n    }\n}<\/code><\/pre>\n<\/div>"},{"title":"Live Trading Considerations","content":"<p>\nIt is possible to trade the continuous futures. However, the canonical symbol created by the <i>AddFuture<\/i> method is not mapped to a single underlying future contract but represents a set of rolling contracts. Thus, the prices could be frictional during a symbol-changing event. This could be catastrophic in live trading! For live trading, the orders should be placed directly on the underlying contracts. The underlying contract is available with the <b><i>Mapped<\/i><\/b> property.\n<\/p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nself.current_contract = self.Securities[self.continuous_contract.Mapped]\nself.Buy(self.current_contract.Symbol, 1)\n<\/code><\/pre>\n<pre><code class=\"language-cs\">\n_currentContract = Securities[_continuousContract.Mapped];\nBuy(_currentContract.Symbol, 1);\n<\/code><\/pre>\n<\/div>"},{"title":"Data Format","content":"<p>\nA factor file and a map file will be included in the downloaded local files for each of the exchanges with supported continuous futures. They could be found in <i>\\data\\future\\exchange_name<\/i> under the LEAN CLI base directory.\n<br \/><br \/>\nFor the factor file, it is a .zip collection of REST API styled .csv files for each future symbol, including the date, scaling factors for each type of data normalization and the data mapping mode that indicates the symbol-changing event is on that day for that mapping mode. Example of how a line in the .csv file looks like:\n<\/p>\n<code>{\"Date\":\"2009-10-31T00:00:00\",\"BackwardsRatioScale\":[0.9914163090128755364806866953,1.0,1.0],\"BackwardsPanamaCanalScale\":[-2.0,0.0,0.0],\"ForwardPanamaCanalScale\":[0.0,0.0,0.0],\"DataMappingMode\":1}\n<\/code>\n<br \/><br \/><p>For the map file, it is a .zip collection of .csv files for each future symbol, including the date, new underlying contract symbol, the exchange code and the data mapping mode that indicates the symbol-changing event is on that day for that mapping mode. Example of how a line in the .csv file looks like:<\/p>\n<code>20091130,aw uii3j0m6zbj9,CBOT,1\n<\/code>"}]}]