[
  {
    "name": "US Equity Security Master",
    "vendorName": "QuantConnect",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/qc-logo.svg",
    "landingFileName": "quantconnect-us-equity-security-master.html",
    "url": "/datasets/quantconnect-us-equity-security-master",
    "short_description": "Corporate action data source for splits, dividends, mergers, acquisitions, IPOs, and delisting's since January 1998 for running a US Equities backtest.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>\nThe US Equity Security Master dataset by QuantConnect tracks US Equity corporate actions. The data covers approximately 27,500 US Equities, starts in January 1998, and is delivered on a daily update frequency. With the map and factor files installed in LEAN, all corporate actions are automatically handled and passed into your algorithm as events.\n</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\nQuantConnect was founded in 2012 to serve quants everywhere with the best possible algorithmic trading technology. Seeking to disrupt a notoriously closed-source industry, QuantConnect takes a radically open-source approach to algorithmic trading.  Through the QuantConnect web platform, more than 50,000 quants are served every month. \n</p>"
      },
      {
        "title": "Data Summary",
        "content": "<p>\nData is delivered as a daily updated zip archive of map and factor files. The data is designed to be used in the LEAN Engine and cannot be consumed another way. The following table shows the dataset properties:\n</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 1998</td>\n        </tr><tr><td>Data Points</td>\n            <td>Splits, Dividends, Mergers, IPO, &amp; Delistings</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>27,500 US Equities</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>New York</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Getting Started",
        "content": "<p>\nNo special code is required to utilize the QuantConnect Security Master. It is automatically loaded on requesting US Equities data.  \n</p>"
      },
      {
        "title": "Supported Assets",
        "content": "<p>To view the supported assets in the US Equity Security Master dataset, see the <a href=\"/data/tree/equity/usa/daily\">Data Explorer</a>.</p>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe QuantConnect US Security Master enables researchers to accurately design strategies harnessing any core corporate actions. Examples include: \n</p>\n<ul><li>Post-dividend announcement trading strategies.</li>\n<li>Trading on new equities by monitoring for IPOs.</li>\n<li>Harnessing split announcements for reverse-split announcement momentum.</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_18fd44f346136f053ec6d40ee9c2562b.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Equity Security Master dataset provides Split, Dividend, Delisting and SymbolChangedEvent objects.</p>\n<h4>Split Attributes</h4>\n<p>When a split or merger occurs, we pass the previous symbol data into your algorithm. Split objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Split\"></div>\n\n<h4>Dividend Attributes</h4>\n<p>Dividend events are triggered on the payment date. Dividend objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Dividend\"></div>\n\n<h4>Delisting Attributes</h4>\n<p>When a security is delisted, we notify your algorithm. Delisting objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Delisting\"></div>\n\n<h4>SymbolChangedEvent Attributes</h4>\n<p>When a security changes their ticker, we notify your algorithm. SymbolChangedEvent objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.SymbolChangedEvent\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Accessing Data - Split",
        "content": "<p>Split data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. You can see an example of the slice accessor in the code below.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\ndef OnData(self, data):\n    split = data.Splits.get(self.symbol)\n    if split:\n        splitType = {0: \"Warning\", 1: \"SplitOccurred\"}.get(split.Type)\n        self.Log(f'Split: {split.Symbol}\\t{split.SplitFactor}\\t{split.ReferencePrice}\\t{splitType}')\n</code></pre>\n<pre><code class=\"language-cs\">\npublic override void OnData(Slice data)\n{\n    if (data.Splits.ContainsKey(_symbol))\n    {\n        var split = data.Splits[_symbol];\n        Log($\"Split: {split.Symbol}\\t{split.SplitFactor}\\t{split.ReferencePrice}\\t{split.Type}\");\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data - Dividend",
        "content": "<p>Dividend data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. You can see an example of the slice accessor in the code below.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\ndef OnData(self, data):\n    dividend = data.Dividends.get(self.symbol)\n    if dividend:\n        self.Log(f'Dividend: {dividend.Symbol}\\t{dividend.Distribution}\\t{dividend.ReferencePrice}')\n</code></pre>\n<pre><code class=\"language-cs\">\npublic override void OnData(Slice data)\n{\n    if (data.Dividends.ContainsKey(_symbol))\n    {\n        var dividend = data.Dividends[_symbol];\n        Log($\"Dividend: {dividend.Symbol}\\t{dividend.Distribution}\\t{dividend.ReferencePrice}\");\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data - Delistings",
        "content": "<p>Delistings data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. You can see an example of the slice accessor in the code below.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\ndef OnData(self, data):\n    delisting = data.Delistings.get(self.symbol)\n    if delisting:\n        delistingType = {0: \"Warning\", 1: \"Delisted\"}.get(delisting.Type)\n        self.Log(f'Delistings: {delistingType}')\n</code></pre>\n<pre><code class=\"language-cs\">\npublic override void OnData(Slice data)\n{\n    if (data.Delistings.ContainsKey(_symbol))\n    {\n        var delisting = data.Delistings[_symbol];\n        Log($\"Delistings: {delisting.Type}\");\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data - Symbol Change Events",
        "content": "<p>Symbol change events can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. You can see an example of the slice accessor in the code below.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\ndef OnData(self, data):\n    symbolChangedEvent = data.SymbolChangedEvents.get(self.symbol)\n    if symbolChangedEvent:\n        self.Log(f\"Symbol changed: {symbolChangedEvent.OldSymbol} -&gt; {symbolChangedEvent.NewSymbol}\")\n</code></pre>\n<pre><code class=\"language-cs\">\npublic override void OnData(Slice data)\n{\n    if (data.SymbolChangedEvents.ContainsKey(_symbol))\n    {\n        var symbolChangedEvent = data.SymbolChangedEvents[_symbol];\n        Log($\"Symbol changed: {symbolChangedEvent.OldSymbol} -&gt; {symbolChangedEvent.NewSymbol}\");\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Equity Security Master dataset provides Split, Dividend, Delisting and SymbolChangedEvent objects.</p>\n<h4>Split Attributes</h4>\n<p>When a split or merger occurs, we pass the previous symbol data into your algorithm. Split objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Split\"></div>\n\n<h4>Dividend Attributes</h4>\n<p>Dividend events are triggered on the payment date. Dividend objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Dividend\"></div>\n\n<h4>Delisting Attributes</h4>\n<p>When a security is delisted, we notify your algorithm. Delisting objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Delisting\"></div>\n\n<h4>SymbolChangedEvent Attributes</h4>\n<p>When a security changes their ticker, we notify your algorithm. SymbolChangedEvent objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.SymbolChangedEvent\"></div>"
      }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "https://www.quantconnect.com/data",
    "examples": [
      {
        "id": 30,
        "master_product_id": 4,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass USEquitySecurityMasterAlgorithm (QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(1998, 1, 1)\n        self.SetCash(1000000)\n        \n        self.equity = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        \n    def OnData(self, data):\n        # Accessing Data - Splits\n        split = data.Splits.get(self.equity)\n        if split:\n            self.Debug(f\"{self.Time} &gt;&gt; SPLIT &gt;&gt; {split.Symbol} - {split.SplitFactor} - {self.Portfolio.Cash} - {self.Portfolio[self.equity].Price}\")\n        \n        # Accessing Data - Dividends\n        dividend = data.Dividends.get(self.equity)\n        if dividend:\n            self.Debug(f\"{self.Time} &gt;&gt; DIVIDEND &gt;&gt; {dividend.Symbol} - {dividend.Distribution} - {self.Portfolio.Cash} - {self.Portfolio[self.equity].Price}\")\n            \n        # Accessing Data - Delisting\n        delisting = data.Delistings.get(self.equity)\n        if delisting:\n            delistingType = {0: \"Warning\", 1: \"Delisted\"}.get(delisting.Type)\n            self.Debug(f\"{self.Time} &gt;&gt; DELISTING &gt;&gt; {delisting.Symbol} - {delistingType}\")\n            \n        # Accessing Data - Symbol Changed Event\n        symbolChangedEvent = data.SymbolChangedEvents.get(self.equity)\n        if symbolChangedEvent:\n            self.Debug(f\"{self.Time} &gt;&gt; SYMBOL CHANGED &gt;&gt; {symbolChangedEvent.OldSymbol} -&gt; {symbolChangedEvent.NewSymbol}\")\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class USEquitySecurityMasterAlgorithm : QCAlgorithm\n    {\n        private Symbol _equity;\n        \n        public override void Initialize()\n        {\n            SetStartDate(1998, 1, 1);\n            SetCash(1000000);\n            \n            _equity = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n        }\n        \n        public override void OnData(Slice data)\n        {\n            // Accessing Data - Splits\n            if (data.Splits.ContainsKey(_equity))\n            {\n                var split = data.Splits[_equity];\n                Debug($\"Split: {split.Symbol}\\t{split.SplitFactor}\\t{split.ReferencePrice}\\t{split.Type}\");\n            }\n            \n            // Accessing Data - Dividends\n            if (data.Dividends.ContainsKey(_equity))\n            {\n                var dividend = data.Dividends[_equity];\n                Log($\"Dividend: {dividend.Symbol}\\t{dividend.Distribution}\\t{dividend.ReferencePrice}\");\n            }\n            \n            // Accessing Data - Delisting\n            if (data.Delistings.ContainsKey(_equity))\n            {\n                var delisting = data.Delistings[_equity];\n                Log($\"Delistings: {delisting.Type}\");\n            }\n            \n            // Accessing Data - Symbol Changed Event\n            if (data.SymbolChangedEvents.ContainsKey(_equity))\n            {\n                var symbolChangedEvent = data.SymbolChangedEvents[_equity];\n                Log($\"Symbol changed: {symbolChangedEvent.OldSymbol} -&gt; {symbolChangedEvent.NewSymbol}\");\n            }\n        }\n    }\n}\n</code></pre>\n</div>",
        "updated": "2022-01-21 17:01:00"
      },
      {
        "id": 572,
        "master_product_id": 4,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example",
        "content": "<p>In this example, we demonstrate the payments for cash dividends in backtesting. When data normalization mode is set to \"Raw\", the dividends are paid as cash directly into your portfolio.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass PaymentAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(1998,1,1)\n\n        # this will use the Tradier Brokerage open order split behavior\n        # forward split will modify open order to maintain order value\n        # reverse split open orders will be canceled\n        self.SetBrokerageModel(BrokerageName.TradierBrokerage)\n\n        self.UniverseSettings.Resolution = Resolution.Daily\n        self.UniverseSettings.DataNormalizationMode = DataNormalizationMode.Raw\n        \n        # MSFT: Splits and Dividends\n        # GOOG: Symbol Changed Event\n        # AAA.1: Delisting\n        \n        self.SetUniverseSelection(ManualUniverseSelectionModel(\n            Symbol.Create(\"MSFT\", SecurityType.Equity, Market.USA)))\n\n        self.SetAlpha(PaymentAlphaModel())\n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n        self.SetExecution(BracketExecutionModel())\n\n\nclass PaymentAlphaModel(AlphaModel):\n\n    symbol = Symbol.Empty\n    \n    def Update(self, algorithm, data):\n        split = data.Splits.get(self.symbol)\n        if split:\n            algorithm.Debug(f\"{algorithm.Time} &gt;&gt; SPLIT &gt;&gt; {split.Symbol} - {split.SplitFactor} - {algorithm.Portfolio.Cash} - {algorithm.Portfolio[self.symbol].Price}\")\n\n        dividend = data.Dividends.get(self.symbol)\n        if dividend:\n            algorithm.Debug(f\"{algorithm.Time} &gt;&gt; DIVIDEND &gt;&gt; {dividend.Symbol} - {dividend.Distribution} - {algorithm.Portfolio.Cash} - {algorithm.Portfolio[self.symbol].Price}\")\n\n        delisting = data.Delistings.get(self.symbol)\n        if delisting:\n            delistingType = {0: \"Warning\", 1: \"Delisted\"}.get(delisting.Type)\n            algorithm.Debug(f\"{algorithm.Time} &gt;&gt; DELISTING &gt;&gt; {delisting.Symbol} - {delistingType}\")\n\n        symbolChangedEvent = data.SymbolChangedEvents.get(self.symbol)\n        if symbolChangedEvent:\n            algorithm.Debug(f\"{algorithm.Time} &gt;&gt; SYMBOL CHANGED &gt;&gt; {symbolChangedEvent.OldSymbol} -&gt; {symbolChangedEvent.NewSymbol}\")\n\n        bar = data.Bars.get(self.symbol)\n        return [Insight.Price(self.symbol, timedelta(1), InsightDirection.Up)] if bar else []\n\n    def OnSecuritiesChanged(self, algorithm, changes):\n        self.symbol = list(changes.AddedSecurities)[0].Symbol\n        \nclass BracketExecutionModel(ExecutionModel):\n    \n    def __init__(self):\n        '''Initializes a new instance of the ImmediateExecutionModel class'''\n        self.targetsCollection = PortfolioTargetCollection()\n\n    def Execute(self, algorithm, targets):\n\n        # for performance we check count value, OrderByMarginImpact and ClearFulfilled are expensive to call\n        self.targetsCollection.AddRange(targets)\n        if self.targetsCollection.Count &gt; 0:\n            for target in self.targetsCollection.OrderByMarginImpact(algorithm):\n                # calculate remaining quantity to be ordered\n                quantity = OrderSizing.GetUnorderedQuantity(algorithm, target)\n                if quantity != 0 and algorithm.Transactions.OrdersCount == 0:\n                    bar = algorithm.Securities[target.Symbol].GetLastData()\n                    algorithm.MarketOrder(target.Symbol, quantity)\n                    # place some orders that won't fill, when the split comes in they'll get modified to reflect the split\n                    algorithm.StopMarketOrder(target.Symbol, -quantity, bar.Low/2)\n                    algorithm.LimitOrder(target.Symbol, -quantity, bar.High*2)\n\n            self.targetsCollection.ClearFulfilled(algorithm)\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect.Algorithm.CSharp\n{\n    public class PaymentsAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(1998, 01, 01);\n                \n            // this will use the Tradier Brokerage open order split behavior\n            // forward split will modify open order to maintain order value\n            // reverse split open orders will be canceled\n            SetBrokerageModel(BrokerageName.TradierBrokerage);\n            \n            UniverseSettings.Resolution = Resolution.Daily;\n            UniverseSettings.DataNormalizationMode = DataNormalizationMode.Raw;\n            \n            // MSFT: Splits and Dividends\n            // GOOG: Symbol Changed Event\n            // AAA.1: Delisting\n            SetUniverseSelection(new ManualUniverseSelectionModel(\n                QuantConnect.Symbol.Create(\"MSFT\", SecurityType.Equity, Market.USA)));\n\n            SetAlpha(new PaymentAlphaModel());\n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n            SetExecution(new BracketExecutionModel());\n        }\n    }\n    \n    public class PaymentAlphaModel : AlphaModel\n    {\n        private Symbol _symbol = Symbol.Empty;\n        \n        public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n        {\n            if (data.Splits.ContainsKey(_symbol))\n            {\n                var split = data.Splits[_symbol];\n                algorithm.Debug($\"{split.Time.ToIso8601Invariant()} &gt;&gt; SPLIT &gt;&gt; {split.Symbol} - \" +\n                    $\"{split.SplitFactor.ToStringInvariant()} - \" +\n                    $\"{algorithm.Portfolio.Cash.ToStringInvariant()} - \" +\n                    $\"{algorithm.Portfolio[_symbol].Quantity.ToStringInvariant()}\");\n            }\n            \n            if (data.Dividends.ContainsKey(_symbol))\n            {\n                var dividend = data.Dividends[_symbol];\n                algorithm.Debug($\"{dividend.Time.ToStringInvariant(\"o\")} &gt;&gt; DIVIDEND &gt;&gt; {dividend.Symbol} - \" +\n                    $\"{dividend.Distribution.ToStringInvariant(\"C\")} - {algorithm.Portfolio.Cash} - \" +\n                    $\"{algorithm.Portfolio[_symbol].Price.ToStringInvariant(\"C\")}\");\n            }\n\n            if (data.Delistings.ContainsKey(_symbol))\n            {\n                var delisting = data.Delistings[_symbol];\n                algorithm.Debug($\"{delisting.Time.ToStringInvariant(\"o\")} &gt;&gt; DELISTING &gt;&gt; {delisting.Type}\");\n            }\n\n            if (data.SymbolChangedEvents.ContainsKey(_symbol))\n            {\n                var symbolChangedEvent = data.SymbolChangedEvents[_symbol];\n                algorithm.Debug($\"{symbolChangedEvent.Time.ToStringInvariant(\"o\")} &gt;&gt; Symbol Changed Event &gt;&gt; \" +\n                    $\"{symbolChangedEvent.OldSymbol} -&gt; {symbolChangedEvent.OldSymbol}\");\n            }\n            \n            return data.Bars.ContainsKey(_symbol)\n                ? new [] { Insight.Price(_symbol, TimeSpan.FromDays(1), InsightDirection.Up) }\n                : Enumerable.Empty&lt;Insight&gt;();\n        }\n        \n        public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n        {\n            _symbol = changes.AddedSecurities.First().Symbol;\n        }\n    }\n    \n    public class BracketExecutionModel : ExecutionModel\n    {\n        private readonly PortfolioTargetCollection _targetsCollection = new PortfolioTargetCollection();\n\n        public override void Execute(QCAlgorithm algorithm, IPortfolioTarget[] targets)\n        {\n            _targetsCollection.AddRange(targets);\n            // for performance we check count value, OrderByMarginImpact and ClearFulfilled are expensive to call\n            if (_targetsCollection.Count &gt; 0)\n            {\n                foreach (var target in _targetsCollection.OrderByMarginImpact(algorithm))\n                {\n                    // calculate remaining quantity to be ordered\n                    var quantity = OrderSizing.GetUnorderedQuantity(algorithm, target);\n                    if (quantity != 0 &amp;&amp; algorithm.Transactions.OrdersCount == 0)\n                    {\n                        var bar = algorithm.Securities[target.Symbol].GetLastData() as TradeBar;\n                        algorithm.MarketOrder(target.Symbol, quantity);\n                        // place some orders that won't fill, when the split comes in they'll get modified to reflect the split\n                        algorithm.StopMarketOrder(target.Symbol, -quantity, bar.Low/2);\n                        algorithm.LimitOrder(target.Symbol, -quantity, bar.High*2);\n                    }\n                }\n\n                _targetsCollection.ClearFulfilled(algorithm);\n            }\n        }\n    }\n}\n</code></pre>\n</div>",
        "updated": "2021-07-08 22:41:04"
      }
    ],
    "pricingText": "QuantConnect Security Master is freely accessible in our cloud environment, and can be downloaded for on premise backtesting and research for an annual subscription starting at $600.",
    "pricing": [
      {
        "id": null,
        "master_product_id": 4,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>US Equity Security Master is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>US Equity Security Master can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Free with Subscription | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>US Equity Security Master is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 39,
        "name": "US Equity Security Master by QuantConnect",
        "description": "<p>Split, dividend, and survivorship bias free US Equities backtesting is enabled by the QuantConnect US Equity Security Master.</p>\n<ul><li>Historical mapping/delisting</li>\n    <li>Full price adjustment from tick</li>\n    <li>Immediately digestible LEAN format</li>\n</ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "free",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 37,
        "name": "US Equity Security Master by QuantConnect",
        "description": "<p>Split, dividend, and survivorship bias free US Equities backtesting is enabled by the QuantConnect US Equity Security Master.</p>\n<ul><li>Ownership of the data for internal use</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Download On Premise",
        "public": 1,
        "price": {
          "frequency": "yearly",
          "priceCTA": "$600/yr",
          "monthlyPrice": 50,
          "yearlyPrice": 600,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": false,
        "sortPrice": 600
      },
      {
        "id": 180,
        "name": "US Equity Security Master by QuantConnect - Bulk Download",
        "description": "<p>Split, dividend, and survivorship bias free US Equities backtesting is enabled by the QuantConnect US Equity Security Master.</p>\n<ul><li>Ownership of the data for internal use</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Bulk Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Request a quote",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 99999
      }
    ],
    "headerColor": "04a3db"
  },
  {
    "name": "US Congress Trading",
    "vendorName": "Quiver Quantitative",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/quiver-logo.png",
    "landingFileName": "quiver-quantitative-congress-trading.html",
    "url": "/datasets/quiver-quantitative-congress-trading",
    "short_description": "Tracking trading activity of US Senators and members of the House for potential insider trading signals based on early access to regulation changes.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The US Congress Trading dataset by Quiver Quantitative tracks US Equity trades made by members of Congress in the Senate and the House of Representatives. The data covers 1,800 US Equities, starts in January 2016, and is delivered on a daily frequency. This dataset is created by scraping SEC reports.</p>\n\n<p>This dataset depends on the <a href=\"https://www.quantconnect.com/datasets/quantconnect-us-equity-security-master\">US Equity Security Master</a> dataset because the US Equity Security Master dataset contains information on splits, dividends, and symbol changes.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p><a href=\"https://www.quiverquant.com/\">Quiver Quantitative</a> was founded by two college students in February 2020 with the goal of bridging the information gap between Wall Street and non-professional investors. Quiver allows retail investors to tap into the power of big data and have access to actionable, easy to interpret data that hasn\u2019t already been dissected by Wall Street.</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\naapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nquiver_congress_symbol = self.AddData(QuiverCongress, aapl).Symbol\n\nself.AddUniverse(QuiverQuantCongressUniverse, \"QuiverQuantCongresssUniverse\", Resolution.Daily, self.UniverseSelection)</code></pre>\n<pre><code class=\"language-cs\">\nvar aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\nvar quiverCongressSymbol = AddData&lt;QuiverCongress&gt;(aapl).Symbol;\n\nAddUniverse&lt;QuiverQuantCongresssUniverse&gt;(\"QuiverQuantCongresssUniverse\", Resolution.Daily, UniverseSelection);</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 2016</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>1,800 US Equities</td>\n        </tr><tr><td>Data Density</td>\n            <td>Sparse</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>The US Congress Trading dataset enables researchers to take immediate action on trades made by informed Members of Congress. Examples include: </p>\n<ul><li>Following the trades of specific representatives on the premise that the representatives are more informed</li>\n <li>Assigning a long/short-bias to securities on a daily frequency based on how Members of Congress are trading them</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_ff74bb08f8535b0ba369ea1b9173f7ae.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Congress Trading dataset provides QuiverCongress and QuiverQuantCongresssUniverse objects.</p>\n\n<h4>QuiverCongress Attributes</h4>\n<p>QuiverCongress objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.QuiverCongress\"></div>\n\n<h4>QuiverQuantCongressUniverse Attributes</h4>\n<p>QuiverQuantCongressUniverse objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.QuiverQuantCongressUniverse\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add Congress data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass QuiverCongressDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        aapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        quiver_congress_symbol = self.AddData(QuiverCongress, aapl).Symbol</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class QuiverCongressDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n            var aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            var quiverCongressSymbol = AddData&lt;QuiverCongress&gt;(aapl).Symbol;\n        }\n    }\n}\n</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(QuiverCongress)\n    for point in points.Values:\n        self.Log(f\"Symbol: {point.Symbol.Underlying} Report date: {point.ReportDate}; Transaction date: {point.TransactionDate}; Representative: {point.Representative}; Transaction: {point.Transaction}; Amount: {point.Amount}; House: {point.House}\")\n</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var points = data.Get&lt;QuiverCongress&gt;();\n    foreach (var point in points.Values)\n    {\n        Log($\"Symbol: {point.Symbol.Underlying}; Report date: {point.ReportDate}; Transaction date: {point.TransactionDate}; Representative: {point.Representative}; Transaction: {point.Transaction}; Amount: {point.Amount}; House: {point.House}\");\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for Congress by using the History API.</p>\n\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(QuiverCongress, quiver_congress_symbol, 60, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History&lt;QuiverCongress&gt;(quiverCongressSymbol, 60, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Universe Selection",
        "content": "<p>You can select Equities by AddUniverse&lt;QuiverQuantCongresssUniverse&gt;() based on Quiver Quant Congress Trading data.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\ndef Initialize(self):\n    self.AddUniverse(QuiverQuantCongressUniverse, \"QuiverQuantCongresssUniverse\", Resolution.Daily, self.UniverseSelection)\n\ndef UniverseSelection(self, alt_coarse):\n    for datum in alt_coarse:\n        self.Log(f\"{datum.Symbol},{datum.Representative},{datum.Amount},{datum.Transaction}\")\n\n    # define our selection criteria\n    return [d.Symbol for d in alt_coarse \\\n        if d.Amount &gt; 200000 and d.Transaction == OrderDirection.Buy]\n</code></pre>\n<pre><code class=\"language-cs\">\nAddUniverse(\"QuiverQuantCongresssUniverse\", Resolution.Daily, altCoarse =&gt;\n{\n    foreach (var datum in altCoarse)\n    {\n        Log($\"{datum.Symbol},{datum.Representative},{datum.Amount},{datum.Transaction}\");\n    }\n\n    // define our selection criteria\n    return from d in altCoarse \n        where d.Amount &gt; 200000 &amp;&amp; d.Transaction == OrderDirection.Buy \n        select d.Symbol;\n});\n</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Congress Trading dataset provides QuiverCongress and QuiverQuantCongressUniverse objects.</p>\n\n<h4>QuiverCongress Attributes</h4>\n<p>QuiverCongress object has the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.QuiverCongress\"></div>\n\n<h4>QuiverQuantCongressUniverse Attributes</h4>\n<p>QuiverQuantCongressUniverse object has the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.QuiverQuantCongressUniverse\"></div>"
      }
    ],
    "priceCTA": "From $5/User/mo",
    "vendorWebsite": "https://www.quantconnect.com/market",
    "examples": [
      {
        "id": 43,
        "master_product_id": 5,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example",
        "content": "<p>In this example, we follow the net bias of the trades made by Members of Congress each day. When Members of Congress are net buyers, we buy. When they are net sellers, we short sell.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\nclass QuiverCongressDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        # Requesting data\n        aapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        quiver_congress_symbol = self.AddData(QuiverCongress, aapl).Symbol\n\n        # Historical data\n        history = self.History(QuiverCongress, quiver_congress_symbol, 60, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request\");\n\n    def OnData(self, data):\n        points = data.Get(QuiverCongress)\n        \n        # Determine net direction of Congress trades for each security\n        net_quantity_by_symbol = {}\n        for point in points.Values:\n            symbol = point.Symbol.Underlying\n            if symbol not in net_quantity_by_symbol:\n                net_quantity_by_symbol[symbol] = 0\n            net_quantity_by_symbol[symbol] += (1 if point.Transaction == OrderDirection.Buy else -1) * point.Amount\n            \n        for symbol, net_quantity in net_quantity_by_symbol.items():\n            # Buy when Congress members have bought\n            if net_quantity &gt; 0:\n                self.SetHoldings(symbol, 1)\n        \n            # Short sell when Congress members have sold\n            else:\n                self.SetHoldings(symbol, -1)</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class QuiverCongressDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n            \n            // Requesting data\n            var aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            var quiverCongressSymbol = AddData&lt;QuiverCongress&gt;(aapl).Symbol;\n\n            // Historical data\n            var history = History&lt;QuiverCongress&gt;(quiverCongressSymbol, 60, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request\");\n        }\n\n        \n        public override void OnData(Slice data)\n        {\n            var points = data.Get&lt;QuiverCongress&gt;();\n            \n            // Determine net direction of Congress trades for each security\n            var netQuantityBySymbol = new Dictionary&lt;Symbol, decimal&gt;();\n            foreach (var point in points.Values)\n            {\n                var symbol = point.Symbol.Underlying;\n                if (!netQuantityBySymbol.ContainsKey(symbol))\n                {\n                    netQuantityBySymbol[symbol] = 0m;\n                }\n                netQuantityBySymbol[symbol] += (point.Transaction == OrderDirection.Buy ? 1 : -1) * (point.Amount ?? 0m);\n            }\n            \n            foreach (var kvp in netQuantityBySymbol)\n            {\n                 // Buy when Congress members have bought\n                if (kvp.Value &gt; 0)\n                {\n                    SetHoldings(kvp.Key, 1);\n                }\n \n                // Short sell when Congress members have sold\n                else\n                {\n                    SetHoldings(kvp.Key, -1);\n                }\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-10-06 20:17:59"
      },
      {
        "id": 213,
        "master_product_id": 5,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example",
        "content": "<p>In this example, we follow the net bias of the trades made by Members of Congress each day. When Members of Congress are net buyers, we buy. When they are net sellers, we short sell. Positions are held for 7 days.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass QuiverCongressDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        self.UniverseSettings.Resolution = Resolution.Dailyself.AddUniverse(QuiverQuantCongressUniverse, \"QuiverQuantCongresssUniverse\", Resolution.Daily, self.UniverseSelection)\n        \n        self.AddAlpha(CongressAlphaModel())\n        \n        self.SetPortfolioConstruction(InsightWeightingPortfolioConstructionModel(lambda time: None))\n        \n        self.AddRiskManagement(NullRiskManagementModel())\n        \n        self.SetExecution(ImmediateExecutionModel())\n\n    def UniverseSelection(self, alt_coarse):\n        return [d.Symbol for d in alt_coarse \\\n            if d.Amount &gt; 200000 and d.Transaction == OrderDirection.Buy]\n        \n\nclass CongressAlphaModel(AlphaModel):\n    \n    symbol_data_by_symbol = {}\n\n    def Update(self, algorithm, data):\n        insights = []\n        points = data.Get(QuiverCongress)\n\n        # Determine net direction of Congress trades for each security\n        net_quantity_by_symbol = {}\n        for point in points.Values:\n            symbol = point.Symbol.Underlying\n            if symbol not in net_quantity_by_symbol:\n                net_quantity_by_symbol[symbol] = 0\n            net_quantity_by_symbol[symbol] += (1 if point.Transaction == OrderDirection.Buy else -1) * point.Amount\n        \n        for symbol, net_quantity in net_quantity_by_symbol.items():\n            # Buy when Congress members have bought\n            if net_quantity &gt; 0 and not algorithm.Portfolio[symbol].IsLong:\n                insights += [Insight.Price(symbol, timedelta(7),  InsightDirection.Up, None, None, None, 0.5)]\n        \n            # Short sell when Congress members have sold\n            elif net_quantity &lt; 0 and not algorithm.Portfolio[symbol].IsShort:\n                insights += [Insight.Price(symbol, timedelta(7),  InsightDirection.Down, None, None, None, 0.5)]\n    \n        return insights\n\n\n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            symbol = security.Symbol\n            self.symbol_data_by_symbol[symbol] = SymbolData(algorithm, symbol)\n        \n        for security in changes.RemovedSecurities:\n            symbol_data = self.symbol_data_by_symbol.pop(security.Symbol, None)\n            if symbol_data:\n                symbol_data.dispose()\n            \n            \nclass SymbolData:\n    def __init__(self, algorithm, symbol):\n        self.algorithm = algorithm\n        \n        # Requesting data\n        self.quiver_congress_symbol = algorithm.AddData(QuiverCongress, symbol).Symbol\n        \n        # Historical data\n        history = algorithm.History(self.quiver_congress_symbol, 14, Resolution.Daily)\n        algorithm.Debug(f\"We got {len(history)} items from our history request for {symbol} Quiver Congress data\")\n        \n    def dispose(self):\n        # Unsubscribe from Quiver Congress feed for this security\n        self.algorithm.RemoveSecurity(self.quiver_congress_symbol)</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class QuiverCongressDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n            \n            AddUniverse(\"QuiverQuantCongresssUniverse\", Resolution.Daily, altCoarse =&gt;\n            {\n                return from d in altCoarse \n                    where d.Amount &gt; 200000 &amp;&amp; d.Transaction == OrderDirection.Buy \n                    select d.Symbol;\n            });\n            \n            AddAlpha(new CongressAlphaModel());\n            \n            SetPortfolioConstruction(new InsightWeightingPortfolioConstructionModel(time =&gt; null));\n            \n            AddRiskManagement(new NullRiskManagementModel());\n            \n            SetExecution(new ImmediateExecutionModel());\n            \n        }\n    }\n\n\n    public class CongressAlphaModel : AlphaModel\n    {\n        private Dictionary&lt;Symbol, SymbolData&gt; _symbolDataBySymbol = new Dictionary&lt;Symbol, SymbolData&gt;();\n\n        public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n        {\n            var points = data.Get&lt;QuiverCongress&gt;();\n            \n            // Determine net direction of Congress trades for each security\n            var netQuantityBySymbol = new Dictionary&lt;Symbol, decimal&gt;();\n            foreach (var point in points.Values)\n            {\n                var symbol = point.Symbol.Underlying;\n                if (!netQuantityBySymbol.ContainsKey(symbol))\n                {\n                    netQuantityBySymbol[symbol] = 0m;\n                }\n                netQuantityBySymbol[symbol] += (point.Transaction == OrderDirection.Buy ? 1 : -1) * (point.Amount ?? 0m);\n            }\n            \n            foreach (var kvp in netQuantityBySymbol)\n            {\n                var symbol = kvp.Key;\n                // Buy when Congress members have bought\n                if (kvp.Value &gt; 0 &amp;&amp; !algorithm.Portfolio[symbol].IsLong)\n                {\n                    yield return Insight.Price(kvp.Key, TimeSpan.FromDays(7),  InsightDirection.Up, null, null, null, 0.5);\n                }\n                \n                // Short sell when Congress members have sold\n                else if (kvp.Value &lt; 0 &amp;&amp; !algorithm.Portfolio[symbol].IsShort)\n                {\n                    yield return Insight.Price(kvp.Key, TimeSpan.FromDays(7), InsightDirection.Down, null, null, null, 0.5);\n                }\n            }\n        }\n\n        public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n        {\n            foreach (var security in changes.AddedSecurities)\n            {\n                var symbol = security.Symbol;\n                _symbolDataBySymbol.Add(symbol, new SymbolData(algorithm, symbol));\n            }\n\n            foreach (var security in changes.RemovedSecurities)\n            {\n                var symbol = security.Symbol;\n                if (_symbolDataBySymbol.ContainsKey(symbol))\n                {\n                    _symbolDataBySymbol[symbol].dispose();\n                    _symbolDataBySymbol.Remove(symbol);\n                }\n            }\n        }\n    }\n    \n    public class SymbolData\n    {\n        private Symbol _quiverCongressSymbol;\n        private QCAlgorithm _algorithm;\n        \n        public SymbolData(QCAlgorithm algorithm, Symbol symbol)\n        {\n            _algorithm = algorithm;\n            \n            // Requesting data\n            _quiverCongressSymbol = algorithm.AddData&lt;QuiverCongress&gt;(symbol).Symbol;\n            \n            // Historical data\n            var history = algorithm.History&lt;QuiverCongress&gt;(_quiverCongressSymbol, 60, Resolution.Daily);\n            algorithm.Debug($\"We got {history.Count()} items from our history request for {symbol} Quiver Congress data\");\n        }\n        \n        public void dispose()\n        {\n            // Unsubscribe from Quiver Congress feed for this security\n            _algorithm.RemoveSecurity(_quiverCongressSymbol);\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-05-10 06:26:45"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 5,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>US Congress Trading is allowed to be used in the cloud \r\n            for personal and commercial projects with a subscription. The data is permissioned for use within \r\n            the licensed organization only</p><p>Subscription Required | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>US Congress Trading can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 5 QCC/file with Subscription | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>US Congress Trading is allowed to be used for free by approved Alpha Stream authors with more than 3 \r\n                    Alpha Streams listed in the marketplace. The Quiver Quantitative will add on a charge of 2 Basis Points \r\n                    for the use of the data to the Alpha Stream reserve price.</p>\r\n                    <p>Free for Authors with 3+ Alphas | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 55,
        "name": "Quiver Quantitative - Congress Trading",
        "description": "<p>Data of US Equity trades made by Members of Congress archived in LEAN format for on premise backtesting and research. One file per ticker.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Download On Premise",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "5 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 40,
        "name": "Quiver Quantitative - Congress Trading",
        "description": "<p>Cloud access to the US Equity trades made by Members of Congress cached and updated daily for use in your research and live trading strategies.</p>\n \n    <ul><li>Curated, clean data</li>\n         <li>Updated nightly at 4am</li>\n         <li>Mapped to US Equity data with full historical SIP feed</li>\n   </ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "$5/mo",
          "monthlyPrice": 5,
          "yearlyPrice": 55,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 55
      }
    ],
    "headerColor": "340064"
  },
  {
    "name": "Wikipedia Page Views",
    "vendorName": "Quiver Quantitative",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/quiver-logo.png",
    "landingFileName": "quiver-quantitative-wikipedia-views.html",
    "url": "/datasets/quiver-quantitative-wikipedia-views",
    "short_description": "Wikipedia Page Views by Quiver Quantitative tracks daily page views for corporate Wikipedia pages. ",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The Wikipedia Page Views dataset by Quiver Quantitative tracks Wikipedia page views for US Equities. The data covers 1,300 US Equities, starts in October 2016, and is delivered on a daily frequency. This dataset is created by scraping the Wikipedia pages of companies.</p>\n\n<p>This dataset depends on the <a href=\"https://www.quantconnect.com/datasets/quantconnect-us-equity-security-master\">US Equity Security Master</a> dataset because the US Equity Security Master dataset contains information on splits, dividends, and symbol changes.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p><a href=\"https://www.quiverquant.com/\">Quiver Quantitative</a> was founded by two college students in February 2020 with the goal of bridging the information gap between Wall Street and non-professional investors. Quiver allows retail investors to tap into the power of big data and have access to actionable, easy to interpret data that hasn\u2019t already been dissected by Wall Street.</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\naapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nquiver_wiki_symbol = self.AddData(QuiverWikipedia, aapl).Symbol\n\nself.AddUniverse(QuiverWikipediaUniverse, \"QuiverWikipediaUniverse\", Resolution.Daily, self.UniverseSelectionMethod)\n</code></pre>\n<pre><code class=\"language-cs\">\nvar aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\nvar quiverWikiSymbol = AddData&lt;QuiverWikipedia&gt;(aapl).Symbol;\n\nAddUniverse&lt;QuiverWikipediaUniverse&gt;(\"QuiverWikipediaUniverse\", Resolution.Daily, UniverseSelectionMethod);\n</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>October 2016</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>1,300 US Equities</td>\n        </tr><tr><td>Data Density</td>\n            <td>Sparse</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>The Quiver Quantitative Wikipedia Page Views dataset enables researchers to observe patterns in the traffic of company Wikipedia pages. Examples include:</p>\n<ul><li>Capitalizing on companies that have experienced a sharp increase in Wikipedia traffic on the premise that volatility in traffic will translate to volatility in price</li>\n   <li>Mitigating risk by avoiding companies that have a decreasing web presence on the premise that a reduction in traffic will result in a reduction in price</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_f83b29a2a9e34770e529534d204c5942.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Wikipedia Page Views dataset provides QuiverWikipedia and QuiverWikipediaUniverse objects.</p>\n\n<h4>QuiverWikipedia Attributes</h4>\n<p>QuiverWikipedia objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.QuiverWikipedia\"></div>\n\n<h4>QuiverWikipediaUniverse Attributes</h4>\n<p>QuiverWikipediaUniverse objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.QuiverWikipediaUniverse\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add Wikipedia Page Views data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass QuiverWikipediaPageViewsDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        aapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        quiver_wiki_symbol = self.AddData(QuiverWikipedia, aapl).Symbol</code></pre><pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class QuiverWikipediaPageViewsDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n            var aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            var quiverWikiSymbol = AddData&lt;QuiverWikipedia&gt;(aapl).Symbol;\n        }\n    }\n}</code></pre></div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(QuiverWikipedia)\n    for point in points.Values:\n        self.Log(f\"Symbol: {point.Symbol.Underlying} Date: {point.Date}; PageViews: {point.PageViews}; WeekPercentChange: {point.WeekPercentChange}; MonthPercentChange: {point.MonthPercentChange}\") </code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var points = data.Get&lt;QuiverWikipedia&gt;();\n    foreach (var point in points.Values)\n    {\n        Log($\"Symbol: {point.Symbol.Underlying}; Date: {point.Date}; PageViews: {point.PageViews}; WeekPercentChange: {point.WeekPercentChange}; MonthPercentChange: {point.MonthPercentChange}\");\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for Wikipedia Page Views by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(QuiverWikipedia, quiver_wiki_symbol, 60, Resolution.Daily) </code></pre>\n<pre><code class=\"language-cs\">var history = History&lt;QuiverWikipedia&gt;(quiverWikiSymbol, 60, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Universe Selection",
        "content": "<p>You can add an universe to select equities based on QuiverWikipedia data by AddUniverse&lt;QuiverWikipediaUniverse&gt;().</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def Initialize(self):\n    self.UniverseSettings.Resolution = Resolution.Daily\n\n    # add a custom universe data source (defaults to usa-equity)\n    self.AddUniverse(QuiverWikipediaUniverse, \"QuiverWikipediaUniverse\", Resolution.Daily, self.UniverseSelection)\n\ndef UniverseSelection(self, alt_coarse):\n    for datum in alt_coarse:\n        self.Log(f\"{datum.Symbol},{datum.PageViews},{datum.WeekPercentChange},{datum.MonthPercentChange}\")\n\n    # define our selection criteria\n    return [d.Symbol for d in alt_coarse \\\n                if d.PageViews &gt; 100 \\\n                and d.WeekPercentChange &lt; 0.2]\n</code></pre>\n<pre><code class=\"language-cs\">public override void Initialize()\n{\n    UniverseSettings.Resolution = Resolution.Daily;\n\n    // add a custom universe data source (defaults to usa-equity)\n    AddUniverse(\"QuiverWikipediaUniverse\", Resolution.Daily, altCoarse =&gt;\n    {\n        foreach (var datum in altCoarse)\n        {\n            Log($\"{datum.Symbol},{datum.PageViews},{datum.WeekPercentChange},{datum.MonthPercentChange}\");\n        }\n\n        // define our selection criteria\n        return from d in altCoarse\n                where d.PageViews &gt; 100m &amp;&amp; d.MonthPercentChange &gt; 0.2m\n                select d.Symbol;\n    });\n}</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Wikipedia Page Views dataset provides QuiverWikipedia and QuiverWikipediaUniverse objects.</p>\n\n<h4>QuiverWikipedia Attributes</h4>\n<p>QuiverWikipedia objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.QuiverWikipedia\"></div>\n\n<h4>QuiverWikipediaUniverse Attributes</h4>\n<p>QuiverWikipediaUniverse objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.QuiverWikipediaUniverse\"></div>"
      }
    ],
    "priceCTA": "From $5/User/mo",
    "vendorWebsite": "https://www.quantconnect.com/market",
    "examples": [
      {
        "id": 69,
        "master_product_id": 7,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example",
        "content": "<p>In this example, we add an universe to select equities based on QuiverWikipedia data. Then buy when the page views of the security's Wikipedia page have been increasing over the last month.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass QuiverWikipediaDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        self.UniverseSettings.Resolution = Resolution.Daily\n\n        # add a custom universe data source (defaults to usa-equity)\n        self.AddUniverse(QuiverWikipediaUniverse, \"QuiverWikipediaUniverse\", Resolution.Daily, self.UniverseSelection)\n\n    def OnData(self, data):\n        points = data.Get(QuiverWikipedia)\n        for point in points.Values:\n            symbol = point.Symbol.Underlying\n            \n            # Buy if the company's Wikipedia page views have increased over the last week and month\n            if point.MonthPercentChange &gt; 0:\n                self.SetHoldings(symbol, 1)\n            \n            # Sell our holdings if the company's Wikipedia page views have not increased over the last month\n            else:\n                self.SetHoldings(symbol, 0)\n\n    def OnSecuritiesChanged(self, changes):\n        for added in changes.AddedSecurities:\n            # Requesting data\n            quiver_wiki_symbol = self.AddData(QuiverWikipedia, added.Symbol).Symbol\n\n            # Historical data\n            history = self.History(QuiverWikipedia, quiver_wiki_symbol, 60, Resolution.Daily)\n            self.Debug(f\"We got {len(history)} items from our history request for Quiver Wikipedia data\")\n\n    def UniverseSelection(self, alt_coarse):\n        for datum in alt_coarse:\n            self.Log(f\"{datum.Symbol},{datum.PageViews},{datum.WeekPercentChange},{datum.MonthPercentChange}\")\n\n        # define our selection criteria\n        return [d.Symbol for d in alt_coarse \\\n                    if d.PageViews &gt; 100 \\\n                    and d.WeekPercentChange &lt; 0.2]</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class QuiverWikipediaDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n\n            UniverseSettings.Resolution = Resolution.Daily;\n            \n            // add a custom universe data source (defaults to usa-equity)\n            AddUniverse&lt;QuiverWikipediaUniverse&gt;(\"QuiverWikipediaUniverse\", Resolution.Daily, altCoarse =&gt;\n            {\n                foreach (var datum in altCoarse)\n                {\n                    Log($\"{datum.Symbol},{datum.PageViews},{datum.WeekPercentChange},{datum.MonthPercentChange}\");\n                }\n\n                // define our selection criteria\n                return from d in altCoarse\n                       where d.PageViews &gt; 100m &amp;&amp; d.MonthPercentChange &gt; 0.2m\n                       select d.Symbol;\n            });\n        }\n        \n        public override void OnData(Slice data)\n        {\n            var points = data.Get&lt;QuiverWikipedia&gt;();\n            foreach (var point in points.Values)\n            {\n                var symbol = point.Symbol.Underlying;\n\n                // Buy if the company's Wikipedia page views have increased over the last month\n                if (point.MonthPercentChange &gt; 0)\n                {\n                    MarketOrder(symbol, 1);\n                } \n                // Sell our holdings if the company's Wikipedia page views have not increased over the last month\n                else\n                {\n                    MarketOrder(symbol, 0);\n                }\n            }\n        }\n\n        public override void OnSecuritiesChanged(SecurityChanges changes)\n        {\n            foreach(var added in changes.AddedSecurities)\n            {\n                // Requesting data\n                var quiverWikiSymbol = AddData&lt;QuiverWikipedia&gt;(added.Symbol).Symbol;\n\n                // Historical data\n                var history = History&lt;QuiverWikipedia&gt;(quiverWikiSymbol, 60, Resolution.Daily);\n                Debug($\"We got {history.Count()} items from our history request for Quiver Wikipedia data\");\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-05-10 06:28:38"
      },
      {
        "id": 215,
        "master_product_id": 7,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example",
        "content": "<p>In this example, we add an universe to select equities based on QuiverWikipedia data. Then buy when the page views of the security's Wikipedia page have been increasing over the last month. Positions are held for one day.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass QuiverWikipediaDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        self.UniverseSettings.Resolution = Resolution.Daily\n        self.AddUniverse(QuiverWikipediaUniverse, \"QuiverWikipediaUniverse\", Resolution.Daily, self.UniverseSelection)\n        \n        self.AddAlpha(WikipediaPageViewsAlphaModel())\n     \n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n        \n        self.AddRiskManagement(NullRiskManagementModel())\n        \n        self.SetExecution(ImmediateExecutionModel())\n\n    def UniverseSelection(self, alt_coarse):\n        for datum in alt_coarse:\n            self.Log(f\"{datum.Symbol},{datum.PageViews},{datum.WeekPercentChange},{datum.MonthPercentChange}\")\n\n        # define our selection criteria\n        return [d.Symbol for d in alt_coarse \\\n                    if d.PageViews &gt; 100 \\\n                    and d.WeekPercentChange &lt; 0.2]\n                \n                \nclass WikipediaPageViewsAlphaModel(AlphaModel):\n    \n    symbol_data_by_symbol = {}\n    \n    def Update(self, algorithm, data):\n        insights = []\n        points = data.Get(QuiverWikipedia)\n        for point in points.Values:            \n            # Buy if the company's Wikipedia page views have increased over the last month\n            if point.MonthPercentChange &gt; 0:\n                insights += [Insight.Price(point.Symbol.Underlying, timedelta(1),  InsightDirection.Up)]\n        return insights\n\n    \n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            symbol = security.Symbol\n            self.symbol_data_by_symbol[symbol] = SymbolData(algorithm, symbol)\n        \n        for security in changes.RemovedSecurities:\n            symbol_data = self.symbol_data_by_symbol.pop(security.Symbol, None)\n            if symbol_data:\n                symbol_data.dispose()\n                \n                \nclass SymbolData:\n    def __init__(self, algorithm, symbol):\n        self.algorithm = algorithm\n        \n        # Requesting data\n        self.quiver_wiki_symbol = algorithm.AddData(QuiverWikipedia, symbol).Symbol\n        \n        # Historical data\n        history = algorithm.History(self.quiver_wiki_symbol, 60, Resolution.Daily)\n        algorithm.Debug(f\"We got {len(history)} items from our history request for {symbol} Quiver Wikipedia data\")\n        \n    def dispose(self):\n        # Unsubscribe from Quiver Wikipedia feed for this security\n        self.algorithm.RemoveSecurity(self.quiver_wiki_symbol)</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class QuiverWikipediaDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n\n            UniverseSettings.Resolution = Resolution.Daily;\n            AddUniverse&lt;QuiverWikipediaUniverse&gt;(\"QuiverWikipediaUniverse\", Resolution.Daily, altCoarse =&gt;\n            {\n                foreach (var datum in altCoarse)\n                {\n                    Log($\"{datum.Symbol},{datum.PageViews},{datum.WeekPercentChange},{datum.MonthPercentChange}\");\n                }\n\n                // define our selection criteria\n                return from d in altCoarse\n                       where d.PageViews &gt; 100m &amp;&amp; d.MonthPercentChange &gt; 0.2m\n                       select d.Symbol;\n            });\n\n            AddAlpha(new WikipediaPageViewsAlphaModel());\n            \n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n            \n            AddRiskManagement(new NullRiskManagementModel());\n            \n            SetExecution(new ImmediateExecutionModel());\n        }\n    }\n\n\n    public class WikipediaPageViewsAlphaModel : AlphaModel\n    {\n        private Dictionary&lt;Symbol, SymbolData&gt; _symbolDataBySymbol = new Dictionary&lt;Symbol, SymbolData&gt;();\n\n        public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n        {\n            var insights = new List&lt;Insight&gt;();\n            \n            var points = data.Get&lt;QuiverWikipedia&gt;();\n            foreach (var point in points.Values)\n            {\n                // Buy if the company's Wikipedia page views have increased over the last month\n                if (point.MonthPercentChange &gt; 0)\n                {\n                    insights.Add(Insight.Price(point.Symbol.Underlying, TimeSpan.FromDays(1),  InsightDirection.Up));\n                }\n            }\n            return insights;\n        }\n\n        public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n        {\n            foreach (var security in changes.AddedSecurities)\n            {\n                var symbol = security.Symbol;\n                _symbolDataBySymbol.Add(symbol, new SymbolData(algorithm, symbol));\n            }\n\n            foreach (var security in changes.RemovedSecurities)\n            {\n                var symbol = security.Symbol;\n                if (_symbolDataBySymbol.ContainsKey(symbol))\n                {\n                    _symbolDataBySymbol[symbol].dispose();\n                    _symbolDataBySymbol.Remove(symbol);\n                }\n            }\n        }\n    }\n    \n    \n    public class SymbolData\n    {\n        private Symbol _quiverWikiSymbol;\n        private QCAlgorithm _algorithm;\n        \n        public SymbolData(QCAlgorithm algorithm, Symbol symbol)\n        {\n            _algorithm = algorithm;\n            \n            // Requesting data\n            _quiverWikiSymbol = algorithm.AddData&lt;QuiverWikipedia&gt;(symbol).Symbol;\n            \n            // Historical data\n            var history = algorithm.History&lt;QuiverWikipedia&gt;(_quiverWikiSymbol, 60, Resolution.Daily);\n            algorithm.Debug($\"We got {history.Count()} items from our history request for {symbol} Quiver Wikipedia data\");\n        }\n        \n        public void dispose()\n        {\n            // Unsubscribe from Quiver Wikipedia feed for this security\n            _algorithm.RemoveSecurity(_quiverWikiSymbol);\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-05-10 06:29:03"
      },
      {
        "id": 654,
        "master_product_id": 7,
        "position": 3,
        "section": "examples",
        "title": "Notebook",
        "content": "",
        "updated": "2021-08-10 21:23:20"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 7,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>Wikipedia Page Views is allowed to be used in the cloud \r\n            for personal and commercial projects with a subscription. The data is permissioned for use within \r\n            the licensed organization only</p><p>Subscription Required | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>Wikipedia Page Views can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 5 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>Wikipedia Page Views is allowed to be used for free by approved Alpha Stream authors with more than 3 \r\n                    Alpha Streams listed in the marketplace. The Quiver Quantitative will add on a charge of 2 Basis Points \r\n                    for the use of the data to the Alpha Stream reserve price.</p>\r\n                    <p>Free for Authors with 3+ Alphas | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 56,
        "name": "Quiver Quantitative - Wikipedia Page Views",
        "description": "<p>Wikipedia Page Views archived in LEAN format for on premise backtesting and research. One file per ticker.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Download On Premise",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "5 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 41,
        "name": "Quiver Quantitative - Wikipedia Page Views",
        "description": "<p>Harness Wikipedia Page Views data in the QuantConnect Cloud for your backtesting and live trading purposes.\n </p>\n    <ul><li>Curated, clean data</li>\n         <li>Updated nightly at 4am</li>\n         <li>Mapped to US Equity data with full historical SIP feed</li>\n   </ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "$15/mo",
          "monthlyPrice": 15,
          "yearlyPrice": 165,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 165
      }
    ],
    "headerColor": "ff1841"
  },
  {
    "name": "WallStreetBets",
    "vendorName": "Quiver Quantitative",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/quiver-logo.png",
    "landingFileName": "quiver-quantitative-wallstreetbets.html",
    "url": "/datasets/quiver-quantitative-wallstreetbets",
    "short_description": "WallStreetBets by Quiver Quantitative tracks mentions of US equities on the social media site Reddit. Useful for trading or avoiding popular meme stocks.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The WallStreetBets dataset by Quiver Quantitative tracks daily mentions of different equities on Reddit\u2019s popular WallStreetBets forum. The data covers 6,000 Equities, starts in August 2018, and is delivered on a daily frequency. The dataset is created by scraping the daily discussion threads on r/WallStreetBets and parsing the comments for ticker mentions.</p>\n\n<p>This dataset depends on the <a href=\"https://www.quantconnect.com/datasets/quantconnect-us-equity-security-master\">US Equity Security Master</a> dataset because the US Equity Security Master dataset contains information on splits, dividends, and symbol changes.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p><a href=\"https://www.quiverquant.com/\">Quiver Quantitative</a> was founded by two college students in February 2020 with the goal of bridging the information gap between Wall Street and non-professional investors. Quiver allows retail investors to tap into the power of big data and have access to actionable, easy to interpret data that hasn\u2019t already been dissected by Wall Street.</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\naapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nself.quiverWSBSymbol = self.AddData(QuiverWallStreetBets, aapl).Symbol\n\nself.AddUniverse(QuiverWallStreetBetsUniverse, \"QuiverWallStreetBetsUniverse\", Resolution.Daily, self.UniverseSelection)</code></pre>\n<pre><code class=\"language-cs\">\nvar aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\nvar quiverWSBSymbol = AddData&lt;QuiverWallStreetBets&gt;(aapl).Symbol;\n\nAddUniverse&lt;QuiverWallStreetBetsUniverse&gt;(\"QuiverWallStreetBetsUniverse\", Resolution.Daily, UniverseSelection);</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>August 2018</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>6,000 US Equities</td>\n        </tr><tr><td>Data Density</td>\n            <td>Sparse</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>The Quiver Quantitative WallStreetBets dataset enables researchers to create strategies using the latest activity on the WallStreetBets daily discussion thread. Examples include:</p>\n<ul><li>Trading any security that is being mentioned</li>\n<li>Trading securities that are receiving more/less mentions than they were previously</li>\n<li>Trading the security that is being mentioned the most/least for the day</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_a0daf4e8e8e5c99277a075e5b0208594.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The WallStreetBets dataset provides QuiverWallStreetBets and QuiverWallStreetBetsUniverse objects.</p>\n\n<h4>QuiverWallStreetBets Attributes</h4>\n<p>QuiverWallStreetBets objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.QuiverWallStreetBets\"></div>\n\n<h4>QuiverWallStreetBetsUniverse Attributes</h4>\n<p>QuiverWallStreetBetsUniverse objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.QuiverWallStreetBetsUniverse\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add WallStreetBets data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass QuiverWallStreetBetsDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        aapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        quiverWSBSymbol = self.AddData(QuiverWallStreetBets, aapl).Symbol</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class QuiverWallStreetBetsDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n            var aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            var quiverWSBSymbol = AddData&lt;QuiverWallStreetBets&gt;(aapl).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(QuiverWallStreetBets)\n    for kvp in points:\n        Log(f\u2019Symbol: {kvp.Key} - Mentions: {kvp.Value.Mentions}\u2019)\n</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var points = data.Get&lt;QuiverWallStreetBets&gt;();\n    foreach (var point in points.Values)\n    {\n        Log($\"Symbol: {point.Symbol.Underlying} - Mentions: {point.Mentions}\");\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for WallStreetBets mentions by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(QuiverWallStreetBets, quiverWSBSymbol, 60, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History&lt;QuiverWallStreetBets&gt;(quiverWSBSymbol, 60, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Universe Selection",
        "content": "<p>You can add an universe based on QuiverQallStreetBets data.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def Initialize(self):\n    # Data ADDED via universe selection is added with Daily resolution.\n    self.UniverseSettings.Resolution = Resolution.Daily\n\n    # add a custom universe data source (defaults to usa-equity)\n    self.AddUniverse(QuiverWallStreetBetsUniverse, \"QuiverWallStreetBetsUniverse\", Resolution.Daily, self.UniverseSelection)\n        \ndef UniverseSelection(self, alt_coarse):\n    for datum in alt_coarse:\n        self.Log(f\"{datum.Symbol},{datum.Mentions},{datum.Rank},{datum.Sentiment}\")\n        \n    # define our selection criteria\n    return [d.Symbol for d in alt_coarse \\\n                if d.Mentions &gt; 100 \\\n                and d.Rank &lt; 100]</code></pre>\n<pre><code class=\"language-cs\">public override void Initialize()\n{\n    // Data ADDED via universe selection is added with Daily resolution.\n    UniverseSettings.Resolution = Resolution.Daily;\n\n    // add a custom universe data source (defaults to usa-equity)\n    AddUniverse(\"QuiverWallStreetBetsUniverse\", Resolution.Daily, altCoarse =&gt;\n    {\n        foreach (var datum in altCoarse)\n        {\n            Log($\"{datum.Symbol},{datum.Mentions},{datum.Rank},{datum.Sentiment}\");\n        }\n\n        // define our selection criteria\n        return from d in altCoarse\n            where d.Mentions &gt; 10 &amp;&amp; d.Rank &gt; 10\n            select d.Symbol;\n    });\n}</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The WallStreetBets dataset provides QuiverWallStreetBets and QuiverWallStreetBetsUniverse objects.</p>\n\n<h4>QuiverWallStreetBets Attributes</h4>\n<p>QuiverWallStreetBets objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.QuiverWallStreetBets\"></div>\n\n<h4>QuiverWallStreetBetsUniverse Attributes</h4>\n<p>QuiverWallStreetBetsUniverse objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.QuiverWallStreetBetsUniverse\"></div>"
      }
    ],
    "priceCTA": "From $5/User/mo",
    "vendorWebsite": "https://www.quantconnect.com/market",
    "examples": [
      {
        "id": 82,
        "master_product_id": 8,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example",
        "content": "<p>In this example, we add an universe selecting equities based on daily WallStreetBets data.  Then buy when the security is mentioned on WallStreetBets more than 5 times in a day and short sell otherwise.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class QuiverWallStreetBetsDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        self.UniverseSettings.Resolution = Resolution.Daily\n        self.AddUniverse(QuiverWallStreetBetsUniverse, \"QuiverWallStreetBetsUniverse\", Resolution.Daily, self.UniverseSelection)\n\n    def OnData(self, data):\n        points = data.Get(QuiverWallStreetBets)\n        for point in points.Values:\n            symbol = point.Symbol.Underlying\n            \n            # Buy if the stock was mentioned more than 5 times in the WallStreetBets daily discussion\n            if point.Mentions &gt; 5 and not self.Portfolio[symbol].IsLong:\n                self.MarketOrder(symbol, 1)\n                \n            # Otherwise, short sell\n            elif point.Mentions &lt;= 5 and not self.Portfolio[symbol].IsShort:\n                self.MarketOrder(symbol, -1)\n\n    def OnSecuritiesChanged(self, changes):\n        for added in changes.AddedSecurities:\n            # Requesting data\n            quiverWSBSymbol = self.AddData(QuiverWallStreetBets, added.Symbol).Symbol\n\n            # Historical data\n            history = self.History(QuiverWallStreetBets, quiverWSBSymbol, 60, Resolution.Daily)\n            self.Debug(f\"We got {len(history)} items from our history request\")\n\n    def UniverseSelection(self, alt_coarse):\n        for datum in alt_coarse:\n            self.Log(f\"{datum.Symbol},{datum.Mentions},{datum.Rank},{datum.Sentiment}\")\n        \n        # define our selection criteria\n        return [d.Symbol for d in alt_coarse \\\n                    if d.Mentions &gt; 10 \\\n                    and d.Rank &lt; 100]</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class QuiverWallStreetBetsDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n\n            UniverseSettings.Resolution = Resolution.Daily;\n            // add a custom universe data source (defaults to usa-equity)\n            AddUniverse&lt;QuiverWallStreetBetsUniverse&gt;(\"QuiverWallStreetBetsUniverse\", Resolution.Daily, altCoarse =&gt;\n            {\n                foreach (var datum in altCoarse)\n                {\n                    Log($\"{datum.Symbol},{datum.Mentions},{datum.Rank},{datum.Sentiment}\");\n                }\n\n                // define our selection criteria\n                return from d in altCoarse\n                       where d.Mentions &gt; 10 &amp;&amp; d.Rank &lt; 100\n                       select d.Symbol;\n            });\n        }\n\n        public override void OnData(Slice data)\n        {\n            var points = data.Get&lt;QuiverWallStreetBets&gt;();\n            foreach (var point in points.Values)\n            {\n                var symbol = point.Symbol.Underlying;\n                \n                // Buy if the stock was mentioned more than 5 times in the WallStreetBets daily discussion\n                if (point.Mentions &gt; 5 &amp;&amp; !Portfolio[symbol].IsLong)\n                {\n                    MarketOrder(symbol, 1);\n                }\n                // Otherwise, short sell\n                else if (point.Mentions &lt;= 5 &amp;&amp; !Portfolio[symbol].IsShort)\n                {\n                    MarketOrder(symbol, -1);\n                }\n            }\n        }\n\n        public override void OnSecuritiesChanged(SecurityChanges changes)\n        {\n            foreach(var added in changes.AddedSecurities)\n            {\n                // Requesting data\n                var quiverWSBSymbol = AddData&lt;QuiverWallStreetBets&gt;(added.Symbol).Symbol;\n\n                // Historical data\n                var history = History&lt;QuiverWallStreetBets&gt;(quiverWSBSymbol, 60, Resolution.Daily);\n                Debug($\"We got {history.Count()} items from our history request\");\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-05-09 17:57:17"
      },
      {
        "id": 214,
        "master_product_id": 8,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example",
        "content": "<p>In this example, we add an universe selecting equities based on daily WallStreetBets data. Then buy when the security is mentioned on WallStreetBets more than 5 times in a day and short sell otherwise. Positions are held for one day.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class QuiverWallStreetBetsDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        self.UniverseSettings.Resolution = Resolution.Daily\n        self.AddUniverse(QuiverWallStreetBetsUniverse, \"QuiverWallStreetBetsUniverse\", Resolution.Daily, self.UniverseSelection)\n        \n        self.AddAlpha(WallStreamBetsAlphaModel())\n        \n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n        \n        self.AddRiskManagement(NullRiskManagementModel())\n        \n        self.SetExecution(ImmediateExecutionModel())\n\n    def UniverseSelection(self, alt_coarse):\n        for datum in alt_coarse:\n            self.Log(f\"{datum.Symbol},{datum.Mentions},{datum.Rank},{datum.Sentiment}\")\n        \n        # define our selection criteria\n        return [d.Symbol for d in alt_coarse\\\n                    if d.Mentions &gt; 10 \\\n                    and d.Rank &lt; 100]\n\nclass WallStreamBetsAlphaModel(AlphaModel):\n    \n    symbol_data_by_symbol = {}\n    \n    def __init__(self, mentions_threshold=5):\n        self.mentions_threshold = mentions_threshold\n    \n    def Update(self, algorithm, data):\n        \n        insights = []\n        \n        points = data.Get(QuiverWallStreetBets)\n        for point in points.Values:\n            # Buy if the stock was mentioned more than 5 times in the WallStreetBets daily discussion, otherwise short sell\n            target_direction = InsightDirection.Up if point.Mentions &gt; self.mentions_threshold else InsightDirection.Down\n            self.symbol_data_by_symbol[point.Symbol.Underlying].target_direction = target_direction\n            \n        for symbol, symbol_data in self.symbol_data_by_symbol.items():\n            # Ensure we have security data for the current Slice\n            if not (data.ContainsKey(symbol) and data[symbol] is not None):\n                continue\n            \n            if symbol_data.target_direction is not None:\n                insights += [Insight.Price(symbol, timedelta(1), symbol_data.target_direction)]\n                symbol_data.target_direction = None\n\n        return insights\n        \n        \n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            symbol = security.Symbol\n            self.symbol_data_by_symbol[symbol] = SymbolData(algorithm, symbol)\n        \n        for security in changes.RemovedSecurities:\n            symbol_data = self.symbol_data_by_symbol.pop(security.Symbol, None)\n            if symbol_data:\n                symbol_data.dispose()\n                \n                \nclass SymbolData:\n    target_direction = None\n    \n    def __init__(self, algorithm, symbol):\n        self.algorithm = algorithm\n        \n        # Requesting data\n        self.quiver_wsb_symbol = algorithm.AddData(QuiverWallStreetBets, symbol).Symbol\n        \n        # Historical data\n        history = algorithm.History(self.quiver_wsb_symbol, 60, Resolution.Daily)\n        algorithm.Debug(f\"We got {len(history)} items from our history request for {symbol} Quiver WallStreetBets data\")\n        \n    def dispose(self):\n        # Unsubscribe from the Quiver WallStreetBets feed for this security\n        self.algorithm.RemoveSecurity(self.quiver_wsb_symbol)</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class QuiverWallStreetBetsDataAlgorithm : QCAlgorithm\n    { \n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n\n            UniverseSettings.Resolution = Resolution.Daily;\n            AddUniverse&lt;QuiverWallStreetBetsUniverse&gt;(\"QuiverWallStreetBetsUniverse\", Resolution.Daily, altCoarse =&gt;\n            {\n                foreach (var datum in altCoarse)\n                {\n                    Log($\"{datum.Symbol},{datum.Mentions},{datum.Rank},{datum.Sentiment}\");\n                }\n\n                // define our selection criteria\n                return from d in altCoarse\n                       where d.Mentions &gt; 10 &amp;&amp; d.Rank &gt; 10\n                       select d.Symbol;\n            });\n\n            AddAlpha(new WallStreamBetsAlphaModel());\n            \n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n            \n            AddRiskManagement(new NullRiskManagementModel());\n            \n            SetExecution(new ImmediateExecutionModel());\n        }\n    }\n\n    public class WallStreamBetsAlphaModel : AlphaModel\n    {\n        private Dictionary&lt;Symbol, SymbolData&gt; _symbolDataBySymbol = new Dictionary&lt;Symbol, SymbolData&gt;();\n        private int _mentionsThreshold;\n        \n        public WallStreamBetsAlphaModel(int mentionsThreshold=5)\n        {\n            _mentionsThreshold = mentionsThreshold;\n        }\n\n        public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n        {\n            var insights = new List&lt;Insight&gt;();\n            \n            var points = data.Get&lt;QuiverWallStreetBets&gt;();\n            foreach (var point in points.Values)\n            {\n                // Buy if the stock was mentioned more than 5 times in the WallStreetBets daily discussion, otherwise short sell\n                var targetDirection = point.Mentions &gt; _mentionsThreshold ? InsightDirection.Up : InsightDirection.Down;\n                _symbolDataBySymbol[point.Symbol.Underlying].targetDirection = targetDirection;\n            }\n            \n            foreach (var kvp in _symbolDataBySymbol)\n            {\n                var symbol = kvp.Key;\n                var symbolData = kvp.Value;\n                \n                // Ensure we have security data for the current Slice\n                if (!(data.ContainsKey(symbol) &amp;&amp; data[symbol] != null))\n                {\n                    continue;\n                }\n                \n                if (symbolData.targetDirection != null)\n                {\n                    insights.Add(Insight.Price(symbol, TimeSpan.FromDays(1), (InsightDirection)symbolData.targetDirection));\n                    symbolData.targetDirection = null;\n                }\n            }\n            return insights;\n        }\n\n        public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n        {\n            foreach (var security in changes.AddedSecurities)\n            {\n                var symbol = security.Symbol;\n                _symbolDataBySymbol.Add(symbol, new SymbolData(algorithm, symbol));\n            }\n\n            foreach (var security in changes.RemovedSecurities)\n            {\n                var symbol = security.Symbol;\n                if (_symbolDataBySymbol.ContainsKey(symbol))\n                {\n                    _symbolDataBySymbol[symbol].dispose();\n                    _symbolDataBySymbol.Remove(symbol);\n                }\n            }\n        }\n    }\n    \n    public class SymbolData\n    {\n        private Symbol _quiverWSBSymbol;\n        private QCAlgorithm _algorithm;\n        public InsightDirection? targetDirection = null;\n        \n        public SymbolData(QCAlgorithm algorithm, Symbol symbol)\n        {\n            _algorithm = algorithm;\n            \n            // Requesting data\n            _quiverWSBSymbol = algorithm.AddData&lt;QuiverWallStreetBets&gt;(symbol).Symbol;\n            \n            // Historical data\n            var history = algorithm.History&lt;QuiverWallStreetBets&gt;(_quiverWSBSymbol, 60, Resolution.Daily);\n            algorithm.Debug($\"We got {history.Count()} items from our history request for {symbol} Quiver WallStreetBets data\");\n        }\n        \n        public void dispose()\n        {\n            // Unsubscribe from the Quiver WallStreetBets feed for this security\n            _algorithm.RemoveSecurity(_quiverWSBSymbol);\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-05-09 17:57:45"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 8,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>WallStreetBets is allowed to be used in the cloud \r\n            for personal and commercial projects with a subscription. The data is permissioned for use within \r\n            the licensed organization only</p><p>Subscription Required | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>WallStreetBets can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 5 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>WallStreetBets is allowed to be used for free by approved Alpha Stream authors with more than 3 \r\n                    Alpha Streams listed in the marketplace. The Quiver Quantitative will add on a charge of 2 Basis Points \r\n                    for the use of the data to the Alpha Stream reserve price.</p>\r\n                    <p>Free for Authors with 3+ Alphas | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 54,
        "name": "Quiver Quantitative - WallStreetBets",
        "description": "<p>WallStreetBets archived in LEAN format for on premise backtesting and research. One file per ticker.</p>\n    <ul><li>Ownership of the data for internal use</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Download On Premise",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "5 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 43,
        "name": "Quiver Quantitative - WallStreetBets",
        "description": "<p>Harness WallStreebets data in the QuantConnect Cloud for your backtesting and live trading purposes.\n </p>\n    <ul><li>Curated, clean data</li>\n         <li>Updated nightly at 4am</li>\n         <li>Mapped to US Equity data with full historical SIP feed</li>\n   </ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "$5/mo",
          "monthlyPrice": 5,
          "yearlyPrice": 55,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 55
      }
    ],
    "headerColor": "340064"
  },
  {
    "name": "US SEC Filings",
    "vendorName": "Securities and Exchange Commission",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/sec-logo.png",
    "landingFileName": "us-security-exchange-commission-filings.html",
    "url": "/datasets/us-security-exchange-commission-filings",
    "short_description": "Semi-parsed Quarterly Financial Reports (10-Q) and Annual Financial Report (8-K) filings of companies for US Equities.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The US SEC Filings dataset provides the quarterly financial earning reports that the United States Securities and Exchange Commission (SEC) requires from publicly traded companies in the US. The data covers 15,000 US Equities, starts in January 1998, and is delivered on a daily frequency. The data is sourced from the SEC's Electronic Data Gathering, Analysis, and Retrieval (EDGAR) system. QuantConnect downloads and formats the Quarterly Financial Reports (10-Q) and Annual Financial Report (8-K) filings of companies into a format for easy consumption by LEAN.\n</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>The mission of the U.S. Securities and Exchange Commission is to protect investors, maintain fair, orderly, and efficient markets, and facilitate capital formation. The SEC oversees the key participants in the securities world, including securities exchanges, securities brokers and dealers, investment advisors, and mutual funds. The SEC is concerned primarily with promoting the disclosure of important market-related information, maintaining fair dealing, and protecting against fraud.</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nself.aapl= self.AddEquity(\"AAPL\", Resolution.Minute).Symbol\nself.report8K = self.AddData(SECReport8K, self.aapl).Symbol\nself.report10K = self.AddData(SECReport10K, self.aapl).Symbol\nself.report10Q = self.AddData(SECReport10Q, self.aapl).Symbol\n</code></pre>\n\n<pre><code class=\"language-cs\">\n_aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n_report8K = AddData&lt;SECReport8K&gt;(_aapl, Resolution.Daily).Symbol;\n_report10K = AddData&lt;SECReport10K&gt;(_aapl, Resolution.Daily).Symbol;\n_report10Q = AddData&lt;SECReport10Q&gt;(_aapl, Resolution.Daily).Symbol;\n</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 1998</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>15,000 US Equities</td>\n        </tr><tr><td>Data Density</td>\n            <td>Sparse</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>The US SEC Filings dataset enables researchers to create strategies using information found in SEC reports. Examples include:</p>\n\n<ul><li>Information about corporate earnings can be found in the documents and extracted for further analysis</li>\n<li>The text content of the documents can be used for sentiment analysis (e.g.: keyword scoring and ranking)</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_12b50897061894b527f0cc7069087bd1.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US SEC Filings dataset provides SECReport8K, SECReport10K, and SECReport10Q objects.</p>\n\n<h4>Report 8K Attributes</h4>\n<p>SECReport8K objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.SECReport8K\"></div>\n\n<h4>Report 10K Attributes</h4>\n<p>SECReport10K objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.SECReport10K\"></div>\n\n<h4>Report 10Q Attributes</h4>\n<p>SECReport10Q objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.SECReport10Q\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add SEC Fillings data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass SECReportAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2019, 8, 21)\n        self.SetCash(100000)\n\n        self.aapl= self.AddEquity(\"AAPL\", Resolution.Minute).Symbol\n        self.report8K = self.AddData(SECReport8K, self.aapl).Symbol\n        self.report10K = self.AddData(SECReport10K, self.aapl).Symbol\n        self.report10Q = self.AddData(SECReport10Q, self.aapl).Symbol\n</code></pre>\n\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class SECReportAlgorithm : QCAlgorithm\n    {\n        private Symbol _aapl;\n        private Symbol _report8K;\n        private Symbol _report10K;\n        private Symbol _report10Q;\n\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2019, 8, 21);\n            SetCash(100000);\n\n            _aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            _report8K = AddData&lt;SECReport8K&gt;(_aapl, Resolution.Daily).Symbol;\n            _report10K = AddData&lt;SECReport10K&gt;(_aapl, Resolution.Daily).Symbol;\n            _report10Q = AddData&lt;SECReport10Q&gt;(_aapl, Resolution.Daily).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass SECReportAlgorithm(QCAlgorithm):\n    def OnData(self, data):\n        if self.report8K in data:\n            report8K_data = data.Get(SECReport8K, self.report8K)\n            documentsCount = len(report8K_data.Report.Documents);\n            self.Log(f'{documentsCount} found for {self.aapl} on {self.Time}');\n</code></pre>\n\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class SECReportAlgorithm : QCAlgorithm\n    {\n        if (data.ContainsKey(_report8K))\n        {\n            var report8KData = data.Get(_report8K);\n            var documentsCount = report8KData.Report.Documents.Count;\n            Log($\"{documentsCount} found for {_aapl} on {Time}\");\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for SEC Fillings data by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nreport8K_history = self.History(SECReport8K, self.report8K, 60, Resolution.Daily)\nreport10K_history = self.History(SECReport10K, self.report10K, 60, Resolution.Daily)\nreport10Q_history = self.History(SECReport10Q, self.report10Q, 60, Resolution.Daily)\n</code></pre>\n<pre><code class=\"language-cs\">\nvar report8KHistory = History&lt;SECReport8K&gt;(_report8K, 60, Resolution.Daily);\nvar report10KHistory = History&lt;SECReport10K&gt;(_report10K, 60, Resolution.Daily);\nvar report10QHistory = History&lt;SECReport10Q&gt;(_report10Q, 60, Resolution.Daily);\n</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US SEC Filings dataset provides SECReport8K, SECReport10K, and SECReport10Q objects.</p>\n\n<h4>Report 8K Attributes</h4>\n<p>SECReport8K objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.SECReport8K\"></div>\n\n<h4>Report 10K Attributes</h4>\n<p>SECReport10K objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.SECReport10K\"></div>\n\n<h4>Report 10Q Attributes</h4>\n<p>SECReport10Q objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.SECReport10Q\"></div>"
      }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "https://www.sec.gov",
    "examples": [
      {
        "id": 95,
        "master_product_id": 9,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example",
        "content": "<p>This example shows how to access the text in the documents of the report. In this example, we buy if the sum of letters in the report documents is greater than 20,000 and remain in cash otherwise. Instead of trading based on how long the report is, we could use sentiment analysis by scoring keywords.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass SECReport8KAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2019, 8, 21)\n        self.SetCash(100000)\n\n        self.mappings = {}\n        self.UniverseSettings.Resolution = Resolution.Minute\n        self.AddUniverse(self.CoarseSelector)\n\n        # Request underlying equity data.\n        ibm = self.AddEquity(\"IBM\", Resolution.Minute).Symbol\n        # Add news data for the underlying IBM asset\n        earningsFiling = self.AddData(SECReport10Q, ibm, Resolution.Daily).Symbol\n        # Request 120 days of history with the SECReport10Q IBM custom data Symbol\n        history = self.History(SECReport10Q, earningsFiling, 120, Resolution.Daily)\n        # Count the number of items we get from our history request\n        self.Debug(f\"We got {len(history)} items from our history request\")\n\n    def CoarseSelector(self, coarse):\n        coarse = sorted([cf for cf in coarse if cf.HasFundamentalData],\n            key=lambda cf: cf.DollarVolume, reverse=True)[:10]\n        return [cf.Symbol for cf in coarse]\n\n    def OnData(self, data):\n        # Store the symbols we want to long in a list\n        # so that we can have an equal-weighted portfolio\n        longEquitySymbols = []\n\n        # Get all SEC data and loop over it\n        for report in data.Get(SECReport8K).Values:\n            # Get the length of all contents contained within the report\n            reportTextLength = sum([len(i.Text) for i in report.Report.Documents])\n\n            if reportTextLength &gt; 20000:\n                longEquitySymbols.append(report.Symbol.Underlying)\n\n        for equitySymbol in longEquitySymbols:\n            self.SetHoldings(equitySymbol, 1.0 / len(longEquitySymbols))\n\n    def OnSecuritiesChanged(self, changes):\n        for symbol in [s.Symbol for s in changes.AddedSecurities]:\n            self.mappings[symbol] = self.AddData(SECReport8K, symbol).Symbol\n\n        for symbol in [s.Symbol for s in changes.RemovedSecurities]:\n            # If removed from the universe, liquidate and remove the custom data from the algorithm\n            self.Liquidate(symbol)\n            reportSymbol = self.mappings.pop(symbol, None)\n            if reportSymbol:\n                self.RemoveSecurity(reportSymbol)\n</code></pre>\n\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class SECReport8KAlgorithm : QCAlgorithm\n    {\n        private Dictionary&lt;Symbol, Symbol&gt; _mappings = new Dictionary&lt;Symbol, Symbol&gt;();\n\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2019, 8, 21);\n            SetCash(100000);\n\n            UniverseSettings.Resolution = Resolution.Minute;\n            AddUniverse(CoarseSelector);\n\n            // Request underlying equity data.\n            var ibm = AddEquity(\"IBM\", Resolution.Minute).Symbol;\n            // Add SEC report 10-Q data for the underlying IBM asset\n            var earningsFiling = AddData&lt;SECReport10Q&gt;(ibm, Resolution.Daily).Symbol;\n            // Request 120 days of history with the SECReport10Q IBM custom data Symbol.\n            var history = History&lt;SECReport10Q&gt;(earningsFiling, 120, Resolution.Daily);\n            // Count the number of items we get from our history request\n            Debug($\"We got {history.Count()} items from our history request\");\n        }\n\n        public IEnumerable&lt;Symbol&gt; CoarseSelector(IEnumerable&lt;CoarseFundamental&gt; coarse)\n        {\n            return coarse.Where(x =&gt; x.HasFundamentalData)\n                .OrderByDescending(x =&gt; x.DollarVolume)\n                .Take(10).Select(x =&gt; x.Symbol);\n        }\n\n        public override void OnData(Slice data)\n        {\n            // Store the symbols we want to long in a list\n            // so that we can have an equal-weighted portfolio\n            var longEquitySymbols = new List&lt;Symbol&gt;();\n\n            // Get all SEC data and loop over it\n            foreach (var report in data.Get&lt;SECReport8K&gt;().Values)\n            {\n                // Get the length of all contents contained within the report\n                var reportTextLength = report.Report.Documents.Select(x =&gt; x.Text.Length).Sum();\n\n                if (reportTextLength &gt; 20000)\n                {\n                    longEquitySymbols.Add(report.Symbol.Underlying);\n                }\n            }\n\n            foreach (var equitySymbol in longEquitySymbols)\n            {\n                SetHoldings(equitySymbol, 1m / longEquitySymbols.Count);\n            }\n        }\n\n        public override void OnSecuritiesChanged(SecurityChanges changes)\n        {\n            foreach (var symbol in changes.AddedSecurities.Select(x =&gt; x.Symbol))\n            {\n                // If added to universe, adds SECReport8K\n                _mappings[symbol] = AddData&lt;SECReport8K&gt;(symbol).Symbol;\n            }\n\n            foreach (var symbol in changes.RemovedSecurities.Select(x =&gt; x.Symbol))\n            {\n                // If removed from the universe, liquidate and remove the custom data from the algorithm\n                Liquidate(symbol, \"Removed from Universe\");\n                \n                Symbol reportSymbol;\n                if (_mappings.TryGetValue(symbol, out reportSymbol))\n                {\n                    RemoveSecurity(reportSymbol);\n                    _mappings.Remove(symbol);\n                }\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-10-29 23:12:28"
      },
      {
        "id": 222,
        "master_product_id": 9,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example",
        "content": "<p>This example shows how to access the text in the documents of the report. In this example, we buy if the sum of letters in the report documents is greater than 20,000 and remain in cash otherwise. Instead of trading based on how long the report is, we could use sentiment analysis by scoring keywords.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass SECReport8KAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2019, 8, 21)\n        self.SetCash(100000)\n\n        self.UniverseSettings.Resolution = Resolution.Minute\n        self.AddUniverse(self.CoarseSelector)\n\n        self.AddAlpha(SECReport8KAlphaModel())\n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n\n        # Request underlying equity data.\n        ibm = self.AddEquity(\"IBM\", Resolution.Minute).Symbol\n        # Add news data for the underlying IBM asset\n        earningsFiling = self.AddData(SECReport10Q, ibm, Resolution.Daily).Symbol\n        # Request 120 days of history with the SECReport10Q IBM custom data Symbol\n        history = self.History(SECReport10Q, earningsFiling, 120, Resolution.Daily)\n        # Count the number of items we get from our history request\n        self.Debug(f\"We got {len(history)} items from our history request\")\n\n    def CoarseSelector(self, coarse):\n        coarse = sorted([cf for cf in coarse if cf.HasFundamentalData],\n            key=lambda cf: cf.DollarVolume, reverse=True)[:10]\n        return [cf.Symbol for cf in coarse]\n\nclass SECReport8KAlphaModel(AlphaModel):\n    mappings = {}\n    \n    def Update(self, algorithm, data):\n        # Store the symbols we want to long in a list\n        # so that we can have an equal-weighted portfolio\n        insights = []\n\n        # Get all SEC data and loop over it\n        for report in data.Get(SECReport8K).Values:\n            # Get the length of all contents contained within the report\n            reportTextLength = sum([len(i.Text) for i in report.Report.Documents])\n\n            if reportTextLength &gt; 20000:\n                insights.append(Insight.Price(report.Symbol.Underlying, timedelta(1), InsightDirection.Up))\n\n        return insights\n\n    def OnSecuritiesChanged(self, algorithm, changes):\n        for symbol in [s.Symbol for s in changes.AddedSecurities]:\n            # If added to universe, adds SECReport8K\n            self.mappings[symbol] = algorithm.AddData(SECReport8K, symbol).Symbol\n            # Request 120 days of history with the SECReport8K custom data Symbol.\n            history = algorithm.History(SECReport8K, self.mappings[symbol], 120, Resolution.Daily)\n            # Count the number of items we get from our history request\n            algorithm.Debug(f\"We got {len(history)} items from our history request\")\n\n        for symbol in [s.Symbol for s in changes.RemovedSecurities]:\n            # If removed from the universe, remove the custom data from the algorithm\n            reportSymbol = self.mappings.pop(symbol, None)\n            if reportSymbol:\n                algorithm.RemoveSecurity(reportSymbol)\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class SECReport8KAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2019, 8, 21);\n            SetCash(100000);\n\n            UniverseSettings.Resolution = Resolution.Minute;\n            AddUniverse(CoarseSelector);\n\n            AddAlpha(new SECReport8KAlphaModel());\n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n\n            // Request underlying equity data.\n            var ibm = AddEquity(\"IBM\", Resolution.Minute).Symbol;\n            // Add SEC report 10-Q data for the underlying IBM asset\n            var earningsFiling = AddData&lt;SECReport10Q&gt;(ibm, Resolution.Daily).Symbol;\n            // Request 120 days of history with the SECReport10Q IBM custom data Symbol.\n            var history = History&lt;SECReport10Q&gt;(earningsFiling, 120, Resolution.Daily);\n            // Count the number of items we get from our history request\n            Debug($\"We got {history.Count()} items from our history request\");\n        }\n\n        public IEnumerable&lt;Symbol&gt; CoarseSelector(IEnumerable&lt;CoarseFundamental&gt; coarse)\n        {\n            return coarse.Where(x =&gt; x.HasFundamentalData)\n                .OrderByDescending(x =&gt; x.DollarVolume)\n                .Take(10).Select(x =&gt; x.Symbol);\n        }\n    }\n\n    public class SECReport8KAlphaModel : AlphaModel\n    {\n        private Dictionary&lt;Symbol, Symbol&gt; _mappings = new Dictionary&lt;Symbol, Symbol&gt;();\n\n        public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n        {\n            // Store the symbols we want to long in a list\n            // so that we can have an equal-weighted portfolio\n            var insights = new List&lt;Insight&gt;();\n\n            // Get all SEC data and loop over it\n            foreach (var report in data.Get&lt;SECReport8K&gt;().Values)\n            {\n                // Get the length of all contents contained within the report\n                var reportTextLength = report.Report.Documents.Select(x =&gt; x.Text.Length).Sum();\n\n                if (reportTextLength &gt; 20000)\n                {\n                    insights.Add(Insight.Price(report.Symbol.Underlying, TimeSpan.FromDays(1), InsightDirection.Up));\n                }\n            }\n\n            return insights;\n        }\n\n        public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n        {\n            foreach (var symbol in changes.AddedSecurities.Select(x =&gt; x.Symbol))\n            {\n                // If added to universe, adds SECReport8K\n                _mappings[symbol] = algorithm.AddData&lt;SECReport8K&gt;(symbol).Symbol;\n                // Request 120 days of history with the SECReport8K custom data Symbol.\n                var history = algorithm.History&lt;SECReport8K&gt;(_mappings[symbol], 120, Resolution.Daily);\n                // Count the number of items we get from our history request\n                algorithm.Debug($\"We got {history.Count()} items from our history request\");\n            }\n        \t\n            foreach (var symbol in changes.RemovedSecurities.Select(x =&gt; x.Symbol))\n            {\n                // If removed from the universe, remove the custom data from the algorithm\n                Symbol reportSymbol;\n                if (_mappings.TryGetValue(symbol, out reportSymbol))\n                {\n                        algorithm.RemoveSecurity(reportSymbol);\n                        _mappings.Remove(symbol);\n                }\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-10-29 23:12:54"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 9,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>US SEC Filings is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>US SEC Filings can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 10 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>US SEC Filings is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 42,
        "name": "SEC Filings - Cloud Access",
        "description": "<p>SEC Filling data in the QuantConnect Cloud for your backtesting and live trading purposes.\n </p>\n    <ul><li>Curated, clean data</li>\n         <li>Updated nightly at 4am</li>\n         <li>Mapped to US Equity data with full historical SIP feed</li>\n   </ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 57,
        "name": "SEC Filings - On Premise Download",
        "description": "<p>SEC Fillings data archived in LEAN format for on premise backtesting and research. One file per ticker.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Download On Premise",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "10 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      }
    ],
    "headerColor": "8b000a"
  },
  {
    "name": "US Federal Reserve (FRED)",
    "vendorName": "FRED",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/fred.png",
    "landingFileName": "us-federal-reserve-economic-data.html",
    "url": "/datasets/us-federal-reserve-economic-data",
    "short_description": "The US Federal Reserve Economic Database (FRED) is a collection of thousands of economic datasets maintained by the US Government. QuantConnect caches the most active 560 of these datasets.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The Federal Reserve Economic Data (FRED) by the Research Division of the Federal Reserve bank of St. Louis, MO provides various time series relating to macro-economic data. The data covers 560 datasets, starts in January 1999, and is delivered on a daily frequency. The data is created by aggregating daily updates from more than 85 public and proprietary sources.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>The <a href=\"https://fred.stlouisfed.org/\">Research Division of the Federal Reserve bank of St. Louis, MO</a> expands the frontier of economic knowledge by producing high-quality original research in the areas of macroeconomics, money and banking, and applied microeconomics. They contribute to monetary policy discussions by advising the Bank president on a range of topics, especially in preparation for Federal Open Market Committee (FOMC) meetings. The Research Division is in the top 1% of all economics research departments worldwide.</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nself.fred_peak_to_trough = self.AddData(Fred, Fred.OECDRecessionIndicators.UnitedStatesFromPeakThroughTheTrough, Resolution.Daily).Symbol</code></pre>\n<pre><code class=\"language-cs\">\n_fredPeakToTrough = AddData(Fred.OECDRecessionIndicators.UnitedStatesFromPeakThroughTheTrough, Resolution.Daily).Symbol;</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 1990</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>560 Datasets</td>\n        </tr><tr><td>Data Density</td>\n            <td>Sparse</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>New York</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Supported Datasets",
        "content": "<p>The following table shows the accessor code you need to add each FRED dataset to your algorithm:</p>\n<table class=\"table qc-table table-reflow\"><thead><tr><th>Symbol</th><th>Accessor Code</th><th>Summary</th></tr></thead><tbody><tr><td colspan=\"3\"><b>CBOE</b></td></tr><tr><td>VXGOGCLS</td><td><code>Fred.CBOE.VIXOnGoogle</code></td><td>CBOE Equity VIX on Google (in Index)</td></tr><tr><td>VXDCLS</td><td><code>Fred.CBOE.VXD</code></td><td>CBOE DJIA Volatility Index (in Index)</td></tr><tr><td>VXGSCLS</td><td><code>Fred.CBOE.VIXOnGoldmanSachs</code></td><td>CBOE Equity VIX on Goldman Sachs (in Index)</td></tr><tr><td>VXIBMCLS</td><td><code>Fred.CBOE.VIXOnIBM</code></td><td>CBOE Equity VIX on IBM (in Index)</td></tr><tr><td>VXAZNCLS</td><td><code>Fred.CBOE.VIXOnAmazon</code></td><td>CBOE Equity VIX on Amazon (in Index)</td></tr><tr><td>VXOCLS</td><td><code>Fred.CBOE.VXO</code></td><td>CBOE S&amp;P 100 Volatility Index: VXO (in Index)</td></tr><tr><td>VXNCLS</td><td><code>Fred.CBOE.VXN</code></td><td>CBOE NASDAQ 100 Volatility Index (in Index)</td></tr><tr><td>VXTYN</td><td><code>Fred.CBOE.TenYearTreasuryNoteVolatilityFutures</code></td><td>CBOE 10-Year Treasury Note Volatility Futures (in Index)</td></tr><tr><td>RVXCLS</td><td><code>Fred.CBOE.RVX</code></td><td>CBOE Russell 2000 Volatility Index (in Index)</td></tr><tr><td>VXVCLS</td><td><code>Fred.CBOE.SP500ThreeMonthVolatilityIndex</code></td><td>CBOE S&amp;P 500 3-Month Volatility Index (in Index)</td></tr><tr><td>VXAPLCLS</td><td><code>Fred.CBOE.VIXOnApple</code></td><td>CBOE Equity VIX on Apple (in Index)</td></tr><tr><td>VXGDXCLS</td><td><code>Fred.CBOE.GoldMinersETFVolatilityIndex</code></td><td>CBOE Gold Miners ETF Volatility Index (in Index)</td></tr><tr><td>VXFXICLS</td><td><code>Fred.CBOE.ChinaETFVolatilityIndex</code></td><td>CBOE China ETF Volatility Index (in Index)</td></tr><tr><td>VXEWZCLS</td><td><code>Fred.CBOE.BrazilETFVolatilityIndex</code></td><td>CBOE Brazil ETF Volatility Index (in Index)</td></tr><tr><td>VXEEMCLS</td><td><code>Fred.CBOE.EmergingMarketsETFVolatilityIndex</code></td><td>CBOE Emerging Markets ETF Volatility Index (in Index)</td></tr><tr><td>EVZCLS</td><td><code>Fred.CBOE.EuroCurrencyETFVolatilityIndex</code></td><td>CBOE EuroCurrency ETF Volatility Index (in Index)</td></tr><tr><td>GVZCLS</td><td><code>Fred.CBOE.GoldETFVolatilityIndex</code></td><td>CBOE Gold ETF Volatility Index (in Index)</td></tr><tr><td>OVXCLS</td><td><code>Fred.CBOE.CrudeOilETFVolatilityIndex</code></td><td>CBOE Crude Oil ETF Volatility Index (in Index)</td></tr><tr><td>VXSLVCLS</td><td><code>Fred.CBOE.SilverETFVolatilityIndex</code></td><td>CBOE Silver ETF Volatility Index (in Index)</td></tr><tr><td>VXXLECLS</td><td><code>Fred.CBOE.EnergySectorETFVolatilityIndex</code></td><td>CBOE Energy Sector ETF Volatility Index (in Index)</td></tr><tr><td>VIXCLS</td><td><code>Fred.CBOE.VIX</code></td><td>CBOE Volatility Index: VIX (in Index)</td></tr><tr><td colspan=\"3\"><b>CentralBankInterventions</b></td></tr><tr><td>JPINTDDMEJPY</td><td><code>Fred.CentralBankInterventions.JapaneseBankPurchasesOfDmEuroAgainstJpy</code></td><td>Japan Intervention: Japanese Bank purchases of DM/Euro against JPY (in 100 Million Yen)</td></tr><tr><td>JPINTDEXR</td><td><code>Fred.CentralBankInterventions.JapaneseBankPurchasesOfUsdAgainstDm</code></td><td>Japan Intervention: Japanese Bank purchases of USD against DM (in 100 Million Yen)</td></tr><tr><td>JPINTDUSDRP</td><td><code>Fred.CentralBankInterventions.JapaneseBankPurchasesOfUsdAgainstRupiah</code></td><td>Japan Intervention: Japanese Bank purchases of USD against Rupiah (in 100 Million Yen)</td></tr><tr><td>USINTDMRKTJPY</td><td><code>Fred.CentralBankInterventions.USInterventionInMarketTransactionsInTheJpyUsd</code></td><td>U.S. Intervention: in Market Transactions in the JPY/USD (Millions of USD) (in Millions of USD)</td></tr><tr><td>USINTDCSOTH</td><td><code>Fred.CentralBankInterventions.USInterventionWithCustomerTransactionsInOtherCurrencies</code></td><td>U.S. Intervention: With-Customer Transactions in Other Currencies (Millions of USD) (in Millions of USD)</td></tr><tr><td>USINTDCSJPY</td><td><code>Fred.CentralBankInterventions.USInterventionWithCustomerTransactionsInTheJpyUsd</code></td><td>U.S. Intervention: With-Customer Transactions in the JPY/USD (Millions of USD) (in Millions of USD)</td></tr><tr><td>USINTDCSDM</td><td><code>Fred.CentralBankInterventions.USInterventionWithCustomerTransactionsInTheDemUsdEuro</code></td><td>U.S. Intervention: With-Customer Transactions in the DEM/USD (Euro since 1999) (Millions of USD) (in Millions of USD)</td></tr><tr><td>USINTDMRKTOTH</td><td><code>Fred.CentralBankInterventions.USInterventionInMarketTransactionsInOtherCurrencies</code></td><td>U.S. Intervention: in Market Transactions in Other Currencies (Millions of USD) (in Millions of USD)</td></tr><tr><td>TRINTDEXR</td><td><code>Fred.CentralBankInterventions.CentralBankOfTurkeyPurchasesOfUsd</code></td><td>Turkish Intervention: Central Bank of Turkey Purchases of USD (Millions of USD) (in Millions of USD)</td></tr><tr><td>JPINTDUSDJPY</td><td><code>Fred.CentralBankInterventions.JapaneseBankPurchasesOfUsdAgainstJpy</code></td><td>Japan Intervention: Japanese Bank purchases of USD against JPY (in 100 Million Yen)</td></tr><tr><td>USINTDMRKTDM</td><td><code>Fred.CentralBankInterventions.USInterventionInMarketTransactionsInTheDemUsdEuro</code></td><td>U.S. Intervention: in Market Transactions in the DEM/USD (Euro since 1999) (Millions of USD) (in Millions of USD)</td></tr><tr><td>CHINTDCHFDM</td><td><code>Fred.CentralBankInterventions.SwissNationalBankPurchasesOfDemAgainstChfMillionsOfDem</code></td><td>Swiss Intervention: Swiss National Bank Purchases of DEM against CHF (Millions of DEM) (in Millions of DEM)</td></tr><tr><td>CHINTDUSDDM</td><td><code>Fred.CentralBankInterventions.SwissNationalBankPurchasesOfUsdAgainstDem</code></td><td>Swiss Intervention: Swiss National Bank Purchases of USD against DEM (Millions of USD) (in Millions of USD)</td></tr><tr><td>CHINTDUSDJPY</td><td><code>Fred.CentralBankInterventions.SwissNationalBankPurchasesOfUsdAgainstJpy</code></td><td>Swiss Intervention: Swiss National Bank Purchases of USD against JPY (Millions of USD) (in Millions of USD)</td></tr><tr><td>CHINTDCHFUSD</td><td><code>Fred.CentralBankInterventions.SwissNationalBankPurchasesOfUsdAgainstChf</code></td><td>Swiss Intervention: Swiss National Bank Purchases of USD against CHF (Millions of USD) (in Millions of USD)</td></tr><tr><td>MEXINTDUSD</td><td><code>Fred.CentralBankInterventions.BancoDeMexicoPurchaseOnTheUsd</code></td><td>Mexican Intervention: Banco de Mexico Purchase on the USD (in Millions of USD)</td></tr><tr><td colspan=\"3\"><b>CommercialPaper</b></td></tr><tr><td>DCPN3M</td><td><code>Fred.CommercialPaper.ThreeMonthAANonfinancialCommercialPaperRate</code></td><td>3-Month AA Nonfinancial Commercial Paper Rate (in Percent)</td></tr><tr><td>DCPN30</td><td><code>Fred.CommercialPaper.OneMonthAANonfinancialCommercialPaperRate</code></td><td>1-Month AA Nonfinancial Commercial Paper Rate (in Percent)</td></tr><tr><td>DCPN2M</td><td><code>Fred.CommercialPaper.TwoMonthAANonfinancialCommercialPaperRate</code></td><td>2-Month AA Nonfinancial Commercial Paper Rate (in Percent)</td></tr><tr><td>DCPF3M</td><td><code>Fred.CommercialPaper.ThreeMonthAAFinancialCommercialPaperRate</code></td><td>3-Month AA Financial Commercial Paper Rate (in Percent)</td></tr><tr><td>DCPF2M</td><td><code>Fred.CommercialPaper.TwoMonthAAFinancialCommercialPaperRate</code></td><td>2-Month AA Financial Commercial Paper Rate (in Percent)</td></tr><tr><td>DCPF1M</td><td><code>Fred.CommercialPaper.OneMonthAAFinancialCommercialPaperRate</code></td><td>1-Month AA Financial Commercial Paper Rate (in Percent)</td></tr><tr><td>NONFIN14A2P2VOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityBetween1and4DaysUsedForA2P2Nonfinancial</code></td><td>Number of Issues, with a Maturity Between 1 and 4 Days, Used in Calculating the A2/P2 Nonfinancial Commercial Paper Rates (in Number)</td></tr><tr><td>NONFIN59A2P2VOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityBetween5and9DaysUsedForA2P2Nonfinancial</code></td><td>Number of Issues, with a Maturity Between 5 and 9 Days, Used in Calculating the A2/P2 Nonfinancial Commercial Paper Rates (in Number)</td></tr><tr><td>NONFIN59A2P2AMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityBetween5and9DaysUsedForA2P2Nonfinancial</code></td><td>Total Value of Issues, with a Maturity Between 5 and 9 Days, Used in Calculating the A2/P2 Nonfinancial Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>NONFIN4180AAVOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityBetween41and80DaysUsedForAANonfinancial</code></td><td>Number of Issues, with a Maturity Between 41 and 80 Days, Used in Calculating the AA Nonfinancial Commercial Paper Rates (in Number)</td></tr><tr><td>ABGT80AAAMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityGreaterThan80DaysUsedForAAAssetBacked</code></td><td>Total Value of Issues, with a Maturity Greater Than 80 Days, Used in Calculating the AA Asset-Backed Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>NONFIN4180AAAMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityBetween41and80DaysUsedForAANonfinancial</code></td><td>Total Value of Issues, with a Maturity Between 41 and 80 Days, Used in Calculating the AA Nonfinancial Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>NONFIN4180A2P2VOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityBetween41and80DaysUsedForA2P2Nonfinancial</code></td><td>Number of Issues, with a Maturity Between 41 and 80 Days, Used in Calculating the A2/P2 Nonfinancial Commercial Paper Rates (in Number)</td></tr><tr><td>NONFIN4180A2P2AMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityBetween41and80DaysUsedForA2P2Nonfinancial</code></td><td>Total Value of Issues, with a Maturity Between 41 and 80 Days, Used in Calculating the A2/P2 Nonfinancial Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>NONFIN2140AAVOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityBetween21and40DaysUsedForAANonfinancial</code></td><td>Number of Issues, with a Maturity Between 21 and 40 Days, Used in Calculating the AA Nonfinancial Commercial Paper Rates (in Number)</td></tr><tr><td>NONFIN2140AAAMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityBetween21and40DaysUsedForAANonfinancial</code></td><td>Total Value of Issues, with a Maturity Between 21 and 40 Days, Used in Calculating the AA Nonfinancial Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>NONFIN2140A2P2VOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityBetween21and40DaysUsedForA2P2Nonfinancial</code></td><td>Number of Issues, with a Maturity Between 21 and 40 Days, Used in Calculating the A2/P2 Nonfinancial Commercial Paper Rates (in Number)</td></tr><tr><td>NONFIN2140A2P2AMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityBetween21and40DaysUsedForA2P2Nonfinancial</code></td><td>Total Value of Issues, with a Maturity Between 21 and 40 Days, Used in Calculating the A2/P2 Nonfinancial Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>NONFIN14AAVOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityBetween1and4DaysUsedForAANonfinancial</code></td><td>Number of Issues, with a Maturity Between 1 and 4 Days, Used in Calculating the AA Nonfinancial Commercial Paper Rates (in Number)</td></tr><tr><td>NONFIN1020A2P2VOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityBetween10And20DaysUsedForA2P2Nonfinancial</code></td><td>Number of Issues, with a Maturity Between 10 and 20 Days, Used in Calculating the A2/P2 Nonfinancial Commercial Paper Rates (in Number)</td></tr><tr><td>NONFIN1020AAAMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityBetween10And20DaysUsedForAANonfinancial</code></td><td>Total Value of Issues, with a Maturity Between 10 and 20 Days, Used in Calculating the AA Nonfinancial Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>AB2140AAAMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityBetween21and40DaysUsedForAAAssetBacked</code></td><td>Total Value of Issues, with a Maturity Between 21 and 40 Days, Used in Calculating the AA Asset-Backed Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>NONFIN1020AAVOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityBetween10And20DaysUsedForAANonfinancial</code></td><td>Number of Issues, with a Maturity Between 10 and 20 Days, Used in Calculating the AA Nonfinancial Commercial Paper Rates (in Number)</td></tr><tr><td>NONFIN14A2P2AMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityBetween1and4DaysUsedForA2P2Nonfinancial</code></td><td>Total Value of Issues, with a Maturity Between 1 and 4 Days, Used in Calculating the A2/P2 Nonfinancial Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>NONFIN14AAAMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityBetween1and4DaysUsedForAANonfinancial</code></td><td>Total Value of Issues, with a Maturity Between 1 and 4 Days, Used in Calculating the AA Nonfinancial Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>MKT14MKTAMT</td><td><code>Fred.CommercialPaper.TotalValueofCommercialPaperIssueswithaMaturityBetween1and4Days</code></td><td>Total Value of Commercial Paper Issues with a Maturity Between 1 and 4 Days (in Millions of Dollars)</td></tr><tr><td>NONFIN1020A2P2AMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityBetween10And20DaysUsedForA2P2Nonfinancial</code></td><td>Total Value of Issues, with a Maturity Between 10 and 20 Days, Used in Calculating the A2/P2 Nonfinancial Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>FINGT80AAVOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityGreaterThan80DaysUsedForAAFinancial</code></td><td>Number of Issues, with a Maturity Greater Than 80 Days, Used in Calculating the AA Financial Commercial Paper Rates (in Number)</td></tr><tr><td>FIN1020AAVOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityBetween10And20DaysUsedForAAFinancial</code></td><td>Number of Issues, with a Maturity Between 10 and 20 Days, Used in Calculating the AA Financial Commercial Paper Rates (in Number)</td></tr><tr><td>FIN14AAAMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityBetween1and4DaysUsedForAAFinancial</code></td><td>Total Value of Issues, with a Maturity Between 1 and 4 Days, Used in Calculating the AA Financial Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>FIN14AAVOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityBetween1and4DaysUsedForAAFinancial</code></td><td>Number of Issues, with a Maturity Between 1 and 4 Days, Used in Calculating the AA Financial Commercial Paper Rates (in Number)</td></tr><tr><td>MKT1020MKTAMT</td><td><code>Fred.CommercialPaper.TotalValueofCommercialPaperIssueswithaMaturityBetween10And20Days</code></td><td>Total Value of Commercial Paper Issues with a Maturity Between 10 and 20 Days (in Millions of Dollars)</td></tr><tr><td>MKT1020MKTVOL</td><td><code>Fred.CommercialPaper.NumberofCommercialPaperIssueswithaMaturityBetween10And20Days</code></td><td>Number of Commercial Paper Issues with a Maturity Between 10 and 20 Days (in Number)</td></tr><tr><td>FIN2140AAAMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityBetween21and40DaysUsedForAAFinancial</code></td><td>Total Value of Issues, with a Maturity Between 21 and 40 Days, Used in Calculating the AA Financial Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>MKT14MKTVOL</td><td><code>Fred.CommercialPaper.NumberofCommercialPaperIssueswithaMaturityBetween1and4Days</code></td><td>Number of Commercial Paper Issues with a Maturity Between 1 and 4 Days (in Number)</td></tr><tr><td>MKT2140MKTAMT</td><td><code>Fred.CommercialPaper.TotalValueofIssuersofCommercialPaperwithaMaturityBetween21and40Days</code></td><td>Total Value of Issuers of Commercial Paper with a Maturity Between 21 and 40 Days (in Millions of Dollars)</td></tr><tr><td>MKT2140MKTVOL</td><td><code>Fred.CommercialPaper.NumberofCommercialPaperIssueswithaMaturityBetween21and40Days</code></td><td>Number of Commercial Paper Issues with a Maturity Between 21 and 40 Days (in Number)</td></tr><tr><td>FIN2140AAVOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityBetween21and40DaysUsedForAAFinancial</code></td><td>Number of Issues, with a Maturity Between 21 and 40 Days, Used in Calculating the AA Financial Commercial Paper Rates (in Number)</td></tr><tr><td>MKT4180MKTAMT</td><td><code>Fred.CommercialPaper.TotalValueofIssuersofCommercialPaperwithaMaturityBetween41and80Days</code></td><td>Total Value of Issuers of Commercial Paper with a Maturity Between 41 and 80 Days (in Millions of Dollars)</td></tr><tr><td>NONFIN59AAAMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityBetween5and9DaysUsedForAANonfinancial</code></td><td>Total Value of Issues, with a Maturity Between 5 and 9 Days, Used in Calculating the AA Nonfinancial Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>MKT4180MKTVOL</td><td><code>Fred.CommercialPaper.NumberofCommercialPaperIssueswithaMaturityBetween41and80Days</code></td><td>Number of Commercial Paper Issues with a Maturity Between 41 and 80 Days (in Number)</td></tr><tr><td>MKT59MKTVOL</td><td><code>Fred.CommercialPaper.NumberofCommercialPaperIssueswithaMaturityBetween5and9Days</code></td><td>Number of Commercial Paper Issues with a Maturity Between 5 and 9 Days (in Number)</td></tr><tr><td>MKTGT80MKTAMT</td><td><code>Fred.CommercialPaper.TotalValueofIssuersofCommercialPaperwithaMaturityGreaterThan80Days</code></td><td>Total Value of Issuers of Commercial Paper with a Maturity Greater Than 80 Days (in Millions of Dollars)</td></tr><tr><td>MKTGT80MKTVOL</td><td><code>Fred.CommercialPaper.NumberofCommercialPaperIssueswithaMaturityGreaterThan80Days</code></td><td>Number of Commercial Paper Issues with a Maturity Greater Than 80 Days (in Number)</td></tr><tr><td>FIN4180AAAMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityBetween41and80DaysUsedForAAFinancial</code></td><td>Total Value of Issues, with a Maturity Between 41 and 80 Days, Used in Calculating the AA Financial Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>FIN4180AAVOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityBetween41and80DaysUsedForAAFinancial</code></td><td>Number of Issues, with a Maturity Between 41 and 80 Days, Used in Calculating the AA Financial Commercial Paper Rates (in Number)</td></tr><tr><td>AB4180AAAMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityBetween41and80DaysUsedForAAAssetBacked</code></td><td>Total Value of Issues, with a Maturity Between 41 and 80 Days, Used in Calculating the AA Asset-Backed Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>FIN59AAAMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityBetween5and9DaysUsedForAAFinancial</code></td><td>Total Value of Issues, with a Maturity Between 5 and 9 Days, Used in Calculating the AA Financial Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>FIN59AAVOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityBetween5and9DaysUsedForAAFinancial</code></td><td>Number of Issues, with a Maturity Between 5 and 9 Days, Used in Calculating the AA Financial Commercial Paper Rates (in Number)</td></tr><tr><td>FINGT80AAAMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityGreaterThan80DaysUsedForAAFinancial</code></td><td>Total Value of Issues, with a Maturity Greater Than 80 Days, Used in Calculating the AA Financial Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>FIN1020AAAMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityBetween10And20DaysUsedForAAFinancial</code></td><td>Total Value of Issues, with a Maturity Between 10 and 20 Days, Used in Calculating the AA Financial Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>AB2140AAVOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityBetween21and40DaysUsedForAAAssetBacked</code></td><td>Number of Issues, with a Maturity Between 21 and 40 Days, Used in Calculating the AA Asset-Backed Commercial Paper Rates (in Number)</td></tr><tr><td>MKT59MKTAMT</td><td><code>Fred.CommercialPaper.TotalValueofIssuersofCommercialPaperwithaMaturityBetween5and9Days</code></td><td>Total Value of Issuers of Commercial Paper with a Maturity Between 5 and 9 Days (in Millions of Dollars)</td></tr><tr><td>ABGT80AAVOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityGreaterThan80DaysUsedForAAAssetBacked</code></td><td>Number of Issues, with a Maturity Greater Than 80 Days, Used in Calculating the AA Asset-Backed Commercial Paper Rates (in Number)</td></tr><tr><td>NONFIN59AAVOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityBetween5and9DaysUsedForAANonfinancial</code></td><td>Number of Issues, with a Maturity Between 5 and 9 Days, Used in Calculating the AA Nonfinancial Commercial Paper Rates (in Number)</td></tr><tr><td>RIFSPPAAAD15NB</td><td><code>Fred.CommercialPaper.FifteenDayAAAssetbackedCommercialPaperInterestRate</code></td><td>15-Day AA Asset-backed Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>AB59AAAMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityBetween5and9DaysUsedForAAAssetBacked</code></td><td>Total Value of Issues, with a Maturity Between 5 and 9 Days, Used in Calculating the AA Asset-Backed Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>AB4180AAVOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityBetween41and80DaysUsedForAAAssetBacked</code></td><td>Number of Issues, with a Maturity Between 41 and 80 Days, Used in Calculating the AA Asset-Backed Commercial Paper Rates (in Number)</td></tr><tr><td>RIFSPPNA2P2D15NB</td><td><code>Fred.CommercialPaper.FifteenDayA2P2NonfinancialCommercialPaperInterestRate</code></td><td>15-Day A2/P2 Nonfinancial Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>RIFSPPNA2P2D07NB</td><td><code>Fred.CommercialPaper.SevenDayA2P2NonfinancialCommercialPaperInterestRate</code></td><td>7-Day A2/P2 Nonfinancial Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>RIFSPPNA2P2D01NB</td><td><code>Fred.CommercialPaper.OvernightA2P2NonfinancialCommercialPaperInterestRate</code></td><td>Overnight A2/P2 Nonfinancial Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>RIFSPPFAAD90NB</td><td><code>Fred.CommercialPaper.NinetyDayAAFinancialCommercialPaperInterestRate</code></td><td>90-Day AA Financial Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>RIFSPPAAAD01NB</td><td><code>Fred.CommercialPaper.OvernightAAAssetbackedCommercialPaperInterestRate</code></td><td>Overnight AA Asset-backed Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>RIFSPPNA2P2D30NB</td><td><code>Fred.CommercialPaper.Three0DayA2P2NonfinancialCommercialPaperInterestRate</code></td><td>30-Day A2/P2 Nonfinancial Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>RIFSPPFAAD60NB</td><td><code>Fred.CommercialPaper.SixtyDayAAFinancialCommercialPaperInterestRate</code></td><td>60-Day AA Financial Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>RIFSPPFAAD30NB</td><td><code>Fred.CommercialPaper.Three0DayAAFinancialCommercialPaperInterestRate</code></td><td>30-Day AA Financial Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>NONFINGT80A2P2AMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityGreaterThan80DaysUsedForA2P2Nonfinancial</code></td><td>Total Value of Issues, with a Maturity Greater Than 80 Days, Used in Calculating the A2/P2 Nonfinancial Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>RIFSPPAAAD30NB</td><td><code>Fred.CommercialPaper.Three0DayAAAssetbackedCommercialPaperInterestRate</code></td><td>30-Day AA Asset-backed Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>RIFSPPAAAD60NB</td><td><code>Fred.CommercialPaper.SixtyDayAAAssetbackedCommercialPaperInterestRate</code></td><td>60-Day AA Asset-backed Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>RIFSPPAAAD90NB</td><td><code>Fred.CommercialPaper.NinetyDayAAAssetbackedCommercialPaperInterestRate</code></td><td>90-Day AA Asset-backed Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>RIFSPPFAAD15NB</td><td><code>Fred.CommercialPaper.FifteenDayAAFinancialCommercialPaperInterestRate</code></td><td>15-Day AA Financial Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>RIFSPPFAAD07NB</td><td><code>Fred.CommercialPaper.SevenDayAAFinancialCommercialPaperInterestRate</code></td><td>7-Day AA Financial Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>RIFSPPAAAD07NB</td><td><code>Fred.CommercialPaper.SevenDayAAAssetbackedCommercialPaperInterestRate</code></td><td>7-Day AA Asset-backed Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>RIFSPPFAAD01NB</td><td><code>Fred.CommercialPaper.OvernightAAFinancialCommercialPaperInterestRate</code></td><td>Overnight AA Financial Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>RIFSPPNA2P2D60NB</td><td><code>Fred.CommercialPaper.SixtyDayA2P2NonfinancialCommercialPaperInterestRate</code></td><td>60-Day A2/P2 Nonfinancial Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>AB59AAVOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityBetween5and9DaysUsedForAAAssetBacked</code></td><td>Number of Issues, with a Maturity Between 5 and 9 Days, Used in Calculating the AA Asset-Backed Commercial Paper Rates (in Number)</td></tr><tr><td>AB14AAVOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityBetween1and4DaysUsedForAAAssetBacked</code></td><td>Number of Issues, with a Maturity Between 1 and 4 Days, Used in Calculating the AA Asset-Backed Commercial Paper Rates (in Number)</td></tr><tr><td>NONFINGT80A2P2VOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityGreaterThan80DaysUsedForA2P2Nonfinancial</code></td><td>Number of Issues, with a Maturity Greater Than 80 Days, Used in Calculating the A2/P2 Nonfinancial Commercial Paper Rates (in Number)</td></tr><tr><td>AB14AAAMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityBetween1and4DaysUsedForAAAssetBacked</code></td><td>Total Value of Issues, with a Maturity Between 1 and 4 Days, Used in Calculating the AA Asset-Backed Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>RIFSPPNA2P2D90NB</td><td><code>Fred.CommercialPaper.NinetyDayA2P2NonfinancialCommercialPaperInterestRate</code></td><td>90-Day A2/P2 Nonfinancial Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>AB1020AAVOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityBetween10And20DaysUsedForAAAssetBacked</code></td><td>Number of Issues, with a Maturity Between 10 and 20 Days, Used in Calculating the AA Asset-Backed Commercial Paper Rates (in Number)</td></tr><tr><td>NONFINGT80AAAMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityGreaterThan80DaysUsedForAANonfinancial</code></td><td>Total Value of Issues, with a Maturity Greater Than 80 Days, Used in Calculating the AA Nonfinancial Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>RIFSPPNAAD01NB</td><td><code>Fred.CommercialPaper.OvernightAANonfinancialCommercialPaperInterestRate</code></td><td>Overnight AA Nonfinancial Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>AB1020AAAMT</td><td><code>Fred.CommercialPaper.TotalValueOfIssuesWithMaturityBetween10And20DaysUsedForAAAssetBacked</code></td><td>Total Value of Issues, with a Maturity Between 10 and 20 Days, Used in Calculating the AA Asset-Backed Commercial Paper Rates (in Millions of Dollars)</td></tr><tr><td>RIFSPPNAAD07NB</td><td><code>Fred.CommercialPaper.SevenDayAANonfinancialCommercialPaperInterestRate</code></td><td>7-Day AA Nonfinancial Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>RIFSPPNAAD90NB</td><td><code>Fred.CommercialPaper.NinetyDayAANonfinancialCommercialPaperInterestRate</code></td><td>90-Day AA Nonfinancial Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>RIFSPPNAAD15NB</td><td><code>Fred.CommercialPaper.FifteenDayAANonfinancialCommercialPaperInterestRate</code></td><td>15-Day AA Nonfinancial Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>RIFSPPNAAD30NB</td><td><code>Fred.CommercialPaper.Three0DayAANonfinancialCommercialPaperInterestRate</code></td><td>30-Day AA Nonfinancial Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>RIFSPPNAAD60NB</td><td><code>Fred.CommercialPaper.SixtyDayAANonfinancialCommercialPaperInterestRate</code></td><td>60-Day AA Nonfinancial Commercial Paper Interest Rate (in Percent)</td></tr><tr><td>NONFINGT80AAVOL</td><td><code>Fred.CommercialPaper.NumberOfIssuesWithMaturityGreaterThan80DaysUsedForAANonfinancial</code></td><td>Number of Issues, with a Maturity Greater Than 80 Days, Used in Calculating the AA Nonfinancial Commercial Paper Rates (in Number)</td></tr><tr><td>CPFF</td><td><code>Fred.CommercialPaper.ThreeMonthCommercialPaperMinusFederalFundsRate</code></td><td>3-Month Commercial Paper Minus Federal Funds Rate (in Percent)</td></tr><tr><td colspan=\"3\"><b>ICEBofAML</b></td></tr><tr><td>BAMLEM1BRRAAA2ACRPITRIV</td><td><code>Fred.ICEBofAML.AAAAEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML AAA-A Emerging Markets Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEM1RAAA2ALCRPIUSTRIV</td><td><code>Fred.ICEBofAML.AAAAUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML AAA-A US Emerging Markets Liquid Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEMRACRPIASIATRIV</td><td><code>Fred.ICEBofAML.AsiaEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML Asia Emerging Markets Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEMALLCRPIASIAUSTRIV</td><td><code>Fred.ICEBofAML.AsiaUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML Asia US Emerging Markets Liquid Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEM4BRRBLCRPITRIV</td><td><code>Fred.ICEBofAML.BandLowerEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML B and Lower Emerging Markets Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEM4RBLLCRPIUSTRIV</td><td><code>Fred.ICEBofAML.BandLowerUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML B and Lower US Emerging Markets Liquid Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEM3BRRBBCRPITRIV</td><td><code>Fred.ICEBofAML.BBEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML BB Emerging Markets Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEM3RBBLCRPIUSTRIV</td><td><code>Fred.ICEBofAML.BBUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML BB US Emerging Markets Liquid Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEM2BRRBBBCRPITRIV</td><td><code>Fred.ICEBofAML.BBBEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML BBB Emerging Markets Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEM2RBBBLCRPIUSTRIV</td><td><code>Fred.ICEBofAML.BBBUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML BBB US Emerging Markets Liquid Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEM5BCOCRPITRIV</td><td><code>Fred.ICEBofAML.CrossoverEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML Crossover Emerging Markets Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEMXOCOLCRPIUSTRIV</td><td><code>Fred.ICEBofAML.CrossoverUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML Crossover US Emerging Markets Liquid Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEMCBPITRIV</td><td><code>Fred.ICEBofAML.EmergingMarketsCorporatePlusIndexTotalReturnIndexValue</code></td><td>ICE BofAML Emerging Markets Corporate Plus Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEMEBCRPIETRIV</td><td><code>Fred.ICEBofAML.EuroEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML Euro Emerging Markets Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEMRECRPIEMEATRIV</td><td><code>Fred.ICEBofAML.EMEAEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML Europe, the Middle East, and Africa (EMEA) Emerging Markets Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEMELLCRPIEMEAUSTRIV</td><td><code>Fred.ICEBofAML.EMEAUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML Europe, the Middle East, and Africa (EMEA) US Emerging Markets Liquid Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEMFSFCRPITRIV</td><td><code>Fred.ICEBofAML.FinancialEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML Financial Emerging Markets Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEMFLFLCRPIUSTRIV</td><td><code>Fred.ICEBofAML.FinancialUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML Financial US Emerging Markets Liquid Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEMIBHGCRPITRIV</td><td><code>Fred.ICEBofAML.HighGradeEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML High Grade Emerging Markets Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEMHGHGLCRPIUSTRIV</td><td><code>Fred.ICEBofAML.HighGradeUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML High Grade US Emerging Markets Liquid Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEMHBHYCRPITRIV</td><td><code>Fred.ICEBofAML.HighYieldEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML High Yield Emerging Markets Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEMHYHYLCRPIUSTRIV</td><td><code>Fred.ICEBofAML.HighYieldUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML High Yield US Emerging Markets Liquid Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEMRLCRPILATRIV</td><td><code>Fred.ICEBofAML.LatinAmericaEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML Latin America Emerging Markets Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEMLLLCRPILAUSTRIV</td><td><code>Fred.ICEBofAML.LatinAmericaUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML Latin America US Emerging Markets Liquid Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEMNSNFCRPITRIV</td><td><code>Fred.ICEBofAML.NonFinancialEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML Non-Financial Emerging Markets Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEMNFNFLCRPIUSTRIV</td><td><code>Fred.ICEBofAML.NonFinancialUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML Non-Financial US Emerging Markets Liquid Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLC0A0CM</td><td><code>Fred.ICEBofAML.USCorporateMasterOptionAdjustedSpread</code></td><td>ICE BofAML US Corporate Master Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLH0A0HYM2</td><td><code>Fred.ICEBofAML.USHighYieldMasterIIOptionAdjustedSpread</code></td><td>ICE BofAML US High Yield Master II Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLC1A0C13Y</td><td><code>Fred.ICEBofAML.USCorporate1To3YearOptionAdjustedSpread</code></td><td>ICE BofAML US Corporate 1-3 Year Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLC7A0C1015Y</td><td><code>Fred.ICEBofAML.USCorporate10To15YearOptionAdjustedSpread</code></td><td>ICE BofAML US Corporate 10-15 Year Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLC8A0C15PY</td><td><code>Fred.ICEBofAML.USCorporateMoreThan15YearOptionAdjustedSpread</code></td><td>ICE BofAML US Corporate 15+ Year Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLC2A0C35Y</td><td><code>Fred.ICEBofAML.USCorporate3To5YearOptionAdjustedSpread</code></td><td>ICE BofAML US Corporate 3-5 Year Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLC3A0C57Y</td><td><code>Fred.ICEBofAML.USCorporate5To7YearOptionAdjustedSpread</code></td><td>ICE BofAML US Corporate 5-7 Year Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLC4A0C710Y</td><td><code>Fred.ICEBofAML.USCorporate7To10YearOptionAdjustedSpread</code></td><td>ICE BofAML US Corporate 7-10 Year Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEMPUPUBSLCRPIUSTRIV</td><td><code>Fred.ICEBofAML.PublicSectorIssuersUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML Public Sector Issuers US Emerging Markets Liquid Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEMUBCRPIUSTRIV</td><td><code>Fred.ICEBofAML.USEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue</code></td><td>ICE BofAML US Emerging Markets Corporate Plus Sub-Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLEMCLLCRPIUSTRIV</td><td><code>Fred.ICEBofAML.USEmergingMarketsLiquidCorporatePlusIndexTotalReturnIndexValue</code></td><td>ICE BofAML US Emerging Markets Liquid Corporate Plus Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLHE00EHYITRIV</td><td><code>Fred.ICEBofAML.EuroHighYieldIndexTotalReturnIndexValue</code></td><td>ICE BofAML Euro High Yield Index Total Return Index Value (in Index)</td></tr><tr><td>BAMLCC1A013YTRIV</td><td><code>Fred.ICEBofAML.USCorp1To3YearsTotalReturnIndexValue</code></td><td>ICE BofAML US Corp 1-3yr Total Return Index Value (in Index)</td></tr><tr><td>BAMLCC7A01015YTRIV</td><td><code>Fred.ICEBofAML.USCorp10To15TotalReturnIndexValue</code></td><td>ICE BofAML US Corp 10-15yr Total Return Index Value (in Index)</td></tr><tr><td>BAMLCC8A015PYTRIV</td><td><code>Fred.ICEBofAML.USCorpMoreThan15YearsTotalReturnIndexValue</code></td><td>ICE BofAML US Corp 15+yr Total Return Index Value (in Index)</td></tr><tr><td>BAMLCC2A035YTRIV</td><td><code>Fred.ICEBofAML.USCorpeTo5YearsTotalReturnIndexValue</code></td><td>ICE BofAML US Corp 3-5yr Total Return Index Value (in Index)</td></tr><tr><td>BAMLCC3A057YTRIV</td><td><code>Fred.ICEBofAML.USCorp5To7YearsTotalReturnIndexValue</code></td><td>ICE BofAML US Corp 5-7yr Total Return Index Value (in Index)</td></tr><tr><td>BAMLCC4A0710YTRIV</td><td><code>Fred.ICEBofAML.USCorporate7To10YearsTotalReturnIndexValue</code></td><td>ICE BofAML US Corporate 7-10yr Total Return Index Value (in Index)</td></tr><tr><td>BAMLCC0A3ATRIV</td><td><code>Fred.ICEBofAML.USCorpATotalReturnIndexValue</code></td><td>ICE BofAML US Corp A Total Return Index Value (in Index)</td></tr><tr><td>BAMLCC0A2AATRIV</td><td><code>Fred.ICEBofAML.USCorpAATotalReturnIndexValue</code></td><td>ICE BofAML US Corp AA Total Return Index Value (in Index)</td></tr><tr><td>BAMLCC0A1AAATRIV</td><td><code>Fred.ICEBofAML.USCorpAAATotalReturnIndexValue</code></td><td>ICE BofAML US Corp AAA Total Return Index Value (in Index)</td></tr><tr><td>BAMLHYH0A2BTRIV</td><td><code>Fred.ICEBofAML.USHighYieldBTotalReturnIndexValue</code></td><td>ICE BofAML US High Yield B Total Return Index Value (in Index)</td></tr><tr><td>BAMLHYH0A1BBTRIV</td><td><code>Fred.ICEBofAML.USHighYieldBBTotalReturnIndexValue</code></td><td>ICE BofAML US High Yield BB Total Return Index Value (in Index)</td></tr><tr><td>BAMLCC0A4BBBTRIV</td><td><code>Fred.ICEBofAML.USCorpBBBTotalReturnIndexValue</code></td><td>ICE BofAML US Corp BBB Total Return Index Value (in Index)</td></tr><tr><td>BAMLHYH0A3CMTRIV</td><td><code>Fred.ICEBofAML.USHighYieldCCCorBelowTotalReturnIndexValue</code></td><td>ICE BofAML US High Yield CCC or Below Total Return Index Value (in Index)</td></tr><tr><td>BAMLCC0A0CMTRIV</td><td><code>Fred.ICEBofAML.USCorpMasterTotalReturnIndexValue</code></td><td>ICE BofAML US Corp Master Total Return Index Value (in Index)</td></tr><tr><td>BAMLHYH0A0HYM2TRIV</td><td><code>Fred.ICEBofAML.USHighYieldMasterIITotalReturnIndexValue</code></td><td>ICE BofAML US High Yield Master II Total Return Index Value (in Index)</td></tr><tr><td>BAMLEM1BRRAAA2ACRPIOAS</td><td><code>Fred.ICEBofAML.AAAAEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML AAA-A Emerging Markets Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEM1RAAA2ALCRPIUSOAS</td><td><code>Fred.ICEBofAML.AAAAUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML AAA-A US Emerging Markets Liquid Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEMRACRPIASIAOAS</td><td><code>Fred.ICEBofAML.AsiaEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML Asia Emerging Markets Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEMALLCRPIASIAUSOAS</td><td><code>Fred.ICEBofAML.AsiaUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML Asia US Emerging Markets Liquid Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEM4BRRBLCRPIOAS</td><td><code>Fred.ICEBofAML.BandLowerEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML B and Lower Emerging Markets Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEM4RBLLCRPIUSOAS</td><td><code>Fred.ICEBofAML.BandLowerUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML B and Lower US Emerging Markets Liquid Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEM3BRRBBCRPIOAS</td><td><code>Fred.ICEBofAML.BBEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML BB Emerging Markets Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEM3RBBLCRPIUSOAS</td><td><code>Fred.ICEBofAML.BBUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML BB US Emerging Markets Liquid Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEM2BRRBBBCRPIOAS</td><td><code>Fred.ICEBofAML.BBBEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML BBB Emerging Markets Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEM2RBBBLCRPIUSOAS</td><td><code>Fred.ICEBofAML.BBBUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML BBB US Emerging Markets Liquid Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEM5BCOCRPIOAS</td><td><code>Fred.ICEBofAML.CrossoverEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML Crossover Emerging Markets Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEMXOCOLCRPIUSOAS</td><td><code>Fred.ICEBofAML.CrossoverUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML Crossover US Emerging Markets Liquid Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEMCBPIOAS</td><td><code>Fred.ICEBofAML.EmergingMarketsCorporatePlusIndexOptionAdjustedSpread</code></td><td>ICE BofAML Emerging Markets Corporate Plus Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEMEBCRPIEOAS</td><td><code>Fred.ICEBofAML.EuroEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML Euro Emerging Markets Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEMRECRPIEMEAOAS</td><td><code>Fred.ICEBofAML.EMEAEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML Europe, the Middle East, and Africa (EMEA) Emerging Markets Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEMELLCRPIEMEAUSOAS</td><td><code>Fred.ICEBofAML.EMEAUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML Europe, the Middle East, and Africa (EMEA) US Emerging Markets Liquid Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEMFSFCRPIOAS</td><td><code>Fred.ICEBofAML.FinancialEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML Financial Emerging Markets Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEMFLFLCRPIUSOAS</td><td><code>Fred.ICEBofAML.FinancialUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML Financial US Emerging Markets Liquid Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEMIBHGCRPIOAS</td><td><code>Fred.ICEBofAML.HighGradeEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML High Grade Emerging Markets Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEMHGHGLCRPIUSOAS</td><td><code>Fred.ICEBofAML.HighGradeUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML High Grade US Emerging Markets Liquid Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEMHBHYCRPIOAS</td><td><code>Fred.ICEBofAML.HighYieldEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML High Yield Emerging Markets Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEMHYHYLCRPIUSOAS</td><td><code>Fred.ICEBofAML.HighYieldUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML High Yield US Emerging Markets Liquid Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEMRLCRPILAOAS</td><td><code>Fred.ICEBofAML.LatinAmericaEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML Latin America Emerging Markets Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEMLLLCRPILAUSOAS</td><td><code>Fred.ICEBofAML.LatinAmericaUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML Latin America US Emerging Markets Liquid Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEMNSNFCRPIOAS</td><td><code>Fred.ICEBofAML.NonFinancialEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML Non-Financial Emerging Markets Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEMNFNFLCRPIUSOAS</td><td><code>Fred.ICEBofAML.NonFinancialUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML Non-Financial US Emerging Markets Liquid Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEMPUPUBSLCRPIUSOAS</td><td><code>Fred.ICEBofAML.PublicSectorIssuersUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML Public Sector Issuers US Emerging Markets Liquid Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEMUBCRPIUSOAS</td><td><code>Fred.ICEBofAML.USEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread</code></td><td>ICE BofAML US Emerging Markets Corporate Plus Sub-Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEMCLLCRPIUSOAS</td><td><code>Fred.ICEBofAML.USEmergingMarketsLiquidCorporatePlusIndexOptionAdjustedSpread</code></td><td>ICE BofAML US Emerging Markets Liquid Corporate Plus Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLHE00EHYIOAS</td><td><code>Fred.ICEBofAML.EuroHighYieldIndexOptionAdjustedSpread</code></td><td>ICE BofAML Euro High Yield Index Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLC0A3CA</td><td><code>Fred.ICEBofAML.USCorporateAOptionAdjustedSpread</code></td><td>ICE BofAML US Corporate A Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLC0A2CAA</td><td><code>Fred.ICEBofAML.USCorporateAAOptionAdjustedSpread</code></td><td>ICE BofAML US Corporate AA Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLC0A1CAAA</td><td><code>Fred.ICEBofAML.USCorporateAAAOptionAdjustedSpread</code></td><td>ICE BofAML US Corporate AAA Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLH0A2HYB</td><td><code>Fred.ICEBofAML.USHighYieldBOptionAdjustedSpread</code></td><td>ICE BofAML US High Yield B Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLH0A1HYBB</td><td><code>Fred.ICEBofAML.USHighYieldBBOptionAdjustedSpread</code></td><td>ICE BofAML US High Yield BB Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLC0A4CBBB</td><td><code>Fred.ICEBofAML.USCorporateBBBOptionAdjustedSpread</code></td><td>ICE BofAML US Corporate BBB Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLH0A3HYC</td><td><code>Fred.ICEBofAML.USHighYieldCCCorBelowOptionAdjustedSpread</code></td><td>ICE BofAML US High Yield CCC or Below Option-Adjusted Spread (in Percent)</td></tr><tr><td>BAMLEM1BRRAAA2ACRPIEY</td><td><code>Fred.ICEBofAML.AAAAEmergingMarketsCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML AAA-A Emerging Markets Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEM1RAAA2ALCRPIUSEY</td><td><code>Fred.ICEBofAML.AAAAUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML AAA-A US Emerging Markets Liquid Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEMRACRPIASIAEY</td><td><code>Fred.ICEBofAML.AsiaEmergingMarketsCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML Asia Emerging Markets Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEMALLCRPIASIAUSEY</td><td><code>Fred.ICEBofAML.AsiaUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML Asia US Emerging Markets Liquid Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEM4BRRBLCRPIEY</td><td><code>Fred.ICEBofAML.BandLowerEmergingMarketsCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML B and Lower Emerging Markets Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEM4RBLLCRPIUSEY</td><td><code>Fred.ICEBofAML.BandLowerUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML B and Lower US Emerging Markets Liquid Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEM3BRRBBCRPIEY</td><td><code>Fred.ICEBofAML.BBEmergingMarketsCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML BB Emerging Markets Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEM3RBBLCRPIUSEY</td><td><code>Fred.ICEBofAML.BBUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML BB US Emerging Markets Liquid Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEM2BRRBBBCRPIEY</td><td><code>Fred.ICEBofAML.BBBEmergingMarketsCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML BBB Emerging Markets Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEM2RBBBLCRPIUSEY</td><td><code>Fred.ICEBofAML.BBBUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML BBB US Emerging Markets Liquid Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEM5BCOCRPIEY</td><td><code>Fred.ICEBofAML.CrossoverEmergingMarketsCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML Crossover Emerging Markets Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEMXOCOLCRPIUSEY</td><td><code>Fred.ICEBofAML.CrossoverUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML Crossover US Emerging Markets Liquid Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEMCBPIEY</td><td><code>Fred.ICEBofAML.EmergingMarketsCorporatePlusIndexEffectiveYield</code></td><td>ICE BofAML Emerging Markets Corporate Plus Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEMEBCRPIEEY</td><td><code>Fred.ICEBofAML.EuroEmergingMarketsCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML Euro Emerging Markets Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLHE00EHYIEY</td><td><code>Fred.ICEBofAML.EuroHighYieldIndexEffectiveYield</code></td><td>ICE BofAML Euro High Yield Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEMRECRPIEMEAEY</td><td><code>Fred.ICEBofAML.EMEAEmergingMarketsCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML Europe, the Middle East, and Africa (EMEA) Emerging Markets Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEMELLCRPIEMEAUSEY</td><td><code>Fred.ICEBofAML.EMEAUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML Europe, the Middle East, and Africa (EMEA) US Emerging Markets Liquid Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEMFSFCRPIEY</td><td><code>Fred.ICEBofAML.FinancialEmergingMarketsCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML Financial Emerging Markets Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEMFLFLCRPIUSEY</td><td><code>Fred.ICEBofAML.FinancialUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML Financial US Emerging Markets Liquid Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEMIBHGCRPIEY</td><td><code>Fred.ICEBofAML.HighGradeEmergingMarketsCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML High Grade Emerging Markets Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEMHGHGLCRPIUSEY</td><td><code>Fred.ICEBofAML.HighGradeUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML High Grade US Emerging Markets Liquid Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEMHBHYCRPIEY</td><td><code>Fred.ICEBofAML.HighYieldEmergingMarketsCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML High Yield Emerging Markets Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEMHYHYLCRPIUSEY</td><td><code>Fred.ICEBofAML.HighYieldUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML High Yield US Emerging Markets Liquid Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEMRLCRPILAEY</td><td><code>Fred.ICEBofAML.LatinAmericaEmergingMarketsCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML Latin America Emerging Markets Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEMLLLCRPILAUSEY</td><td><code>Fred.ICEBofAML.LatinAmericaUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML Latin America US Emerging Markets Liquid Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEMNSNFCRPIEY</td><td><code>Fred.ICEBofAML.NonFinancialEmergingMarketsCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML Non-Financial Emerging Markets Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEMNFNFLCRPIUSEY</td><td><code>Fred.ICEBofAML.NonFinancialUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML Non-Financial US Emerging Markets Liquid Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEMPUPUBSLCRPIUSEY</td><td><code>Fred.ICEBofAML.PublicSectorIssuersUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML Public Sector Issuers US Emerging Markets Liquid Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLC1A0C13YEY</td><td><code>Fred.ICEBofAML.USCorporate1ThreeYearEffectiveYield</code></td><td>ICE BofAML US Corporate 1-3 Year Effective Yield (in Percent)</td></tr><tr><td>BAMLC7A0C1015YEY</td><td><code>Fred.ICEBofAML.USCorporate10To15YearEffectiveYield</code></td><td>ICE BofAML US Corporate 10-15 Year Effective Yield (in Percent)</td></tr><tr><td>BAMLC8A0C15PYEY</td><td><code>Fred.ICEBofAML.USCorporateMoreThan15YearEffectiveYield</code></td><td>ICE BofAML US Corporate 15+ Year Effective Yield (in Percent)</td></tr><tr><td>BAMLC2A0C35YEY</td><td><code>Fred.ICEBofAML.USCorporate3To5YearEffectiveYield</code></td><td>ICE BofAML US Corporate 3-5 Year Effective Yield (in Percent)</td></tr><tr><td>BAMLC3A0C57YEY</td><td><code>Fred.ICEBofAML.USCorporate5To7YearEffectiveYield</code></td><td>ICE BofAML US Corporate 5-7 Year Effective Yield (in Percent)</td></tr><tr><td>BAMLC4A0C710YEY</td><td><code>Fred.ICEBofAML.USCorporate7To10YearEffectiveYield</code></td><td>ICE BofAML US Corporate 7-10 Year Effective Yield (in Percent)</td></tr><tr><td>BAMLC0A3CAEY</td><td><code>Fred.ICEBofAML.USCorporateAEffectiveYield</code></td><td>ICE BofAML US Corporate A Effective Yield (in Percent)</td></tr><tr><td>BAMLC0A2CAAEY</td><td><code>Fred.ICEBofAML.USCorporateAAEffectiveYield</code></td><td>ICE BofAML US Corporate AA Effective Yield (in Percent)</td></tr><tr><td>BAMLC0A1CAAAEY</td><td><code>Fred.ICEBofAML.USCorporateAAAEffectiveYield</code></td><td>ICE BofAML US Corporate AAA Effective Yield (in Percent)</td></tr><tr><td>BAMLH0A2HYBEY</td><td><code>Fred.ICEBofAML.USHighYieldBEffectiveYield</code></td><td>ICE BofAML US High Yield B Effective Yield (in Percent)</td></tr><tr><td>BAMLH0A1HYBBEY</td><td><code>Fred.ICEBofAML.USHighYieldBBEffectiveYield</code></td><td>ICE BofAML US High Yield BB Effective Yield (in Percent)</td></tr><tr><td>BAMLC0A4CBBBEY</td><td><code>Fred.ICEBofAML.USCorporateBBBEffectiveYield</code></td><td>ICE BofAML US Corporate BBB Effective Yield (in Percent)</td></tr><tr><td>BAMLH0A3HYCEY</td><td><code>Fred.ICEBofAML.USHighYieldCCCorBelowEffectiveYield</code></td><td>ICE BofAML US High Yield CCC or Below Effective Yield (in Percent)</td></tr><tr><td>BAMLC0A0CMEY</td><td><code>Fred.ICEBofAML.USCorporateMasterEffectiveYield</code></td><td>ICE BofAML US Corporate Master Effective Yield (in Percent)</td></tr><tr><td>BAMLEMUBCRPIUSEY</td><td><code>Fred.ICEBofAML.USEmergingMarketsCorporatePlusSubIndexEffectiveYield</code></td><td>ICE BofAML US Emerging Markets Corporate Plus Sub-Index Effective Yield (in Percent)</td></tr><tr><td>BAMLEMCLLCRPIUSEY</td><td><code>Fred.ICEBofAML.USEmergingMarketsLiquidCorporatePlusIndexEffectiveYield</code></td><td>ICE BofAML US Emerging Markets Liquid Corporate Plus Index Effective Yield (in Percent)</td></tr><tr><td>BAMLH0A0HYM2EY</td><td><code>Fred.ICEBofAML.USHighYieldMasterIIEffectiveYield</code></td><td>ICE BofAML US High Yield Master II Effective Yield (in Percent)</td></tr><tr><td>BAMLEM1BRRAAA2ACRPISYTW</td><td><code>Fred.ICEBofAML.AAAAEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML AAA-A Emerging Markets Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEM1RAAA2ALCRPIUSSYTW</td><td><code>Fred.ICEBofAML.AAAAUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML AAA-A US Emerging Markets Liquid Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMRACRPIASIASYTW</td><td><code>Fred.ICEBofAML.AsiaEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML Asia Emerging Markets Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMALLCRPIASIAUSSYTW</td><td><code>Fred.ICEBofAML.AsiaUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML Asia US Emerging Markets Liquid Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEM4BRRBLCRPISYTW</td><td><code>Fred.ICEBofAML.BandLowerEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML B and Lower Emerging Markets Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEM4RBLLCRPIUSSYTW</td><td><code>Fred.ICEBofAML.BandLowerUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML B and Lower US Emerging Markets Liquid Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEM3BRRBBCRPISYTW</td><td><code>Fred.ICEBofAML.BBEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML BB Emerging Markets Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEM3RBBLCRPIUSSYTW</td><td><code>Fred.ICEBofAML.BBUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML BB US Emerging Markets Liquid Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEM2BRRBBBCRPISYTW</td><td><code>Fred.ICEBofAML.BBBEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML BBB Emerging Markets Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEM2RBBBLCRPIUSSYTW</td><td><code>Fred.ICEBofAML.BBBUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML BBB US Emerging Markets Liquid Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEM5BCOCRPISYTW</td><td><code>Fred.ICEBofAML.CrossoverEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML Crossover Emerging Markets Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMXOCOLCRPIUSSYTW</td><td><code>Fred.ICEBofAML.CrossoverUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML Crossover US Emerging Markets Liquid Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMCBPISYTW</td><td><code>Fred.ICEBofAML.EmergingMarketsCorporatePlusIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML Emerging Markets Corporate Plus Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMEBCRPIESYTW</td><td><code>Fred.ICEBofAML.EuroEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML Euro Emerging Markets Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLHE00EHYISYTW</td><td><code>Fred.ICEBofAML.EuroHighYieldIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML Euro High Yield Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMRECRPIEMEASYTW</td><td><code>Fred.ICEBofAML.EMEAEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML Europe, the Middle East, and Africa (EMEA) Emerging Markets Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMELLCRPIEMEAUSSYTW</td><td><code>Fred.ICEBofAML.EMEAUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML Europe, the Middle East, and Africa (EMEA) US Emerging Markets Liquid Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMFSFCRPISYTW</td><td><code>Fred.ICEBofAML.FinancialEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML Financial Emerging Markets Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMFLFLCRPIUSSYTW</td><td><code>Fred.ICEBofAML.FinancialUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML Financial US Emerging Markets Liquid Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMIBHGCRPISYTW</td><td><code>Fred.ICEBofAML.HighGradeEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML High Grade Emerging Markets Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMHGHGLCRPIUSSYTW</td><td><code>Fred.ICEBofAML.HighGradeUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML High Grade US Emerging Markets Liquid Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMHBHYCRPISYTW</td><td><code>Fred.ICEBofAML.HighYieldEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML High Yield Emerging Markets Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMHYHYLCRPIUSSYTW</td><td><code>Fred.ICEBofAML.HighYieldUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML High Yield US Emerging Markets Liquid Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMRLCRPILASYTW</td><td><code>Fred.ICEBofAML.LatinAmericaEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML Latin America Emerging Markets Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMLLLCRPILAUSSYTW</td><td><code>Fred.ICEBofAML.LatinAmericaUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML Latin America US Emerging Markets Liquid Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMNSNFCRPISYTW</td><td><code>Fred.ICEBofAML.NonFinancialEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML Non-Financial Emerging Markets Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMNFNFLCRPIUSSYTW</td><td><code>Fred.ICEBofAML.NonFinancialUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML Non-Financial US Emerging Markets Liquid Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMPTPRVICRPISYTW</td><td><code>Fred.ICEBofAML.PrivateSectorIssuersEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML Private Sector Issuers Emerging Markets Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMPVPRIVSLCRPIUSSYTW</td><td><code>Fred.ICEBofAML.PrivateSectorIssuersUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML Private Sector Issuers US Emerging Markets Liquid Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMPBPUBSICRPISYTW</td><td><code>Fred.ICEBofAML.PublicSectorIssuersEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML Public Sector Issuers Emerging Markets Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMPUPUBSLCRPIUSSYTW</td><td><code>Fred.ICEBofAML.PublicSectorIssuersUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML Public Sector Issuers US Emerging Markets Liquid Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLC1A0C13YSYTW</td><td><code>Fred.ICEBofAML.USCorporate1To3YearSemiAnnualYieldtoWorst</code></td><td>ICE BofAML US Corporate 1-3 Year Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLC7A0C1015YSYTW</td><td><code>Fred.ICEBofAML.USCorporate10To15YearSemiAnnualYieldtoWorst</code></td><td>ICE BofAML US Corporate 10-15 Year Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLC8A0C15PYSYTW</td><td><code>Fred.ICEBofAML.USCorporateMoreThan15YearSemiAnnualYieldtoWorst</code></td><td>ICE BofAML US Corporate 15+ Year Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLC2A0C35YSYTW</td><td><code>Fred.ICEBofAML.USCorporate3To5YearSemiAnnualYieldtoWorst</code></td><td>ICE BofAML US Corporate 3-5 Year Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLC3A0C57YSYTW</td><td><code>Fred.ICEBofAML.USCorporate5To7YearSemiAnnualYieldtoWorst</code></td><td>ICE BofAML US Corporate 5-7 Year Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLC4A0C710YSYTW</td><td><code>Fred.ICEBofAML.USCorporate7To10YearSemiAnnualYieldtoWorst</code></td><td>ICE BofAML US Corporate 7-10 Year Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLC0A3CASYTW</td><td><code>Fred.ICEBofAML.USCorporateASemiAnnualYieldtoWorst</code></td><td>ICE BofAML US Corporate A Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLC0A2CAASYTW</td><td><code>Fred.ICEBofAML.USCorporateAASemiAnnualYieldtoWorst</code></td><td>ICE BofAML US Corporate AA Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLC0A1CAAASYTW</td><td><code>Fred.ICEBofAML.USCorporateAAASemiAnnualYieldtoWorst</code></td><td>ICE BofAML US Corporate AAA Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLH0A2HYBSYTW</td><td><code>Fred.ICEBofAML.USHighYieldBSemiAnnualYieldtoWorst</code></td><td>ICE BofAML US High Yield B Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLH0A1HYBBSYTW</td><td><code>Fred.ICEBofAML.USHighYieldBBSemiAnnualYieldtoWorst</code></td><td>ICE BofAML US High Yield BB Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLC0A4CBBBSYTW</td><td><code>Fred.ICEBofAML.USCorporateBBBSemiAnnualYieldtoWorst</code></td><td>ICE BofAML US Corporate BBB Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLH0A3HYCSYTW</td><td><code>Fred.ICEBofAML.USHighYieldCCCorBelowSemiAnnualYieldtoWorst</code></td><td>ICE BofAML US High Yield CCC or Below Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLC0A0CMSYTW</td><td><code>Fred.ICEBofAML.USCorporateMasterSemiAnnualYieldtoWorst</code></td><td>ICE BofAML US Corporate Master Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMUBCRPIUSSYTW</td><td><code>Fred.ICEBofAML.USEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML US Emerging Markets Corporate Plus Sub-Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLEMCLLCRPIUSSYTW</td><td><code>Fred.ICEBofAML.USEmergingMarketsLiquidCorporatePlusIndexSemiAnnualYieldtoWorst</code></td><td>ICE BofAML US Emerging Markets Liquid Corporate Plus Index Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td>BAMLH0A0HYM2SYTW</td><td><code>Fred.ICEBofAML.USHighYieldMasterIISemiAnnualYieldtoWorst</code></td><td>ICE BofAML US High Yield Master II Semi-Annual Yield to Worst (in Percent)</td></tr><tr><td colspan=\"3\"><b>LIBOR</b></td></tr><tr><td>CHFONTD156N</td><td><code>Fred.LIBOR.SpotNextBasedOnSwissFranc</code></td><td>Spot Next London Interbank Offered Rate (LIBOR), based on Swiss Franc (in Percent)</td></tr><tr><td>JPYONTD156N</td><td><code>Fred.LIBOR.SpotNextBasedOnJapaneseYen</code></td><td>Spot Next London Interbank Offered Rate (LIBOR), based on Japanese Yen (in Percent)</td></tr><tr><td>JPY6MTD156N</td><td><code>Fred.LIBOR.SixMonthBasedOnJapaneseYen</code></td><td>6-Month London Interbank Offered Rate (LIBOR), based on Japanese Yen (in Percent)</td></tr><tr><td>JPY3MTD156N</td><td><code>Fred.LIBOR.ThreeMonthBasedOnJapaneseYen</code></td><td>3-Month London Interbank Offered Rate (LIBOR), based on Japanese Yen (in Percent)</td></tr><tr><td>USD6MTD156N</td><td><code>Fred.LIBOR.SixMonthBasedOnUSD</code></td><td>6-Month London Interbank Offered Rate (LIBOR), based on U.S. Dollar (in Percent)</td></tr><tr><td>JPY1MTD156N</td><td><code>Fred.LIBOR.OneMonthBasedOnJapaneseYen</code></td><td>1-Month London Interbank Offered Rate (LIBOR), based on Japanese Yen (in Percent)</td></tr><tr><td>JPY12MD156N</td><td><code>Fred.LIBOR.TwelveMonthBasedOnJapaneseYen</code></td><td>12-Month London Interbank Offered Rate (LIBOR), based on Japanese Yen (in Percent)</td></tr><tr><td>GBP12MD156N</td><td><code>Fred.LIBOR.TwelveMonthBasedOnBritishPound</code></td><td>12-Month London Interbank Offered Rate (LIBOR), based on British Pound (in Percent)</td></tr><tr><td>GBP1MTD156N</td><td><code>Fred.LIBOR.OneMonthBasedOnBritishPound</code></td><td>1-Month London Interbank Offered Rate (LIBOR), based on British Pound (in Percent)</td></tr><tr><td>GBP1WKD156N</td><td><code>Fred.LIBOR.OneWeekBasedOnBritishPound</code></td><td>1-Week London Interbank Offered Rate (LIBOR), based on British Pound (in Percent)</td></tr><tr><td>GBP2MTD156N</td><td><code>Fred.LIBOR.TwoMonthBasedOnBritishPound</code></td><td>2-Month London Interbank Offered Rate (LIBOR), based on British Pound (in Percent)</td></tr><tr><td>GBP3MTD156N</td><td><code>Fred.LIBOR.ThreeMonthBasedOnBritishPound</code></td><td>3-Month London Interbank Offered Rate (LIBOR), based on British Pound (in Percent)</td></tr><tr><td>JPY1WKD156N</td><td><code>Fred.LIBOR.OneWeekBasedOnJapaneseYen</code></td><td>1-Week London Interbank Offered Rate (LIBOR), based on Japanese Yen (in Percent)</td></tr><tr><td>JPY2MTD156N</td><td><code>Fred.LIBOR.TwoMonthBasedOnJapaneseYen</code></td><td>2-Month London Interbank Offered Rate (LIBOR), based on Japanese Yen (in Percent)</td></tr><tr><td>CHF6MTD156N</td><td><code>Fred.LIBOR.SixMonthBasedOnSwissFranc</code></td><td>6-Month London Interbank Offered Rate (LIBOR), based on Swiss Franc (in Percent)</td></tr><tr><td>CHF3MTD156N</td><td><code>Fred.LIBOR.ThreeMonthBasedOnSwissFranc</code></td><td>3-Month London Interbank Offered Rate (LIBOR), based on Swiss Franc (in Percent)</td></tr><tr><td>USD1MTD156N</td><td><code>Fred.LIBOR.OneMonthBasedOnUSD</code></td><td>1-Month London Interbank Offered Rate (LIBOR), based on U.S. Dollar (in Percent)</td></tr><tr><td>CHF12MD156N</td><td><code>Fred.LIBOR.TwelveMonthBasedOnSwissFranc</code></td><td>12-Month London Interbank Offered Rate (LIBOR), based on Swiss Franc (in Percent)</td></tr><tr><td>USD12MD156N</td><td><code>Fred.LIBOR.TwelveMonthBasedOnUSD</code></td><td>12-Month London Interbank Offered Rate (LIBOR), based on U.S. Dollar (in Percent)</td></tr><tr><td>CHF1MTD156N</td><td><code>Fred.LIBOR.OneMonthBasedOnSwissFranc</code></td><td>1-Month London Interbank Offered Rate (LIBOR), based on Swiss Franc (in Percent)</td></tr><tr><td>CHF1WKD156N</td><td><code>Fred.LIBOR.OneWeekBasedOnSwissFranc</code></td><td>1-Week London Interbank Offered Rate (LIBOR), based on Swiss Franc (in Percent)</td></tr><tr><td>CHF2MTD156N</td><td><code>Fred.LIBOR.TwoMonthBasedOnSwissFranc</code></td><td>2-Month London Interbank Offered Rate (LIBOR), based on Swiss Franc (in Percent)</td></tr><tr><td>EUR12MD156N</td><td><code>Fred.LIBOR.TwelveMonthBasedOnEuro</code></td><td>12-Month London Interbank Offered Rate (LIBOR), based on Euro (in Percent)</td></tr><tr><td>GBP6MTD156N</td><td><code>Fred.LIBOR.SixMonthBasedOnBritishPound</code></td><td>6-Month London Interbank Offered Rate (LIBOR), based on British Pound (in Percent)</td></tr><tr><td>EUR1MTD156N</td><td><code>Fred.LIBOR.OneMonthBasedOnEuro</code></td><td>1-Month London Interbank Offered Rate (LIBOR), based on Euro (in Percent)</td></tr><tr><td>EUR2MTD156N</td><td><code>Fred.LIBOR.TwoMonthBasedOnEuro</code></td><td>2-Month London Interbank Offered Rate (LIBOR), based on Euro (in Percent)</td></tr><tr><td>EUR3MTD156N</td><td><code>Fred.LIBOR.ThreeMonthBasedOnEuro</code></td><td>3-Month London Interbank Offered Rate (LIBOR), based on Euro (in Percent)</td></tr><tr><td>EUR6MTD156N</td><td><code>Fred.LIBOR.SixMonthBasedOnEuro</code></td><td>6-Month London Interbank Offered Rate (LIBOR), based on Euro (in Percent)</td></tr><tr><td>EURONTD156N</td><td><code>Fred.LIBOR.OvernightBasedOnEuro</code></td><td>Overnight London Interbank Offered Rate (LIBOR), based on Euro (in Percent)</td></tr><tr><td>USD1WKD156N</td><td><code>Fred.LIBOR.OneWeekBasedOnUSD</code></td><td>1-Week London Interbank Offered Rate (LIBOR), based on U.S. Dollar (in Percent)</td></tr><tr><td>USD2MTD156N</td><td><code>Fred.LIBOR.TwoMonthBasedOnUSD</code></td><td>2-Month London Interbank Offered Rate (LIBOR), based on U.S. Dollar (in Percent)</td></tr><tr><td>USD3MTD156N</td><td><code>Fred.LIBOR.ThreeMonthBasedOnUSD</code></td><td>3-Month London Interbank Offered Rate (LIBOR), based on U.S. Dollar (in Percent)</td></tr><tr><td>USDONTD156N</td><td><code>Fred.LIBOR.OvernightBasedOnUSD</code></td><td>Overnight London Interbank Offered Rate (LIBOR), based on U.S. Dollar (in Percent)</td></tr><tr><td>EUR1WKD156N</td><td><code>Fred.LIBOR.OneWeekBasedOnEuro</code></td><td>1-Week London Interbank Offered Rate (LIBOR), based on Euro (in Percent)</td></tr><tr><td>GBPONTD156N</td><td><code>Fred.LIBOR.OvernightBasedOnBritishPound</code></td><td>Overnight London Interbank Offered Rate (LIBOR), based on British Pound (in Percent)</td></tr><tr><td colspan=\"3\"><b>OECDRecessionIndicators</b></td></tr><tr><td>4BIGEURORECDM</td><td><code>Fred.OECDRecessionIndicators.FourBigEuropeanCountriesFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Four Big European Countries from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>AUSRECDM</td><td><code>Fred.OECDRecessionIndicators.AustraliaFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Australia from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>AUTRECDM</td><td><code>Fred.OECDRecessionIndicators.AustriaFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Austria from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>BELRECDM</td><td><code>Fred.OECDRecessionIndicators.BelgiumFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Belgium from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>BRARECDM</td><td><code>Fred.OECDRecessionIndicators.BrazilFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Brazil from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>CANRECDM</td><td><code>Fred.OECDRecessionIndicators.CanadaFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Canada from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>CHERECDM</td><td><code>Fred.OECDRecessionIndicators.SwitzerlandFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Switzerland from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>CHLRECDM</td><td><code>Fred.OECDRecessionIndicators.ChileFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Chile from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>CHNRECDM</td><td><code>Fred.OECDRecessionIndicators.ChinaFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for China from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>CZERECDM</td><td><code>Fred.OECDRecessionIndicators.CzechRepublicFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for the Czech Republic from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>DEURECDM</td><td><code>Fred.OECDRecessionIndicators.GermanyFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Germany from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>DNKRECDM</td><td><code>Fred.OECDRecessionIndicators.DenmarkFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Denmark from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>ESPRECDM</td><td><code>Fred.OECDRecessionIndicators.SpainFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Spain from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>ESTRECDM</td><td><code>Fred.OECDRecessionIndicators.EstoniaFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Estonia from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>EURORECDM</td><td><code>Fred.OECDRecessionIndicators.EuroAreaFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Euro Area from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>FINRECDM</td><td><code>Fred.OECDRecessionIndicators.FinlandFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Finland from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>FRARECDM</td><td><code>Fred.OECDRecessionIndicators.FranceFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for France from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>GBRRECDM</td><td><code>Fred.OECDRecessionIndicators.UnitedKingdomFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for the United Kingdom from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>GRCRECDM</td><td><code>Fred.OECDRecessionIndicators.GreeceFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Greece from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>HUNRECDM</td><td><code>Fred.OECDRecessionIndicators.HungaryFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Hungary from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>IDNRECDM</td><td><code>Fred.OECDRecessionIndicators.IndonesiaFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Indonesia from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>INDRECDM</td><td><code>Fred.OECDRecessionIndicators.IndiaFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for India from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>IRLRECDM</td><td><code>Fred.OECDRecessionIndicators.IrelandFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Ireland from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>ISRRECDM</td><td><code>Fred.OECDRecessionIndicators.IsraelFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Israel from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>ITARECDM</td><td><code>Fred.OECDRecessionIndicators.ItalyFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Italy from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>JPNRECDM</td><td><code>Fred.OECDRecessionIndicators.JapanFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Japan from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>KORRECDM</td><td><code>Fred.OECDRecessionIndicators.KoreaFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Korea from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>LUXRECDM</td><td><code>Fred.OECDRecessionIndicators.LuxembourgFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Luxembourg from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>MAJOR5ASIARECDM</td><td><code>Fred.OECDRecessionIndicators.MajorFiveAsiaFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Major 5 Asia from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>MEXRECDM</td><td><code>Fred.OECDRecessionIndicators.MexicoFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Mexico from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>MSCRECDM</td><td><code>Fred.OECDRecessionIndicators.MajorSevenCountriesFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Major Seven Countries from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>NAFTARECDM</td><td><code>Fred.OECDRecessionIndicators.NAFTAAreaFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for NAFTA Area from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>NDLRECDM</td><td><code>Fred.OECDRecessionIndicators.NetherlandsFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Netherlands from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>NORRECDM</td><td><code>Fred.OECDRecessionIndicators.NorwayFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Norway from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>NZLRECDM</td><td><code>Fred.OECDRecessionIndicators.NewZealandFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for New Zealand from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>OECDEUROPERECDM</td><td><code>Fred.OECDRecessionIndicators.OECDEuropeFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for OECD Europe from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>OECDNMERECDM</td><td><code>Fred.OECDRecessionIndicators.OECDAndNonmemberEconomiesFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for OECD and Non-member Economies from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>OECDRECDM</td><td><code>Fred.OECDRecessionIndicators.OECDTotalAreaFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for the OECD Total Area from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>POLRECDM</td><td><code>Fred.OECDRecessionIndicators.PolandFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Poland from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>PRTRECDM</td><td><code>Fred.OECDRecessionIndicators.PortugalFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Portugal from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>RUSRECDM</td><td><code>Fred.OECDRecessionIndicators.RussianFederationFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Russian Federation from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>SVKRECDM</td><td><code>Fred.OECDRecessionIndicators.SlovakRepublicFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for the Slovak Republic from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>SVNRECDM</td><td><code>Fred.OECDRecessionIndicators.SloveniaFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Slovenia from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>SWERECDM</td><td><code>Fred.OECDRecessionIndicators.SwedenFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Sweden from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>TURRECDM</td><td><code>Fred.OECDRecessionIndicators.TurkeyFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Turkey from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>USARECDM</td><td><code>Fred.OECDRecessionIndicators.UnitedStatesFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for the United States from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>ZAFRECDM</td><td><code>Fred.OECDRecessionIndicators.SouthAfricaFromPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for South Africa from the Peak through the Trough (in +1 or 0)</td></tr><tr><td>4BIGEURORECD</td><td><code>Fred.OECDRecessionIndicators.FourBigEuropeanCountriesFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Four Big European Countries from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>AUSRECD</td><td><code>Fred.OECDRecessionIndicators.AustraliaFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Australia from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>AUTRECD</td><td><code>Fred.OECDRecessionIndicators.AustriaFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Austria from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>BELRECD</td><td><code>Fred.OECDRecessionIndicators.BelgiumFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Belgium from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>BRARECD</td><td><code>Fred.OECDRecessionIndicators.BrazilFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Brazil from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>CANRECD</td><td><code>Fred.OECDRecessionIndicators.CanadaFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Canada from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>CHERECD</td><td><code>Fred.OECDRecessionIndicators.SwitzerlandFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Switzerland from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>CHLRECD</td><td><code>Fred.OECDRecessionIndicators.ChileFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Chile from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>CHNRECD</td><td><code>Fred.OECDRecessionIndicators.ChinaFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for China from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>CZERECD</td><td><code>Fred.OECDRecessionIndicators.CzechRepublicFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for the Czech Republic from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>DEURECD</td><td><code>Fred.OECDRecessionIndicators.GermanyFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Germany from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>DNKRECD</td><td><code>Fred.OECDRecessionIndicators.DenmarkFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Denmark from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>ESPRECD</td><td><code>Fred.OECDRecessionIndicators.SpainFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Spain from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>ESTRECD</td><td><code>Fred.OECDRecessionIndicators.EstoniaFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Estonia from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>EURORECD</td><td><code>Fred.OECDRecessionIndicators.EuroAreaFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Euro Area from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>FINRECD</td><td><code>Fred.OECDRecessionIndicators.FinlandFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Finland from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>FRARECD</td><td><code>Fred.OECDRecessionIndicators.FranceFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for France from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>GBRRECD</td><td><code>Fred.OECDRecessionIndicators.UnitedKingdomFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for the United Kingdom from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>GRCRECD</td><td><code>Fred.OECDRecessionIndicators.GreeceFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Greece from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>HUNRECD</td><td><code>Fred.OECDRecessionIndicators.HungaryFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Hungary from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>IDNRECD</td><td><code>Fred.OECDRecessionIndicators.IndonesiaFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Indonesia from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>INDRECD</td><td><code>Fred.OECDRecessionIndicators.IndiaFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for India from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>IRLRECD</td><td><code>Fred.OECDRecessionIndicators.IrelandFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Ireland from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>ISRRECD</td><td><code>Fred.OECDRecessionIndicators.IsraelFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Israel from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>ITARECD</td><td><code>Fred.OECDRecessionIndicators.ItalyFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Italy from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>JPNRECD</td><td><code>Fred.OECDRecessionIndicators.JapanFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Japan from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>KORRECD</td><td><code>Fred.OECDRecessionIndicators.KoreaFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Korea from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>LUXRECD</td><td><code>Fred.OECDRecessionIndicators.LuxembourgFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Luxembourg from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>MAJOR5ASIARECD</td><td><code>Fred.OECDRecessionIndicators.MajorFiveAsiaFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Major 5 Asia from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>MEXRECD</td><td><code>Fred.OECDRecessionIndicators.MexicoFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Mexico from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>MSCRECD</td><td><code>Fred.OECDRecessionIndicators.MajorSevenCountriesFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Major Seven Countries from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>NAFTARECD</td><td><code>Fred.OECDRecessionIndicators.NAFTAAreaFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for NAFTA Area from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>NDLRECD</td><td><code>Fred.OECDRecessionIndicators.NetherlandsFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Netherlands from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>NORRECD</td><td><code>Fred.OECDRecessionIndicators.NorwayFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Norway from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>NZLRECD</td><td><code>Fred.OECDRecessionIndicators.NewZealandFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for New Zealand from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>OECDEUROPERECD</td><td><code>Fred.OECDRecessionIndicators.OECDEuropeFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for OECD Europe from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>OECDNMERECD</td><td><code>Fred.OECDRecessionIndicators.OECDandNonmemberEconomiesFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for OECD and Non-member Economies from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>OECDRECD</td><td><code>Fred.OECDRecessionIndicators.OECDTotalAreaFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for the OECD Total Area from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>POLRECD</td><td><code>Fred.OECDRecessionIndicators.PolandFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Poland from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>PRTRECD</td><td><code>Fred.OECDRecessionIndicators.PortugalFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Portugal from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>RUSRECD</td><td><code>Fred.OECDRecessionIndicators.RussianFederationFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Russian Federation from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>SVKRECD</td><td><code>Fred.OECDRecessionIndicators.SlovakRepublicFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for the Slovak Republic from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>SVNRECD</td><td><code>Fred.OECDRecessionIndicators.SloveniaFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Slovenia from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>SWERECD</td><td><code>Fred.OECDRecessionIndicators.SwedenFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Sweden from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>TURRECD</td><td><code>Fred.OECDRecessionIndicators.TurkeyFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for Turkey from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>USARECD</td><td><code>Fred.OECDRecessionIndicators.UnitedStatesFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for the United States from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>ZAFRECD</td><td><code>Fred.OECDRecessionIndicators.SouthAfricaFromPeriodFollowingPeakThroughTheTrough</code></td><td>OECD based Recession Indicators for South Africa from the Period following the Peak through the Trough (in +1 or 0)</td></tr><tr><td>4BIGEURORECDP</td><td><code>Fred.OECDRecessionIndicators.FourBigEuropeanCountriesFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Four Big European Countries from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>AUSRECDP</td><td><code>Fred.OECDRecessionIndicators.AustraliaFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Australia from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>AUTRECDP</td><td><code>Fred.OECDRecessionIndicators.AustriaFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Austria from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>BELRECDP</td><td><code>Fred.OECDRecessionIndicators.BelgiumFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Belgium from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>BRARECDP</td><td><code>Fred.OECDRecessionIndicators.BrazilFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Brazil from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>CANRECDP</td><td><code>Fred.OECDRecessionIndicators.CanadaFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Canada from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>CHERECDP</td><td><code>Fred.OECDRecessionIndicators.SwitzerlandFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Switzerland from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>CHLRECDP</td><td><code>Fred.OECDRecessionIndicators.ChileFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Chile from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>CHNRECDP</td><td><code>Fred.OECDRecessionIndicators.ChinaFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for China from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>CZERECDP</td><td><code>Fred.OECDRecessionIndicators.CzechRepublicFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for the Czech Republic from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>DEURECDP</td><td><code>Fred.OECDRecessionIndicators.GermanyFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Germany from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>DNKRECDP</td><td><code>Fred.OECDRecessionIndicators.DenmarkFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Denmark from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>ESPRECDP</td><td><code>Fred.OECDRecessionIndicators.SpainFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Spain from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>ESTRECDP</td><td><code>Fred.OECDRecessionIndicators.EstoniaFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Estonia from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>EURORECDP</td><td><code>Fred.OECDRecessionIndicators.EuroAreaFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Euro Area from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>FINRECDP</td><td><code>Fred.OECDRecessionIndicators.FinlandFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Finland from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>FRARECDP</td><td><code>Fred.OECDRecessionIndicators.FranceFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for France from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>GBRRECDP</td><td><code>Fred.OECDRecessionIndicators.UnitedKingdomFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for the United Kingdom from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>GRCRECDP</td><td><code>Fred.OECDRecessionIndicators.GreeceFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Greece from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>HUNRECDP</td><td><code>Fred.OECDRecessionIndicators.HungaryFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Hungary from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>IDNRECDP</td><td><code>Fred.OECDRecessionIndicators.IndonesiaFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Indonesia from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>INDRECDP</td><td><code>Fred.OECDRecessionIndicators.IndiaFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for India from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>IRLRECDP</td><td><code>Fred.OECDRecessionIndicators.IrelandFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Ireland from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>ISRRECDP</td><td><code>Fred.OECDRecessionIndicators.IsraelFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Israel from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>ITARECDP</td><td><code>Fred.OECDRecessionIndicators.ItalyFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Italy from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>JPNRECDP</td><td><code>Fred.OECDRecessionIndicators.JapanFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Japan from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>KORRECDP</td><td><code>Fred.OECDRecessionIndicators.KoreaFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Korea from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>LUXRECDP</td><td><code>Fred.OECDRecessionIndicators.LuxembourgFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Luxembourg from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>MAJOR5ASIARECDP</td><td><code>Fred.OECDRecessionIndicators.MajorFiveAsiaFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Major 5 Asia from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>MEXRECDP</td><td><code>Fred.OECDRecessionIndicators.MexicoFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Mexico from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>MSCRECDP</td><td><code>Fred.OECDRecessionIndicators.MajorSevenCountriesFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Major Seven Countries from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>NAFTARECDP</td><td><code>Fred.OECDRecessionIndicators.NAFTAAreaFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for NAFTA Area from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>NDLRECDP</td><td><code>Fred.OECDRecessionIndicators.NetherlandsFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Netherlands from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>NORRECDP</td><td><code>Fred.OECDRecessionIndicators.NorwayFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Norway from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>NZLRECDP</td><td><code>Fred.OECDRecessionIndicators.NewZealandFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for New Zealand from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>OECDEUROPERECDP</td><td><code>Fred.OECDRecessionIndicators.OECDEuropeFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for OECD Europe from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>OECDNMERECDP</td><td><code>Fred.OECDRecessionIndicators.OECDandNonmemberEconomiesFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for OECD and Non-member Economies from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>OECDRECDP</td><td><code>Fred.OECDRecessionIndicators.OECDTotalAreaFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for the OECD Total Area from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>POLRECDP</td><td><code>Fred.OECDRecessionIndicators.PolandFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Poland from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>PRTRECDP</td><td><code>Fred.OECDRecessionIndicators.PortugalFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Portugal from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>RUSRECDP</td><td><code>Fred.OECDRecessionIndicators.RussianFederationFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Russian Federation from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>SVKRECDP</td><td><code>Fred.OECDRecessionIndicators.SlovakRepublicFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for the Slovak Republic from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>SVNRECDP</td><td><code>Fred.OECDRecessionIndicators.SloveniaFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Slovenia from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>SWERECDP</td><td><code>Fred.OECDRecessionIndicators.SwedenFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Sweden from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>TURRECDP</td><td><code>Fred.OECDRecessionIndicators.TurkeyFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for Turkey from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>USARECDP</td><td><code>Fred.OECDRecessionIndicators.UnitedStatesFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for the United States from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td>ZAFRECDP</td><td><code>Fred.OECDRecessionIndicators.SouthAfricaFromPeakThroughThePeriodPrecedingtheTrough</code></td><td>OECD based Recession Indicators for South Africa from the Peak through the Period preceding the Trough (in +1 or 0)</td></tr><tr><td colspan=\"3\"><b>TradeWeightedIndexes</b></td></tr><tr><td>DTWEXM</td><td><code>Fred.TradeWeightedIndexes.MajorCurrenciesGoods</code></td><td>Trade Weighted U.S. Dollar Index: Major Currencies, Goods (in Index Mar 1973=100)</td></tr><tr><td>DTWEXO</td><td><code>Fred.TradeWeightedIndexes.OtherImportantTradingPartnersGoods</code></td><td>Trade Weighted U.S. Dollar Index: Other Important Trading Partners, Goods (in Index Jan 1997=100)</td></tr><tr><td>DTWEXB</td><td><code>Fred.TradeWeightedIndexes.BroadGoods</code></td><td>Trade Weighted U.S. Dollar Index: Broad, Goods (in Index Jan 1997=100)</td></tr><tr><td>DTWEXAFEGS</td><td><code>Fred.TradeWeightedIndexes.AdvancedForeignEconomiesGoodsAndServices</code></td><td>Trade Weighted U.S. Dollar Index: Advanced Foreign Economies, Goods and Services (in Index Jan 2006=100)</td></tr><tr><td>DTWEXBGS</td><td><code>Fred.TradeWeightedIndexes.BroadGoodsAndServices</code></td><td>Trade Weighted U.S. Dollar Index: Broad, Goods and Services (in Index Jan 2006=100)</td></tr><tr><td>DTWEXEMEGS</td><td><code>Fred.TradeWeightedIndexes.EmergingMarketsEconomiesGoodsAndServices</code></td><td>Trade Weighted U.S. Dollar Index: Emerging Markets Economies, Goods and Services (in Index Jan 2006=100)</td></tr><tr><td colspan=\"3\"><b>Wilshire</b></td></tr><tr><td>WILLSMLCAPVALPR</td><td><code>Fred.Wilshire.USSmallCapValuePrice</code></td><td>Wilshire US Small-Cap Value Price Index (in Index)</td></tr><tr><td>WILL2500PR</td><td><code>Fred.Wilshire.Price2500</code></td><td>Wilshire 2500 Price Index (in Index)</td></tr><tr><td>WILL4500PR</td><td><code>Fred.Wilshire.Price4500</code></td><td>Wilshire 4500 Price Index (in Index)</td></tr><tr><td>WILL2500PRVAL</td><td><code>Fred.Wilshire.ValuePrice2500</code></td><td>Wilshire 2500 Value Price Index (in Index)</td></tr><tr><td>WILL2500PRGR</td><td><code>Fred.Wilshire.GrowthPrice2500</code></td><td>Wilshire 2500 Growth Price Index (in Index)</td></tr><tr><td>WILLSMLCAPPR</td><td><code>Fred.Wilshire.USSmallCapPrice</code></td><td>Wilshire US Small-Cap Price Index (in Index)</td></tr><tr><td>WILL5000PR</td><td><code>Fred.Wilshire.Price5000</code></td><td>Wilshire 5000 Price Index (in Index)</td></tr><tr><td>WILLSMLCAPGRPR</td><td><code>Fred.Wilshire.USSmallCapGrowthPrice</code></td><td>Wilshire US Small-Cap Growth Price Index (in Index)</td></tr><tr><td>WILLMIDCAPVALPR</td><td><code>Fred.Wilshire.USMidCapValuePrice</code></td><td>Wilshire US Mid-Cap Value Price Index (in Index)</td></tr><tr><td>WILLRESIPR</td><td><code>Fred.Wilshire.USRealEstateSecuritiesPrice</code></td><td>Wilshire US Real Estate Securities Price Index (Wilshire US RESI) (in Index)</td></tr><tr><td>WILLLRGCAPPR</td><td><code>Fred.Wilshire.USLargeCapPrice</code></td><td>Wilshire US Large-Cap Price Index (in Index)</td></tr><tr><td>WILLMIDCAPPR</td><td><code>Fred.Wilshire.USMidCapPrice</code></td><td>Wilshire US Mid-Cap Price Index (in Index)</td></tr><tr><td>WILLMIDCAPGRPR</td><td><code>Fred.Wilshire.USMidCapGrowthPrice</code></td><td>Wilshire US Mid-Cap Growth Price Index (in Index)</td></tr><tr><td>WILLMICROCAPPR</td><td><code>Fred.Wilshire.USMicroCapPrice</code></td><td>Wilshire US Micro-Cap Price Index (in Index)</td></tr><tr><td>WILLREITPR</td><td><code>Fred.Wilshire.USRealEstateInvestmentTrustPrice</code></td><td>Wilshire US Real Estate Investment Trust Price Index (Wilshire US REIT) (in Index)</td></tr><tr><td>WILLLRGCAPVALPR</td><td><code>Fred.Wilshire.USLargeCapValuePrice</code></td><td>Wilshire US Large-Cap Value Price Index (in Index)</td></tr><tr><td>WILLLRGCAPGRPR</td><td><code>Fred.Wilshire.USLargeCapGrowthPrice</code></td><td>Wilshire US Large-Cap Growth Price Index (in Index)</td></tr><tr><td>WILL5000PRFC</td><td><code>Fred.Wilshire.FullCapPrice5000</code></td><td>Wilshire 5000 Full Cap Price Index (in Index)</td></tr><tr><td>WILLMIDCAPVAL</td><td><code>Fred.Wilshire.USMidCapValue</code></td><td>Wilshire US Mid-Cap Value Total Market Index (in Index)</td></tr><tr><td>WILLMIDCAPGR</td><td><code>Fred.Wilshire.USMidCapGrowth</code></td><td>Wilshire US Mid-Cap Growth Total Market Index (in Index)</td></tr><tr><td>WILLMIDCAP</td><td><code>Fred.Wilshire.USMidCap</code></td><td>Wilshire US Mid-Cap Total Market Index (in Index)</td></tr><tr><td>WILLRESIND</td><td><code>Fred.Wilshire.USRealEstateSecurities</code></td><td>Wilshire US Real Estate Securities Total Market Index (Wilshire US RESI) (in Index)</td></tr><tr><td>WILL4500IND</td><td><code>Fred.Wilshire.Index4500</code></td><td>Wilshire 4500 Total Market Index (in Index)</td></tr><tr><td>WILL5000IND</td><td><code>Fred.Wilshire.Index5000</code></td><td>Wilshire 5000 Total Market Index (in Index)</td></tr><tr><td>WILLLRGCAPGR</td><td><code>Fred.Wilshire.USLargeCapGrowth</code></td><td>Wilshire US Large-Cap Growth Total Market Index (in Index)</td></tr><tr><td>WILLMICROCAP</td><td><code>Fred.Wilshire.USMicroCap</code></td><td>Wilshire US Micro-Cap Total Market Index (in Index)</td></tr><tr><td>WILL2500INDVAL</td><td><code>Fred.Wilshire.Value2500</code></td><td>Wilshire 2500 Value Total Market Index (in Index)</td></tr><tr><td>WILLSMLCAPGR</td><td><code>Fred.Wilshire.USSmallCapGrowth</code></td><td>Wilshire US Small-Cap Growth Total Market Index (in Index)</td></tr><tr><td>WILLSMLCAPVAL</td><td><code>Fred.Wilshire.USSmallCapValue</code></td><td>Wilshire US Small-Cap Value Total Market Index (in Index)</td></tr><tr><td>WILLLRGCAPVAL</td><td><code>Fred.Wilshire.USLargeCapValue</code></td><td>Wilshire US Large-Cap Value Total Market Index (in Index)</td></tr><tr><td>WILLREITIND</td><td><code>Fred.Wilshire.USRealEstateInvestmentTrust</code></td><td>Wilshire US Real Estate Investment Trust Total Market Index (Wilshire US REIT) (in Index)</td></tr><tr><td>WILL2500IND</td><td><code>Fred.Wilshire.Index2500</code></td><td>Wilshire 2500 Total Market Index (in Index)</td></tr><tr><td>WILLSMLCAP</td><td><code>Fred.Wilshire.USSmallCap</code></td><td>Wilshire US Small-Cap Total Market Index (in Index)</td></tr><tr><td>WILLLRGCAP</td><td><code>Fred.Wilshire.USLargeCap</code></td><td>Wilshire US Large-Cap Total Market Index (in Index)</td></tr><tr><td>WILL2500INDGR</td><td><code>Fred.Wilshire.Growth2500</code></td><td>Wilshire 2500 Growth Total Market Index (in Index)</td></tr><tr><td>WILL5000INDFC</td><td><code>Fred.Wilshire.TotalMarketFullCap5000</code></td><td>Wilshire 5000 Total Market Full Cap Index (in Index)</td></tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>The FRED dataset enables researchers to accurately design strategies utilizing macroeconomic indicators. Examples include: </p>\n\n<ul><li>Trading on macroeconomic factors</li>\n  <li>Macroeconomic risk modeling</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_1aefe7f8dbb11cad306a5474cba97de1.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The FRED dataset provides Fred objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.Fred\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add FRED data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p><div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass FredAlternativeDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2003, 1, 1)\n        self.SetEndDate(2019, 10, 11)\n        self.SetCash(100000)\n\n        self.fred_peak_to_trough = self.AddData(Fred, Fred.OECDRecessionIndicators.UnitedStatesFromPeakThroughTheTrough, Resolution.Daily).Symbol</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class FredAlternativeDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _fredPeakToTrough;\n\n        public override void Initialize()\n        {\n            SetStartDate(2003, 1, 1);\n            SetEndDate(2019, 10, 11);\n            SetCash(100000);\n            \n            _fredPeakToTrough = AddData&lt;Fred&gt;(Fred.OECDRecessionIndicators.UnitedStatesFromPeakThroughTheTrough, Resolution.Daily).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    if data.ContainsKey(self.fred_peak_to_trough):\n        peak_to_trough = data.Get(Fred, self.fred_peak_to_trough)\n        self.Log(f\"Time: {peak_to_trough.Time}; EndTime: {peak_to_trough.EndTime}; Value: {peak_to_trough.Value}\")</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    if (data.ContainsKey(_fredPeakToTrough))\n    {\n        var peakToTrough = data.Get&lt;Fred&gt;(_fredPeakToTrough);\n        Log($\"Time: {peak_to_trough.Time}; EndTime: {peak_to_trough.EndTime}; Value: {peak_to_trough.Value}\");\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for FRED datasets by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(Fred, self.fred_peak_to_trough, 60, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History&lt;Fred&gt;(_fredPeakToTrough, 60, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The FRED dataset provides Fred objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.Fred\"></div>"
      }
    ],
    "priceCTA": "Free",
    "vendorWebsite": "https://fred.stlouisfed.org/",
    "examples": [
      {
        "id": 108,
        "master_product_id": 10,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example",
        "content": "<p>In this example, we buy SPY when the FRED Peak to Trough value is 1 and liquidate our holdings otherwise.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n \nclass FredAlternativeDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2003, 1, 1)\n        self.SetEndDate(2019, 10, 11)\n        self.SetCash(100000)\n\n        self.spy = self.AddEquity(\"SPY\", Resolution.Daily).Symbol\n        \n        # Requesting data\n        self.fred_peak_to_trough = self.AddData(Fred, Fred.OECDRecessionIndicators.UnitedStatesFromPeakThroughTheTrough, Resolution.Daily).Symbol\n        \n        # Historical data\n        history = self.History(self.fred_peak_to_trough, 60, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request\")\n        \n    def OnData(self, data):\n        if data.ContainsKey(self.fred_peak_to_trough) and data.ContainsKey(self.spy):\n            peak_to_trough = data.Get(Fred, self.fred_peak_to_trough).Value\n            \n            # Buy SPY if peak to trough value is 1\n            if peak_to_trough == 1 and not self.Portfolio.Invested:\n                self.SetHoldings(self.spy, 1)\n                \n            # Liquidate holdings if peak to trough value is 0\n            elif peak_to_trough == 0 and self.Portfolio.Invested:\n                self.Liquidate(self.spy)</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class FredAlternativeDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _fredPeakToTrough;\n        private Symbol _spy;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2003, 1, 1);\n            SetEndDate(2019, 10, 11);\n            SetCash(100000);\n            \n            _spy = AddEquity(\"SPY\", Resolution.Daily).Symbol;\n            \n            // Requesting data\n            _fredPeakToTrough = AddData&lt;Fred&gt;(Fred.OECDRecessionIndicators.UnitedStatesFromPeakThroughTheTrough).Symbol;\n            \n            // Historical data\n            var history = History&lt;Fred&gt;(_fredPeakToTrough, 60, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request\");\n        }\n\n        public override void OnData(Slice data)\n        {\n            if (data.ContainsKey(_fredPeakToTrough) &amp;&amp; data.ContainsKey(_spy))\n            {\n                var peakToTrough = data.Get&lt;Fred&gt;(_fredPeakToTrough).Value;\n                \n                // Buy SPY if peak to trough value is 1\n                if (peakToTrough == 1m &amp;&amp; !Portfolio.Invested)\n                {\n                    SetHoldings(_spy, 1);\n                }\n                \n                // Liquidate holdings if peak to trough value is 0\n                else if (peakToTrough == 0m &amp;&amp; Portfolio.Invested)\n                {\n                    Liquidate(_spy);\n                }\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-10-26 23:02:00"
      },
      {
        "id": 255,
        "master_product_id": 10,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example",
        "content": "<p>In this example, we buy SPY when the FRED Peak to Trough value is 1 and liquidate our holdings otherwise. Positions are held for up to 2 years.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n \nclass FredAlternativeDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2003, 1, 1)\n        self.SetEndDate(2019, 10, 11)\n        self.SetCash(100000)\n\n        symbols = [ Symbol.Create(\"SPY\", SecurityType.Equity, Market.USA) ]\n        self.AddUniverseSelection(ManualUniverseSelectionModel(symbols))\n        \n        self.AddAlpha(FredAlphaModel(self))\n        \n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n        \n        self.AddRiskManagement(NullRiskManagementModel())\n        \n        self.SetExecution(ImmediateExecutionModel())\n        \n        \nclass FredAlphaModel(AlphaModel):\n    \n    symbols = []\n    peak_to_trough_value = None\n    \n    def __init__(self, algorithm):\n        # Requesting data\n        self.fred_peak_to_trough = algorithm.AddData(Fred, Fred.OECDRecessionIndicators.UnitedStatesFromPeakThroughTheTrough, Resolution.Daily).Symbol\n        \n        # Historical data\n        history = algorithm.History(self.fred_peak_to_trough, 60, Resolution.Daily)\n        algorithm.Debug(f\"We got {len(history)} items from our history request\")\n        if history.empty:\n            return\n        self.peak_to_trough_value = history.loc[self.fred_peak_to_trough].value.iloc[-1]\n        \n\n    def Update(self, algorithm, data):\n        insights = []\n        \n        # Update FRED peak to trough value\n        if data.ContainsKey(self.fred_peak_to_trough):\n            self.peak_to_trough_value = data.Get(Fred, self.fred_peak_to_trough).Value\n        \n        # Ensure we have a FRED peak to trough value\n        if self.peak_to_trough_value is None:\n            return []\n        \n        for symbol in self.symbols:\n            # Ensure we have data for the security in the current Slice\n            if not (data.ContainsKey(symbol) and data[symbol] is not None):\n                continue\n        \n            # Buy security if peak to trough value is 1 and not currently invested\n            if self.peak_to_trough_value == 1 and not algorithm.Portfolio[symbol].Invested:\n                insights += [Insight.Price(symbol, timedelta(days=365*2), InsightDirection.Up)]\n                    \n            # Liquidate holdings if peak to trough value is 0\n            elif self.peak_to_trough_value == 0 and algorithm.Portfolio.Invested:\n                insights += [Insight.Price(symbol, timedelta(days=365*2), InsightDirection.Flat)]\n        \n        return insights\n        \n        \n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            self.symbols.append(security.Symbol)\n        \n        for security in changes.RemovedSecurities:\n            if symbol in self.symbols:\n                self.symbols.remove(security.Symbol)</code></pre>\n<pre><code class=\"language-cs\">\n\nnamespace QuantConnect\n{\n    public class FredAlternativeDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2003, 1, 1);\n            SetEndDate(2019, 10, 11);\n            SetCash(100000);\n            \n            AddUniverseSelection(\n                new ManualUniverseSelectionModel(\n                    QuantConnect.Symbol.Create(\"SPY\", SecurityType.Equity, Market.USA)\n            ));\n            \n            AddAlpha(new FredAlphaModel(this));\n            \n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n            \n            AddRiskManagement(new NullRiskManagementModel());\n            \n            SetExecution(new ImmediateExecutionModel());\n        }\n        \n        public class FredAlphaModel : AlphaModel\n        {\n            private List&lt;Symbol&gt; _symbols = new List&lt;Symbol&gt;();\n            private Symbol _fredPeakToTrough;\n            private decimal? _fredPeakToTroughValue = null;\n            \n            public FredAlphaModel(QCAlgorithm algorithm)\n            {\n                // Requesting data\n                _fredPeakToTrough = algorithm.AddData&lt;Fred&gt;(Fred.OECDRecessionIndicators.UnitedStatesFromPeakThroughTheTrough, Resolution.Daily).Symbol;\n                \n                // Historical data\n                var history = algorithm.History&lt;Fred&gt;(_fredPeakToTrough, 60, Resolution.Daily);\n                algorithm.Debug($\"We got {history.Count()} items from our history request\");\n                if (history.Count() == 0)\n                {\n                    return;\n                }\n                _fredPeakToTroughValue = history.Last().Value;\n            }\n    \n            public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n            {\n                var insights = new List&lt;Insight&gt;();\n                \n                // Update FRED peak to trough value\n                if (data.ContainsKey(_fredPeakToTrough))\n                {\n                    _fredPeakToTroughValue = data.Get&lt;Fred&gt;(_fredPeakToTrough).Value;\n                }\n                \n                // Ensure we have a FRED peak to trough value\n                if (_fredPeakToTroughValue == null)\n                {\n                    return insights;\n                }\n                \n                foreach (var symbol in _symbols)\n                {\n                    // Ensure we have data for the security in the current Slice\n                    if (!(data.ContainsKey(symbol) &amp;&amp; data[symbol] != null))\n                    {\n                        continue;\n                    }\n                    \n                    // Buy security if peak to trough value is 1 and not currently invested\n                    if (_fredPeakToTroughValue == 1m &amp;&amp; !algorithm.Portfolio[symbol].Invested)\n                    {\n                        insights.Add(Insight.Price(symbol, TimeSpan.FromDays(365*2),  InsightDirection.Up));\n                    }\n                    // Liquidate holdings if peak to trough value is 0\n                    else if (_fredPeakToTroughValue == 0m &amp;&amp; algorithm.Portfolio[symbol].Invested)\n                    {\n                        insights.Add(Insight.Price(symbol, TimeSpan.FromDays(365*2),  InsightDirection.Flat));\n                    }\n                }\n                \n                return insights;\n            }\n    \n            public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n            {\n                foreach (var security in changes.AddedSecurities)\n                {\n                    _symbols.Add(security.Symbol);\n                }\n                \n                foreach (var security in changes.RemovedSecurities)\n                {\n                    _symbols.Remove(security.Symbol);\n                }\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-10-26 23:02:25"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 10,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>US Federal Reserve (FRED) is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>US Federal Reserve (FRED) can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>US Federal Reserve (FRED) is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 66,
        "name": "FRED - Cloud Access",
        "description": "<p>Harness FRED Economic data in the QuantConnect Cloud for your backtesting and live trading purposes.\n </p>\n    <ul><li>Curated, clean data</li>\n         <li>Updated nightly at 4am</li>\n   </ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 67,
        "name": "FRED - On Premise Download",
        "description": "<p>FRED Economic data archived in LEAN format for on premise backtesting and research. One file per ticker.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Download On Premise",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      }
    ],
    "headerColor": "8b000a"
  },
  {
    "name": "US Energy Information Administration (EIA)",
    "vendorName": "Energy Information Administration",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/eia.png",
    "landingFileName": "quantconnect-us-energy-information-agency.html",
    "url": "/datasets/quantconnect-us-energy-information-agency",
    "short_description": "The US Energy Information Administration (EIA) collects supply and demand information for US Crude Products. QuantConnect collects and caches 190 of these datasets.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The US Energy Information Administration (EIA) datasets by the Department of the Treasury tracks national and international oil production and consumption. The data covers 190 datasets, starts in January 1991, and is delivered on a daily frequency. This dataset is created by QuantConnect processing and caching the EIA archives.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>The <a href=\"https://home.treasury.gov/\">Treasury Department</a> is the executive agency responsible for promoting economic prosperity and ensuring the financial security of the United States. The Department is responsible for a wide range of activities such as advising the President on economic and financial issues, encouraging sustainable economic growth, and fostering improved governance in financial institutions. The Department of the Treasury operates and maintains systems that are critical to the nation's financial infrastructure, such as the production of coin and currency, the disbursement of payments to the American public, revenue collection, and the borrowing of funds necessary to run the federal government. </p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">us_energy_symbol = self.AddData(USEnergy, USEnergy.Petroleum.UnitedStates.WeeklyNetImportsOfTotalPetroleumProducts).Symbol</code></pre>\n<pre><code class=\"language-cs\">\nvar USEnergySymbol = AddData&lt;USEnergy&gt;(USEnergy.Petroleum.UnitedStates.WeeklyNetImportsOfTotalPetroleumProducts).Symbol;</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 1991</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>190 Datasets</td>\n        </tr><tr><td>Data Density</td>\n            <td>Sparse</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>New York</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Supported Datasets",
        "content": "<p>The following table shows the accessor code you need to add each EIA dataset to your algorithm:</p>\n<table class=\"table qc-table table-reflow\"><thead><tr><th>Symbol</th><th>Accessor Code</th><th>Description</th></tr></thead><tbody><tr><td colspan=\"3\"><b>UnitedStates</b></td></tr><tr><td>PET.WGFRPUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderAdjustedNetProductionOfFinishedMotorGasoline</code></td><td>U.S. Refiner and Blender Adjusted Net Production of Finished Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WGFSTUS1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfFinishedMotorGasoline</code></td><td>U.S. Ending Stocks of Finished Motor Gasoline in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WGFUPUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyProductSuppliedOfFinishedMotorGasoline</code></td><td>U.S. Product Supplied of Finished Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WCSSTUS1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfCrudeOilInSpr</code></td><td>U.S. Ending Stocks of Crude Oil in SPR in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WDGRPUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderNetProductionOfDistillateFuelOilGreaterThan500PpmSulfur</code></td><td>U.S.  Refiner and Blender Net Production of Distillate Fuel Oil Greater than 500 ppm Sulfur in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WDGSTUS1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfDistillateFuelOilGreaterThan500PpmSulfur</code></td><td>U.S. Ending Stocks of Distillate Fuel Oil, Greater Than 500 ppm Sulfur in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WDIEXUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyExportsOfTotalDistillate</code></td><td>U.S. Exports of Total Distillate in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WDIIMUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfDistillateFuelOil</code></td><td>U.S. Imports of Distillate Fuel Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WDIRPUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderNetProductionOfDistillateFuelOil</code></td><td>U.S. Refiner and Blender Net Production of Distillate Fuel Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WKJSTUS1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfKeroseneTypeJetFuel</code></td><td>U.S. Ending Stocks of Kerosene-Type Jet Fuel in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WKJUPUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyProductSuppliedOfKeroseneTypeJetFuel</code></td><td>U.S. Product Supplied of Kerosene-Type Jet Fuel in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WGTIMUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfTotalGasoline</code></td><td>U.S. Imports of Total Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WGTSTUS1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfTotalGasoline</code></td><td>U.S. Ending Stocks of Total Gasoline in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WGIRIUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyGrossInputsIntoRefineries</code></td><td>U.S. Gross Inputs into Refineries in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WGRIMUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfReformulatedMotorGasoline</code></td><td>U.S. Imports of Reformulated Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WGRRPUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderNetProductionOfReformulatedMotorGasoline</code></td><td>U.S. Refiner and Blender Net Production of Reformulated Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WGRSTUS1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfReformulatedMotorGasoline</code></td><td>U.S. Ending Stocks of Reformulated Motor Gasoline in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WDISTUS1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfDistillateFuelOil</code></td><td>U.S. Ending Stocks of Distillate Fuel Oil in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WDIUPUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyProductSuppliedOfDistillateFuelOil</code></td><td>U.S. Product Supplied of Distillate Fuel Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WKMRPUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderNetProductionOfMilitaryKeroseneTypeJetFuel</code></td><td>U.S.  Refiner and Blender Net Production of Military Kerosene-Type Jet Fuel in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WOCLEUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyOperableCrudeOilDistillationCapacity</code></td><td>U. S. Operable Crude Oil Distillation Capacity in Thousand Barrels per Calendar Day (Mbbl/d)</td></tr><tr><td>PET.WPLSTUS1.W</td><td><code>USEnergy.UnitedStates.WeeklyPropyleneNonfuelUseStocksAtBulkTerminals</code></td><td>U.S. Propylene Nonfuel Use Stocks at Bulk Terminals in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WPRSTUS1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfPropaneAndPropylene</code></td><td>U.S. Ending Stocks of Propane and Propylene in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WPULEUS3.W</td><td><code>USEnergy.UnitedStates.WeeklyPercentUtilizationOfRefineryOperableCapacity</code></td><td>U.S. Percent Utilization of Refinery Operable Capacity in Percent (%)</td></tr><tr><td>PET.WREEXUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyExportsOfResidualFuelOil</code></td><td>U.S. Exports of Residual Fuel Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WREIMUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfResidualFuelOil</code></td><td>U.S. Imports of Residual Fuel Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WKCRPUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderNetProductionOfCommercialKeroseneTypeJetFuel</code></td><td>U.S.  Refiner and Blender Net Production of Commercial Kerosene-Type Jet Fuel in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WKJEXUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyExportsOfKeroseneTypeJetFuel</code></td><td>U.S. Exports of Kerosene-Type Jet Fuel in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WKJIMUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfKeroseneTypeJetFuel</code></td><td>U.S. Imports of Kerosene-Type Jet Fuel in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WKJRPUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderNetProductionOfKeroseneTypeJetFuel</code></td><td>U.S. Refiner and Blender Net Production of Kerosene-Type Jet Fuel in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WCESTUS1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksExcludingSprOfCrudeOil</code></td><td>U.S. Ending Stocks excluding SPR of Crude Oil in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WCREXUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyExportsOfCrudeOil</code></td><td>U.S. Exports of Crude Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WCRFPUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyFieldProductionOfCrudeOil</code></td><td>U.S. Field Production of Crude Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WCRIMUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfCrudeOil</code></td><td>U.S. Imports of Crude Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WCRNTUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyNetImportsOfCrudeOil</code></td><td>U.S. Net Imports of Crude Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WCRRIUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerNetInputOfCrudeOil</code></td><td>U.S. Refiner Net Input of Crude Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WRERPUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderNetProductionOfResidualFuelOil</code></td><td>U.S. Refiner and Blender Net Production of Residual Fuel Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WRESTUS1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfResidualFuelOil</code></td><td>U.S. Ending Stocks of Residual Fuel Oil in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WREUPUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyProductSuppliedOfResidualFuelOil</code></td><td>U.S. Product Supplied of Residual Fuel Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WRPEXUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyExportsOfTotalPetroleumProducts</code></td><td>U.S. Exports of Total Petroleum Products in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WRPIMUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfTotalPetroleumProducts</code></td><td>U.S. Imports of Total Petroleum Products in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WRPNTUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyNetImportsOfTotalPetroleumProducts</code></td><td>U.S. Net Imports of Total Petroleum Products in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WRPUPUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyProductSuppliedOfPetroleumProducts</code></td><td>U.S. Product Supplied of Petroleum Products in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WTESTUS1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksExcludingSprOfCrudeOilAndPetroleumProducts</code></td><td>U.S. Ending Stocks excluding SPR of Crude Oil and Petroleum Products in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WTTEXUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyExportsOfCrudeOilAndPetroleumProducts</code></td><td>U.S. Exports of Crude Oil and Petroleum Products in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WTTIMUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfCrudeOilAndPetroleumProducts</code></td><td>U.S. Imports of Crude Oil and Petroleum Products in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WTTNTUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyNetImportsOfCrudeOilAndPetroleumProducts</code></td><td>U.S. Net Imports of Crude Oil and Petroleum Products in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WTTSTUS1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfCrudeOilAndPetroleumProducts</code></td><td>U.S. Ending Stocks of Crude Oil and Petroleum Products in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WUOSTUS1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfUnfinishedOils</code></td><td>U.S. Ending Stocks of Unfinished Oils in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WG6TP_NUS_2.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderNetProductionOfOtherFinishedConventionalMotorGasoline</code></td><td>U.S. Refiner and Blender Net Production of Other Finished Conventional Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WD0TP_NUS_2.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderNetProductionOfDistillateFuelOil0To15PpmSulfur</code></td><td>U.S. Refiner and Blender Net Production of Distillate Fuel Oil, 0 to 15 ppm Sulfur in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WD1ST_NUS_1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfDistillateFuelOilGreaterThan15To500PpmSulfur</code></td><td>U.S. Ending Stocks of Distillate Fuel Oil, Greater than 15 to 500 ppm Sulfur in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WD1TP_NUS_2.W</td><td><code>USEnergy.UnitedStates.WeeklyProductionOfDistillateFuelOilGreaterThan15To500PpmSulfur</code></td><td>U.S. Production of Distillate Fuel Oil, Greater than 15 to 500 ppm Sulfur in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WG1ST_NUS_1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfReformulatedMotorGasolineWithFuelAlcohol</code></td><td>U.S. Ending Stocks of Reformulated Motor Gasoline with Fuel ALcohol in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WCRSTUS1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfCrudeOil</code></td><td>U.S. Ending Stocks of Crude Oil in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WCSIMUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyCrudeOilImportsBySpr</code></td><td>U.S. Crude Oil Imports by SPR in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WBCIMUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfGasolineBlendingComponents</code></td><td>U.S. Imports of Gasoline Blending Components in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WBCSTUS1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfGasolineBlendingComponents</code></td><td>U.S. Ending Stocks of Gasoline Blending Components in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WCEIMUS2.W</td><td><code>USEnergy.UnitedStates.WeeklyCommercialCrudeOilImportsExcludingSpr</code></td><td>U.S. Commercial Crude Oil Imports Excluding SPR in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WPRTP_NUS_2.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerBlenderAndGasPlantNetProductionOfPropaneAndPropylene</code></td><td>U.S. Refiner, Blender, and Gas Plant Net Production of Propane and Propylene in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WG1TP_NUS_2.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderNetProductionOfFinishedReformulatedMotorGasolineWithEthanol</code></td><td>U.S. Refiner and Blender Net Production of Finished Reformulated Motor Gasoline with Ethanol in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WG3ST_NUS_1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfReformulatedMotorGasolineNonOxygentated</code></td><td>U.S. Ending Stocks of Reformulated Motor Gasoline, Non-Oxygentated in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WG4ST_NUS_1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfConventionalMotorGasoline</code></td><td>U.S. Ending Stocks of Conventional Motor Gasoline in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WG4TP_NUS_2.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderNetProductionOfConventionalMotorGasoline</code></td><td>U.S. Refiner and Blender Net Production of Conventional Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WG5ST_NUS_1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfConventionalMotorGasolineWithFuelEthanol</code></td><td>U.S. Ending Stocks of Conventional Motor Gasoline with Fuel Ethanol in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WG5TP_NUS_2.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderNetProductionOfFinishedConventionalMotorGasolineWithEthanol</code></td><td>U.S. Refiner and Blender Net Production of Finished Conventional Motor Gasoline with Ethanol in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WG6ST_NUS_1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfOtherConventionalMotorGasoline</code></td><td>U.S. Ending Stocks of Other Conventional Motor Gasoline in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WO6RI_NUS_2.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderNetInputOfConventionalCbobGasolineBlendingComponents</code></td><td>U.S. Refiner and Blender Net Input of Conventional CBOB Gasoline Blending Components in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WO6ST_NUS_1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfConventionalCbobGasolineBlendingComponents</code></td><td>U.S. Ending Stocks of Conventional CBOB Gasoline Blending Components in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WO7RI_NUS_2.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderNetInputOfConventionalGtabGasolineBlendingComponents</code></td><td>U.S. Refiner and Blender Net Input of Conventional GTAB Gasoline Blending Components in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WO7ST_NUS_1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfConventionalGtabGasolineBlendingComponents</code></td><td>U.S. Ending Stocks of Conventional GTAB Gasoline Blending Components in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WO9RI_NUS_2.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderNetInputOfConventionalOtherGasolineBlendingComponents</code></td><td>U.S. Refiner and Blender Net Input of Conventional Other Gasoline Blending Components in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WO9ST_NUS_1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfConventionalOtherGasolineBlendingComponents</code></td><td>U.S. Ending Stocks of Conventional Other Gasoline Blending Components in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.W_EPD2F_PWR_NUS_DPG.W</td><td><code>USEnergy.UnitedStates.WeeklyNo2HeatingOilWholesaleResalePrice</code></td><td>U.S. No. 2 Heating Oil Wholesale/Resale Price in Dollars per Gallon ($/gal)</td></tr><tr><td>PET.W_EPC0_SKA_NUS_MBBL.W</td><td><code>USEnergy.UnitedStates.WeeklyCrudeOilStocksInTransitOnShipsFromAlaska</code></td><td>U.S. Crude Oil Stocks in Transit (on Ships) from Alaska in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.W_EPC0_VSD_NUS_DAYS.W</td><td><code>USEnergy.UnitedStates.WeeklyDaysOfSupplyOfCrudeOilExcludingSpr</code></td><td>U.S. Days of Supply of Crude Oil excluding SPR in Number of Days (Days)</td></tr><tr><td>PET.W_EPD0_VSD_NUS_DAYS.W</td><td><code>USEnergy.UnitedStates.WeeklyDaysOfSupplyOfTotalDistillate</code></td><td>U.S. Days of Supply of Total Distillate in Number of Days (Days)</td></tr><tr><td>PET.W_EPD2F_PRS_NUS_DPG.W</td><td><code>USEnergy.UnitedStates.WeeklyWeeklyNo2HeatingOilResidentialPrice</code></td><td>U.S. Weekly No. 2 Heating Oil Residential Price in Dollars per Gallon ($/gal)</td></tr><tr><td>PET.WPRUP_NUS_2.W</td><td><code>USEnergy.UnitedStates.WeeklyProductSuppliedOfPropaneAndPropylene</code></td><td>U.S. Product Supplied of Propane and Propylene in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WWOUP_NUS_2.W</td><td><code>USEnergy.UnitedStates.WeeklyProductSuppliedOfOtherOils</code></td><td>U.S. Product Supplied of Other Oils in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WBCRI_NUS_2.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderNetInputOfGasolineBlendingComponents</code></td><td>U.S. Refiner and Blender Net Input of Gasoline Blending Components in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WD0ST_NUS_1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfDistillateFuelOil0To15PpmSulfur</code></td><td>U.S. Ending Stocks of Distillate Fuel Oil, 0 to 15 ppm Sulfur in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.W_EPJK_VSD_NUS_DAYS.W</td><td><code>USEnergy.UnitedStates.WeeklyDaysOfSupplyOfKeroseneTypeJetFuel</code></td><td>U.S. Days of Supply of Kerosene-Type Jet Fuel in Number of Days (Days)</td></tr><tr><td>PET.W_EPM0_VSD_NUS_DAYS.W</td><td><code>USEnergy.UnitedStates.WeeklyDaysOfSupplyOfTotalGasoline</code></td><td>U.S. Days of Supply of Total Gasoline in Number of Days (Days)</td></tr><tr><td>PET.W_EPPA_SAE_NUS_MBBL.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfAsphaltAndRoadOil</code></td><td>U.S. Ending Stocks of Asphalt and Road Oil in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.W_EPPK_SAE_NUS_MBBL.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfKerosene</code></td><td>U.S. Ending Stocks of Kerosene in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.W_EPDM10_VUA_NUS_2.W</td><td><code>USEnergy.UnitedStates.WeeklySupplyAdjustmentOfDistillateFuelOilGreaterThan15To500PpmSulfur</code></td><td>U.S. Supply Adjustment of Distillate Fuel Oil, Greater than 15 to 500 ppm Sulfur in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WG5IM_NUS-Z00_2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfConventionalMotorGasolineWithFuelEthanol</code></td><td>U.S. Imports of Conventional Motor Gasoline with Fuel Ethanol in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WG6IM_NUS-Z00_2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfOtherConventionalMotorGasoline</code></td><td>U.S. Imports of Other Conventional Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WD0IM_NUS-Z00_2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfDistillateFuelOil0To15PpmSulfur</code></td><td>U.S. Imports of Distillate Fuel Oil, 0 to 15 ppm Sulfur in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WD1IM_NUS-Z00_2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfDistillateFuelOilGreaterThan15To500PpmSulfur</code></td><td>U.S. Imports of Distillate Fuel Oil, Greater than 15 to 500 ppm Sulfur in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WD2IM_NUS-Z00_2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfDistillateFuelOilGreaterThan500To2000PpmSulfur</code></td><td>U.S. Imports of Distillate Fuel Oil, Greater than 500 to 2000 ppm Sulfur in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WPRIM_NUS-Z00_2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfPropaneAndPropylene</code></td><td>U.S. Imports of Propane and Propylene in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WO7IM_NUS-Z00_2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfConventionalGtabGasolineBlendingComponents</code></td><td>U.S. Imports of Conventional GTAB Gasoline Blending Components in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WD3IM_NUS-Z00_2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfDistillateFuelOilGreaterThan2000PpmSulfur</code></td><td>U.S. Imports of Distillate Fuel Oil, Greater than 2000 ppm Sulfur in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WG1IM_NUS-Z00_2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfReformulatedMotorGasolineWithFuelAlcohol</code></td><td>U.S. Imports of Reformulated Motor Gasoline with Fuel ALcohol in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WG4IM_NUS-Z00_2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfConventionalMotorGasoline</code></td><td>U.S. Imports of Conventional Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WO9IM_NUS-Z00_2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfConventionalOtherGasolineBlendingComponents</code></td><td>U.S. Imports of Conventional Other Gasoline Blending Components in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WO6IM_NUS-Z00_2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfConventionalCbobGasolineBlendingComponents</code></td><td>U.S. Imports of Conventional CBOB Gasoline Blending Components in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPPK_YPB_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyBlenderNetProductionOfKerosene</code></td><td>U.S. Blender Net Production of Kerosene in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPPK_YPY_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerNetProductionOfKerosene</code></td><td>U.S. Refiner Net Production of Kerosene in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPPO6_SAE_NUS_MBBL.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfOtherOilsExcludingFuelEthanol</code></td><td>U.S. Ending Stocks of Other Oils (Excluding Fuel Ethanol) in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.W_EPPR_YPY_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerNetProductionOfResidualFuelOil</code></td><td>U.S. Refiner Net Production of Residual Fuel Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0R_YPB_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyBlenderNetProductionOfReformulatedMotorGasoline</code></td><td>U.S. Blender Net Production of Reformulated Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0R_YPY_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerNetProductionOfReformulatedMotorGasoline</code></td><td>U.S. Refiner Net Production of Reformulated Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPOOXE_SAE_NUS_MBBL.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfFuelEthanol</code></td><td>U.S. Ending Stocks of Fuel Ethanol in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.W_EPD0_YPB_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyBlenderNetProductionOfDistillateFuelOil</code></td><td>U.S. Blender Net Production of Distillate Fuel Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPD0_YPY_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerNetProductionOfDistillateFuelOil</code></td><td>U.S. Refiner Net Production of Distillate Fuel Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPJK_YPB_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyBlenderNetProductionOfKeroseneTypeJetFuel</code></td><td>U.S. Blender Net Production of Kerosene-Type Jet Fuel in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPJK_YPY_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerNetProductionOfKeroseneTypeJetFuel</code></td><td>U.S. Refiner Net Production of Kerosene-Type Jet Fuel in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPLLPA_PRS_NUS_DPG.W</td><td><code>USEnergy.UnitedStates.WeeklyPropaneResidentialPrice</code></td><td>U.S. Propane Residential Price in Dollars per Gallon ($/gal)</td></tr><tr><td>PET.W_EPLLPA_PWR_NUS_DPG.W</td><td><code>USEnergy.UnitedStates.WeeklyPropaneWholesaleResalePrice</code></td><td>U.S. Propane Wholesale/Resale Price in Dollars per Gallon ($/gal)</td></tr><tr><td>PET.W_EPOBGRR_YIR_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderNetInputOfMotorGasolineBlendingComponentsRbob</code></td><td>U.S. Refiner and Blender Net Input of Motor Gasoline Blending Components, RBOB in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPL0XP_SAE_NUS_MBBL.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfNgplsLrgsExcludingPropanePropylene</code></td><td>U.S. Ending Stocks of NGPLs/LRGs (Excluding Propane/Propylene) in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.W_EPLLPZ_VSD_NUS_DAYS.W</td><td><code>USEnergy.UnitedStates.WeeklyDaysOfSupplyOfPropanePropylene</code></td><td>U.S. Days of Supply of Propane/Propylene in Number of Days (Days)</td></tr><tr><td>PET.W_EPM0C_YPB_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyBlenderNetProductionOfConventionalMotorGasoline</code></td><td>U.S. Blender Net Production of Conventional Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0C_YPY_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerNetProductionOfConventionalMotorGasoline</code></td><td>U.S. Refiner Net Production of Conventional Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0F_VUA_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklySupplyAdjustmentOfFinishedMotorGasoline</code></td><td>U.S. Supply Adjustment of Finished Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0F_YPB_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyBlenderNetProductionOfFinishedMotorGasoline</code></td><td>U.S. Blender Net Production of Finished Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0F_YPR_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderNetProductionOfFinishedMotorGasoline</code></td><td>U.S. Refiner and Blender Net Production of Finished Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0F_YPY_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerNetProductionOfFinishedMotorGasoline</code></td><td>U.S. Refiner Net Production of Finished Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPD00H_YPB_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyBlenderNetProductionOfDistillateFuelOilGreaterThan500PpmSulfur</code></td><td>U.S. Blender Net Production of Distillate Fuel Oil, Greater Than 500 ppm Sulfur in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPD00H_YPY_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerNetProductionOfDistillateFuelOilGreaterThan500PpmSulfur</code></td><td>U.S. Refiner Net Production of Distillate Fuel Oil, Greater Than 500 ppm Sulfur in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPDM10_YPB_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyBlenderNetProductionOfDistillateFuelOilGreaterThan15To500PpmSulfur</code></td><td>U.S. Blender Net Production of Distillate Fuel Oil, Greater than 15 to 500 ppm Sulfur in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPDM10_YPY_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerNetProductionOfDistillateFuelOilGreaterThan15To500PpmSulfur</code></td><td>U.S. Refiner Net Production of Distillate Fuel Oil, Greater than 15 to 500 ppm Sulfur in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPDXL0_YPB_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyBlenderNetProductionOfDistillateFuelOil0To15PpmSulfur</code></td><td>U.S. Blender Net Production of Distillate Fuel Oil, 0 to 15 ppm Sulfur in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPDXL0_YPY_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerNetProductionOfDistillateFuelOil0To15PpmSulfur</code></td><td>U.S. Refiner Net Production of Distillate Fuel Oil, 0 to 15 ppm Sulfur in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0CA_YPB_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyBlenderNetProductionOfConventionalMotorGasolineWithFuelEthanol</code></td><td>U.S. Blender Net Production of Conventional Motor Gasoline with Fuel Ethanol in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0CA_YPY_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerNetProductionOfConventionalMotorGasolineWithFuelEthanol</code></td><td>U.S. Refiner Net Production of Conventional Motor Gasoline with Fuel Ethanol in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0CO_YPB_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyBlenderNetProductionOfOtherConventionalMotorGasoline</code></td><td>U.S. Blender Net Production of Other Conventional Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0CO_YPY_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerNetProductionOfOtherConventionalMotorGasoline</code></td><td>U.S. Refiner Net Production of Other Conventional Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0RA_YPB_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyBlenderNetProductionOfReformulatedMotorGasolineWithFuelAlcohol</code></td><td>U.S. Blender Net Production of Reformulated Motor Gasoline with Fuel ALcohol in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0RA_YPY_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerNetProductionOfReformulatedMotorGasolineWithFuelAlcohol</code></td><td>U.S. Refiner Net Production of Reformulated Motor Gasoline with Fuel ALcohol in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPOOXE_YOP_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyOxygenatePlantProductionOfFuelEthanol</code></td><td>U.S. Oxygenate Plant Production of Fuel Ethanol in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0CAL55_YPB_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyBlenderNetProductionOfMotorGasolineFinishedConventionalEd55AndLower</code></td><td>U.S. Blender Net Production of Motor Gasoline, Finished, Conventional, Ed55 and Lower in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0CAL55_YPT_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderNetProductionOfFinishedConventionalMotorGasolineEd55AndLower</code></td><td>U.S. Refiner and Blender Net Production of Finished Conventional Motor Gasoline, Ed 55 and Lower in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0CAL55_YPY_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerNetProductionOfMotorGasolineFinishedConventionalEd55AndLower</code></td><td>U.S. Refiner Net Production of Motor Gasoline, Finished, Conventional, Ed55 and Lower in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0F_EEX_NUS-Z00_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyExportsOfFinishedMotorGasoline</code></td><td>U.S. Exports of Finished Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0F_IM0_NUS-Z00_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfFinishedMotorGasoline</code></td><td>U.S. Imports of Finished Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0RO_YPB_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyBlenderNetProductionOfOtherReformulatedMotorGasoline</code></td><td>U.S. Blender Net Production of Other Reformulated Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0RO_YPT_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderNetProductionOfOtherFinishedReformulatedMotorGasoline</code></td><td>U.S. Refiner and Blender Net Production of Other Finished Reformulated Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0RO_YPY_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerNetProductionOfOtherReformulatedMotorGasoline</code></td><td>U.S. Refiner Net Production of Other Reformulated Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPOBGRR_SAE_NUS_MBBL.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfMotorGasolineBlendingComponentsRbob</code></td><td>U.S. Ending Stocks of Motor Gasoline Blending Components, RBOB in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.W_EPOOXE_YIR_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderNetInputOfFuelEthanol</code></td><td>U.S. Refiner and Blender Net Input of Fuel Ethanol in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0CAG55_IM0_NUS-Z00_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfMotorGasolineFinishedConventionalGreaterThanEd55</code></td><td>U.S. Imports of Motor Gasoline, Finished, Conventional, Greater than Ed55 in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0CAL55_IM0_NUS-Z00_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfMotorGasolineFinishedConventionalEd55AndLower</code></td><td>U.S. Imports of Motor Gasoline, Finished, Conventional, Ed55 and Lower in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPC0_IMU_NUS-Z00_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyCrudeOilImportsForSprByOthers</code></td><td>U.S. Crude Oil Imports for SPR by Others in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0CAG55_SAE_NUS_MBBL.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfConventionalMotorGasolineGreaterThanEd55</code></td><td>U.S. Ending Stocks of Conventional Motor Gasoline, Greater than Ed55 in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.W_EPOOXE_IM0_NUS-Z00_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfFuelEthanol</code></td><td>U.S. Imports of Fuel Ethanol in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPL0XP_IM0_NUS-Z00_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfLiquefiedPetroleumGassesLessPropanePropylene</code></td><td>U.S. Imports of Liquefied Petroleum Gasses Less Propane/Propylene in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPLLPZ_EEX_NUS-Z00_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyExportsOfPropaneAndPropylene</code></td><td>U.S. Exports of Propane and Propylene in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0RO_IM0_NUS-Z00_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfOtherReformulatedMotorGasoline</code></td><td>U.S. Imports of Other Reformulated Motor Gasoline in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0CAG55_YPB_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyBlenderNetProductionOfMotorGasolineFinishedConventionalGreaterThanEd55</code></td><td>U.S. Blender Net Production of Motor Gasoline, Finished, Conventional, Greater Than Ed55 in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0CAG55_YPT_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerAndBlenderNetProductionOfFinishedConventionalMotorGasolineGreaterThanEd55</code></td><td>U.S. Refiner and Blender Net Production of Finished Conventional Motor Gasoline, Greater than Ed 55 in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0CAG55_YPY_NUS_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyRefinerNetProductionOfFinishedConventionalMotorGasolineGreaterThanEd55</code></td><td>U.S. Refiner Net Production of Finished Conventional Motor Gasoline, Greater than Ed 55 in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPM0CAL55_SAE_NUS_MBBL.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfConventionalMotorGasolineEd55AndLower</code></td><td>U.S. Ending Stocks of Conventional Motor Gasoline, Ed55 and Lower in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.W_EPPK_IM0_NUS-Z00_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfKerosene</code></td><td>U.S. Imports of Kerosene in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPPO4_EEX_NUS-Z00_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyExportsOfOtherOils</code></td><td>U.S. Exports of Other Oils in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPPO6_IM0_NUS-Z00_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfOtherOilsExcludingFuelEthanol</code></td><td>U.S. Imports of Other Oils (Excluding Fuel Ethanol) in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.W_EPOBGRR_IM0_NUS-Z00_MBBLD.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsFromAllCountriesOfMotorGasolineBlendingComponentsRbob</code></td><td>U.S. Imports from  All Countries of Motor Gasoline Blending Components, RBOB in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.EMM_EPMR_PTE_NUS_DPG.W</td><td><code>USEnergy.UnitedStates.WeeklyRegularAllFormulationsRetailGasolinePrices</code></td><td>U.S. Regular All Formulations Retail Gasoline Prices in Dollars per Gallon ($/gal)</td></tr><tr><td>PET.EMM_EPMM_PTE_NUS_DPG.W</td><td><code>USEnergy.UnitedStates.WeeklyMidgradeAllFormulationsRetailGasolinePrices</code></td><td>U.S. Midgrade All Formulations Retail Gasoline Prices in Dollars per Gallon ($/gal)</td></tr><tr><td>PET.EMM_EPMP_PTE_NUS_DPG.W</td><td><code>USEnergy.UnitedStates.WeeklyPremiumAllFormulationsRetailGasolinePrices</code></td><td>U.S. Premium All Formulations Retail Gasoline Prices in Dollars per Gallon ($/gal)</td></tr><tr><td>PET.EMM_EPM0_PTE_NUS_DPG.W</td><td><code>USEnergy.UnitedStates.WeeklyAllGradesAllFormulationsRetailGasolinePrices</code></td><td>U.S. All Grades All Formulations Retail Gasoline Prices in Dollars per Gallon ($/gal)</td></tr><tr><td>PET.EMM_EPM0R_PTE_NUS_DPG.W</td><td><code>USEnergy.UnitedStates.WeeklyAllGradesReformulatedRetailGasolinePrices</code></td><td>U.S. All Grades Reformulated Retail Gasoline Prices in Dollars per Gallon ($/gal)</td></tr><tr><td>PET.EMM_EPMMR_PTE_NUS_DPG.W</td><td><code>USEnergy.UnitedStates.WeeklyMidgradeReformulatedRetailGasolinePrices</code></td><td>U.S. Midgrade Reformulated Retail Gasoline Prices in Dollars per Gallon ($/gal)</td></tr><tr><td>PET.EMM_EPMPR_PTE_NUS_DPG.W</td><td><code>USEnergy.UnitedStates.WeeklyPremiumReformulatedRetailGasolinePrices</code></td><td>U.S. Premium Reformulated Retail Gasoline Prices in Dollars per Gallon ($/gal)</td></tr><tr><td>PET.EMM_EPMRU_PTE_NUS_DPG.W</td><td><code>USEnergy.UnitedStates.WeeklyRegularConventionalRetailGasolinePrices</code></td><td>U.S. Regular Conventional Retail Gasoline Prices in Dollars per Gallon ($/gal)</td></tr><tr><td>PET.EMM_EPMRR_PTE_NUS_DPG.W</td><td><code>USEnergy.UnitedStates.WeeklyRegularReformulatedRetailGasolinePrices</code></td><td>U.S. Regular Reformulated Retail Gasoline Prices in Dollars per Gallon ($/gal)</td></tr><tr><td>PET.EMD_EPD2D_PTE_NUS_DPG.W</td><td><code>USEnergy.UnitedStates.WeeklyNo2DieselRetailPrices</code></td><td>U.S. No 2 Diesel Retail Prices in Dollars per Gallon ($/gal)</td></tr><tr><td>PET.EMM_EPMPU_PTE_NUS_DPG.W</td><td><code>USEnergy.UnitedStates.WeeklyPremiumConventionalRetailGasolinePrices</code></td><td>U.S. Premium Conventional Retail Gasoline Prices in Dollars per Gallon ($/gal)</td></tr><tr><td>PET.EMM_EPMMU_PTE_NUS_DPG.W</td><td><code>USEnergy.UnitedStates.WeeklyMidgradeConventionalRetailGasolinePrices</code></td><td>U.S. Midgrade Conventional Retail Gasoline Prices in Dollars per Gallon ($/gal)</td></tr><tr><td>PET.EMM_EPM0U_PTE_NUS_DPG.W</td><td><code>USEnergy.UnitedStates.WeeklyAllGradesConventionalRetailGasolinePrices</code></td><td>U.S. All Grades Conventional Retail Gasoline Prices in Dollars per Gallon ($/gal)</td></tr><tr><td>PET.EMD_EPD2DXL0_PTE_NUS_DPG.W</td><td><code>USEnergy.UnitedStates.WeeklyNo2DieselUltraLowSulfur015PpmRetailPrices</code></td><td>U.S. No 2 Diesel Ultra Low Sulfur (0-15 ppm) Retail Prices in Dollars per Gallon ($/gal)</td></tr><tr><td>PET.W_EPC0_SAX_NUS_MBBL.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksExcludingSprAndIncludingLeaseStockOfCrudeOil</code></td><td>U.S. Ending Stocks excluding SPR and including Lease Stock of Crude Oil in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.EMD_EPD2DM10_PTE_NUS_DPG.W</td><td><code>USEnergy.UnitedStates.WeeklyNo2DieselLowSulfur15500PpmRetailPrices</code></td><td>U.S. No 2 Diesel Low Sulfur (15-500 ppm) Retail Prices in Dollars per Gallon ($/gal)</td></tr><tr><td>PET.WO3IM_NUS-Z00_2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfReformulatedRbobWithAlcoholGasolineBlendingComponents</code></td><td>U.S. Imports of Reformulated RBOB with Alcohol Gasoline Blending Components in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WO4IM_NUS-Z00_2.W</td><td><code>USEnergy.UnitedStates.WeeklyImportsOfReformulatedRbobWithEtherGasolineBlendingComponents</code></td><td>U.S. Imports of Reformulated RBOB with Ether Gasoline Blending Components in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td>PET.WO2ST_NUS_1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfReformulatedGtabGasolineBlendingComponents</code></td><td>U.S. Ending Stocks of Reformulated GTAB Gasoline Blending Components in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WO3ST_NUS_1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfReformulatedRbobWithAlcoholGasolineBlendingComponents</code></td><td>U.S. Ending Stocks of Reformulated RBOB with Alcohol Gasoline Blending Components in Thousand Barrels (Mbbl)</td></tr><tr><td>PET.WO4ST_NUS_1.W</td><td><code>USEnergy.UnitedStates.WeeklyEndingStocksOfReformulatedRbobWithEtherGasolineBlendingComponents</code></td><td>U.S. Ending Stocks of Reformulated RBOB with Ether Gasoline Blending Components in Thousand Barrels (Mbbl)</td></tr><tr><td colspan=\"3\"><b>EquatorialGuinea</b></td></tr><tr><td>PET.W_EPC0_IM0_NUS-NEK_MBBLD.W</td><td><code>USEnergy.EquatorialGuinea.WeeklyImportsFromEquatorialGuineaOfCrudeOil</code></td><td>U.S. Imports from Equatorial Guinea of Crude Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td colspan=\"3\"><b>Iraq</b></td></tr><tr><td>PET.W_EPC0_IM0_NUS-NIZ_MBBLD.W</td><td><code>USEnergy.Iraq.WeeklyImportsFromIraqOfCrudeOil</code></td><td>U.S. Imports from Iraq of Crude Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td colspan=\"3\"><b>Kuwait</b></td></tr><tr><td>PET.W_EPC0_IM0_NUS-NKU_MBBLD.W</td><td><code>USEnergy.Kuwait.WeeklyImportsFromKuwaitOfCrudeOil</code></td><td>U.S. Imports from Kuwait of Crude Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td colspan=\"3\"><b>Mexico</b></td></tr><tr><td>PET.W_EPC0_IM0_NUS-NMX_MBBLD.W</td><td><code>USEnergy.Mexico.WeeklyImportsFromMexicoOfCrudeOil</code></td><td>U.S. Imports from Mexico of Crude Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td colspan=\"3\"><b>Nigeria</b></td></tr><tr><td>PET.W_EPC0_IM0_NUS-NNI_MBBLD.W</td><td><code>USEnergy.Nigeria.WeeklyImportsFromNigeriaOfCrudeOil</code></td><td>U.S. Imports from Nigeria of Crude Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td colspan=\"3\"><b>Norway</b></td></tr><tr><td>PET.W_EPC0_IM0_NUS-NNO_MBBLD.W</td><td><code>USEnergy.Norway.WeeklyImportsFromNorwayOfCrudeOil</code></td><td>U.S. Imports from Norway of Crude Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td colspan=\"3\"><b>Russia</b></td></tr><tr><td>PET.W_EPC0_IM0_NUS-NRS_MBBLD.W</td><td><code>USEnergy.Russia.WeeklyImportsFromRussiaOfCrudeOil</code></td><td>U.S. Imports from Russia of Crude Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td colspan=\"3\"><b>SaudiArabia</b></td></tr><tr><td>PET.W_EPC0_IM0_NUS-NSA_MBBLD.W</td><td><code>USEnergy.SaudiArabia.WeeklyImportsFromSaudiArabiaOfCrudeOil</code></td><td>U.S. Imports from Saudi Arabia of Crude Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td colspan=\"3\"><b>UnitedKingdom</b></td></tr><tr><td>PET.W_EPC0_IM0_NUS-NUK_MBBLD.W</td><td><code>USEnergy.UnitedKingdom.WeeklyImportsFromUnitedKingdomOfCrudeOil</code></td><td>U.S. Imports from United Kingdom of Crude Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td colspan=\"3\"><b>Venezuela</b></td></tr><tr><td>PET.W_EPC0_IM0_NUS-NVE_MBBLD.W</td><td><code>USEnergy.Venezuela.WeeklyImportsFromVenezuelaOfCrudeOil</code></td><td>U.S. Imports from Venezuela of Crude Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td colspan=\"3\"><b>Algeria</b></td></tr><tr><td>PET.W_EPC0_IM0_NUS-NAG_MBBLD.W</td><td><code>USEnergy.Algeria.WeeklyImportsFromAlgeriaOfCrudeOil</code></td><td>U.S. Imports from Algeria of Crude Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td colspan=\"3\"><b>Angola</b></td></tr><tr><td>PET.W_EPC0_IM0_NUS-NAO_MBBLD.W</td><td><code>USEnergy.Angola.WeeklyImportsFromAngolaOfCrudeOil</code></td><td>U.S. Imports from Angola of Crude Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td colspan=\"3\"><b>Brazil</b></td></tr><tr><td>PET.W_EPC0_IM0_NUS-NBR_MBBLD.W</td><td><code>USEnergy.Brazil.WeeklyImportsFromBrazilOfCrudeOil</code></td><td>U.S. Imports from Brazil of Crude Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td colspan=\"3\"><b>Canada</b></td></tr><tr><td>PET.W_EPC0_IM0_NUS-NCA_MBBLD.W</td><td><code>USEnergy.Canada.WeeklyImportsFromCanadaOfCrudeOil</code></td><td>U.S. Imports from Canada of Crude Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td colspan=\"3\"><b>Congo</b></td></tr><tr><td>PET.W_EPC0_IM0_NUS-NCF_MBBLD.W</td><td><code>USEnergy.Congo.WeeklyImportsFromCongoBrazzavilleOfCrudeOil</code></td><td>U.S. Imports from Congo (Brazzaville) of Crude Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td colspan=\"3\"><b>Colombia</b></td></tr><tr><td>PET.W_EPC0_IM0_NUS-NCO_MBBLD.W</td><td><code>USEnergy.Colombia.WeeklyImportsFromColombiaOfCrudeOil</code></td><td>U.S. Imports from Colombia of Crude Oil in Thousand Barrels per Day (Mbbl/d)</td></tr><tr><td colspan=\"3\"><b>Ecuador</b></td></tr><tr><td>PET.W_EPC0_IM0_NUS-NEC_MBBLD.W</td><td><code>USEnergy.Ecuador.WeeklyImportsFromEcuadorOfCrudeOil</code></td><td>U.S. Imports from Ecuador of Crude Oil in Thousand Barrels per Day (Mbbl/d)</td></tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>The US Energy Information Administration dataset enables researchers to monitor national and international oil production and consumption in their trading strategies. Examples include:</p>\n\n<ul><li>Trading petroleum companies when there is a change in net imports of petroleum products</li>\n<li>Trading country ETFs when there is a change in the country's net import of resources</li>\n<li>Adjusting exposure to vehicle manufacturer stocks when the supply of gasoline is higher/lower than historical levels</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_fa6cf2798a1371ef207c6e8c381d66cf.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The EIA dataset provides USEnergy objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.USEnergy\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add US Energy data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass USEnergyDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        us_energy_symbol = self.AddData(USEnergy, USEnergy.Petroleum.UnitedStates.WeeklyNetImportsOfTotalPetroleumProducts).Symbol</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class USEnergyDataAlgorithm: QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n            var USEnergySymbol = AddData&lt;USEnergy&gt;(USEnergy.Petroleum.UnitedStates.WeeklyNetImportsOfTotalPetroleumProducts).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(USEnergy)\n    for point in points.Values:\n        self.Log(f'Date: {self.Time}; Symbol: {point.Symbol}; Value: {point.Value}')</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var points = data.Get&lt;USEnergy&gt;();\n    foreach (var point in points.Values)\n    {\n        Log($\"Date: {Time}; Symbol: {point.Symbol}; Value: {point.Value}\");\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for US Energy by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(USEnergy, us_energy_symbol, 60, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History&lt;USEnergy&gt;(USEnergySymbol, 60, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The EIA dataset provides USEnergy objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.USEnergy\"></div>"
      }
    ],
    "priceCTA": "Free",
    "vendorWebsite": "https://www.quantconnect.com/market",
    "examples": [
      {
        "id": 121,
        "master_product_id": 11,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example",
        "content": "<p>In this example, we buy a petroleum company when net imports of petroleum products are increasing and  short sell the company when net imports are decreasing.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass USEnergyDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 1, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n        \n        # Requesting data\n        self.symbol = self.AddEquity(\"AXAS\", Resolution.Daily).Symbol\n        us_energy_symbol = self.AddData(USEnergy, USEnergy.Petroleum.UnitedStates.WeeklyNetImportsOfTotalPetroleumProducts).Symbol\n\n        # Historical data\n        history = self.History(USEnergy, us_energy_symbol, 60, Resolution.Daily)\n        self.Log(f\"We got {len(history)} items from our history request\")\n\n        # Get latest value for net imports of petroleum products\n        self.previous_value = history.loc[us_energy_symbol].values[-1, -1]\n        \n    def OnData(self, data):\n        # Gather the current net imports of petroleum products\n        points = data.Get(USEnergy)\n        current_value = None\n        for point in points.Values:\n            current_value = point.Value\n        if current_value is None:\n            return\n        \n        # Buy when net imports of petroleum products are increasing\n        if current_value &gt; self.previous_value:\n            self.SetHoldings(self.symbol, 1)\n        \n        # Short sell when net imports of petroleum products are decreasing\n        elif current_value &lt; self.previous_value:\n            self.SetHoldings(self.symbol, -1)\n        \n        self.previous_value = current_value</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class USEnergyDataAlgorithm : QCAlgorithm\n    {\n        private decimal? previousValue;\n        private Symbol tradableSymbol;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 1, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            \n            // Requesting data\n            tradableSymbol = AddEquity(\"AXAS\", Resolution.Daily).Symbol;\n            var USEnergySymbol = AddData&lt;USEnergy&gt;(USEnergy.Petroleum.UnitedStates.WeeklyNetImportsOfTotalPetroleumProducts).Symbol;\n\n            // Historical data            \n            var history = History&lt;USEnergy&gt;(USEnergySymbol, 60, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request\");\n            \n            // Get latest value for net imports of petroleum products\n            previousValue = history.Last().Value;\n        }\n\n        \n        public override void OnData(Slice data)\n        {\n            // Gather the current net imports of petroleum products\n            var points = data.Get&lt;USEnergy&gt;();\n            decimal? currentValue = null;\n            foreach (var point in points.Values)\n            {\n                currentValue = point.Value;\n            }\n            if (currentValue == null)\n            {\n                return;\n            }\n            \n            // Buy when net imports of petroleum products are increasing\n            if (currentValue &gt; previousValue)\n            {\n                SetHoldings(tradableSymbol, 1);\n            }\n            \n            //  Short sell when net imports of petroleum products are decreasing\n            if (currentValue &lt; previousValue)\n            {\n                SetHoldings(tradableSymbol, -1);\n            }\n            \n            previousValue = currentValue;\n        }\n    }\n}\n</code></pre>\n</div>",
        "updated": "2022-05-10 13:30:33"
      },
      {
        "id": 216,
        "master_product_id": 11,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example",
        "content": "<p>In this example, we buy a petroleum company when net imports of petroleum products are increasing and short sell the company when net imports are decreasing. Positions are held for one week.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass USEnergyDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 1, 1)\n        self.SetEndDate(2021, 6, 1);\n        self.SetCash(100000)\n        \n        axas = self.AddEquity(\"AXAS\", Resolution.Daily).Symbol\n        \n        self.AddAlpha(USEnergyAlphaModel(self))\n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n\nclass USEnergyAlphaModel(AlphaModel):\n    \n    tradable_symbols = []\n    \n    def __init__(self, algorithm):\n        # Requesting data\n        self.us_energy_symbol = algorithm.AddData(USEnergy, USEnergy.Petroleum.UnitedStates.WeeklyNetImportsOfTotalPetroleumProducts).Symbol\n        \n        # Historical data\n        history = algorithm.History(USEnergy, self.us_energy_symbol, 60, Resolution.Daily)\n        algorithm.Log(f\"We got {len(history)} items from our history request\")\n        self.previous_value = history.loc[self.us_energy_symbol].values[-1]\n    \n    def Update(self, algorithm, data):\n        # Gather the current net imports of petroleum products\n        points = data.Get(USEnergy)\n        current_value = None\n        for point in points.Values:\n            current_value = point.Value\n        if current_value is None:\n            return []\n        \n        insights = []\n        \n        for symbol in self.tradable_symbols:\n            # Buy when net imports of petroleum products are increasing\n            if current_value &gt; self.previous_value:\n                insights += [Insight.Price(symbol, timedelta(days=7), InsightDirection.Up)]\n            \n            # Short sell when net imports of petroleum products are decreasing\n            elif current_value &lt; self.previous_value:\n                insights += [Insight.Price(symbol, timedelta(days=7), InsightDirection.Down)]\n        \n        self.previous_value = current_value\n        return insights\n        \n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            self.tradable_symbols.append(security.Symbol)</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class USEnergyDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2020, 1, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            \n            var axas = AddEquity(\"AXAS\", Resolution.Daily).Symbol;\n            AddAlpha(new USEnergyAlphaModel(this));\n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n        }\n    }\n\n\n    public class USEnergyAlphaModel : AlphaModel\n    {\n        private Symbol USEnergySymbol;\n        private List&lt;Symbol&gt; tradableSymbols = new List&lt;Symbol&gt;();\n        private decimal? previousValue;\n        \n        public USEnergyAlphaModel(QCAlgorithm algorithm)\n        {\n            // Requesting data\n            USEnergySymbol = algorithm.AddData&lt;USEnergy&gt;(USEnergy.Petroleum.UnitedStates.WeeklyNetImportsOfTotalPetroleumProducts).Symbol;\n            \n            // Historical data\n            var history = algorithm.History&lt;USEnergy&gt;(USEnergySymbol, 60, Resolution.Daily);\n            algorithm.Debug($\"We got {history.Count()} items from our history request\");\n            \n            previousValue = history.Last().Value;\n        }\n\n        public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n        {\n            var insights = new List&lt;Insight&gt;();\n            \n            // Gather the current net imports of petroleum products\n            var points = data.Get&lt;USEnergy&gt;();\n            decimal? currentValue = null;\n            foreach (var point in points.Values)\n            {\n                currentValue = point.Value;\n            }\n            if (currentValue == null)\n            {\n                return insights;\n            }\n            \n            foreach (var symbol in tradableSymbols)\n            {\n                // Buy when net imports of petroleum products are increasing\n                if (currentValue &gt; previousValue)\n                {\n                    insights.Add(Insight.Price(symbol, TimeSpan.FromDays(7),  InsightDirection.Up));\n                }\n                \n                //  Short sell when net imports of petroleum products are decreasing\n                if (currentValue &lt; previousValue)\n                {\n                    insights.Add(Insight.Price(symbol, TimeSpan.FromDays(7),  InsightDirection.Down));\n                }    \n            }\n            \n            previousValue = currentValue;\n            return insights;\n        }\n\n        public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n        {\n            foreach (var security in changes.AddedSecurities)\n            {\n                tradableSymbols.Add(security.Symbol);\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-10-19 21:24:17"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 11,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>US Energy Information Administration (EIA) is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>US Energy Information Administration (EIA) can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 5 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>US Energy Information Administration (EIA) is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 58,
        "name": "US Energy - Cloud Access",
        "description": "<p>EIA data in the QuantConnect Cloud for your backtesting and live trading purposes.\n </p>\n    <ul><li>Curated, clean data</li>\n         <li>Updated nightly at 4am</li>\n   </ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 59,
        "name": "US Energy - On Premise Download",
        "description": "<p>EIA archived in LEAN format for on premise backtesting and research. One file per ticker.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "On Premise Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "5 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      }
    ],
    "headerColor": "8b000a"
  },
  {
    "name": "US Treasury Yield Curve",
    "vendorName": "Treasury Department",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/treasury.png",
    "landingFileName": "us-treasury-yield-curve.html",
    "url": "/datasets/us-treasury-yield-curve",
    "short_description": "Daily export of yield curve rates for US Government bonds over all common maturity dates. Scraped from the US Treasury website and cached by QuantConnect.  ",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The US Treasury Yield Curve datasets tracks the yield curve rate from the US Department of the Treasury. The data starts in January 1990 and is delivered on a daily frequency. This dataset is calculated from composites of indicative, bid-side market quotations (not actual transactions) obtained by the Federal Reserve Bank of New York at or near 3:30 PM Eastern Standard Time (EST) each trading day. </p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>The <a href=\"https://home.treasury.gov/\">Treasury Department</a> is the executive agency responsible for promoting economic prosperity and ensuring the financial security of the United States. The Department is responsible for a wide range of activities such as advising the President on economic and financial issues, encouraging sustainable economic growth, and fostering improved governance in financial institutions. The Department of the Treasury operates and maintains systems that are critical to the nation's financial infrastructure, such as the production of coin and currency, the disbursement of payments to the American public, revenue collection, and the borrowing of funds necessary to run the federal government. </p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.Data.DataSource import *\n\nyield_curve_symbol = self.AddData(USTreasuryYieldCurveRate, \"USTYCR\").Symbol</code></pre>\n<pre><code class=\"language-cs\">using QuantConnect.DataSource;\n\nvar yieldCurveSymbol = AddData&lt;USTreasuryYieldCurveRate&gt;(\"USTYCR\").Symbol</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 1990</td>\n        </tr><tr><td>Coverage</td>\n            <td>1 Dataset</td>\n        </tr><tr><td>Data Density</td>\n            <td>Sparse</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>New York</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>The US Treasury Yield Curve dataset enables researchers to monitor the yields of bonds with numerous maturities in their strategies. Examples include:</p>\n\n<ul><li>Short selling SPY when the yield curve inverts</li>\n<li>Buying short-term Treasuries and short selling long-term Treasuries when the yield curve becomes steeper (aka curve steepener trade)</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_acc0190f212189e9961e05302a5bdda8.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Treasury Yield Curve dataset provides USTreasuryYieldCurveRate objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.USTreasuryYieldCurveRate\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add US Treasury Yield Curve data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.DataSource import *\n\nclass QuiverCongressDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        yield_curve_symbol = self.AddData(USTreasuryYieldCurveRate, \"USTYCR\").Symbol</code></pre>\n<pre><code class=\"language-cs\">using QuantConnect.DataSource;\n\nnamespace QuantConnect.Algorithm.CSharp.AltData\n{\n    public class USTreasuryYieldCurveDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n\n            var yieldCurveSymbol = AddData&lt;USTreasuryYieldCurveRate&gt;(\"USTYCR\").Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(USTreasuryYieldCurveRate)\n    for point in points.Values:\n        self.Log(f\"Date {self.Time}; OneMonth: {point.OneMonth}; TwoMonth: {point.TwoMonth}; ThreeMonth: {point.ThreeMonth}; SixMonth: {point.SixMonth}; OneYear: {point.OneYear}; TwoYear: {point.TwoYear}; ThreeYear: {point.ThreeYear}; FiveYear: {point.FiveYear}; SevenYear: {point.SevenYear}; TenYear: {point.TenYear}; TwentyYear: {point.TwentyYear}; ThirtyYear: {point.ThirtyYear}\")</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var points = data.Get&lt;USTreasuryYieldCurveRate&gt;();\n    foreach (var point in points.Values)\n    {\n        Log($\"Date {Time}; OneMonth: {point.OneMonth}; TwoMonth: {point.TwoMonth}; ThreeMonth: {point.ThreeMonth}; SixMonth: {point.SixMonth}; OneYear: {point.OneYear}; TwoYear: {point.TwoYear}; ThreeYear: {point.ThreeYear}; FiveYear: {point.FiveYear}; SevenYear: {point.SevenYear}; TenYear: {point.TenYear}; TwentyYear: {point.TwentyYear}; ThirtyYear: {point.ThirtyYear}\");    \n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for the US Treasury Yield Curve by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(USTreasuryYieldCurveRate, yield_curve_symbol, 60, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History&lt;USTreasuryYieldCurveRate&gt;(yieldCurveSymbol, 60, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Treasury Yield Curve dataset provides USTreasuryYieldCurveRate objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.USTreasuryYieldCurveRate\"></div>"
      }
    ],
    "priceCTA": "Free",
    "vendorWebsite": "https://www.quantconnect.com/market",
    "examples": [
      {
        "id": 134,
        "master_product_id": 12,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example",
        "content": "<p>In this example, we short sell SPY for two years when the yield curve inverts.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass USTreasuryDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2000, 3, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        self.spy_symbol = self.AddEquity(\"SPY\", Resolution.Hour).Symbol\n\n        # Requesting data\n        self.yield_curve_symbol = self.AddData(USTreasuryYieldCurveRate, \"USTYCR\").Symbol\n\n        # Historical data\n        history = self.History(USTreasuryYieldCurveRate, self.yield_curve_symbol, 60, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request\")\n        \n        self.last_inversion = datetime.min\n\n    def OnData(self, data):\n        if not data.ContainsKey(self.yield_curve_symbol):\n            return\n        \n        rates = data[self.yield_curve_symbol]\n        \n        # Check for null before using the values\n        if not (rates.TenYear is not None and rates.TwoYear is not None):\n            return\n        \n        # Only advance if a year has gone by\n        if (self.Time - self.last_inversion &lt; timedelta(days=365)):\n            return\n        \n        # if there is a yield curve inversion after not having one for a year, short sell SPY for two years\n        if (not self.Portfolio.Invested and rates.TwoYear &gt; rates.TenYear):\n            self.Debug(f\"{self.Time} - Yield curve inversion! Shorting the market for two years\")\n            self.SetHoldings(self.spy_symbol, -0.5)\n            self.last_inversion = self.Time\n            return\n        \n        # If two years have passed, liquidate our position in SPY\n        if (self.Time - self.last_inversion &gt;= timedelta(days=365 * 2)):\n            self.Liquidate(self.spy_symbol)</code></pre>\n<pre><code class=\"language-cs\">using System.Linq;\n\nnamespace QuantConnect.Algorithm.CSharp.AltData\n{\n    public class USTreasuryDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _spySymbol;\n        private Symbol _yieldCurveSymbol;\n        private DateTime _lastInversion = DateTime.MinValue;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2000, 3, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n\n            _spySymbol = AddEquity(\"SPY\", Resolution.Hour).Symbol;\n\n            // Requestion data\n            _yieldCurveSymbol = AddData&lt;USTreasuryYieldCurveRate&gt;(\"USTYCR\").Symbol;\n\n            // Historical data\n            var history = History&lt;USTreasuryYieldCurveRate&gt;(_yieldCurveSymbol, 60, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request\");\n        }\n        \n        \n        public override void OnData(Slice data)\n        {\n            if (!data.ContainsKey(_yieldCurveSymbol))\n            {\n                return;\n            }\n            \n            // Preserve null values by getting the data with `slice.Get&lt;T&gt;`\n            // Accessing the data using `data[_yieldCurveSymbol]` results in null\n            // values becoming `default(decimal)` which is equal to 0\n            var rates = data.Get&lt;USTreasuryYieldCurveRate&gt;().Values.First();\n            \n            // Check for null before using the values\n            if (!rates.TenYear.HasValue || !rates.TwoYear.HasValue)\n            {\n                return;\n            }\n            \n            // Only advance if a year has gone by\n            if (Time - _lastInversion &lt; TimeSpan.FromDays(365))\n            {\n                return;\n            }\n            \n            // if there is a yield curve inversion after not having one for a year, short sell SPY for two years\n            if (!Portfolio.Invested &amp;&amp; rates.TwoYear &gt; rates.TenYear)\n            {\n                Debug($\"{Time} - Yield curve inversion! Shorting the market for two years\");\n                SetHoldings(_spySymbol, -0.5); \n                 _lastInversion = Time;\n                return;\n            }\n            \n            \n            // If two years have passed, liquidate our position in SPY\n            if (Time - _lastInversion &gt;= TimeSpan.FromDays(365 * 2))\n            {\n                Liquidate(_spySymbol);\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-05-10 13:31:56"
      },
      {
        "id": 219,
        "master_product_id": 12,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example",
        "content": "<p>In this example, we short sell SPY for two years when the yield curve inverts.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\nfrom QuantConnect.DataSource import *\n\nclass USTreasuryDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2000, 3, 1);\n        self.SetEndDate(2021, 6, 1);\n        self.SetCash(100000);\n\n        spy_symbol = self.AddEquity(\"SPY\", Resolution.Hour).Symbol\n\n        self.AddAlpha(USTreasuryAlphaModel(self))\n        self.SetPortfolioConstruction(InsightWeightingPortfolioConstructionModel(lambda time: None))\n        \nclass USTreasuryAlphaModel(AlphaModel):\n\n    spy_symbol = None\n    last_inversion = datetime.min\n    \n    def __init__(self, algorithm):\n        # Requesting data\n        self.yield_curve_symbol = algorithm.AddData(USTreasuryYieldCurveRate, \"USTYCR\").Symbol\n\n        # Historical data\n        history = algorithm.History(self.yield_curve_symbol, 60, Resolution.Daily)\n        algorithm.Debug(f\"We got {len(history)} items from our history request\")\n\n    def Update(self, algorithm, data):\n        if not (data.ContainsKey(self.yield_curve_symbol) and self.spy_symbol is not None):\n            return []\n        \n        rates = data[self.yield_curve_symbol]\n        \n        # Check for null before using the values\n        if not (rates.TenYear is not None and rates.TwoYear is not None):\n            return []\n        \n        # Only advance if a year has gone by\n        if (data.Time - self.last_inversion &lt; timedelta(days=365)):\n            return []\n        \n        # if there is a yield curve inversion after not having one for a year, short sell SPY for two years\n        if (not algorithm.Portfolio.Invested and rates.TwoYear &gt; rates.TenYear):\n            algorithm.Debug(f\"{data.Time} - Yield curve inversion! Shorting the market for two years\")\n            self.last_inversion = data.Time\n            return [Insight.Price(self.spy_symbol, data.Time + timedelta(days=2*365), InsightDirection.Down, None, None, None, 0.5)]\n        return []\n        \n\n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            self.spy_symbol = security.Symbol</code></pre>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing QuantConnect.Algorithm.Framework.Alphas;\nusing QuantConnect.Algorithm.Framework.Portfolio;\nusing QuantConnect.Data.UniverseSelection;\nusing QuantConnect.DataSource;\n\nnamespace QuantConnect.Algorithm.CSharp.AltData\n{\n    public class USTreasuryYieldCurveDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2000, 3, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n\n            AddEquity(\"SPY\", Resolution.Hour);\n            AddAlpha(new USTreasuryAlphaModel(this));\n            SetPortfolioConstruction(new InsightWeightingPortfolioConstructionModel((time) =&gt; null));\n        }\n    }\n    \n    \n    public class USTreasuryAlphaModel : AlphaModel\n    {\n        private Symbol? _spySymbol = null;\n        private Symbol _yieldCurveSymbol;\n        private DateTime _lastInversion = DateTime.MinValue;\n        \n        public USTreasuryAlphaModel(QCAlgorithm algorithm)\n        {\n            // Requesting data\n            _yieldCurveSymbol = algorithm.AddData&lt;USTreasuryYieldCurveRate&gt;(\"USTYCR\").Symbol;\n\n            // Historical data\n            var history = algorithm.History&lt;USTreasuryYieldCurveRate&gt;(_yieldCurveSymbol, 60, Resolution.Daily);\n            algorithm.Debug($\"We got {history.Count()} items from our history request\");\n        }\n\n        public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n        {\n            var insights = new List&lt;Insight&gt;();\n            \n            \n            if (!data.ContainsKey(_yieldCurveSymbol) || _spySymbol == null)\n            {\n                return insights;\n            }\n            \n            // Preserve null values by getting the data with `slice.Get&lt;T&gt;`\n            // Accessing the data using `data[_yieldCurveSymbol]` results in null\n            // values becoming `default(decimal)` which is equal to 0\n            var rates = data.Get&lt;USTreasuryYieldCurveRate&gt;().Values.First();\n            \n            // Check for null before using the values\n            if (!rates.TenYear.HasValue || !rates.TwoYear.HasValue)\n            {\n                return insights;\n            }\n            \n            // Only advance if a year has gone by\n            if (data.Time - _lastInversion &lt; TimeSpan.FromDays(365))\n            {\n                return insights;\n            }\n            \n            // if there is a yield curve inversion after not having one for a year, short sell SPY for two years\n            if (!algorithm.Portfolio.Invested &amp;&amp; rates.TwoYear &gt; rates.TenYear)\n            {\n                algorithm.Debug($\"{data.Time} - Yield curve inversion! Shorting the market for two years\");\n                _lastInversion = data.Time;\n                insights.Add(Insight.Price(_spySymbol, data.Time + TimeSpan.FromDays(2*365), InsightDirection.Down, null, null, null, 0.5));\n            }\n            \n        return insights;\n        }\n\n        public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n        {\n            foreach (var security in changes.AddedSecurities)\n            {\n                _spySymbol = security.Symbol;\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-07-01 19:52:45"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 12,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>US Treasury Yield Curve is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>US Treasury Yield Curve can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 5 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>US Treasury Yield Curve is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 60,
        "name": "US Treasury - Cloud Access",
        "description": "<p>Freely harness US Treasure Yeild Curve data in the QuantConnect Cloud for your backtesting and live trading purposes.\n </p>\n    <ul><li>Curated, clean data</li>\n                                            <li>Updated nightly at 4am</li>\n                                        </ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 61,
        "name": "US Treasury - Download On Premise",
        "description": "<p>US Treasury Yield Curve data archived in LEAN format for on premise backtesting and research. One file that is updated daily.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Download On Premise",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "5 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      }
    ],
    "headerColor": "42dffe"
  },
  {
    "name": "VIX Central Contango",
    "vendorName": "VIX Central",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/vix.jpg",
    "landingFileName": "quantconnect-vixcentral-contango.html",
    "url": "/datasets/quantconnect-vixcentral-contango",
    "short_description": "Contango rates over time for the VIX Contract provided by VIXCentral and cached by QuantConnect.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The VIX Central Contango dataset by VIX Central tracks VIX Futures (VX) contango data. The data covers 12 Futures contracts closest to expiry/maturity, starts in June 2010, and is delivered on a daily frequency. The dataset is created by QuantConnect downloading data from VIX Central website, which collects and analyses VIX and VX (VIX Futures) data.</p>\n\n<p>Contango and Backwardation are terms used to describe if participants in the Futures market are overpaying or underpaying relative to the \"spot\" price of the underlying commodity when trading a Futures contract (\"spot\" price is the price of the actual commodity/asset at a given moment in time). Contango and backwardation can be used to determine forward-looking expectations of the commodity's spot price by the time the Future has expired/matured and is set to be delivered by participants of the Futures market. As Futures near their expiration/maturity date, contango and backwardation curves tend to converge on the spot price of the commodity at the time of expiration.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p><a href=\"http://vixcentral.com/\">VIX Central</a> was founded by Eli Mintz in 2012 with goal of displaying historical VIX term structures in a simple and intuitive interface. VIX Central provides access to real-time and historical VIX data for individual investors.</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-cs\">\n_contango = AddData&lt;VIXCentralContango&gt;(\"VIX\", Resolution.Daily).Symbol;\n</code></pre>\n<pre><code class=\"language-python\">\nself.contango = self.AddData(VIXCentralContango, \"VIX\", Resolution.Daily).Symbol\n</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>June 2010</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>1 Futures Chain with 12 contracts</td>\n        </tr><tr><td>Data Density</td>\n            <td>Regular</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>New York</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>The VIX Central Contango dataset by VIX Central enable users to explore VIX Future contracts pricing data. Possible usages include:</p><ul><li>Determine forward-looking expectations by Futures market participants of the underlying commodity's spot price by the time of expiration/maturity</li><li>Create cash-and-carry arbitrage strategies by trading the spread/convergence of the contango/backwardation curves as a Future nears expiration/maturity</li></ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_05d0c34c4e1414d4e124fdbff18a2532.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The VIX Central Contango dataset provides VIXCentralContango objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.VIXCentralContango\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add VIX Central Contango data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass VixCentralContangoAlgorithm(QCAlgorithm):\n \n    def Initialize(self):\n        self.SetStartDate(2014, 1, 1)\n        self.SetEndDate(2018, 1, 1)\n        self.SetCash(25000)\n \n        self.contango = self.AddData(VIXCentralContango, \"VX\", Resolution.Daily).Symbol\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class VixCentralContangoAlgorithm : QCAlgorithm\n    {\n        private Symbol _contango;\n\n        public override void Initialize()\n        {\n            SetStartDate(2014, 1, 1);\n            SetEndDate(2018, 1, 1);\n            SetCash(25000);\n\n            _contango = AddData&lt;VIXCentralContango&gt;(\"VX\", Resolution.Daily).Symbol;\n        }\n    }\n}</code></pre></div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass VixCentralContangoAlgorithm(QCAlgorithm):\n \n    def OnData(self):\n        contangoData = data.Get(VIXCentralContango, self.contango)\n        self.Log(f'Contango: {contangoData}')\n\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class VixCentralContangoAlgorithm : QCAlgorithm\n    {\n        public override void OnData(Slice data)\n        {\n            var contangoData = data.Get&lt;VIXCentralContango&gt;(_contango);\n            Log($\"Contango {contangoData}\");\n        }\n    }\n}</code></pre></div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for VIX Central Contango data by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(VIXCentralContango, self.contango, 60, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History&lt;VIXCentralContango&gt;(_contango, 60, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The VIX Central Contango dataset provides VIXCentralContango objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.VIXCentralContango\"></div>"
      }
    ],
    "priceCTA": "Free",
    "vendorWebsite": "https://www.quantconnect.com/market",
    "examples": [
      {
        "id": 147,
        "master_product_id": 13,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Design",
        "content": "<p>In this example, we buy SPY if Contango_F2_Minus_F1, the percentage change between contract F2 and F1, is positive and remain in cash otherwise.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass VixCentralContangoAlgorithm (QCAlgorithm):\n\n    def Initialize(self):\n\n        self.SetStartDate(2014,1,1) \n        self.SetEndDate(2018,1,1)  \n        self.SetCash(25000)\n\n        self.spy = self.AddEquity(\"SPY\", Resolution.Daily).Symbol\n        self.contango = self.AddData(VIXCentralContango, \"VX\", Resolution.Daily).Symbol\n\n    def OnData(self, data):\n\n        contangoData = data.Get(VIXCentralContango, self.contango)\n        ratio = contangoData.Contango_F2_Minus_F1 if contangoData else 0\n            \n        if not self.Portfolio.Invested and ratio &gt; 0:\n            self.MarketOrder(self.spy, 100)\n        elif ratio &lt; 0:\n            self.Liquidate()\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class VixCentralContangoAlgorithm : QCAlgorithm\n    {\n        private Symbol _spy;\n        private Symbol _contango;\n\n        public override void Initialize()\n        {\n            SetStartDate(2014, 1, 1);\n            SetEndDate(2018, 1, 1);\n            SetCash(25000);\n\n            _spy = AddEquity(\"SPY\", Resolution.Daily).Symbol;\n            _contango = AddData&lt;VIXCentralContango&gt;(\"VX\", Resolution.Daily).Symbol;\n        }\n    \n        public override void OnData(Slice data)\n        {\n            var contangoData = data.Get&lt;VIXCentralContango&gt;(_contango);\n            var ratio = contangoData?.Contango_F2_Minus_F1 ?? 0;\n\n            if (!Portfolio.Invested &amp;&amp; ratio &gt; 0)\n            {\n                MarketOrder(_spy, 100);\n            }\n            else if(ratio &lt; 0)\n            {\n                 Liquidate();\n            }\n        }\n    }\n}</code></pre></div>",
        "updated": "2021-10-19 20:44:06"
      },
      {
        "id": 218,
        "master_product_id": 13,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Design",
        "content": "<p>In this example, we buy SPY if Contango_F2_Minus_F1, the percentage change between contract F2 and F1, is positive and remain in cash otherwise.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass VixCentralContangoAlgorithm (QCAlgorithm):\n\n    def Initialize(self):\n\n        self.SetStartDate(2014,1,1) \n        self.SetEndDate(2018,1,1)  \n        self.SetCash(25000)\n        \n        self.spy = self.AddEquity(\"SPY\", Resolution.Daily).Symbol\n        \n        self.AddAlpha(ContangoAlphaModel(self))\n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n\nclass ContangoAlphaModel(AlphaModel):\n\n    def __init__(self, algorithm):\n        self.symbols = []\n        self.contango = algorithm.AddData(VIXCentralContango, \"VX\", Resolution.Daily).Symbol\n        \n        history = algorithm.History(VIXCentralContango, self.contango, 60, Resolution.Daily)\n        algorithm.Debug(f\"We got {len(history.index)} items from our history request\")\n        \n    def Update(self, algorithm, data):\n\n        insights = []\n\n        contangoData = data.Get(VIXCentralContango, self.contango)\n        ratio = contangoData.Contango_F2_Minus_F1 if contangoData else 0\n            \n        if not algorithm.Portfolio.Invested and ratio &gt; 0:\n            for symbol in self.symbols:\n                insights += [Insight.Price(symbol, Expiry.OneMonth, InsightDirection.Up)]\n        elif ratio &lt; 0:\n            for symbol in self.symbols:\n                insights += [Insight.Price(symbol, Expiry.OneMonth, InsightDirection.Flat)]\n\n        return insights\n        \n    def OnSecuritiesChanged(self, algorithm, changes):\n\n        for symbol in [x.Symbol for x in changes.RemovedSecurities]:\n            if symbol in self.symbols: \n                self.symbols.pop(symbol);\n\n        self.symbols += [x.Symbol for x in changes.AddedSecurities]\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class VixCentralContangoAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2014, 1, 1);\n            SetEndDate(2018, 1, 1);\n            SetCash(25000);\n\n            AddEquity(\"SPY\", Resolution.Daily);\n            AddAlpha(new ContangoAlphaModel(this));\n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n        }\n    }\n\n    public class ContangoAlphaModel : AlphaModel\n    {\n        private Symbol _contango;\n        private List&lt;Symbol&gt; _symbols;\n\n        public ContangoAlphaModel(QCAlgorithm algorithm)\n        {\n            _symbols = new List&lt;Symbol&gt;();\n            _contango = algorithm.AddData&lt;VIXCentralContango&gt;(\"VX\", Resolution.Daily).Symbol;\n\n            var history = algorithm.History&lt;VIXCentralContango&gt;(_contango, 60, Resolution.Daily);\n            algorithm.Debug($\"We got {history.Count()} items from our history request\");\n        }\n\n        public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n        {\n            var insights = new List&lt;Insight&gt;();\n\n            var contangoData = data.Get&lt;VIXCentralContango&gt;(_contango);\n            var ratio = contangoData?.Contango_F2_Minus_F1 ?? 0;\n        \t\n            if (!algorithm.Portfolio.Invested &amp;&amp; ratio &gt; 0)\n            {\n                foreach (var symbol in _symbols)\n                {\n                    insights.Add(Insight.Price(symbol, Expiry.OneMonth, InsightDirection.Up));\n                }\n            }\n            else if (ratio &lt; 0)\n            {\n                foreach (var symbol in _symbols)\n                {\n                    insights.Add(Insight.Price(symbol, Expiry.OneMonth, InsightDirection.Flat));\n                }\n            }\n        \t\n            return insights;\n        }\n\n        public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n        {\n            foreach (var symbol in changes.RemovedSecurities.Select(x=&gt; x.Symbol))\n            {\n                _symbols.Remove(symbol);\n            }\n            _symbols.AddRange(changes.AddedSecurities.Select(x=&gt; x.Symbol));\n        }\n    }\n}</code></pre></div>",
        "updated": "2021-10-19 20:44:41"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 13,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>VIX Central Contango is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>VIX Central Contango can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 5 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>VIX Central Contango is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 52,
        "name": "VIXCentral Contango - Cloud Access",
        "description": "<p>Freely harness VIX Contango data in the QuantConnect Cloud for your backtesting and live trading purposes.\n </p>\n    <ul><li>Curated, clean data</li>\n                                            <li>Updated nightly at 4am</li>\n                                        </ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 53,
        "name": "VIXCentral Contango - Download On Premise",
        "description": "<p>VIX Contango data archived in LEAN format for on premise backtesting and research. One file that is updated daily.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "On Premise",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "5 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      }
    ],
    "headerColor": "ff1841"
  },
  {
    "name": "VIX Daily Price",
    "vendorName": "CBOE",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/cboe.svg",
    "landingFileName": "cboe-vix-daily.html",
    "url": "/datasets/cboe-vix-daily",
    "short_description": "Daily export of OHLC daily price for 8 VIX related products supplied by the CBOE, cached by QuantConnect.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The VIX Daily Price dataset by CBOE covers 8 US volatility indices. The data starts in January 1990 and is delivered on a daily frequency. The dataset is cached daily from the CBOE website. The volatility index measures the stock market's expectation of volatility on the market index (e.g.:  S&amp;P500) using implied volatility from its Options for a fixed time horizon.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>The Chicago Board Options Exchange (<a href=\"https://www.cboe.com/\">CBOE</a>) is the largest U.S. options exchange with annual trading volume that hovered around 1.27 billion contracts at the end of 2014. CBOE offers Options on over 2,200 companies, 22 Equity indices, and 140 exchange-traded funds (ETFs).</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-cs\">\n_cboeVix = AddData&lt;CBOE&gt;(\"VIX\", Resolution.Daily).Symbol;\n</code></pre>\n<pre><code class=\"language-python\">\nself.cboeVix = self.AddData(CBOE, \"VIX\", Resolution.Daily).Symbol\n</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 1990</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>8 US Volatility Indices</td>\n        </tr><tr><td>Data Density</td>\n            <td>Regular</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>New York</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Supported Indices",
        "content": "<p>The following table shows the volatility indices in the VIX Daily Price dataset:</p>\n<table class=\"table qc-table table-dense\"><thead><tr><td>Ticker</td><td>Index</td><td>Expiry</td><td>Start Date</td></tr></thead><tbody><tr><td>VIX</td> <td>S&amp;P500</td><td>30 Days</td><td>Jan 1990</td></tr><tr><td>VIX9D</td><td>S&amp;P500</td><td>9 Days</td><td>Apr 2011</td></tr><tr><td>VIX3M</td><td>S&amp;P500</td><td>3 Months</td><td>Sep 2009</td></tr><tr><td>VIX6M</td><td>S&amp;P500</td><td>6 Months</td><td>Jan 2008</td></tr><tr><td>VXO</td><td>S&amp;P100</td><td>30 Days</td><td>Feb 1993</td></tr><tr><td>VXN</td><td>Nasdaq 100</td><td>30 Days</td><td>Sep 2009</td></tr><tr><td>RVX</td><td>Russell 2000</td><td>30 Days</td><td>Sep 2009</td></tr><tr><td>TYVIX</td><td>10-year US Treasury Note</td><td>30 Days</td><td>Jan 2003</td></tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<ul><li>Understanding the stock market's level of expected forward-looking volatility, also known as the \"fear index\".\nWhen the VIX starts moving higher, it is telling you that traders are getting nervous. When the VIX starts moving lower, it is telling you that traders are gaining confidence.</li>\n<li>Determine forward-looking volatility by comparing the VIX against volatility indexes with other volatility. By comparing the value of the VIX to the value of the VIX3M, we can identify periods when trader sentiment has turned extremely bearish and when it has normalized.</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_d0085a1fdce42f23d3664d464623d313.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The VIX Daily Price dataset provides CBOE objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.CBOE\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add CBOE data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass CboeDataAlgorithm(QCAlgorithm):\n \n    def Initialize(self):\n        self.SetStartDate(2003, 1, 1)\n        self.SetEndDate(2019, 10, 11)\n        self.SetCash(100000)\n \n        self.cboeVix = self.AddData(CBOE, \"VIX\", Resolution.Daily).Symbol\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class CboeDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _cboeVix;\n \n        public override void Initialize()\n        {\n            SetStartDate(2003, 1, 1);\n            SetEndDate(2019, 10, 11);\n            SetCash(100000);\n \n            _cboeVix = AddData&lt;CBOE&gt;(\"VIX\", Resolution.Daily).Symbol;\n        }\n    }\n}\n</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class CboeDataAlgorithm(QCAlgorithm):\n    \n   def OnData(self, data):\n        if data.ContainsKey(self.cboeVix):\n            vix = data.Get(CBOE, self.cboeVix)\n            self.Log(f\"VIX: {vix}\")\n\n</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect.Algorithm.CSharp.AltData\n{    \n    public class CboeDataAlgorithm : QCAlgorithm\n    {\n       public override void OnData(Slice data)\n        {\n            if (data.ContainsKey(_cboeVix))\n            {\n                var vix = data.Get(_cboeVix);\n                Log($\"VIX: {vix}\");\n            }\n        }\n    }\n}\n</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for CBOE data by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(CBOE, self.vix, 60, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History&lt;CBOE&gt;(_vix, 60, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The VIX Daily Price dataset provides CBOE objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.CBOE\"></div>"
      }
    ],
    "priceCTA": "Free",
    "vendorWebsite": "https://www.quantconnect.com/market",
    "examples": [
      {
        "id": 160,
        "master_product_id": 14,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Design",
        "content": "<p>In this example, we buy SPY when the ratio between VIX and VIX3M is positive and liquidate our holdings otherwise.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass CBOEDataAlgorithmAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n\n        self.SetStartDate(2014,1,1) \n        self.SetEndDate(2018,1,1)  \n        self.SetCash(25000)\n        \n        self.spy = self.AddEquity(\"SPY\", Resolution.Daily).Symbol\n\n        # Define the symbol and \"type\" of our generic data\n        self.vix = self.AddData(CBOE, 'VIX', Resolution.Daily).Symbol\n        self.vxv = self.AddData(CBOE, 'VIX3M', Resolution.Daily).Symbol\n        \n        # Set up default Indicators, these are just 'identities' of the closing price\n        self.vix_sma = self.SMA(self.vix, 1, Resolution.Daily)\n        self.vxv_sma = self.SMA(self.vxv, 1, Resolution.Daily)\n        \n        # This will create a new indicator whose value is smaVXV / smaVIX\n        self.ratio = IndicatorExtensions.Over(self.vxv_sma, self.vix_sma)\n        \n        # Plot indicators each time they update using the PlotIndicator function\n        self.PlotIndicator(\"Ratio\", self.ratio)\n        self.PlotIndicator(\"Data\", self.vix_sma, self.vxv_sma)\n\n        history = self.History(CBOE, self.vix, 60, Resolution.Daily)\n        self.Debug(f\"We got {len(history.index)} items from our history request\");\n    \n    def OnData(self, data):\n        \n        # Wait for all indicators to fully initialize\n        if not (self.vix_sma.IsReady and self.vxv_sma.IsReady and self.ratio.IsReady): return\n        if not self.Portfolio.Invested and self.ratio.Current.Value &gt; 1:\n            self.MarketOrder(self.spy, 100)\n        elif self.ratio.Current.Value &lt; 1:\n            self.Liquidate()\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class CBOEDataAlgorithmAlgorithm : QCAlgorithm\n    {\n        private Symbol _spy;\n        private Symbol _vix;\n        private Symbol _vxv;\n        private SimpleMovingAverage _smaVIX;\n        private SimpleMovingAverage _smaVXV;\n        private IndicatorBase _ratio;\n\n        public override void Initialize()\n        {\n            SetStartDate(2014, 1, 1);\n            SetEndDate(2018, 1, 1);\n            SetCash(25000);\n\n            _spy = AddEquity(\"SPY\", Resolution.Daily).Symbol;\n\n            // Define the symbol and \"type\" of our generic data\n            _vix = AddData&lt;CBOE&gt;(\"VIX\", Resolution.Daily).Symbol;\n            _vxv = AddData&lt;CBOE&gt;(\"VIX3M\", Resolution.Daily).Symbol;\n            // Set up default Indicators, these are just 'identities' of the closing price\n            _smaVIX = SMA(_vix, 1);\n            _smaVXV = SMA(_vxv, 1);\n            // This will create a new indicator whose value is smaVXV / smaVIX\n            _ratio = _smaVXV.Over(_smaVIX);\n\n            var history = History&lt;CBOE&gt;(_vix, 60, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request\");\n        }\n\n        public override void OnData(Slice data)\n        {\n            // Wait for all indicators to fully initialize\n            if (_smaVIX.IsReady &amp;&amp; _smaVXV.IsReady &amp;&amp; _ratio.IsReady)\n            {\n                if (!Portfolio.Invested &amp;&amp; _ratio &gt; 1)\n                {\n                    MarketOrder(_spy, 100);\n                }\n                else if (_ratio &lt; 1)\n                {\n                    Liquidate();\n                }\n                // plot all indicators\n                PlotIndicator(\"SMA\", _smaVIX, _smaVXV);\n                PlotIndicator(\"Ratio\", _ratio);\n            }\n        }\n    }\n}\n</code></pre></div>",
        "updated": "2021-10-19 20:28:23"
      },
      {
        "id": 217,
        "master_product_id": 14,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Design",
        "content": "<p>In this example, we buy SPY when the ratio between VIX and VIX3M is positive and liquidate our holdings otherwise.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass CBOEDataAlgorithmAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n\n        self.SetStartDate(2014,1,1) \n        self.SetEndDate(2018,1,1)  \n        self.SetCash(25000)\n        \n        self.spy = self.AddEquity(\"SPY\", Resolution.Daily).Symbol\n        \n        self.AddAlpha(VixRatioAlphaModel(self));\n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel());\n\nclass VixRatioAlphaModel(AlphaModel):\n    \n    def __init__(self, algorithm):\n        # Define the symbol and \"type\" of our generic data\n        self.vix = algorithm.AddData(CBOE, 'VIX', Resolution.Daily).Symbol\n        self.vxv = algorithm.AddData(CBOE, 'VIX3M', Resolution.Daily).Symbol\n        \n        # Set up default Indicators, these are just 'identities' of the closing price\n        self.vix_sma = algorithm.SMA(self.vix, 1, Resolution.Daily)\n        self.vxv_sma = algorithm.SMA(self.vxv, 1, Resolution.Daily)\n        \n        # This will create a new indicator whose value is smaVXV / smaVIX\n        self.ratio = IndicatorExtensions.Over(self.vxv_sma, self.vix_sma)\n\n        self.symbols = []\n        \n        # Plot indicators each time they update using the PlotIndicator function\n        algorithm.PlotIndicator(\"Ratio\", self.ratio)\n        algorithm.PlotIndicator(\"Data\", self.vix_sma, self.vxv_sma)\n        \n        history = algorithm.History(CBOE, self.vix, 60, Resolution.Daily)\n        algorithm.Debug(f\"We got {len(history.index)} items from our history request\")\n    \n    def Update(self, algorithm, data):\n        \n        insights = []\n        # Wait for all indicators to fully initialize\n        if not (self.vix_sma.IsReady and self.vxv_sma.IsReady and self.ratio.IsReady): return\n        if not algorithm.Portfolio.Invested and self.ratio.Current.Value &gt; 1:\n            for symbol in self.symbols:\n                insights += [Insight.Price(symbol, Expiry.OneMonth, InsightDirection.Up)]\n        elif self.ratio.Current.Value &lt; 1:\n            for symbol in self.symbols:\n                insights += [Insight.Price(symbol, Expiry.OneMonth, InsightDirection.Flat)]\n                \n        return insights\n        \n    def OnSecuritiesChanged(self, algorithm, changes):\n        \n        for symbol in [x.Symbol for x in changes.RemovedSecurities]:\n            if symbol in self.symbols: \n                self.symbols.pop(symbol);\n            \n        self.symbols += [x.Symbol for x in changes.AddedSecurities]\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class CBOEDataAlgorithmAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2014, 1, 1);\n            SetEndDate(2018, 1, 1);\n            SetCash(25000);\n\n            AddEquity(\"SPY\", Resolution.Daily);\n            AddAlpha(new VixRatioAlphaModel(this));\n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n        }\n    }\n\n    public class VixRatioAlphaModel : AlphaModel\n    {\n        private Symbol _vix;\n        private Symbol _vxv;\n        private SimpleMovingAverage _smaVIX;\n        private SimpleMovingAverage _smaVXV;\n        private IndicatorBase _ratio;\n        private List&lt;Symbol&gt; _symbols;\n\n        public VixRatioAlphaModel(QCAlgorithm algorithm)\n        {\n            // Define the symbol and \"type\" of our generic data\n            _vix = algorithm.AddData&lt;CBOE&gt;(\"VIX\", Resolution.Daily).Symbol;\n            _vxv = algorithm.AddData&lt;CBOE&gt;(\"VIX3M\", Resolution.Daily).Symbol;\n            // Set up default Indicators, these are just 'identities' of the closing price\n            _smaVIX = algorithm.SMA(_vix, 1);\n            _smaVXV = algorithm.SMA(_vxv, 1);\n            // This will create a new indicator whose value is smaVXV / smaVIX\n            _ratio = _smaVXV.Over(_smaVIX);\n            \n            _symbols = new List&lt;Symbol&gt;();\n\n            var history = algorithm.History&lt;CBOE&gt;(_vix, 60, Resolution.Daily);\n            algorithm.Debug($\"We got {history.Count()} items from our history request\");\n        }\n\n        public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n        {\n            var insights = new List&lt;Insight&gt;();\n        \t\n            // Wait for all indicators to fully initialize\n            if (_smaVIX.IsReady &amp;&amp; _smaVXV.IsReady &amp;&amp; _ratio.IsReady)\n            {\n                if (!algorithm.Portfolio.Invested &amp;&amp; _ratio &gt; 1)\n                {\n                    foreach (var symbol in _symbols)\n                    {\n                        insights.Add(Insight.Price(symbol, Expiry.OneMonth, InsightDirection.Up));\n                    }\n                }\n                else if (_ratio &lt; 1)\n                {\n                    foreach (var symbol in _symbols)\n                    {\n                        insights.Add(Insight.Price(symbol, Expiry.OneMonth, InsightDirection.Flat));\n                    }\n                }\n                // plot all indicators\n                algorithm.PlotIndicator(\"SMA\", _smaVIX, _smaVXV);\n                algorithm.PlotIndicator(\"Ratio\", _ratio);\n            }\n            \n            return insights;\n        }\n\n        public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n        {\n            foreach (var symbol in changes.RemovedSecurities.Select(x=&gt;x.Symbol))\n            {\n                _symbols.Remove(symbol);\n            }\n            _symbols.AddRange(changes.AddedSecurities.Select(x=&gt; x.Symbol));\n        }\n    }\n}</code></pre></div>",
        "updated": "2021-10-19 20:28:47"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 14,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>VIX Daily Price is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>VIX Daily Price can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 5 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>VIX Daily Price is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 62,
        "name": "CBOE - Cloud Access",
        "description": "<p>Freely harness CBOE daily data in the QuantConnect Cloud for your backtesting and live trading purposes.\n </p>\n    <ul><li>Curated, clean data</li>\n                                            <li>Updated nightly at 4am</li>\n                                        </ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 63,
        "name": "CBOE - Download On Premise",
        "description": "<p>CBOE daily data archived in LEAN format for on premise backtesting and research. One file per index that is updated daily.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Download On Premise",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "5 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      }
    ],
    "headerColor": "ff1841"
  },
  {
    "name": "US Equities",
    "vendorName": "AlgoSeek",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/algoseek-logo.svg",
    "landingFileName": "algoseek-us-equities.html",
    "url": "/datasets/algoseek-us-equities",
    "short_description": "Market data for all US listed and delisted Equities, ETFs, ETNs, ADRs, and Warrants from January 2007 to present.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The US Equities dataset by AlgoSeek is survivorship bias-free daily coverage of every stock traded in the US Securities Information Processors (SIP) CTA/UTP feed since 2007. The dataset covers approximately 27,500 securities, starts in January 2007, and is delivered in any resolution from tick to daily. The Data is collected from the full SIP feed via our Equinix co-located servers, including all trades and quotes published to every exchange as well as FINRA. Over-the-Counter (OTC) trades are not included.</p>\n\n<p>This dataset depends on the <a href=\"https://www.quantconnect.com/datasets/quantconnect-us-equity-security-master\">US Equity Security Master</a> dataset because the US Equity Security Master dataset contains information on splits, dividends, and symbol changes.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\nAlgoSeek is a leading historical intraday US market data provider offering the most comprehensive and detailed market data and analytics products in the financial industry covering Equities, Futures, Options, cash FOREX, and Cryptocurrencies. AlgoSeek data is built for quantitative trading and machine learning.  For more information about AlgoSeek, visit <a href=\"https://www.algoseek.com\">algoseek.com</a>.\n</p>"
      },
      {
        "title": "Getting Started",
        "content": "<p>\nAlgoSeek is the default US Equities dataset on QuantConnect. You can request this data with the AddEquity API method.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">self.symbol = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol </code></pre>\n<pre><code class=\"language-cs\">_symbol = AddEquity(\"AAPL\", Resolution.Daily).Symbol;</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 2007</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>27,500 US Equities</td>\n        </tr><tr><td>Data Density</td>\n            <td>Dense</td>\n        </tr><tr><td>Resolution</td>\n            <td>Tick, Second, Minute, Hourly, &amp; Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>New York</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Supported Assets",
        "content": "<p>To view the supported assets in the US Equities dataset, see the <a href=\"/data/tree/equity/usa/daily\">Data Explorer</a>.</p>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe AlgoSeek US Equities dataset enables researchers to accurately design Equity trading strategies. Examples include: \n</p>\n<ul><li>Momentum strategies using historical returns on the premise that the momentum will continue</li>\n<li>Value strategies using fundamental factors on the premise that the price of undervalued securities will rise</li>\n<li>Factor investing with periodic rebalancing</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_9bb1e231636e14b3bee81563f15a01e6.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Equities dataset provides TradeBar, QuoteBar, and Tick objects.</p>\n\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>Tick Attributes</h4>\n<p>Tick objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add US Equities data to your algorithm, use the AddEquity() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on requesting market data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class USEquityDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2018, 1, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000) \n        self.symbol = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class USEquityDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _symbol; \n    \t\n        public override void Initialize()\n        {\n            SetStartDate(2018, 1, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            _symbol = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    if data.ContainsKey(self.symbol) and data[self.symbol] is not None:\n        # The marketData object can be a TradeBar, QuoteBar, or a List of Tick\n        marketData = data[self.symbol]\n\n        # If it's TradeBar or QuoteBar:\n        self.Log(f\"Time: {self.Time}; Symbol: {self.symbol}; Open: {marketData.Open}; High: {marketData.High}; Low: {marketData.Low}; Close: {marketData.Close}; Volume: {marketData.Volume}\")\n\n        # it's Tick data:\n        for tick in marketData:\n            self.Log(f\"Time: {tick.EndTime}; Symbol: {self.symbol}; Ask Price: {tick.AskPrice}; Bid Price: {tick.BidPrice}\")\n</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{    \n    public override void OnData(Slice data)\n    {\n        if (data.ContainsKey(_symbol) &amp;&amp; data[_symbol] != null)\n        {\n            // The marketData object can be a TradeBar, QuoteBar, or a List of Tick\n            var marketData = data[_symbol];\n            \n            // If it's TradeBar or QuoteBar:\n            Log($\"Time: {Time}; Symbol: {_symbol} Open: {marketData.Open}; High: {marketData.High}; Low: {marketData.Low}; Close: {marketData .Close}\");\n\n            // If it's Tick data:\n            foreach (var tick in marketData)\n            {\n                 Log($\"Time: {tick.EndTime}; Symbol: {_symbol} Ask Price: {tick.AskPrice}; Bid Price: {tick.BidPrice}\");\n            }\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical data in your algorithm using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for US Equities by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.symbol, 60, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History(_symbol, 60, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Universe Selection",
        "content": "<p>To select a universe of US Equities, see the following datasets:</p>\n\n<ul><li><a href=\"/datasets/quantconnect-us-coarse-universe-constituents\">US Coarse Universe</a></li>\n    <li><a href=\"/datasets/morning-star-us-fundamentals\">US Fundamental Data</a></li>\n    <li><a href=\"/datasets/quantconnect-us-etf-constituents\">US ETF Constituents</a></li>\n</ul>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Equities dataset provides TradeBar, QuoteBar, and Tick objects.</p>\n\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>Tick Attributes</h4>\n<p>Tick objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"></div>"
      }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "",
    "examples": [
      {
        "id": 194,
        "master_product_id": 17,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we buy and hold Apple stock.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass USEquityDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2018, 1, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n        \n        # Requesting data\n        self.symbol = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        \n        # Historical data\n        history = self.History(self.symbol, 60, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request\")\n\n    def OnData(self, data):\n        if data.ContainsKey(self.symbol) and data[self.symbol] is not None and not self.Portfolio.Invested:\n            self.SetHoldings(self.symbol, 1)</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class USEquityDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _symbol;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2018, 1, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n\n            // Requesting data\n            _symbol = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            \n            // Historical data\n            var history = History(_symbol, 60, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request\");\n        }\n\n        public override void OnData(Slice data)\n        {\n            if (data.ContainsKey(_symbol) &amp;&amp; data[_symbol] != null &amp;&amp; !Portfolio.Invested)\n            {\n                SetHoldings(_symbol, 1);\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-06-30 00:23:33"
      },
      {
        "id": 196,
        "master_product_id": 17,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this example, we buy and hold Apple stock.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\"> from AlgorithmImports import *\n\nclass USEquityDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2018, 1, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n        \n        # Requesting data\n        self.symbol = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        \n        # Historical data\n        history = self.History(self.symbol, 60, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request\")\n        \n        self.AddAlpha(ConstantAlphaModel(InsightType.Price, InsightDirection.Up, timedelta(days=7), 0.025, None))\n        self.SetPortfolioConstruction( EqualWeightingPortfolioConstructionModel() )</code></pre>\n<pre><code class=\"language-cs\"> namespace QuantConnect\n{\n    public class USEquityDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _symbol;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2018, 1, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            \n            // Requesting data\n            _symbol = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            \n            // Historical data\n            var history = History(_symbol, 60, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request\");\n            \n            AddAlpha( new ConstantAlphaModel(InsightType.Price, InsightDirection.Up, TimeSpan.FromDays(7), 0.025, null) );\n            SetPortfolioConstruction( new EqualWeightingPortfolioConstructionModel() );\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-06-30 00:25:08"
      }
    ],
    "pricingText": "The QuantConnect-AlgoSeek partnership provides free access to US Equities market data in QuantConnect Cloud and paid access for downloads. Downloads are distributed in LEAN format and priced according to file resolution as below. This dataset depends on the US Security Master dataset because the US Security Master dataset contains information on splits, dividends, and symbol changes.",
    "pricing": [
      {
        "id": null,
        "master_product_id": 17,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>US Equities is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>US Equities can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 5 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>US Equities is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 45,
        "name": "AlgoSeek Equities Cloud Access",
        "description": "<p>Freely harness terabytes of US Equities data in the QuantConnect Cloud for your backtesting and live trading purposes.\n </p>\n    <ul><li>Curated, clean data</li>\n                                            <li>Updated nightly at 4am</li>\n                                            <li>Full historical SIP feed</li>\n                                        </ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 46,
        "name": "AlgoSeek Equities - Tick Download",
        "description": "<p>US Equity Tick resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Tick Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "6 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 47,
        "name": "AlgoSeek Equities - Second Download",
        "description": "<p>US Equity Second resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Second Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "5 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 48,
        "name": "AlgoSeek Equities - Minute Download",
        "description": "<p>US Equity Minute resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Minute Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "5 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 49,
        "name": "AlgoSeek Equities - Hour Download",
        "description": "<p>US Equity Hourly resolution archives in LEAN format for on premise backtesting and research. One file per ticker.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Hour Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "300 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 50,
        "name": "AlgoSeek Equities - Daily Download",
        "description": "<p>US Equity Daily resolution archives in LEAN format for on premise backtesting and research. One file per ticker.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Daily Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "100 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      }
    ],
    "headerColor": "04a3db"
  },
  {
    "name": "Corporate Buybacks",
    "vendorName": "Smart Insider",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/smartinsider-square.svg",
    "landingFileName": "smart-insider-corporate-buybacks.html",
    "url": "/datasets/smart-insider-corporate-buybacks",
    "short_description": "US Equity buyback announcements and transactions from 2015 to the present. Scraped from SEC reports and secondary sources.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The Corporate Buybacks dataset by Smart Insider tracks US Equities share buyback programs. The data covers 3,000 US Equities, starts in May 2015, and is delivered on a second frequency. This dataset is created by analyzing daily buyback announcements and by using secondary data sources to ensure records are accurate and complete.</p>\n\n<p>This dataset depends on the <a href=\"https://www.quantconnect.com/datasets/quantconnect-us-equity-security-master\">US Equity Security Master</a> dataset because the US Equity Security Master dataset contains information on splits, dividends, and symbol changes.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p><a href=\"https://www.smartinsider.com/\">Smart Insider</a> was founded by Michael Tindale in 2016 with the goal of forming the most progressive insider data vendor in the field. Smart Insider provides access to buyback intention and transactions for quantitative researchers. In addition to their Corporate Buybacks dataset, Smart Insider provides data on stock trades made by US politicians and thousands of high net worth individuals around the globe.</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.Data.Custom.SmartInsider import *\n\nself.aapl = self.AddEquity(\"AAPL\", Resolution.Minute).Symbol\n\nself.smart_insider_intention = self.AddData(SmartInsiderIntention, self.aapl).Symbol\nself.smart_insider_transaction = self.AddData(SmartInsiderTransaction, self.aapl).Symbol\n\nself.AddUniverse(SmartInsiderIntentionUniverse, \"SmartInsiderIntentionUniverse\", Resolution.Daily, self.IntentionSelection)\nself.AddUniverse(SmartInsiderTransactionUniverse, \"SmartInsiderTransactionUniverse\", Resolution.Daily, self.TransactionSelection)</code></pre>\n<pre><code class=\"language-cs\">using QuantConnect.Data.Custom.SmartInsider;\n\n_aapl = AddEquity(\"AAPL\", Resolution.Minute).Symbol;\n\n_smartInsiderIntention = AddData&lt;SmartInsiderIntention&gt;(_aapl).Symbol;\n_smartInsiderTransaction = AddData&lt;SmartInsiderTransaction&gt;(_aapl).Symbol;\n\nAddUniverse&lt;SmartInsiderIntentionUniverse&gt;(\"SmartInsiderIntentionUniverse\", Resolution.Daily, IntentionSelection);\nAddUniverse&lt;SmartInsiderTransactionUniverse&gt;(\"SmartInsiderTransactionUniverse\", Resolution.Daily, TransactionSelection);\n</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>May 2015</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>3,000 US Equities</td>\n        </tr><tr><td>Data Density</td>\n            <td>Sparse</td>\n        </tr><tr><td>Resolution</td>\n            <td>Second</td>\n        </tr><tr><td>Timezone</td>\n            <td>New York</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>Smart Insider Corporate Buybacks enables researchers to design strategies using information on company buyback programs. Examples include:</p>\n<ul><li>Buying securities when the company announces an upcoming share buyback on the premise that the reduction in supply (shares outstanding) will drive up the remaining shares price</li>\n<li>Buying securities when the company executes an upcoming share buyback on the premise that the reduction in supply (shares outstanding) will drive up the remaining shares price</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_0bfe9b62221a1296f74feae5cf64d0c8.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Corporate Buybacks dataset provides SmartInsiderIntention, SmartInsiderIntentionUniverse, SmartInsiderTransaction, and SmartInsiderTransactionUniverse objects.</p>\n\n<h4>SmartInsiderIntention Attributes</h4>\n<p>SmartInsiderIntention objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.SmartInsiderIntention\"></div>\n\n<h4>SmartInsiderIntentionUniverse Attributes</h4>\n<p>SmartInsiderIntentionUniverse objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.SmartInsiderIntentionUniverse\"></div>\n\n<h4>SmartInsiderTransaction Attributes</h4>\n<p>SmartInsiderTransaction objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.SmartInsiderTransaction\"></div>\n\n<h4>SmartInsiderTransactionUniverse Attributes</h4>\n<p>SmartInsiderTransactionUniverse objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.SmartInsiderTransactionUniverse\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add Corporate Buybacks data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.Data.Custom.SmartInsider import *\n\nclass CorporateBuybacksDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2016, 1, 1)\n        self.SetEndDate(2021, 1, 1)\n        self.SetCash(100000)\n \n        self.aapl = self.AddEquity(\"AAPL\", Resolution.Minute).Symbol\n        self.smart_insider_intention = self.AddData(SmartInsiderIntention, self.aapl).Symbol\n        self.smart_insider_transaction = self.AddData(SmartInsiderTransaction, self.aapl).Symbol</code></pre>\n<pre><code class=\"language-cs\">using QuantConnect.Data.Custom.SmartInsider;\n\nnamespace QuantConnect.Algorithm.CSharp.AltData\n{\n    public class CorporateBuybacksDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _aapl;\n        private Symbol _smartInsiderIntention;\n        private Symbol _smartInsiderTransaction;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2016, 1, 1);\n            SetEndDate(2021, 1, 1);\n            SetCash(100000);\n\n            _aapl = AddEquity(\"AAPL\", Resolution.Minute).Symbol;\n            _smartInsiderIntention = AddData&lt;SmartInsiderIntention&gt;(_aapl).Symbol;\n            _smartInsiderTransaction = AddData&lt;SmartInsiderTransaction&gt;(_aapl).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    if data.ContainsKey(self.smart_insider_intention):\n        intention = data[self.smart_insider_intention]\n        self.Log(f\"Intention to buyback for company {intention.CompanyName}\")\n        \n    if data.ContainsKey(self.smart_insider_transaction):\n        intention = data[self.smart_insider_transaction]\n        self.Log(f\"Buyback transaction took place for company {intention.CompanyName}\")</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    if (data.ContainsKey(_smartInsiderIntention))\n    {\n        var intention = data[_smartInsiderIntention];\n        Log($\"Intention to buyback for company {intention.CompanyName}\");\n    }\n    \n    if (data.ContainsKey(_smartInsiderTransaction))\n    {\n        var transaction = data[_smartInsiderTransaction];\n        Log($\"Buyback transaction took place for company {transaction.CompanyName}\");\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for Corporate Buybacks by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">intention_history = self.History(self.smart_insider_intention, 365, Resolution.Daily)\ntransaction_history = self.History(self.smart_insider_transaction, 365, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var intentionHistory = History&lt;SmartInsiderIntention&gt;(_smartInsiderIntention, 365, Resolution.Daily);\nvar transactionHistory = History&lt;SmartInsiderTransaction&gt;(_smartInsiderTransaction, 365, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Universe Selection",
        "content": "<p>You can filter and select US Equities based on SmartInsider Corporate Buyback data by AddUniverse&lt;SmartInsiderIntentionUniverse&gt; and/or AddUniverse&lt;SmartInsiderTransactionUniverse&gt;.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\ndef Initialize(self):\n    self.AddUniverse(SmartInsiderIntentionUniverse, \"SmartInsiderIntentionUniverse\", Resolution.Daily, self.IntentionSelection)\n    self.AddUniverse(SmartInsiderTransactionUniverse, \"SmartInsiderTransactionUniverse\", Resolution.Daily, self.TransactionSelection)\n\ndef IntentionSelection(self, alt_coarse):\n    for datum in alt_coarse:\n        self.Log(f\"{datum.Symbol},{datum.Amount},{datum.AmountValue},{datum.Percentage},{datum.MinimumPrice},{datum.MaximumPrice},{datum.USDMarketCap}\")\n\n    # define our selection criteria\n    return [d.Symbol for d in alt_coarse \\\n                if d.Percentage &gt; 0.005 \\\n                and d.USDMarketCap &gt; 100000000]\n\ndef TransactionSelection(self, alt_coarse):\n    for datum in alt_coarse:\n        self.Log(f\"{datum.Symbol},{datum.Amount},{datum.MinimumExecutionPrice},{datum.MaximumExecutionPrice},{datum.USDValue},{datum.BuybackPercentage},{datum.VolumePercentage},{datum.USDMarketCap}\")\n\n    # define our selection criteria\n    return [d.Symbol for d in alt_coarse \\\n                if d.BuybackPercentage &gt; 0.005 \\\n                and d.USDMarketCap &gt; 100000000]\n</code></pre>\n<pre><code class=\"language-cs\">\npublic override void Initialize()\n{\n    AddUniverse(\"SmartInsiderIntentionUniverse\", Resolution.Daily, IntentionSelection);\n    AddUniverse(\"SmartInsiderTransactionUniverse\", Resolution.Daily, TransactionSelection);\n}\n\nprivate IEnumerable&lt;Symbol&gt; IntentionSelection(IEnumerable&lt;SmartInsiderIntentionUniverse&gt; altCoarse)\n{\n    foreach (var datum in altCoarse)\n    {\n        Log($\"{datum.Symbol},{datum.Amount},{datum.AmountValue},{datum.Percentage},{datum.MinimumPrice},{datum.MaximumPrice},{datum.USDMarketCap}\");\n    }\n\n    // define our selection criteria\n    return from d in altCoarse \n        where d.Percentage &gt; 0.005m &amp;&amp; d.USDMarketCap &gt; 100000000m\n        select d.Symbol;\n}\n\nprivate IEnumerable&lt;Symbol&gt; TransactionSelection(IEnumerable&lt;SmartInsiderTransactionUniverse&gt; altCoarse)\n{\n    foreach (var datum in altCoarse)\n    {\n        Log($\"{datum.Symbol},{datum.Amount},{datum.MinimumExecutionPrice},{datum.MaximumExecutionPrice},{datum.USDValue},{datum.BuybackPercentage},{datum.VolumePercentage},{datum.USDMarketCap}\");\n    }\n\n    // define our selection criteria\n    return from d in altCoarse \n        where d.BuybackPercentage &gt; 0.005m &amp;&amp; d.USDMarketCap &gt; 100000000m\n        select d.Symbol;\n}\n</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Corporate Buybacks dataset provides SmartInsiderIntention, SmartInsiderIntentionUniverse, SmartInsiderTransaction, and SmartInsiderTransactionUniverse objects.</p>\n\n<h4>SmartInsiderIntention Attributes</h4>\n<p>SmartInsiderIntention objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.SmartInsiderIntention\"></div>\n\n<h4>SmartInsiderIntentionUniverse Attributes</h4>\n<p>SmartInsiderIntentionUniverse objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.SmartInsiderIntentionUniverse\"></div>\n\n<h4>SmartInsiderTransaction Attributes</h4>\n<p>SmartInsiderTransaction objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.SmartInsiderTransaction\"></div>\n\n<h4>SmartInsiderTransactionUniverse Attributes</h4>\n<p>SmartInsiderTransactionUniverse objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.SmartInsiderTransactionUniverse\"></div>"
      }
    ],
    "priceCTA": "From $20/User/mo",
    "vendorWebsite": "https://www.smartinsider.com",
    "examples": [
      {
        "id": 281,
        "master_product_id": 22,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we buy Apple when every buyback intention or transaction is received and sell 3 days later.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass CorporateBuybacksDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2016, 1, 1)\n        self.SetEndDate(2021, 1, 1)\n        self.SetCash(100000)\n \n        self.aapl = self.AddEquity(\"AAPL\", Resolution.Minute).Symbol\n        \n        # Requesting data\n        self.smart_insider_intention = self.AddData(SmartInsiderIntention, self.aapl).Symbol\n        self.smart_insider_transaction = self.AddData(SmartInsiderTransaction, self.aapl).Symbol\n        \n        # Historical data\n        history = self.History(self.smart_insider_intention, 365, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request for intentions\")\n        \n        history = self.History(self.smart_insider_transaction, 365, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request for transactions\")\n\n    def OnData(self, data):\n        # Buy Apple whenever we receive a buyback intention or transaction notification\n        if data.ContainsKey(self.smart_insider_intention) or data.ContainsKey(self.smart_insider_transaction):\n            self.SetHoldings(self.aapl, 1)\n            self.entry_time = self.Time\n        \n        # Liquidate holdings 3 days after the latest entry\n        if self.Portfolio.Invested and self.Time &gt;= self.entry_time + timedelta(days=3):\n            self.Liquidate()</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect.Algorithm.CSharp.AltData\n{\n    public class CorporateBuybacksDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _aapl;\n        private Symbol _smartInsiderIntention;\n        private Symbol _smartInsiderTransaction;\n        private DateTime _entryTime;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2016, 1, 1);\n            SetEndDate(2021, 1, 1);\n            SetCash(100000);\n            \n            _aapl = AddEquity(\"AAPL\", Resolution.Minute).Symbol;\n            \n            // Requesting data\n            _smartInsiderIntention = AddData&lt;SmartInsiderIntention&gt;(_aapl).Symbol;\n            _smartInsiderTransaction = AddData&lt;SmartInsiderTransaction&gt;(_aapl).Symbol;\n            \n            // Historical data\n            var intentionHistory = History&lt;SmartInsiderIntention&gt;(_smartInsiderIntention, 365, Resolution.Daily);\n            Debug($\"We got {intentionHistory.Count()} items from our history request for intentions\");\n            \n            var transactionHistory = History&lt;SmartInsiderTransaction&gt;(_smartInsiderTransaction, 365, Resolution.Daily);\n            Debug($\"We got {transactionHistory.Count()} items from our history request for transactions\");\n        }\n\n        public override void OnData(Slice data)\n        {\n            // Buy Apple whenever we receive a buyback intention or transaction notification\n            if (data.ContainsKey(_smartInsiderIntention) || data.ContainsKey(_smartInsiderTransaction))\n            {\n                SetHoldings(_aapl, 1);\n                _entryTime = Time;\n            }\n \n            // Liquidate holdings 3 days after the latest entry\n            if (Portfolio.Invested &amp;&amp; Time &gt;= _entryTime + TimeSpan.FromDays(3))\n            {\n                Liquidate();\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-09-27 15:33:47"
      },
      {
        "id": 283,
        "master_product_id": 22,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this example, we buy Apple when every buyback intention or transaction is received and sell 3 days later.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass CorporateBuybacksDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2016, 1, 1)\n        self.SetEndDate(2021, 1, 1)\n        self.SetCash(100000)\n \n        self.aapl = self.AddEquity(\"AAPL\", Resolution.Minute).Symbol\n        \n        self.AddAlpha(CorporateBuybacksAlphaModel())\n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n\n\nclass CorporateBuybacksAlphaModel(AlphaModel):\n    \n    def Update(self, algorithm, data):\n        # Buy Apple for 3 days whenever we receive a buyback intention or transaction notification\n        if data.ContainsKey(self.smart_insider_intention) or data.ContainsKey(self.smart_insider_transaction):\n            return [Insight.Price(self.aapl, timedelta(days=3), InsightDirection.Up)]\n        return []\n        \n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            self.aapl = security.Symbol\n            \n            # Requesting data\n            self.smart_insider_intention = algorithm.AddData(SmartInsiderIntention, self.aapl).Symbol\n            self.smart_insider_transaction = algorithm.AddData(SmartInsiderTransaction, self.aapl).Symbol\n            \n            # Historical data\n            history = algorithm.History(self.smart_insider_intention, 365, Resolution.Daily)\n            algorithm.Debug(f\"We got {len(history)} items from our history request for intentions\")\n            \n            history = algorithm.History(self.smart_insider_transaction, 365, Resolution.Daily)\n            algorithm.Debug(f\"We got {len(history)} items from our history request for transactions\")</code></pre>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing QuantConnect.Algorithm.Framework.Alphas;\nusing QuantConnect.Algorithm.Framework.Portfolio;\nusing QuantConnect.Data;\nusing QuantConnect.Data.UniverseSelection;\n\nnamespace QuantConnect.Algorithm.CSharp.AltData\n{\n    public class CorporateBuybacksDataAlgorithm : QCAlgorithm\n    {\n\n        public override void Initialize()\n        {\n            SetStartDate(2016, 1, 1);\n            SetEndDate(2021, 1, 1);\n            SetCash(100000);\n            \n            var aapl = AddEquity(\"AAPL\", Resolution.Minute).Symbol;\n            \n            AddAlpha(new CorporateBuybacksAlphaModel());\n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n        }\n\n        public class CorporateBuybacksAlphaModel : AlphaModel\n        {\n            private Symbol _aapl;\n            private Symbol _smartInsiderIntention;\n            private Symbol _smartInsiderTransaction;\n    \n            public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n            {\n                var insights = new List&lt;Insight&gt;();\n                \n                // Buy Apple whenever we receive a buyback intention or transaction notification\n                if (data.ContainsKey(_smartInsiderIntention) || data.ContainsKey(_smartInsiderTransaction))\n                {\n                    insights.Add(Insight.Price(_aapl, TimeSpan.FromDays(3),  InsightDirection.Up));\n                } \n                return insights;\n            }\n    \n            public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n            {\n                foreach (var security in changes.AddedSecurities)\n                {\n                    _aapl = security.Symbol;\n                    \n                    // Requesting data\n                    _smartInsiderIntention = algorithm.AddData&lt;SmartInsiderIntention&gt;(_aapl).Symbol;\n                    _smartInsiderTransaction = algorithm.AddData&lt;SmartInsiderTransaction&gt;(_aapl).Symbol;\n                    \n                    // Historical data\n                    var intentionHistory = algorithm.History&lt;SmartInsiderIntention&gt;(_smartInsiderIntention, 365, Resolution.Daily);\n                    algorithm.Debug($\"We got {intentionHistory.Count()} items from our history request for intentions\");\n                    \n                    var transactionHistory = algorithm.History&lt;SmartInsiderTransaction&gt;(_smartInsiderTransaction, 365, Resolution.Daily);\n                    algorithm.Debug($\"We got {transactionHistory.Count()} items from our history request for transactions\");\n                }\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-09-27 15:37:58"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 22,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>Corporate Buybacks is allowed to be used in the cloud \r\n            for personal and commercial projects with a subscription. The data is permissioned for use within \r\n            the licensed organization only</p><p>Subscription Required | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div>  \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>Corporate Buybacks is allowed to be used for free by approved Alpha Stream authors with more than 3 \r\n                    Alpha Streams listed in the marketplace. The Smart Insider will add on a charge of 2 Basis Points \r\n                    for the use of the data to the Alpha Stream reserve price.</p>\r\n                    <p>Free for Authors with 3+ Alphas | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 70,
        "name": "Smart Insider Buybacks - Intentions Cloud Access",
        "description": "<p>Harness Corporate Buybacks Intentions data in the QuantConnect Cloud for your backtesting and live trading purposes.\n </p>\n    <ul><li>Curated, clean data</li>\n         <li>Updated nightly at 4am</li>\n         <li>Mapped to US Equity data with full historical SIP feed</li>\n   </ul>",
        "shortDescription": "Intentions Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "$10/mo",
          "monthlyPrice": 10,
          "yearlyPrice": 120,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 120
      },
      {
        "id": 75,
        "name": "Smart Insider Buybacks - Transactions Cloud Access",
        "description": "<p>Harness Corporate Buybacks Transactions data in the QuantConnect Cloud for your backtesting and live trading purposes.\n </p>\n    <ul><li>Curated, clean data</li>\n         <li>Updated nightly at 4am</li>\n         <li>Mapped to US Equity data with full historical SIP feed</li>\n   </ul>",
        "shortDescription": "Transactions Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "$10/mo",
          "monthlyPrice": 10,
          "yearlyPrice": 120,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 120
      }
    ],
    "headerColor": "ff1841"
  },
  {
    "name": "Tiingo News Feed",
    "vendorName": "Tiingo",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/tiingo.svg",
    "landingFileName": "tiingo-news-feed.html",
    "url": "/datasets/tiingo-news-feed",
    "short_description": "News releases for 8,000 US Equities from over 120 different news providers. Data is received at a second resolution and ready to be parsed for sentiment.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The Tiingo News Feed dataset by Tiingo tracks US Equity news releases. The data covers 8,000 US Equities, starts in January 2014, and is delivered on a second frequency. This dataset is creating by Tiingo integrating over 120 different news providers into their platform.</p>\n\n<p>This dataset depends on the <a href=\"https://www.quantconnect.com/datasets/quantconnect-us-equity-security-master\">US Equity Security Master</a> dataset because the US Equity Security Master dataset contains information on splits, dividends, and symbol changes.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p><a href=\"https://www.tiingo.com/\">Tiingo</a> was founded by Rishi Singh in 2014. Tiingo goes beyond traditional news sources and focuses on finding rich, quality content written by knowledgeable writers. Their proprietary algorithms scan unstructured, non-traditional news and other information sources while tagging companies, topics, and assets. This refined system is backed by over ten years of research and development, and is written by former institutional quant traders. Because of this dedicated approach, Tiingo's News API is a trusted tool used by quant funds, hedge funds, pension funds, social media companies, and tech companies around the world.</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nself.aapl = self.AddEquity(\"AAPL\", Resolution.Minute).Symbol\nself.tiingo_symbol = self.AddData(TiingoNews, self.aapl).Symbol</code></pre>\n<pre><code class=\"language-cs\">\n_aapl = AddEquity(\"AAPL\", Resolution.Minute).Symbol;\n_tiingoSymbol = AddData&lt;TiingoNews&gt;(_aapl).Symbol;</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 2014</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>28,000 US Equities</td>\n        </tr><tr><td>Data Density</td>\n            <td>Sparse</td>\n        </tr><tr><td>Resolution</td>\n            <td>Second</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>The Tiingo News Feed enables researchers to accurately design strategies harnessing news articles on the companies they're trading. Examples include: \n</p>\n<ul><li>Creating a dictionary of sentiment scores for various words and assigning a sentiment score to the content of each news release</li>\n<li>Calculating the sentiment of news releases with Natural Language Processing (NLP)</li>\n<li>Trading securities when their news releases are tagged by Tiingo with current buzzwords</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_1b0b4917d793b7662a40ffa8fe43fb83.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Tiingo News Feed dataset provides TiingoNews objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.TiingoNews\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add Tiingo News Feed data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.DataSource import *\nclass TiingoNewsDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        self.aapl = self.AddEquity(\"AAPL\", Resolution.Minute).Symbol\n        self.tiingo_symbol = self.AddData(TiingoNews, self.aapl).Symbol</code></pre>\n<pre><code class=\"language-cs\">using QuantConnect.DataSource;\nnamespace QuantConnect.Algorithm.CSharp.AltData\n{\n    public class TiingoNewsDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _aapl;\n        private Symbol _tiingoSymbol;\n\n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n\n            _aapl = AddEquity(\"AAPL\", Resolution.Minute).Symbol;\n            _tiingoSymbol = AddData&lt;TiingoNews&gt;(_aapl).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in second resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    if data.ContainsKey(self.tiingo_symbol):\n        description = data[self.tiingo_symbol].Description\n        self.Log(f\"Received Tiingo News article at {self.Time} with description {description}\")\n</code></pre>\n<pre><code class=\"language-cs\">\npublic override void OnData(Slice data)\n{\n    if (data.ContainsKey(_tiingoSymbol)\n    {\n        var description = data[_tiingoSymbol].Description;\n        Log($\"Received Tiingo News article at {Time} with description {description}\");\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for Tiingo News by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.tiingo_symbol, 14, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History&lt;TiingoNews&gt;(_tiingoSymbol, 14, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Tiingo News Feed dataset provides TiingoNews objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.TiingoNews\"></div>"
      }
    ],
    "priceCTA": "From $10/User/mo",
    "vendorWebsite": "https://www.tiingo.com/",
    "examples": [
      {
        "id": 313,
        "master_product_id": 24,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example",
        "content": "<p>In this example, we assign a sentiment score to each news article that's released for Apple. When the sentiment score is positive, we buy. When the sentiment score is negative, we short sell.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class TiingoNewsDataAlgorithm(QCAlgorithm):\n\n    current_holdings = 0\n    target_holdings = 0\n    word_scores = {'good': 1, 'great': 1, 'best': 1, 'growth': 1,\n                   'bad': -1, 'terrible': -1, 'worst': -1, 'loss': -1}\n\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n        \n        # Requesting data\n        self.aapl = self.AddEquity(\"AAPL\", Resolution.Minute).Symbol\n        self.tiingo_symbol = self.AddData(TiingoNews, self.aapl).Symbol\n        \n        # Historical data\n        history = self.History(self.tiingo_symbol, 14, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request\")\n        \n        \n    def OnData(self, data):\n        if data.ContainsKey(self.tiingo_symbol):\n            # Assign a sentiment score to the news article\n            title_words = data[self.tiingo_symbol].Description.lower()\n            score = 0\n            for word, word_score in self.word_scores.items():\n                if word in title_words:\n                    score += word_score\n                    \n            if score &gt; 0:\n                self.target_holdings = 1\n                \n            elif score &lt; 0:\n                self.target_holdings = -1\n        \n        # Buy or short sell if the sentiment has changed from our current holdings\n        if data.ContainsKey(self.aapl) and self.current_holdings != self.target_holdings:\n            self.SetHoldings(self.aapl, self.target_holdings)\n            self.current_holdings = self.target_holdings</code></pre>\n<pre><code class=\"language-cs\">using System.Linq;\nusing QuantConnect.Data;\n\nnamespace QuantConnect.Algorithm.CSharp.AltData\n{\n    public class TiingoNewsDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _aapl;\n        private Symbol _tiingoSymbol;\n        private int _currentHoldings = 0;\n        private int _targetHoldings = 0;\n        private Dictionary&lt;string, int&gt; _wordScores = new Dictionary&lt;string, int&gt;(){\n            {\"good\", 1}, {\"great\", 1}, {\"best\", 1}, {\"growth\", 1},\n            {\"bad\", -1}, {\"terrible\", -1}, {\"worst\", -1}, {\"loss\", -1}\n        };\n        \n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            \n            // Requesting data\n            _aapl = AddEquity(\"AAPL\", Resolution.Minute).Symbol;\n            _tiingoSymbol = AddData&lt;TiingoNews&gt;(_aapl).Symbol;\n            \n            // Historical data\n            var history = History&lt;TiingoNews&gt;(_tiingoSymbol, 14, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request\");\n        }\n        \n        public override void OnData(Slice data)\n        {\n            if (data.ContainsKey(_tiingoSymbol))\n            {\n                // Assign a sentiment score to the news article\n                var titleWords = data[_tiingoSymbol].Description.ToLower();\n                var score = 0;\n                foreach (KeyValuePair&lt;string, int&gt; entry in _wordScores)\n                {\n                    if (titleWords.Contains(entry.Key))\n                    {\n                        score += entry.Value;\n                    }\n                }\n                \n                if (score &gt; 0)\n                {\n                    _targetHoldings = 1;\n                } else if (score &lt; 0)\n                {\n                    _targetHoldings = -1;\n                }\n            }\n            \n            // Buy or short sell if the sentiment has changed from our current holdings\n            if (data.ContainsKey(_aapl) &amp;&amp; _currentHoldings != _targetHoldings)\n            {\n                SetHoldings(_aapl, _targetHoldings);\n                _currentHoldings = _targetHoldings;\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-01-20 16:29:06"
      },
      {
        "id": 315,
        "master_product_id": 24,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example",
        "content": "<p>In this example, we assign a sentiment score to each news article that's released for Apple. When the sentiment score is positive, we buy. When the sentiment score is negative, we short sell. Positions are held for 14 days.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class TiingoNewsDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n        \n        self.aapl = self.AddEquity(\"AAPL\", Resolution.Minute).Symbol\n\n        self.AddAlpha(TiingoNewsAlphaModel())\n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n\n \nclass TiingoNewsAlphaModel(AlphaModel):\n    \n    current_holdings = 0\n    target_holdings = 0\n    word_scores = {'good': 1, 'great': 1, 'best': 1, 'growth': 1,\n                   'bad': -1, 'terrible': -1, 'worst': -1, 'loss': -1}\n    \n    def Update(self, algorithm, data):\n        if data.ContainsKey(self.tiingo_symbol):\n            \n            title_words = data[self.tiingo_symbol].Description.lower()\n            \n            score = 0\n            for word, word_score in self.word_scores.items():\n                if word in title_words:\n                    score += word_score\n                    \n            if score &gt; 0:\n                self.target_holdings = 1\n                \n            elif score &lt; 0:\n                self.target_holdings = -1\n        \n        # Buy or short sell if the sentiment has changed from our current holdings\n        if data.ContainsKey(self.aapl) and self.current_holdings != self.target_holdings:\n            self.current_holdings = self.target_holdings\n            direction = InsightDirection.Up if self.target_holdings == 1 else InsightDirection.Down\n            return [Insight.Price(self.aapl, timedelta(days=14), direction)]\n            \n        return []\n        \n        \n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            self.aapl = security.Symbol\n            \n            # Requesting data\n            self.tiingo_symbol = algorithm.AddData(TiingoNews, self.aapl).Symbol\n                \n            # Historical data\n            history = algorithm.History(self.tiingo_symbol, 14, Resolution.Daily)\n            algorithm.Debug(f\"We got {len(history)} items from our history request\")</code></pre>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing QuantConnect.Algorithm.Framework.Alphas;\nusing QuantConnect.Algorithm.Framework.Portfolio;\nusing QuantConnect.Data;\nusing QuantConnect.Data.UniverseSelection;\n\nnamespace QuantConnect.Algorithm.CSharp.AltData\n{\n    public class TiingoNewsDataAlgorithm : QCAlgorithm\n    {\n\n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            \n            var aapl = AddEquity(\"AAPL\", Resolution.Minute).Symbol;\n            \n            AddAlpha(new TiingoNewsAlphaModel());\n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n        }\n        \n        public class TiingoNewsAlphaModel : AlphaModel\n        {\n            private Symbol _aapl;\n            private Symbol _tiingoSymbol;\n            private int _currentHoldings = 0;\n            private int _targetHoldings = 0;\n            private Dictionary&lt;string, int&gt; _wordScores = new Dictionary&lt;string, int&gt;(){\n                {\"good\", 1}, {\"great\", 1}, {\"best\", 1}, {\"growth\", 1},\n                {\"bad\", -1}, {\"terrible\", -1}, {\"worst\", -1}, {\"loss\", -1}\n            };\n    \n            public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n            {\n                var insights = new List&lt;Insight&gt;();\n                \n                if (data.ContainsKey(_tiingoSymbol))\n                {\n                    // Assign a sentiment score to the news article\n                    var titleWords = data[_tiingoSymbol].Description.ToLower();\n                    var score = 0;\n                    foreach (KeyValuePair&lt;string, int&gt; entry in _wordScores)\n                    {\n                        if (titleWords.Contains(entry.Key))\n                        {\n                            score += entry.Value;\n                        }\n                    }\n                    \n                    if (score &gt; 0)\n                    {\n                        _targetHoldings = 1;\n                    } else if (score &lt; 0)\n                    {\n                        _targetHoldings = -1;\n                    }\n                }\n                \n                // Buy or short sell if the sentiment has changed from our current holdings\n                if (data.ContainsKey(_aapl) &amp;&amp; _currentHoldings != _targetHoldings)\n                {\n                    _currentHoldings = _targetHoldings;\n                    var direction = _targetHoldings == 1 ? InsightDirection.Up : InsightDirection.Down;\n                    insights.Add(Insight.Price(_aapl, TimeSpan.FromDays(14), direction));\n                }\n                \n                return insights;\n            }\n    \n            public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n            {\n                foreach (var security in changes.AddedSecurities)\n                {\n                    _aapl = security.Symbol;\n                    \n                    // Requesting data\n                    _tiingoSymbol = algorithm.AddData&lt;TiingoNews&gt;(_aapl).Symbol;\n            \n                    // Historical data\n                    var history = algorithm.History&lt;TiingoNews&gt;(_tiingoSymbol, 14, Resolution.Daily);\n                    algorithm.Debug($\"We got {history.Count()} items from our history request\");\n                }\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-01-20 16:29:34"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 24,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>Tiingo News Feed is allowed to be used in the cloud \r\n            for personal and commercial projects with a subscription. The data is permissioned for use within \r\n            the licensed organization only</p><p>Subscription Required | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>Tiingo News Feed can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 25 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>Tiingo News Feed is allowed to be used for free by approved Alpha Stream authors with more than 3 \r\n                    Alpha Streams listed in the marketplace. The Tiingo will add on a charge of 2 Basis Points \r\n                    for the use of the data to the Alpha Stream reserve price.</p>\r\n                    <p>Free for Authors with 3+ Alphas | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 73,
        "name": "Tiingo - On Premise Download",
        "description": "<p>Tiingo News Feed archived in LEAN format for on premise backtesting and research. One file per ticker.</p>\n    <ul><li>Ownership of the data for internal use\n</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "On Premise Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "25 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 72,
        "name": "Tiingo - Cloud Access",
        "description": "<p>Harness Tiingo News Feed data in the QuantConnect Cloud for your backtesting and live trading purposes.\n </p>\n    <ul><li>Curated, clean data</li>\n         <li>Updated nightly at 4am</li>\n         <li>Mapped to US Equity SIP feed</li>\n   </ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "$10/mo",
          "monthlyPrice": 10,
          "yearlyPrice": 120,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 120
      }
    ],
    "headerColor": "04a3db"
  },
  {
    "name": "FOREX Data ",
    "vendorName": "OANDA",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/oanda-logo.svg",
    "landingFileName": "oanda-forex.html",
    "url": "/datasets/oanda-forex",
    "short_description": "Foreign Exchange Market (Forex) quote data from OANDA and hosted on the QuantConnect Cloud. The data covers 185 Forex pairs contracts with daily down to tick resolution.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The FOREX Data by OANDA serves 185 <a href=\"https://www.investopedia.com/terms/f/forex.asp\">foreign exchange</a> (FOREX) pairs, starts on various dates from January 2007, and is delivered on any frequency from tick to daily. This dataset is created by QuantConnect processing raw tick data from OANDA.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\n<a href=\"https://www.oanda.com\">OANDA</a> was co-founded by Dr. Stumm, a computer scientist and Dr. Olsen, an economist, in 1997. The company was born out of the belief that the Internet and technology would open up the markets for both currency data and trading. OANDA uses innovative computer and financial technology to provide Internet-based forex trading and currency information services to everyone, from individuals to large corporations, from portfolio managers to financial institutions. OANDA is a market maker and a trusted source for currency data. It has access to one of the world's largest historical, high-frequency, filtered currency databases.\n</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\neurusd = self.AddForex(\"EURUSD\", Resolution.Daily, Market.Oanda).Symbol\n</code></pre>\n<pre><code class=\"language-cs\">\nvar eurusd = AddForex(\"EURUSD\", Resolution.Daily, Market.Oanda).Symbol;\n</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 2007</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>71 Currency pairs</td>\n        </tr><tr><td>Data Density</td>\n            <td>Dense</td>\n        </tr><tr><td>Resolution</td>\n            <td>Tick, Second, Minute, Hour, &amp; Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Supported Assets",
        "content": "<p>The following table shows the available Forex pairs:</p>\n\n<div>\n<table class=\"table qc-table table-reflow ticker-table hidden-xs\"><thead><tr><th colspan=\"6\">Forex Pairs</th></tr></thead><tbody><tr><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/AUDCAD\">AUDCAD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/AUDCHF\">AUDCHF</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/AUDHKD\">AUDHKD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/AUDJPY\">AUDJPY</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/AUDNZD\">AUDNZD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/AUDSGD\">AUDSGD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/AUDUSD\">AUDUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/CADCHF\">CADCHF</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/CADHKD\">CADHKD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/CADJPY\">CADJPY</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/CADSGD\">CADSGD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/CHFHKD\">CHFHKD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/CHFJPY\">CHFJPY</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/CHFZAR\">CHFZAR</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/EURAUD\">EURAUD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/EURCAD\">EURCAD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/EURCHF\">EURCHF</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/EURCZK\">EURCZK</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/EURDKK\">EURDKK</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/EURGBP\">EURGBP</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/EURHKD\">EURHKD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/EURHUF\">EURHUF</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/EURJPY\">EURJPY</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/EURNOK\">EURNOK</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/EURNZD\">EURNZD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/EURPLN\">EURPLN</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/EURSEK\">EURSEK</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/EURSGD\">EURSGD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/EURTRY\">EURTRY</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/EURUSD\">EURUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/EURZAR\">EURZAR</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/GBPAUD\">GBPAUD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/GBPCAD\">GBPCAD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/GBPCHF\">GBPCHF</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/GBPHKD\">GBPHKD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/GBPJPY\">GBPJPY</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/GBPNZD\">GBPNZD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/GBPPLN\">GBPPLN</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/GBPSGD\">GBPSGD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/GBPUSD\">GBPUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/GBPZAR\">GBPZAR</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/HKDJPY\">HKDJPY</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/NZDCAD\">NZDCAD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/NZDCHF\">NZDCHF</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/NZDHKD\">NZDHKD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/NZDJPY\">NZDJPY</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/NZDSGD\">NZDSGD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/NZDUSD\">NZDUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/SGDCHF\">SGDCHF</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/SGDHKD\">SGDHKD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/SGDJPY\">SGDJPY</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/TRYJPY\">TRYJPY</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/USDCAD\">USDCAD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/USDCHF\">USDCHF</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/USDCNH\">USDCNH</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/USDCZK\">USDCZK</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/USDDKK\">USDDKK</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/USDHKD\">USDHKD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/USDHUF\">USDHUF</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/USDINR\">USDINR</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/USDJPY\">USDJPY</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/USDMXN\">USDMXN</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/USDNOK\">USDNOK</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/USDPLN\">USDPLN</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/USDSAR\">USDSAR</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/USDSEK\">USDSEK</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/USDSGD\">USDSGD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/USDTHB\">USDTHB</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/USDTRY\">USDTRY</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/USDZAR\">USDZAR</a></td><td><a href=\"https://www.quantconnect.com/data/tree/forex/oanda/minute/ZARJPY\">ZARJPY</a></td></tr></tbody></table></div>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe FOREX price data gives researchers an asset class that tracks the global markets. Examples include: \n</p>\n<ul><li>Explore the daily worldwide news cycles with FOREX that tracks international currencies;</li>\n<li>Carry Trade: borrowing from a lower interest currency pair to fund the purchase of a currency pair with a higher interest rate;</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_9181f730b003213a234d9b60d8131b3f.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The FOREX dataset provides QuoteBar and Tick objects.</p>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>Tick Attributes</h4>\n<p>Tick objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add FOREX price data to your algorithm, use the AddForex() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on requesting market data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass ForexAlgorithm (QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 2, 20)\n        self.SetEndDate(2019, 2, 21)\n        self.SetCash(100000)\n\n        self.symbol = self.AddForex('EURUSD', Resolution.Minute, Market.Oanda).Symbol\n\n        self.SetBenchmark(self.symbol)\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect.Algorithm.CSharp\n{\n    public class ForexAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 2, 20);\n            SetEndDate(2019, 2, 21);\n            SetCash(100000);\n\n            _symbol = AddForex(\"EURUSD\", Resolution.Minute, Market.Oanda).Symbol;\n\n            SetBenchmark(_symbol);\n        }\n    }\n}\n</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Quote data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Quote data is available in daily down to tick resolution.  You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass ForexAlgorithm(QCAlgorithm):\n    def OnData(self, data):\n        # The marketData object can be a QuoteBar or a List of Tick\n        marketData = data[self.symbol]\n\n        # If it's QuoteBar:\n        self.Log(f'Symbol: {self.symbol} - Data: {marketData}')\n\n        # If it's Tick data:\n        for tick in marketData:\n            self.Log(f\"Time: {tick.EndTime}; Symbol: {self.symbol}; Tick: {tick}\")\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect.Algorithm.CSharp\n{\n    public class ForexAlgorithm : QCAlgorithm\n    {\n        public override void OnData(Slice data)\n        {\n            // The marketData object can be a QuoteBar or a List of Tick\n            var marketData = data[_symbol];\n\n            // If it's QuoteBar:\n            Log($\"Symbol: {_symbol} - Data: {marketData}\");\n\n            // If it's Tick data:\n            foreach (var tick in marketData)\n            {\n                 Log($\"Time: {tick.EndTime}; Symbol: {_symbol} Tick: {tick}\");\n            }\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical quote data in your algorithm using the FOREX price data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no FOREX price data in the period you request, the history result will be empty. The following example gets the historical data for FOREX price data by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nhistory = self.History(self.symbol, 60, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">\nvar history = History(_symbol, 60, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The FOREX dataset provides QuoteBar and Tick objects.</p>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>Tick Attributes</h4>\n<p>Tick objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"></div>"
      }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "https://www.oanda.com",
    "examples": [
      {
        "id": 329,
        "master_product_id": 25,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we implement FOREX carry and trade algorithm. We buy the FOREX pair with the currency of the country with the lowest interest rate and sell the FOREX pair with the currency with the highest interest rate. This algorithm uses hard-coded interest rates.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass ForexCarryTradeAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n\n        self.SetStartDate(2008, 1, 1) \n        self.SetCash(25000)\n        \n        # We will use hard-coded interest rates\n        self.rates = {\n            \"USDAUD\": 1.5,    # Australia\n            \"USDCAD\": 0.5,    # Canada\n            \"USDCNY\": 4.35,   # China\n            \"USDEUR\": 0.0,    # Euro Area\n            \"USDINR\": 6.5,    # India\n            \"USDJPY\": -0.1,   # Japan\n            \"USDMXN\": 4.25,   # Mexico\n            \"USDTRY\": 7.5,    # Turkey\n            \"USDZAR\": 7.0     # South Africa\n        }\n        \n        for ticker in self.rates:\n            self.AddForex(ticker, Resolution.Daily, Market.Oanda)\n            \n        self.month = -1\n\n    def OnData(self, data):\n        if self.month == self.Time.month:\n            return\n        \n        self.month = self.Time.month\n        \n        sorted_rates = sorted(self.rates.items(), key = lambda x: x[1])\n        \n        self.SetHoldings(sorted_rates[0][0], -0.5)\n        self.SetHoldings(sorted_rates[-1][0], 0.5)\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class ForexCarryTradeAlgorithm : QCAlgorithm\n    {\n        private int _month = -1;\n        private Dictionary&lt;string, decimal&gt; _rates;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2008, 1, 1);\n            SetCash(25000);\n            \n            // We will use hard-coded interest rates\n            _rates = new Dictionary&lt;string, decimal&gt;()\n            {\n                {\"USDAUD\", 1.5m},    // Australia\n                {\"USDCAD\", 0.5m},    // Canada\n                {\"USDCNY\", 4.35m},   // China\n                {\"USDEUR\", 0.0m},    // Euro Area\n                {\"USDINR\", 6.5m},    // India\n                {\"USDJPY\", -0.1m},   // Japan\n                {\"USDMXN\", 4.25m},   // Mexico\n                {\"USDTRY\", 7.5m},    // Turkey\n                {\"USDZAR\", 7.0m}     // South Africa\n            };\n            \n            foreach (var ticker in _rates.Keys)\n            {\n                AddForex(ticker, Resolution.Daily, Market.Oanda);\n            }\n        }\n\n        public override void OnData(Slice data)\n        {\n            if (_month == Time.Month) return;\n            _month = Time.Month;\n            \n            var sortedRates = (from kvp in _rates orderby kvp.Value ascending select kvp.Key).ToArray();\n            \n            SetHoldings(sortedRates[0], -0.5);\n            SetHoldings(sortedRates[sortedRates.Length-1], 0.5);\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-07-08 21:24:03"
      },
      {
        "id": 331,
        "master_product_id": 25,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this example, we implement FOREX carry and trade algorithm. We buy the FOREX pair with the currency of the country with the lowest interest rate and sell the FOREX pair with the currency with the highest interest rate. This algorithm uses hard-coded interest rates.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass ForexCarryTradeAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n\n        self.SetStartDate(2008, 1, 1) \n        self.SetCash(25000)\n        \n        def toSymbol(ticker):\n            return Symbol.Create(ticker, SecurityType.Forex, Market.Oanda)\n        \n        # We will use hard-coded interest rates\n        rates = {\n            toSymbol(\"USDAUD\"): 1.5,    # Australia\n            toSymbol(\"USDCAD\"): 0.5,    # Canada\n            toSymbol(\"USDCNY\"): 4.35,   # China\n            toSymbol(\"USDEUR\"): 0.0,    # Euro Area\n            toSymbol(\"USDINR\"): 6.5,    # India\n            toSymbol(\"USDJPY\"): -0.1,   # Japan\n            toSymbol(\"USDMXN\"): 4.25,   # Mexico\n            toSymbol(\"USDTRY\"): 7.5,    # Turkey\n            toSymbol(\"USDZAR\"): 7.0     # South Africa\n        }\n        \n        self.SetUniverseSelection(ManualUniverseSelectionModel(list(rates.keys())))\n        self.SetAlpha(IntestRatesAlphaModel(rates))\n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel(Expiry.EndOfMonth))\n\nclass IntestRatesAlphaModel(AlphaModel):\n    def __init__(self, rates):\n        self.rates = rates\n        self.month = -1\n                \n    def Update(self, algorithm, data):\n        if self.month == algorithm.Time.month:\n            return []\n        \n        self.month = algorithm.Time.month\n        \n        sorted_rates = sorted(self.rates.items(), key = lambda x: x[1])\n        \n        return Insight.Group(\n            Insight.Price(sorted_rates[0][0], Expiry.EndOfMonth, InsightDirection.Up),\n            Insight.Price(sorted_rates[-1][0], Expiry.EndOfMonth, InsightDirection.Down)\n            )\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class ForexCarryTradeAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2008, 1, 1);\n            SetCash(25000);\n            \n            Symbol toSymbol(string ticker)\n            {\n                return QuantConnect.Symbol.Create(ticker, SecurityType.Forex, Market.Oanda);\n            }\n            \n            // We will use hard-coded interest rates\n            var rates = new Dictionary&lt;Symbol, decimal&gt;()\n            {\n                {toSymbol(\"USDAUD\"), 1.5m},    // Australia\n                {toSymbol(\"USDCAD\"), 0.5m},    // Canada\n                {toSymbol(\"USDCNY\"), 4.35m},   // China\n                {toSymbol(\"USDEUR\"), 0.0m},    // Euro Area\n                {toSymbol(\"USDINR\"), 6.5m},    // India\n                {toSymbol(\"USDJPY\"), -0.1m},   // Japan\n                {toSymbol(\"USDMXN\"), 4.25m},   // Mexico\n                {toSymbol(\"USDTRY\"), 7.5m},    // Turkey\n                {toSymbol(\"USDZAR\"), 7.0m}     // South Africa\n            };\n \n            SetUniverseSelection(new ManualUniverseSelectionModel(rates.Keys));\n            SetAlpha(new IntestRatesAlphaModel(rates));\n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel(Expiry.EndOfMonth));\n        }\n    }\n    \n    public class IntestRatesAlphaModel : AlphaModel\n    {\n        private int _month = -1;\n        private Dictionary&lt;Symbol, decimal&gt; _rates;\n\n        public IntestRatesAlphaModel(Dictionary&lt;Symbol, decimal&gt; rates)\n        {\n            _rates = rates;\n        }\n\n        public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n        {\n            if (_month == algorithm.Time.Month)\n            {\n                return Enumerable.Empty&lt;Insight&gt;();\n            }\n            \n            _month = algorithm.Time.Month;\n            \n            var sortedRates = (from kvp in _rates orderby kvp.Value ascending select kvp.Key).ToArray();\n            \n            return Insight.Group(\n                Insight.Price(sortedRates[0], Expiry.EndOfMonth, InsightDirection.Up),\n                Insight.Price(sortedRates[sortedRates.Length-1], Expiry.EndOfMonth, InsightDirection.Down)\n                );\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-07-08 21:32:07"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 25,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>FOREX Data  is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>FOREX Data  can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 3 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>FOREX Data  is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 77,
        "name": "OANDA Forex - Cloud Access",
        "description": "<p>Freely harness gigabytes of FOREX data in the QuantConnect Cloud for your backtesting and live trading purposes.\n </p>\n    <ul><li>Curated, clean data</li>\n                                            <li>Updated nightly at 4am</li>\n                                        </ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 79,
        "name": "OANDA Forex - Second Download",
        "description": "<p>FOREX Second resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Second Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "3 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 80,
        "name": "OANDA Forex - Minute Download",
        "description": "<p>FOREX Minute resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Minute Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "3 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 81,
        "name": "OANDA Forex - Hour Download",
        "description": "<p>FOREX Hour resolution archives in LEAN format for on premise backtesting and research. One file per ticker.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Hour Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "3 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 82,
        "name": "OANDA Forex - Daily Download",
        "description": "<p>FOREX Daily resolution archives in LEAN format for on premise backtesting and research. One file per ticker.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Daily Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "3 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      }
    ],
    "headerColor": "8b000a"
  },
  {
    "name": "CFD Data",
    "vendorName": "OANDA",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/oanda-logo.svg",
    "landingFileName": "oanda-cfd-data.html",
    "url": "/datasets/oanda-cfd-data",
    "short_description": "Contracts for Difference (CFD) quote data from OANDA and hosted on the QuantConnect Cloud. The data covers 268 contracts from tick to daily resolution.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The CFD Data by OANDA serves 269 <a href=\"https://www.investopedia.com/terms/c/contractfordifferences.asp\">contracts for differences</a> (CFD). The data starts as early as May 2002 and is delivered on any frequency from tick to daily. This dataset is created by QuantConnect processing raw tick data from OANDA.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\n<a href=\"https://www.oanda.com\">OANDA</a> was co-founded by Dr. Stumm, a computer scientist and Dr. Olsen, an economist, in 1997. The company was born out of the belief that the Internet and technology would open up the markets for both currency data and trading. OANDA uses innovative computer and financial technology to provide Internet-based forex trading and currency information services to everyone, from individuals to large corporations, from portfolio managers to financial institutions. OANDA is a market maker and a trusted source for currency data. It has access to one of the world's largest historical, high-frequency, filtered currency databases.\n</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nxauusd = self.AddCfd(\"XAUUSD\", Resolution.Daily).Symbol\n</code></pre>\n<pre><code class=\"language-cs\">\nvar xauusd = AddCfd(\"XAUUSD\", Resolution.Daily).Symbol;\n</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>Mixed, earliest starts May 2002</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>269 Contracts</td>\n        </tr><tr><td>Data Density</td>\n            <td>Dense</td>\n        </tr><tr><td>Resolution</td>\n            <td>Tick, Second, Minute, Hour, &amp; Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>Mixed, in which the contract is listed*</td>\n        </tr></tbody></table><p>\n* E.g.: DE30EUR tracks DAX30 Index which is listed in Europe/Berlin timezone.\n</p>"
      },
      {
        "title": "Supported Assets",
        "content": "<p>The following table shows the available contracts:</p>\n\n<div>\n<table class=\"table qc-table table-reflow ticker-table hidden-xs\"><thead><tr><th colspan=\"6\">Contracts</th></tr></thead><tbody><tr><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/AU200AUD\">AU200AUD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/BCOUSD\">BCOUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/CH20CHF\">CH20CHF</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/CORNUSD\">CORNUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/DE10YBEUR\">DE10YBEUR</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/DE30EUR\">DE30EUR</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/EU50EUR\">EU50EUR</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/FR40EUR\">FR40EUR</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/HK33HKD\">HK33HKD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/JP225USD\">JP225USD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/NAS100USD\">NAS100USD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/NATGASUSD\">NATGASUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/NL25EUR\">NL25EUR</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/SG30SGD\">SG30SGD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/SOYBNUSD\">SOYBNUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/SPX500USD\">SPX500USD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/SUGARUSD\">SUGARUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/UK100GBP\">UK100GBP</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/UK10YBGBP\">UK10YBGBP</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/US2000USD\">US2000USD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/US30USD\">US30USD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/USB02YUSD\">USB02YUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/USB05YUSD\">USB05YUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/USB10YUSD\">USB10YUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/USB30YUSD\">USB30YUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/WHEATUSD\">WHEATUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/WTICOUSD\">WTICOUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XAGAUD\">XAGAUD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XAGCAD\">XAGCAD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XAGCHF\">XAGCHF</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XAGEUR\">XAGEUR</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XAGGBP\">XAGGBP</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XAGHKD\">XAGHKD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XAGJPY\">XAGJPY</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XAGNZD\">XAGNZD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XAGSGD\">XAGSGD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XAGUSD\">XAGUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XAUAUD\">XAUAUD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XAUCAD\">XAUCAD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XAUCHF\">XAUCHF</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XAUEUR\">XAUEUR</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XAUGBP\">XAUGBP</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XAUHKD\">XAUHKD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XAUJPY\">XAUJPY</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XAUNZD\">XAUNZD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XAUSGD\">XAUSGD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XAUUSD\">XAUUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XAUXAG\">XAUXAG</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XCUUSD\">XCUUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XPDUSD\">XPDUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/cfd/oanda/minute/XPTUSD\">XPTUSD</a></td></tr></tbody></table></div>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe CFD price data gives researchers an asset class that tracks the price movement of other securities and derivatives. Examples include: \n</p>\n<ul><li>Explore the daily worldwide news cycles with CFDs that tracks international indexes;</li>\n<li>Trade price movements of commodities with no delivery of physical goods. E.g.: pairs trading between gold and silver, corn and wheat, brent and crude oil, etc</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_88d5fecef8f91c8f2c3ed01839333191.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The CFD dataset provides QuoteBar and Tick objects.</p>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>Tick Attributes</h4>\n<p>Tick objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add CFD price data to your algorithm, use the AddCfd() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on requesting market data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass CfdAlgorithm (QCAlgorithm):\n    def Initialize(self):\n        self.SetAccountCurrency('EUR');\n\n        self.SetStartDate(2019, 2, 20)\n        self.SetEndDate(2019, 2, 21)\n        self.SetCash('EUR', 100000)\n\n        self.symbol = self.AddCfd('DE30EUR').Symbol\n\n        self.SetBenchmark(self.symbol)\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect.Algorithm.CSharp\n{\n    public class CfdAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetAccountCurrency(\"EUR\");\n\n            SetStartDate(2019, 2, 20);\n            SetEndDate(2019, 2, 21);\n            SetCash(\"EUR\", 100000);\n\n            _symbol = AddCfd(\"DE30EUR\").Symbol;\n\n            SetBenchmark(_symbol);\n        }\n    }\n}\n</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Quote data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Quote data is available in daily down to tick resolution.  You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass CfdAlgorithm(QCAlgorithm):\n    def OnData(self, data):\n        # The marketData object can be a QuoteBar or a List of Tick\n        marketData = data[self.symbol]\n\n        # If it's QuoteBar:\n        self.Log(f'Symbol: {self.symbol} - Data: {marketData}')\n\n        # If it's Tick data:\n        for tick in marketData:\n            self.Log(f\"Time: {tick.EndTime}; Symbol: {self.symbol}; Tick: {tick}\")\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect.Algorithm.CSharp\n{\n    public class CfdAlgorithm : QCAlgorithm\n    {\n        public override void OnData(Slice data)\n        {\n            // The marketData object can be a QuoteBar or a List of Tick\n            var marketData = data[_symbol];\n\n            // If it's QuoteBar:\n            Log($\"Symbol: {_symbol} - Data: {marketData}\");\n\n            // If it's Tick data:\n            foreach (var tick in marketData)\n            {\n                 Log($\"Time: {tick.EndTime}; Symbol: {_symbol} Tick: {tick}\");\n            }\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical quote data in your algorithm using the CFD price data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no CFD price data in the period you request, the history result will be empty. The following example gets the historical data for CFD price data by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nhistory = self.History(self.symbol, 60, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">\nvar history = History(_symbol, 60, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The CFD dataset provides QuoteBar and Tick objects.</p>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>Tick Attributes</h4>\n<p>Tick objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"></div>"
      }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "https://www.oanda.com",
    "examples": [
      {
        "id": 345,
        "master_product_id": 26,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we implement a pair trading strategy using Gold and Silver CFDs, XAUUSD and XAGUSD respectively. We buy the spread (buy XAUUSD and sell XAGUSD) if the current spread value is higher than one standard deviation above its mean and sell the spread (buy XAGUSD and sell XAUUSD) if the value is lower than one standard deviation below its mean.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nfrom datetime import timedelta, datetime\n\nclass SMAPairsTrading(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2018, 7, 1)   \n        self.SetEndDate(2019, 3, 31)\n        self.SetCash(100000)\n        \n        self.AddCfd('XAUUSD', Resolution.Hour);\n        self.AddCfd('XAGUSD', Resolution.Hour);\n\n        self.pair = [ ]\n        self.spreadMean = SimpleMovingAverage(500)\n        self.spreadStd = StandardDeviation(500)\n        \n    def OnData(self, data):\n        spread = self.pair[1].Price - self.pair[0].Price\n        self.spreadMean.Update(self.Time, spread)\n        self.spreadStd.Update(self.Time, spread) \n        \n        upperthreshold = self.spreadMean.Current.Value + self.spreadStd.Current.Value\n        lowerthreshold = self.spreadMean.Current.Value - self.spreadStd.Current.Value\n\n        if spread &gt; upperthreshold:\n            self.SetHoldings(self.pair[0].Symbol, 1)\n            self.SetHoldings(self.pair[1].Symbol, -1)\n        \n        if spread &lt; lowerthreshold:\n            self.SetHoldings(self.pair[0].Symbol, -1)\n            self.SetHoldings(self.pair[1].Symbol, 1)\n    \n    def OnSecuritiesChanged(self, changes):\n        self.pair = [x for x in changes.AddedSecurities]\n        \n        #1. Call for 500 bars of history data for each symbol in the pair and save to the variable history\n        history = self.History([x.Symbol for x in self.pair], 500)\n        #2. Unstack the Pandas data frame to reduce it to the history close price\n        history = history.close.unstack(level=0)\n        #3. Iterate through the history tuple and update the mean and standard deviation with historical data \n        for tuple in history.itertuples():\n            self.spreadMean.Update(tuple[0], tuple[2]-tuple[1])\n            self.spreadStd.Update(tuple[0], tuple[2]-tuple[1])\n</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class GoldSilverPairsTradingAlgorithm : QCAlgorithm\n    {\n        private SimpleMovingAverage _spreadMean = new SimpleMovingAverage(500);\n        private StandardDeviation _spreadStd = new StandardDeviation(500);\n        private Security[] _pair = new Security[2];\n\n        public override void Initialize()\n        {\n            SetStartDate(2018, 7, 1);  \n            SetEndDate(2019, 3, 31);  \n            SetCash(100000);  \n\n            AddCfd(\"XAUUSD\", Resolution.Hour);\n            AddCfd(\"XAGUSD\", Resolution.Hour);\n        }\n\n        public override void OnData(Slice data) \n        {\n            var spread = _pair[1].Price - _pair[0].Price;\n            _spreadMean.Update(Time, spread);\n            _spreadStd.Update(Time, spread);\n            \n            var upperthreshold = _spreadMean + _spreadStd;\n            var lowerthreshold = _spreadMean - _spreadStd;\n            \n            if (spread &gt; upperthreshold)\n            {\n                SetHoldings(_pair[0].Symbol, 1);\n                SetHoldings(_pair[1].Symbol, -1);\n            }\n            \n            if (spread &lt; lowerthreshold)\n            {\n                SetHoldings(_pair[0].Symbol, -1);\n                SetHoldings(_pair[1].Symbol, 1);\n            }\n        }\n        \n        public override void OnSecuritiesChanged(SecurityChanges changes)\n        {    \n            _pair = changes.AddedSecurities.ToArray();\n            \n            //1. Call for 500 days of history data for each symbol in the pair and save to the variable history\n            var history = History(_pair.Select(x =&gt; x.Symbol), 500);\n            \n            //2. Iterate through the history tuple and update the mean and standard deviation with historical data \n            foreach(var slice in history)\n            {\n                var spread = slice[_pair[1].Symbol].Close - slice[_pair[0].Symbol].Close;\n                _spreadMean.Update(slice.Time, spread);\n                _spreadStd.Update(slice.Time, spread);\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-12-13 22:52:15"
      },
      {
        "id": 347,
        "master_product_id": 26,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this example, we implement a pair trading strategy using Gold and Silver CFDs, XAUUSD and XAGUSD respectively. We buy the spread (buy XAUUSD and sell XAGUSD) if the current spread value is higher than one standard deviation above its mean and sell the spread (buy XAGUSD and sell XAUUSD) if the value is lower than one standard deviation below its mean.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\"> \nfrom datetime import timedelta, datetime\n\nclass GoldSilverPairsTradingAlgorithm (QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2018, 7, 1)   \n        self.SetEndDate(2019, 3, 31)\n        self.SetCash(100000)\n        \n        self.UniverseSettings.Resolution = Resolution.Hour;\n\n        self.SetUniverseSelection(ManualUniverseSelectionModel\n        (\n            [ Symbol.Create(x, SecurityType.Cfd, Market.Oanda) for x in [\"XAUUSD\", \"XAGUSD\"] ]\n        ));\n        \n        self.AddAlpha(PairsTradingAlphaModel())\n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n\nclass PairsTradingAlphaModel(AlphaModel):\n\n    def __init__(self):\n        self.pair = [ ]\n        self.spreadMean = SimpleMovingAverage(500)\n        self.spreadStd = StandardDeviation(500)\n        self.period = timedelta(hours=2)\n        \n    def Update(self, algorithm, data):\n        spread = self.pair[1].Price - self.pair[0].Price\n        self.spreadMean.Update(algorithm.Time, spread)\n        self.spreadStd.Update(algorithm.Time, spread) \n        \n        upperthreshold = self.spreadMean.Current.Value + self.spreadStd.Current.Value\n        lowerthreshold = self.spreadMean.Current.Value - self.spreadStd.Current.Value\n\n        if spread &gt; upperthreshold:\n            return Insight.Group(\n                [\n                    Insight.Price(self.pair[0].Symbol, self.period, InsightDirection.Up),\n                    Insight.Price(self.pair[1].Symbol, self.period, InsightDirection.Down)\n                ])\n        \n        if spread &lt; lowerthreshold:\n            return Insight.Group(\n                [\n                    Insight.Price(self.pair[0].Symbol, self.period, InsightDirection.Down),\n                    Insight.Price(self.pair[1].Symbol, self.period, InsightDirection.Up)\n                ])\n\n        return []\n    \n    def OnSecuritiesChanged(self, algorithm, changes):\n        self.pair = [x for x in changes.AddedSecurities]\n        \n        #1. Call for 500 bars of history data for each symbol in the pair and save to the variable history\n        history = algorithm.History([x.Symbol for x in self.pair], 500)\n        #2. Unstack the Pandas data frame to reduce it to the history close price\n        history = history.close.unstack(level=0)\n        #3. Iterate through the history tuple and update the mean and standard deviation with historical data \n        for tuple in history.itertuples():\n            self.spreadMean.Update(tuple[0], tuple[2]-tuple[1])\n            self.spreadStd.Update(tuple[0], tuple[2]-tuple[1])\n</code></pre>\n<pre><code class=\"language-cs\"> \nnamespace QuantConnect\n{\n    public class GoldSilverPairsTradingAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2018, 7, 1);  \n            SetEndDate(2019, 3, 31);  \n            SetCash(100000);  \n\n            UniverseSettings.Resolution = Resolution.Hour;\n\n            SetUniverseSelection(new ManualUniverseSelectionModel\n            (\n                new [] {\"XAUUSD\", \"XAGUSD\"}\n                    .Select(x =&gt; QuantConnect.Symbol.Create(x, SecurityType.Cfd, Market.Oanda))\n            ));\n\n            AddAlpha(new PairsTradingAlphaModel());\n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel()); \n        }\n    }\n    \n    public partial class PairsTradingAlphaModel : AlphaModel\n    {\n        private SimpleMovingAverage _spreadMean = new SimpleMovingAverage(500);\n        private StandardDeviation _spreadStd = new StandardDeviation(500);\n        private TimeSpan _period = TimeSpan.FromHours(2);\n        private Security[] _pair = new Security[2];\n\n        public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data) \n        {\n            var spread = _pair[1].Price - _pair[0].Price;\n            _spreadMean.Update(algorithm.Time, spread);\n            _spreadStd.Update(algorithm.Time, spread);\n            \n            var upperthreshold = _spreadMean + _spreadStd;\n            var lowerthreshold = _spreadMean - _spreadStd;\n            \n            if (spread &gt; upperthreshold)\n            {\n                return Insight.Group( \n                    Insight.Price(_pair[0].Symbol, _period, InsightDirection.Up),\n                    Insight.Price(_pair[1].Symbol, _period, InsightDirection.Down)\n                );\n            }\n            \n            if (spread &lt; lowerthreshold)\n            {\n                return Insight.Group( \n                    Insight.Price(_pair[0].Symbol, _period, InsightDirection.Down), \n                    Insight.Price(_pair[1].Symbol, _period, InsightDirection.Up) \n                );\n            }\n\n            return Enumerable.Empty&lt;Insight&gt;();\n        }\n        \n        public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n        {    \n            _pair = changes.AddedSecurities.ToArray();\n            \n            //1. Call for 500 days of history data for each symbol in the pair and save to the variable history\n            var history = algorithm.History(_pair.Select(x =&gt; x.Symbol), 500);\n            \n            //2. Iterate through the history tuple and update the mean and standard deviation with historical data \n            foreach (var slice in history)\n            {\n                var spread = slice[_pair[1].Symbol].Close - slice[_pair[0].Symbol].Close;\n                _spreadMean.Update(slice.Time, spread);\n                _spreadStd.Update(slice.Time, spread);\n            }\n        }\n    }\n}\n</code></pre>\n</div>",
        "updated": "2021-07-08 21:48:28"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 26,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>CFD Data is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>CFD Data can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 3 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>CFD Data is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 78,
        "name": "OANDA CFD - Cloud Access",
        "description": "<p>Freely harness gigabytes of CFD data in the QuantConnect Cloud for your backtesting and live trading purposes.\n </p>\n    <ul><li>Curated, clean data</li>\n                                            <li>Updated nightly at 4am</li>\n                                        </ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 83,
        "name": "OANDA CFD - Second Download",
        "description": "<p>CFD Second resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Second Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "3 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 84,
        "name": "OANDA CFD - Minute Download",
        "description": "<p>CFD Minute resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Minute Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "3 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 85,
        "name": "OANDA CFD - Hour Download",
        "description": "<p>CFD Hour resolution archives in LEAN format for on premise backtesting and research. One file per ticker.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Hour Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "3 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 86,
        "name": "OANDA CFD - Daily Download",
        "description": "<p>CFD Daily resolution archives in LEAN format for on premise backtesting and research. One file per ticker.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Daily Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "3 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      }
    ],
    "headerColor": "340064"
  },
  {
    "name": "Coinbase Pro Crypto Price Data",
    "vendorName": "CoinAPI",
    "datasetImageLight": "https://cdn.quantconnect.com/i/tu/coinbase-ds-logo.svg",
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/coinapi-logo.png",
    "landingFileName": "coinbase-pro-crypto-price-data.html",
    "url": "/datasets/coinbase-pro-crypto-price-data",
    "short_description": "Coinbase Pro price data for this crypto exchange supported by QuantConnect collected by CoinAPI and hosted on the QuantConnect Cloud.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The Coinbase Pro Crypto Price Data by CoinAPI provides Cryptocurrency price and volume data points. The data covers 101 Cryptocurrency pairs, starts in January 2015, and is delivered on any frequency from tick to daily. This dataset is created by monitoring the trading activity on Coinbase Pro.\n</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p><a href=\"https://www.cryptotick.com/\">CoinAPI</a> was founded by Artur Pietrzyk in 2016 with the goal of providing real-time and historical cryptocurrency market data, collected from hundreds of exchanges. CoinAPI provides access to Cryptocurrencies for traders, market makers, and developers building third-party applications.</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Coinbase Pro accepts Cash account type only, AccountType.Margin will result in an exception.\nself.SetBrokerageModel(BrokerageName.GDAX, AccountType.Cash)\n\nself.btcusd = self.AddCrypto(\"BTCUSD\", Resolution.Minute, Market.GDAX).Symbol\n\nself.AddUniverse(CryptoCoarseFundamentalUniverse(Market.GDAX, self.UniverseSettings, self.UniverseSelectionFilter))</code></pre>\n<pre><code class=\"language-cs\">// Coinbase Pro accepts Cash account type only, AccountType.Margin will result in an exception.\nSetBrokerageModel(BrokerageName.GDAX, AccountType.Cash);\n\n_btcusd = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.GDAX).Symbol;\n\nAddUniverse(new CryptoCoarseFundamentalUniverse(Market.GDAX, UniverseSettings, UniverseSelectionFilter));</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 2015</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>101 Currency Pairs</td>\n        </tr><tr><td>Data Density</td>\n            <td>Dense</td>\n        </tr><tr><td>Resolution</td>\n            <td>Tick, Second, Minute, Hourly, &amp; Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Supported Assets",
        "content": "<p>The following table shows the available Cryptocurrency pairs:</p>\n\n<table class=\"table qc-table table-reflow ticker-table hidden-xs\"><thead><tr><th colspan=\"6\">\nCryptocurrency Pairs\n</th></tr></thead><tbody><tr><td>ALGOEUR</td><td>ALGOGBP</td><td>ALGOUSD</td><td>ATOMBTC</td><td>ATOMUSD</td><td>BALBTC</td></tr><tr><td>BALUSD</td><td>BANDBTC</td><td>BANDEUR</td><td>BANDGBP</td><td>BANDUSD</td><td>BATETH</td></tr><tr><td>BATUSDC</td><td>BCHBTC</td><td>BCHEUR</td><td>BCHGBP</td><td>BCHUSD</td><td>BTCEUR</td></tr><tr><td>BTCGBP</td><td>BTCUSD</td><td>BTCUSDC</td><td>CGLDBTC</td><td>CGLDEUR</td><td>CGLDGBP</td></tr><tr><td>CGLDUSD</td><td>COMPBTC</td><td>COMPUSD</td><td>CVCUSDC</td><td>DAIUSD</td><td>DAIUSDC</td></tr><tr><td>DASHBTC</td><td>DASHUSD</td><td>DNTUSDC</td><td>EOSBTC</td><td>EOSEUR</td><td>EOSUSD</td></tr><tr><td>ETCBTC</td><td>ETCEUR</td><td>ETCGBP</td><td>ETCUSD</td><td>ETHBTC</td><td>ETHDAI</td></tr><tr><td>ETHEUR</td><td>ETHGBP</td><td>ETHUSD</td><td>ETHUSDC</td><td>GNTUSDC</td><td>KNCBTC</td></tr><tr><td>KNCUSD</td><td>LINKETH</td><td>LINKEUR</td><td>LINKGBP</td><td>LINKUSD</td><td>LOOMUSDC</td></tr><tr><td>LRCUSD</td><td>LTCBTC</td><td>LTCEUR</td><td>LTCGBP</td><td>LTCUSD</td><td>MANAUSDC</td></tr><tr><td>MKRBTC</td><td>MKRUSD</td><td>NMRBTC</td><td>NMREUR</td><td>NMRGBP</td><td>NMRUSD</td></tr><tr><td>OMGBTC</td><td>OMGEUR</td><td>OMGGBP</td><td>OMGUSD</td><td>OXTUSD</td><td>RENBTC</td></tr><tr><td>RENUSD</td><td>REPBTC</td><td>REPUSD</td><td>UMABTC</td><td>UMAEUR</td><td>UMAGBP</td></tr><tr><td>UMAUSD</td><td>UNIUSD</td><td>USDCEUR</td><td>USDCGBP</td><td>WBTCBTC</td><td>WBTCUSD</td></tr><tr><td>XLMBTC</td><td>XLMEUR</td><td>XLMUSD</td><td>XRPBTC</td><td>XRPEUR</td><td>XRPGBP</td></tr><tr><td>XRPUSD</td><td>XTZBTC</td><td>XTZEUR</td><td>XTZGBP</td><td>XTZUSD</td><td>YFIUSD</td></tr><tr><td>ZECBTC</td><td>ZECUSDC</td><td>ZRXBTC</td><td>ZRXEUR</td><td>ZRXUSD</td></tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe Coinbase Pro Crypto Price Data by CoinAPI enables researchers to accurately design strategies for Cryptocurrencies. Examples include: \n</p>\n<ul><li>Buy and hold</li>\n<li>Trading Cryptocurrency volatility and price action</li>\n<li>Allocating a small portion of your portfolio to Cryptocurrencies to hedge against inflation</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_2016e0d3860ac819723502f7df70591f.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Coinbase Pro Crypto Price dataset provides TradeBar, QuoteBar, Tick, and CryptoCoarseFundamental objects.</p>\n\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>Tick Attributes</h4>\n<p>Tick objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"></div>\n\n<h4>CryptoCoarseFundamental Attributes</h4>\n<p>CryptoCoarseFundamental objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.CryptoCoarseFundamental\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add Coinbase Pro data from CoinAPI to your algorithm, use the AddCrypto() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. When requesting data, you have the option to use several crypto markets. For detailed documentation on requesting market data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class CoinAPIDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        # Coinbase Pro accepts Cash account type only, AccountType.Margin will result in an exception.\n        self.SetBrokerageModel(BrokerageName.GDAX, AccountType.Cash)\n        \n        self.btcusd = self.AddCrypto(\"BTCUSD\", Resolution.Minute, Market.GDAX).Symbol</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class CoinAPIDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _btcusd;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n        \n            // Coinbase Pro accepts Cash account type only, AccountType.Margin will result in an exception.\n            SetBrokerageModel(BrokerageName.GDAX, AccountType.Cash);\n            \n            _btcusd = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.GDAX).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in every resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    btc_price = data[self.btcusd].Price\n    self.Log(f\u201dTime: {self.Time}; Price: {btc_price};\u201d)</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var btcPrice = data[_btcusd].Price;\n    Log($\u201dTime: {Time}; Price: {btcPrice}\u201d);\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical data in your algorithm using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for Coinbase Pro by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.btcusd, 30, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History(_btcusd, 30, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Universe Selection",
        "content": "<p>You can perform an universe selection by adding a CryptoCoarseFundamentalUniverse, which filters cryptocurrency pairs by their previous day OHLCV, dollar volume in quote currency and USD if available (as of UTC 00:00).</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def Initialize(self):\n    self.UniverseSettings.Resolution = Resolution.Daily\n    self.SetBrokerageModel(BrokerageName.GDAX, AccountType.Cash)\n\n    # Add universe selection of cryptos based on coarse fundamentals\n    self.AddUniverse(CryptoCoarseFundamentalUniverse(Market.GDAX, self.UniverseSettings, self.UniverseSelectionFilter))\n\ndef UniverseSelectionFilter(self, crypto_coarse):\n    for datum in crypto_coarse:\n        self.Log(f\"{datum.Symbol},{datum.Price},{datum.Volume},{datum.VolumeInQuoteCurrency},{datum.VolumeInUsd},{datum.Open},{datum.High},{datum.Low},{datum.Close}\")\n            \n        # define our selection criteria\n        if datum.Volume &gt;= 100 and datum.VolumeInUsd &gt; 10000:\n            universe.append(datum.Symbol)\n        \n    return universe</code></pre>\n<pre><code class=\"language-cs\">public override void Initialize()\n{\n    UniverseSettings.Resolution = Resolution.Daily;\n    SetBrokerageModel(BrokerageName.GDAX, AccountType.Cash);\n\n    // Add universe selection of cryptos based on coarse fundamentals\n    AddUniverse(new CryptoCoarseFundamentalUniverse(Market.GDAX, UniverseSettings, UniverseSelectionFilter));\n}\n\nprivate IEnumerable&lt;Symbol&gt; UniverseSelectionFilter(IEnumerable&lt;CryptoCoarseFundamental&gt; cryptoCoarse)\n{\n    var universe = new List&lt;Symbol&gt;();\n\n    foreach (var datum in cryptoCoarse)\n    {\n        Log($\"{datum.Symbol},{datum.Price},{datum.Volume},{datum.VolumeInQuoteCurrency},{datum.VolumeInUsd},{datum.Open},{datum.High},{datum.Low},{datum.Close}\");\n\n         // define our selection criteria\n         if (datum.Volume &gt;= 100m &amp;&amp; datum.VolumeInUsd &gt; 10000m)\n         {\n             universe.Add(datum.Symbol);\n         }\n     }\n\n     return universe;\n}</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Coinbase Pro Crypto Price dataset provides TradeBar, QuoteBar, Tick, and CryptoCoarseFundamental objects.</p>\n\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>Tick Attributes</h4>\n<p>Tick objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"></div>\n\n<h4>CryptoCoarseFundamental Attributes</h4>\n<p>CryptoCoarseFundamental objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.CryptoCoarseFundamental\"></div>"
      }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "",
    "examples": [
      {
        "id": 363,
        "master_product_id": 27,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example",
        "content": "<p>In this example, we buy and hold Bitcoin through the Coinbase exchange.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass CoinAPIDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n        \n        # Coinbase Pro accepts Cash account type only, AccountType.Margin will result in an exception.\n        self.SetBrokerageModel(BrokerageName.GDAX, AccountType.Cash)\n\n        # Warm up the security with the last known price to avoid conversion error\n        self.SetSecurityInitializer(lambda security: security.SetMarketPrice(self.GetLastKnownPrice(security)))\n\n        # Requesting data\n        crypto = self.AddCrypto(\"BTCUSD\", Resolution.Minute, Market.GDAX)\n        self.btcusd = crypto.Symbol\n        self.minimum_order_size = crypto.SymbolProperties.MinimumOrderSize\n        \n        # Historical data\n        history = self.History(self.btcusd, 30, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request\")\n\n        # Add Crypto Coarse Fundamental Universe Selection\n        self.AddUniverse(CryptoCoarseFundamentalUniverse(Market.GDAX, self.UniverseSettings, self.UniverseSelectionFilter))\n\n    def UniverseSelectionFilter(self, crypto_coarse):\n        return [datum.Symbol for datum in crypto_coarse\n                if datum.Volume &gt;= 100 \n                and datum.VolumeInUsd &gt; 10000]\n\n    def OnData(self, data):\n        if self.Portfolio.CashBook['BTC'].Amount == 0:\n            free_cash = self.Portfolio.CashBook['USD'].Amount * (1-self.Settings.FreePortfolioValuePercentage)\n            quantity = free_cash / data[self.btcusd].Price\n            quantity -= quantity % self.minimum_order_size\n            if quantity &gt; 0:\n                self.MarketOrder(self.btcusd, quantity)</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class CoinAPIDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _btcusd;\n        private decimal? _minimumOrderSize;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n        \n            // Coinbase Pro accepts Cash account type only, AccountType.Margin will result in an exception.\n            SetBrokerageModel(BrokerageName.GDAX, AccountType.Cash);\n\n            // Warm up the security with the last known price to avoid conversion error\n            SetSecurityInitializer(security =&gt; security.SetMarketPrice(GetLastKnownPrice(security)));\n            \n            // Requesting data\n            var crypto = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.GDAX);\n            _btcusd = crypto.Symbol;\n            _minimumOrderSize = crypto.SymbolProperties.MinimumOrderSize;\n                \n             // Historical data\n            var history = History(_btcusd, 30, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request\");\n\n            // Add Crypto Coarse Fundamental Universe Selection\n            AddUniverse(new CryptoCoarseFundamentalUniverse(Market.GDAX, UniverseSettings, UniverseSelectionFilter));\n        }\n\n        private IEnumerable&lt;Symbol&gt; UniverseSelectionFilter(IEnumerable&lt;CryptoCoarseFundamental&gt; cryptoCoarse)\n        {\n            return from datum in cryptoCoarse\n                   where datum.Volume &gt;= 100m \n                   &amp;&amp; datum.VolumeInUsd &gt; 10000m\n                   select datum.Symbol;\n        }\n\n        public override void OnData(Slice data)\n        {\n            if (Portfolio.CashBook[\"BTC\"].Amount == 0)\n            {\n                var freeCash = Portfolio.CashBook[\"USD\"].Amount * (1-Settings.FreePortfolioValuePercentage);\n                var quantity = freeCash / data[_btcusd].Price;\n                quantity -= quantity % _minimumOrderSize;\n                if (quantity &gt; 0m)\n                {\n                    MarketOrder(_btcusd, quantity);\n                }\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-04-27 16:13:40"
      },
      {
        "id": 365,
        "master_product_id": 27,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example",
        "content": "<p>Framework Algorithm is not available for Cash AccountType right now, but we can still use the price data from Coinbase Pro with the Default Brokerage Model in Framework Algorithm.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass CoinAPIDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        # Warm up the security with the last known price to avoid conversion error\n        self.SetSecurityInitializer(lambda security: security.SetMarketPrice(self.GetLastKnownPrice(security)))\n\n        self.UniverseSettings.Resolution = Resolution.Minute\n        # Add universe selection of cryptos based on coarse fundamentals\n        self.AddUniverse(CryptoCoarseFundamentalUniverse(Market.GDAX, self.UniverseSettings, self.UniverseSelectionFilter))\n        \n        self.AddAlpha(ConstantAlphaModel(InsightType.Price, InsightDirection.Up, timedelta(minutes = 20), 0.025, None))\n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n\n    def UniverseSelectionFilter(self, crypto_coarse):\n        return [datum.Symbol for datum in crypto_coarse\n                if datum.Volume &gt;= 100 \n                and datum.VolumeInUsd &gt; 10000]\n\n    def OnSecuritiesChanged(self, changes):\n        for security in changes.AddedSecurities:\n            # Historical data\n            history = self.History(security.Symbol, 30, Resolution.Daily)\n            self.Debug(f\"We got {len(history)} items from our history request\")</code></pre>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing QuantConnect.Algorithm.Framework.Alphas;\nusing QuantConnect.Algorithm.Framework.Portfolio;\nusing QuantConnect.Data;\nusing QuantConnect.Data.UniverseSelection;\nusing QuantConnect.DataSource;\n\nnamespace QuantConnect\n{\n    public class CoinAPIDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _btcusd;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n\n            // Warm up the security with the last known price to avoid conversion error\n            SetSecurityInitializer(security =&gt; security.SetMarketPrice(GetLastKnownPrice(security)));\n \n            UniverseSettings.Resolution = Resolution.Minute;\n            // Add universe selection of cryptos based on coarse fundamentals\n            AddUniverse(new CryptoCoarseFundamentalUniverse(Market.GDAX, UniverseSettings, UniverseSelectionFilter));\n        \n            AddAlpha( new ConstantAlphaModel(InsightType.Price, InsightDirection.Up, TimeSpan.FromMinutes(20), 0.025, null) );\n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n        }\n\n        private IEnumerable&lt;Symbol&gt; UniverseSelectionFilter(IEnumerable&lt;CryptoCoarseFundamental&gt; cryptoCoarse)\n        {\n            return from datum in cryptoCoarse\n                   where datum.Volume &gt;= 100m \n                   &amp;&amp; datum.VolumeInUsd &gt; 10000m\n                   select datum.Symbol;\n        }\n\n        public override void OnSecuritiesChanged(SecurityChanges changes)\n        {\n            foreach(var security in changes.AddedSecurities)\n            {\n                // Historical data\n                var history = History(security.Symbol, 30, Resolution.Daily);\n                Debug($\"We got {history.Count()} items from our history request\");\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-04-27 16:13:58"
      }
    ],
    "pricingText": "The QuantConnect-CoinAPI partnership provides free access to Cryptocurrency market data in QuantConnect Cloud and paid access for downloads. Downloads are distributed in LEAN format and priced according to file resolution as below.",
    "pricing": [
      {
        "id": null,
        "master_product_id": 27,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>Coinbase Pro Crypto Price Data is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>Coinbase Pro Crypto Price Data can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 5 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>Coinbase Pro Crypto Price Data is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 87,
        "name": "Coinbase Pro - Cloud Access",
        "description": "<p>Free access to Coinbase Pro Crypto price data from CoinBase via the QuantConnect Cloud platform for your backtesting and research.</p>\n<ul><li>Daily updates at 4am ET</li>\n    <li>No data maintenance</li> \n</ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 88,
        "name": "Coinbase Pro - Tick Download",
        "description": "<p>Crypto-currencies Tick resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day/brokerage</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Tick Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "100 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 89,
        "name": "Coinbase Pro - Second Download",
        "description": "<p>Crypto-currencies Second resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Second Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "25 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 90,
        "name": "Coinbase Pro - Minute Download",
        "description": "<p>Crypto-currencies Minute resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Minute Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "5 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 91,
        "name": "Coinbase Pro - Hour Download",
        "description": "<p>Crypto-currencies Hour resolution archives in LEAN format for on premise backtesting and research. One file per ticker/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Hour Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "400 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 92,
        "name": "Coinbase Pro - Daily Download",
        "description": "<p>Crypto-currencies Daily resolution archives in LEAN format for on premise backtesting and research. One file per ticker/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Daily Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "100 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      }
    ],
    "headerColor": "ff1841"
  },
  {
    "name": "US Regulatory Alerts",
    "vendorName": "RegAlytics",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/regalytics-logo.png",
    "landingFileName": "regalytics-us-regulatory-alerts.html",
    "url": "/datasets/regalytics-us-regulatory-alerts",
    "short_description": "RegAlytics is the leading provider of daily regulatory updates, sourced from over 3000 regulators. ",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The US Regulatory Alerts dataset by RegAlytics tracks US regulatory changes. The data covers 40,000 alerts, starts from January 2020, and is delivered on a daily basis. This dataset is created by sourcing information from over 3,000 regulators and using proprietary technology to gather and structure the regulatory data. Once prepared, the data is thoroughly reviewed by RegAlytics' team of regulatory experts and delivered each morning by 8AM for industry use.</p>\n\n<p>This dataset depends on the <a href=\"https://www.quantconnect.com/datasets/quantconnect-us-equity-security-master\">US Equity Security Master</a> dataset because the US Equity Security Master dataset contains information on splits, dividends, and symbol changes.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p><a href=\"https://regalytics.ai/\">RegAlytics</a> was founded by Mary Kopczynski, Aaron Heisler, Alexander Appugliese, and Werner Pauliks in 2019 with the goal of significantly reducing the time and cost required to mitigate regulatory risk. RegAlytics provides access to accurate and clean regulatory data from US regulators that is enriched by regulatory experts for risk and compliance teams everywhere.</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nregalytics_symbol = self.AddData(RegalyticsRegulatoryArticle, \"REG\").Symbol\n</code></pre>\n<pre><code class=\"language-cs\">\nvar regAnalyticsSymbol = AddData&lt;RegalyticsRegulatoryArticle&gt;(\"REG\").Symbol;\n</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 2020</td>\n        </tr><tr><td>Coverage</td>\n            <td>40,000 Alerts</td>\n        </tr><tr><td>Data Density</td>\n            <td>Sparse</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>New York</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe RegAlytics US Regulator Alters dataset enables researchers to accurately design strategies while mitigating regulatory risk. Examples include: \n</p>\n<ul><li>Temporarily increasing/decreasing exposure to securities when new regulations are announced</li>\n<li>Parsing the content of regulatory announcements to determine market or sector impact</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_17ad96de486698b84297c1a157996a10.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Regulatory Alerts dataset provides RegalyticsRegulatoryArticle objects, which have the following attributes:</p>\n\n<div data-tree=\"QuantConnect.DataSource.RegalyticsRegulatoryArticle\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add US Regulatory Alerts data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass RegalyticsDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000) \n        \n        self.regalytics_symbol = self.AddData(RegalyticsRegulatoryArticle, \"REG\").Symbol</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class RegalyticsDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _regAnalyticsSymbol;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            \n            _regAnalyticsSymbol = AddData&lt;RegalyticsRegulatoryArticle&gt;(\"REG\").Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    if data.ContainsKey(self.regalytics_symbol):\n        alert = data[self.regalytics_symbol]\n        self.Debug(f\"Regulatory Alert received at {alert.Time}. Id: {alert.Id}; Title: {alert.Title}; Summary: {alert.Summary}; Status: {alert.Status}; Classification: {alert.Classification}; FilingType: {alert.FilingType}; InFederalRegister: {alert.InFederalRegister}; FederalRegisterNumber: {alert.FederalRegisterNumber}; ProposedCommentsDueDate: {alert.ProposedCommentsDueDate}; OriginalPublicationDate: {alert.OriginalPublicationDate}; FederalRegisterPublicationDate: {alert.FederalRegisterPublicationDate}; RuleEffectiveDate: {alert.RuleEffectiveDate}; LatestUpdate: {alert.LatestUpdate}; AlertType: {alert.AlertType}; States: {alert.States}; Agencies: {alert.Agencies}; AnnouncementUrl: {alert.AnnouncementUrl}\");</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    if (data.ContainsKey(_regAnalyticsSymbol))\n    {\n        var alert = data[_regAnalyticsSymbol];\n        Debug($\"Regulatory Alert received at {alert.Time}. Id: {alert.Id}; Title: {alert.Title}; Summary: {alert.Summary}; Status: {alert.Status}; Classification: {alert.Classification}; FilingType: {alert.FilingType}; InFederalRegister: {alert.InFederalRegister}; FederalRegisterNumber: {alert.FederalRegisterNumber}; ProposedCommentsDueDate: {alert.ProposedCommentsDueDate}; OriginalPublicationDate: {alert.OriginalPublicationDate}; FederalRegisterPublicationDate: {alert.FederalRegisterPublicationDate}; RuleEffectiveDate: {alert.RuleEffectiveDate}; LatestUpdate: {alert.LatestUpdate}; AlertType: {alert.AlertType}; States: {alert.States}; Agencies: {alert.Agencies}; AnnouncementUrl: {alert.AnnouncementUrl}\");\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for US Regulatory Alerts by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.regalytics_symbol, 14, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History&lt;RegalyticsRegulatoryArticle&gt;(_regAnalyticsSymbol, 14, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Regulatory Alerts dataset provides RegalyticsRegulatoryArticle objects, which have the following attributes:</p>\n\n<div data-tree=\"QuantConnect.DataSource.RegalyticsRegulatoryArticle\"></div>"
      }
    ],
    "priceCTA": "From $10/mo",
    "vendorWebsite": "http://regalytics.ai/",
    "examples": [
      {
        "id": 379,
        "master_product_id": 28,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we buy and hold the S&amp;P 500 ETF, SPY. To reduce regulatory risk, we liquidate our holdings for 2 days following regulatory announcements regarding new rules.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass RegalyticsDataAlgorithm(QCAlgorithm):\n    \n    last_news_date = datetime.min\n    target_holdings = 1\n    negative_sentiment_phrases = [\"emergency rule\", \"proposed rule change\", \"development of rulemaking\"] \n    news_affect_duration = timedelta(days = 2)\n    \n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000) \n        \n        self.symbol = self.AddEquity(\"SPY\", Resolution.Daily).Symbol\n        \n        # Requesting data\n        self.regalytics_symbol = self.AddData(RegalyticsRegulatoryArticle, \"REG\").Symbol\n        \n        # Historical data\n        history = self.History(self.regalytics_symbol, 7, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request\")\n        \n    def OnData(self, data):\n        if data.ContainsKey(self.regalytics_symbol) and data[self.regalytics_symbol] is not None:\n            article = data[self.regalytics_symbol]\n            title = article.Title.lower()\n            \n            # Signal an exit from the market when regulatory articles with negative sentiment are released\n            for phrase in self.negative_sentiment_phrases:\n                if phrase in title:\n                    self.target_holdings = 0\n                    self.last_news_date = data.Time\n        \n        # Signal an entry if we've waited long enough for the market to digest the negative news\n        if self.target_holdings == 0 and self.last_news_date + self.news_affect_duration &lt; data.Time:\n            self.target_holdings = 1\n        \n        # Rebalance if we need to and there is data available in the current slice\n        if data.ContainsKey(self.symbol) and data[self.symbol] is not None:\n            if (self.target_holdings == 1) != self.Portfolio.Invested:\n                self.SetHoldings(self.symbol, self.target_holdings)</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class RegalyticsDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _symbol;\n        private Symbol _regalyticsSymbol; \n        private DateTime _lastNewsDate = DateTime.MinValue;\n        private int _targetHoldings = 1;\n        private List&lt;string&gt; _negativeSentimentPhrases = new List&lt;string&gt;(){\"emergency rule\", \"proposed rule change\", \"development of rulemaking\"};\n        private TimeSpan _newsAffectDuration = TimeSpan.FromDays(2);\n        \n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            \n            _symbol = AddEquity(\"SPY\", Resolution.Daily).Symbol;\n            \n            // Requesting data\n            _regalyticsSymbol = AddData&lt;RegalyticsRegulatoryArticle&gt;(\"REG\").Symbol;\n            \n            // Historical data\n            var history = History&lt;RegalyticsRegulatoryArticle&gt;(_regalyticsSymbol, 7, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request\");\n        }\n\n        public override void OnData(Slice data)\n        {\n            if (data.ContainsKey(_regalyticsSymbol) &amp;&amp; data[_regalyticsSymbol] != null)\n            {\n                var article = data[_regalyticsSymbol];\n                var title = article.Title.ToLower();\n                \n                // Signal an exit from the market when regulatory articles with negative sentiment are released\n                foreach (var phrase in _negativeSentimentPhrases)\n                {\n                    if (title.Contains(phrase))\n                    {\n                        _targetHoldings = 0;\n                        _lastNewsDate = data.Time;\n                    }\n                }\n            }\n            \n            // Signal an entry if we've waited long enough for the market to digest the negative news\n            if (_targetHoldings == 0 &amp;&amp; _lastNewsDate + _newsAffectDuration &lt; data.Time)\n            {\n                _targetHoldings = 1;\n            }\n            \n            // Rebalance if we need to and there is data available in the current slice\n            if (data.ContainsKey(_symbol) &amp;&amp; data[_symbol] != null)\n            {\n                if ((_targetHoldings == 1) != Portfolio.Invested)\n                {\n                    SetHoldings(_symbol, _targetHoldings);\n                }\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-10-19 21:01:01"
      },
      {
        "id": 381,
        "master_product_id": 28,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this example, we buy and hold the S&amp;P 500 ETF, SPY. To reduce regulatory risk, we liquidate our holdings for 2 days following regulatory announcements regarding new rules.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass RegalyticsDataAlgorithm(QCAlgorithm):\n    \n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000) \n        \n        self.UniverseSettings.Resolution = Resolution.Daily\n        symbols = [ Symbol.Create(\"SPY\", SecurityType.Equity, Market.USA) ]\n        self.AddUniverseSelection(ManualUniverseSelectionModel(symbols))\n        \n        self.AddAlpha(RegAnalyticsAlphaModel(self))\n        \n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel(lambda time: None))\n        \n        self.AddRiskManagement(NullRiskManagementModel())\n        \n        self.SetExecution(ImmediateExecutionModel())\n\n                \nclass RegAnalyticsAlphaModel(AlphaModel):\n    \n    symbols = []\n    last_news_date = datetime.min\n    target_direction = InsightDirection.Up\n    negative_sentiment_phrases = [\"emergency rule\", \"proposed rule change\", \"development of rulemaking\"] \n    news_affect_duration = timedelta(days = 2)\n    \n    def __init__(self, algorithm):\n        # Requesting data\n        self.regalytics_symbol = algorithm.AddData(RegalyticsRegulatoryArticle, \"REG\").Symbol\n        \n        # Historical data\n        history = algorithm.History(self.regalytics_symbol, 14, Resolution.Daily)\n        algorithm.Debug(f\"We got {len(history)} from our history request\")\n\n\n    def Update(self, algorithm, data):\n        insights = []\n        \n        if data.ContainsKey(self.regalytics_symbol) and data[self.regalytics_symbol] is not None:\n            article = data[self.regalytics_symbol]\n            title = article.Title.lower()\n            \n            # Signal an exit from the market when regulatory articles with negative sentiment are released\n            for phrase in self.negative_sentiment_phrases:\n                if phrase in title:\n                    self.target_direction = InsightDirection.Flat\n                    self.last_news_date = data.Time\n        \n        \n        # Signal an entry if we've waited long enough for the market to digest the negative news\n        if self.last_news_date + self.news_affect_duration &lt; data.Time:\n            self.target_direction = InsightDirection.Up\n        \n        for symbol in self.symbols:\n            # Ensure we have security data in the current Slice\n            if not (data.ContainsKey(symbol) and data[symbol] is not None):\n                continue\n            \n            if self.target_direction == InsightDirection.Up and not algorithm.Portfolio[symbol].Invested:\n                insights += [Insight.Price(symbol, timedelta(days=90), InsightDirection.Up)]\n            elif self.target_direction == InsightDirection.Flat and algorithm.Portfolio[symbol].Invested:\n                insights += [Insight.Price(symbol, self.news_affect_duration, InsightDirection.Flat)]\n        \n        return insights\n        \n        \n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            self.symbols.append(security.Symbol)\n        \n        for security in changes.RemovedSecurities:\n            symbol = security.Symbol\n            if symbol in self.symbols:\n                self.symbols.remove(symbol)</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class RegalyticsDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            \n            UniverseSettings.Resolution = Resolution.Daily;\n            AddUniverseSelection(\n                new ManualUniverseSelectionModel(\n                    QuantConnect.Symbol.Create(\"SPY\", SecurityType.Equity, Market.USA)\n            ));\n            \n            AddAlpha(new RegAnalyticsAlphaModel(this));\n            \n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel(time =&gt; null));\n            \n            AddRiskManagement(new NullRiskManagementModel());\n            \n            SetExecution(new ImmediateExecutionModel());\n        }\n        \n        public class RegAnalyticsAlphaModel : AlphaModel\n        {\n            private List&lt;Symbol&gt; _symbols = new List&lt;Symbol&gt;();\n            private Symbol _regalyticsSymbol;\n            private DateTime _lastNewsDate = DateTime.MinValue;\n            private InsightDirection _targetDirection = InsightDirection.Up;\n            private List&lt;string&gt; _negativeSentimentPhrases = new List&lt;string&gt;(){\"emergency rule\", \"proposed rule change\", \"development of rulemaking\"};\n            private TimeSpan _newsAffectDuration = TimeSpan.FromDays(2);\n             \n            public RegAnalyticsAlphaModel(QCAlgorithm algorithm)\n            {\n                // Requesting data\n                _regalyticsSymbol = algorithm.AddData&lt;RegalyticsRegulatoryArticle&gt;(\"REG\").Symbol;\n                \n                // Historical data\n                var history = algorithm.History&lt;RegalyticsRegulatoryArticle&gt;(_regalyticsSymbol, 14, Resolution.Daily);\n                algorithm.Debug($\"We got {history.Count()} items from our history request\");\n            }\n    \n            public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n            {\n                var insights = new List&lt;Insight&gt;();\n                \n                if (data.ContainsKey(_regalyticsSymbol) &amp;&amp; data[_regalyticsSymbol] != null)\n                {\n                    var article = data[_regalyticsSymbol];\n                    var title = article.Title.ToLower();\n                    \n                    // Signal an exit from the market when regulatory articles with negative sentiment are released\n                    foreach (var phrase in _negativeSentimentPhrases)\n                    {\n                        if (title.Contains(phrase))\n                        {\n                            _targetDirection = InsightDirection.Flat;\n                            _lastNewsDate = data.Time;\n                        }\n                    }\n                }\n                \n                // Signal an entry if we've waited long enough for the market to digest the negative news\n                if (_lastNewsDate + _newsAffectDuration &lt; data.Time)\n                {\n                    _targetDirection = InsightDirection.Up;\n                }\n                \n                foreach (var symbol in _symbols)\n                {\n                    // Ensure we have security data in the current Slice\n                    if (!(data.ContainsKey(symbol) &amp;&amp; data[symbol] != null))\n                    {\n                        continue;\n                    }\n                    \n                    if (_targetDirection == InsightDirection.Up &amp;&amp; !algorithm.Portfolio[symbol].Invested)\n                    {\n                        insights.Add(Insight.Price(symbol, TimeSpan.FromDays(90), InsightDirection.Up));\n                    }\n                    else if (_targetDirection == InsightDirection.Flat &amp;&amp; algorithm.Portfolio[symbol].Invested)\n                    {\n                        insights.Add(Insight.Price(symbol, _newsAffectDuration, InsightDirection.Flat));\n                    }\n                }\n                return insights;\n            }\n    \n            public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n            {\n                foreach (var security in changes.AddedSecurities)\n                {\n                    _symbols.Add(security.Symbol);\n                }\n                \n                foreach (var security in changes.RemovedSecurities)\n                {\n                    _symbols.Remove(security.Symbol);\n                }\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-10-19 21:01:27"
      }
    ],
    "pricingText": "RegAlytics offers pricing per organization type, scaled according to your team-size.",
    "pricing": [
      {
        "id": null,
        "master_product_id": 28,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>US Regulatory Alerts is allowed to be used in the cloud \r\n            for personal and commercial projects with a subscription. The data is permissioned for use within \r\n            the licensed organization only</p><p>Subscription Required | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>US Regulatory Alerts can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 200 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>US Regulatory Alerts is allowed to be used for free by approved Alpha Stream authors with more than 3 \r\n                    Alpha Streams listed in the marketplace. The RegAlytics will add on a charge of 2 Basis Points \r\n                    for the use of the data to the Alpha Stream reserve price.</p>\r\n                    <p>Free for Authors with 3+ Alphas | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 110,
        "name": "Download RegAnalytics - US Regulatory Alerts",
        "description": "<p>On premise download of RegAlytics daily alert data for use in LEAN backtesting. </p>\n<ul><li>Regulatory alerts from 3000 agencies</li>\n        <li>Body summary text for NLP</li>\n        <li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n</ul>",
        "shortDescription": "On Premise Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "200 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 93,
        "name": "Cloud RegAnalytics - US Regulatory Alerts",
        "description": "<p>Cloud access to RegAlytics Regulatory Articles delivered nightly for use in backtesting or live-trading.</p>\n<ul><li>Regulatory alerts from 3000 agencies</li>\n    <li>Human reviewed for accuracy</li>\n    <li>Body summary text for NLP</li>\n</ul>",
        "shortDescription": "Cloud Access US Regulatory Alerts",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "$10/mo",
          "monthlyPrice": 10,
          "yearlyPrice": 110,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 110
      }
    ],
    "headerColor": "8b000a"
  },
  {
    "name": "US Equity Options",
    "vendorName": "AlgoSeek",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/algoseek-logo.svg",
    "landingFileName": "algoseek-us-equity-options.html",
    "url": "/datasets/algoseek-us-equity-options",
    "short_description": "Trade and quote US Equity Options data by AlgoSeek for 4,000 tickers since 2021. Data is available at minute resolution only.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The US Equity Options data by AlgoSeek provides Option data, including prices, strikes, expires, implied volatility, and Greeks. The data covers 4,000 Symbols, starts in January 2012, and is delivered on a minute frequency. This dataset is created by monitoring Options Price Reporting Authority (OPRA) data feed, which consolidates last sale and quotation information originating from the national securities exchanges that have been approved by the Securities and Exchange Commission.\n</p>\n\n<p>This dataset depends on the <a href=\"https://www.quantconnect.com/datasets/quantconnect-us-equity-security-master\">US Equity Security Master</a> dataset because the US Equity Security Master dataset contains information on splits, dividends, and symbol changes of the underlying security.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p><a href=\"https://www.algoseek.com/\">AlgoSeek</a> was in 2014 with the goal of providing the highest quality, most accurate, ready-to-use data in the financial data industry. AlgoSeek provides access to Equities, ETFs, ETNs, Equity Indices, Equity Options, Futures, and Future Options for quantitative firms and traders.</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">option = self.AddOption(\"GOOG\")\nself.option_symbol = option.Symbol\noption.SetFilter(-2, +2, 0, 180)\n</code></pre>\n<pre><code class=\"language-cs\">var option = AddOption(\"GOOG\");\n_optionSymbol = option.Symbol;\noption.SetFilter(-2, +2, 0, 180);</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 2012*</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>4,000 Symbols</td>\n        </tr><tr><td>Data Density</td>\n            <td>Dense</td>\n        </tr><tr><td>Resolution</td>\n            <td>Minute</td>\n        </tr><tr><td>Timezone</td>\n            <td>New York</td>\n        </tr></tbody></table><p>* Some data is available before this date. In 2012, AlgoSeek started to fetch data from 48 OPRA channels instead of 24, increasing the quality of the data.</p>"
      },
      {
        "title": "Supported Assets",
        "content": "<p>To view the supported assets in the US Equity Options dataset, see the <a href=\"/data/tree/option/usa/minute\">Data Explorer</a>.</p>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe AlgoSeek US Equity Options dataset enables researchers to accurately design Option strategies. Examples include: \n</p>\n<ul><li>Buying put Options to hedge against downward price movement in positive Equity positions</li>\n<li>Exploiting arbitrage opportunities that arise when the price of Option contracts deviate from their theoretical value</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_8064a8e471387f89850c8dde8d4f7619.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Equity Options dataset provides TradeBar, QuoteBar, and OpenInterest objects.</p>\n\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>OpenInterest Attributes</h4>\n<p>OpenInterest objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.OpenInterest\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add US Equity Options data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on requesting market data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class USEquityOptionsDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        option = self.AddOption(\"GOOG\")\n        self.option_symbol = option.Symbol\n        # Set our strike/expiry filter for this option chain\n        option.SetFilter(-2, +2, 0, 180)\n</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class USEquityOptionsDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _optionSymbol;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            \n            // Requesting data\n            var option = AddOption(\"GOOG\");\n            _optionSymbol = option.Symbol;\n            // Set our strike/expiry filter for this option chain\n            option.SetFilter(-2, +2, 0, 180);\n        }\n    }\n}</code></pre>\n</div>\n\n<p>The Equity resolution must be less than or equal to the Equity Option resolution. Equity Options only have minute resolution available, so the Equity must have tick, second, or minute resolution.</p>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in minute resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    for kvp in data.OptionChains:\n        for contract in kvp.Value:\n            self.Debug(f\"Time: {self.Time}; Canonical Symbol: {kvp.Key}; Contract: {contract}; Right: {contract.Right}; Expiry: {contract.Expiry}; Bid price: {contract.BidPrice}; Ask price: {contract.AskPrice}; ImpliedVolatility: {contract.ImpliedVolatility}; Delta: {contract.Greeks.Delta}; Gamma: {contract.Greeks.Gamma}; Vega: {contract.Greeks.Vega}; Rho: {contract.Greeks.Rho}; Lambda: {contract.Greeks.Lambda}\")</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    foreach (var kvp in data.OptionChains)\n    {\n        foreach (var contract in kvp.Value)\n        {\n            Log($\"Time: {Time}; Canonical Symbol: {kvp.Key}; Contract: {contract}; Right: {contract.Right}; Expiry: {contract.Expiry}; Bid price: {contract.BidPrice}; Ask price: {contract.AskPrice}; ImpliedVolatility: {contract.ImpliedVolatility}; Delta: {contract.Greeks.Delta}; Gamma: {contract.Greeks.Gamma}; Vega: {contract.Greeks.Vega}; Rho: {contract.Greeks.Rho}; Lambda: {contract.Greeks.Lambda}\");    \n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical Options data by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for US Options by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(contract.Symbol, 10, Resolution.Minute)</code></pre>\n<pre><code class=\"language-cs\">var history = History(contract.Symbol, 10, Resolution.Minute);</code></pre>\n</div>\n\n<p>You can request historical Options data in the Research environment by using the GetOptionHistory method of the QuantBook class. To learn more about historical data requests for Options in the Research environment, please visit the <a href=\"https://www.quantconnect.com/docs/research/historical-data#Historical-Data-Historical-Options-Data\">Research Historical Data</a> documentation. The following example gets the historical data for US Options in the Research environment.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">qb = QuantBook()\noption = qb.AddOption(\"GOOG\") \noption.SetFilter(-2, +2, timedelta(0), timedelta(180))\nhistory = qb.GetOptionHistory(option.Symbol, datetime(2020, 6, 1), datetime(2020, 6, 5))\nhistory.GetAllData()</code></pre>\n<pre><code class=\"language-cs\">var qb = new QuantBook();\nvar option = qb.AddOption(\"GOOG\");\noption.SetFilter(-2, +2, TimeSpan.FromDays(0), TimeSpan.FromDays(180));\nvar history = qb.GetOptionHistory(option.Symbol, new DateTime(2020, 6, 1), new DateTime(2020, 6, 5));\nvar historicalOptionData = history.GetAllData();</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Equity Options dataset provides TradeBar, QuoteBar, and OpenInterest objects.</p>\n\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>OpenInterest Attributes</h4>\n<p>OpenInterest objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.OpenInterest\"></div>"
      }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "",
    "examples": [
      {
        "id": 395,
        "master_product_id": 29,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we subscribe to Google Options that fall within 2 strikes of the underlying stock price and expire within 7 days. Within this option chain, we buy the call Option contract that has the furthest expiry and has its strike price closest to the underlying stock price. When the contract expires, we roll over to the next contract that meets our criteria.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass USEquityOptionsDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2020, 8, 1)\n        self.SetCash(100000)\n\n        # Requesting data\n        self.underlying = self.AddEquity(\"GOOG\").Symbol\n        option = self.AddOption(\"GOOG\")\n        self.option_symbol = option.Symbol\n        # Set our strike/expiry filter for this option chain\n        option.SetFilter(-2, +2, 0, 7)\n        \n        self.contract = None\n\n    def OnData(self, data):\n        if self.Portfolio[self.underlying].Invested:\n            self.Liquidate(self.underlying)\n\n        if self.contract is not None and self.Portfolio[self.contract.Symbol].Invested:\n            return\n\n        chain = data.OptionChains.get(self.option_symbol)\n        if chain:\n            # Select call contracts\n            calls = [contract for contract in chain if contract.Right == OptionRight.Call]\n            if len(calls) == 0:\n                return\n            \n            # Select the call contracts with the furthest expiration\n            furthest_expiry = sorted(calls, key = lambda x: x.Expiry, reverse=True)[0].Expiry\n            furthest_expiry_calls = [contract for contract in calls if contract.Expiry == furthest_expiry]\n            \n            # From the remaining contracts, select the one with its strike closest to the underlying price\n            self.contract = sorted(furthest_expiry_calls, key = lambda x: abs(chain.Underlying.Price - x.Strike))[0]\n            self.MarketOrder(self.contract.Symbol, 1)\n                \n                \n    def OnSecuritiesChanged(self, changes):\n        \n        for security in changes.AddedSecurities:\n            # Historical data\n            history = self.History(security.Symbol, 10, Resolution.Minute)\n            self.Debug(f\"We got {len(history)} from our history request for {security.Symbol}\")</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class USEquityOptionsDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _underlying;\n        private Symbol _optionSymbol;\n        private OptionContract? _contract = null;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2020, 8, 1);\n            SetCash(100000);\n            \n            // Requesting data\n            _underlying = AddEquity(\"GOOG\").Symbol;\n            var option = AddOption(\"GOOG\");\n            _optionSymbol = option.Symbol;\n            // Set our strike/expiry filter for this option chain\n            option.SetFilter(-2, +2, 0, 7);\n        }\n\n        public override void OnData(Slice data)\n        {\n            if (Portfolio[_underlying].Invested)\n            {\n                Liquidate(_underlying);\n            }\n            \n            if (_contract != null &amp;&amp; Portfolio[_contract.Symbol].Invested)\n            {\n                return;\n            }\n                \n                \n            var chain = data.OptionChains.get(_optionSymbol);\n            if (chain != null)\n            {\n                // Select call contracts\n                var calls = chain.Where(x =&gt; x.Right == OptionRight.Call).ToList();\n                if (calls.Count() == 0)\n                {\n                    return;\n                }\n                \n                // Select the call contracts with the furthest expiration\n                var furthestExpiry = calls.OrderByDescending(x =&gt; x.Expiry).First().Expiry;\n                var furthestExpiryCalls = calls.Where(x =&gt; x.Expiry == furthestExpiry).ToList();\n                \n                // From the remaining contracts, select the one with its strike closest to the underlying price\n                var contract = furthestExpiryCalls.OrderByDescending(x =&gt; Math.Abs(chain.Underlying.Price - x.Strike)).Last();\n                \n                _contract = contract;\n                MarketOrder(contract.Symbol, 1);\n            }\n        }\n        \n        public override void OnSecuritiesChanged(SecurityChanges changes)\n        {\n            foreach (var security in changes.AddedSecurities)\n            {\n                // Historical data\n                var history = History(security.Symbol, 100, Resolution.Minute);\n                Debug($\"We got {history.Count()} from our history request for {security.Symbol}\");\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-07-09 14:09:46"
      },
      {
        "id": 397,
        "master_product_id": 29,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this example, we buy the Google call Option that expires within 7 days and has its strike closest to the underlying stock price. When the contract expires, we roll over to the next contract that meets our criteria.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\nfrom Selection.OptionUniverseSelectionModel import OptionUniverseSelectionModel\n\nclass USEquityOptionsDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        \n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2020, 8, 1)\n        self.SetCash(100000)\n\n        # Requesting data\n        self.SetUniverseSelection(EarliestExpiringWeeklyAtTheMoneyCallOptionUniverseSelectionModel(self.SelectOptionChainSymbols))\n        \n        self.SetAlpha(ConstantOptionsAlphaModel())\n        self.SetPortfolioConstruction(SingleSharePortfolioConstructionModel())\n        \n    def SelectOptionChainSymbols(self, utcTime):\n        return [ Symbol.Create(\"GOOG\", SecurityType.Option, Market.USA) ]\n        \n        \nclass EarliestExpiringWeeklyAtTheMoneyCallOptionUniverseSelectionModel(OptionUniverseSelectionModel):\n    '''Creates option chain universes that select only the earliest expiry ATM weekly call contract\n    and runs a user defined optionChainSymbolSelector every day to enable choosing different option chains'''\n    def __init__(self, select_option_chain_symbols):\n        super().__init__(timedelta(1), select_option_chain_symbols)\n\n    def Filter(self, filter):\n        '''Defines the option chain universe filter'''\n        return (filter.Strikes(-1, -1)\n                      .Expiration(0, 7)\n                      .WeeklysOnly()\n                      .CallsOnly()\n                      .OnlyApplyFilterAtMarketOpen())        \n        \n\nclass ConstantOptionsAlphaModel(AlphaModel):\n\n    underlying = None\n    contract = None\n\n    def Update(self, algorithm, data):\n        \n        insights = []\n        \n        if algorithm.Portfolio[self.underlying].Invested:\n            insights.append(Insight.Price(self.underlying, timedelta(days=7), InsightDirection.Flat))\n\n        if self.contract is not None and algorithm.Portfolio[self.contract.Symbol].Invested:\n            return insights\n\n        for kvp in data.OptionChains:\n            chain = kvp.Value\n            self.contract = [contract for contract in chain][0]\n            insights.append(Insight.Price(self.contract.Symbol, self.contract.Expiry + timedelta(days=1), InsightDirection.Up))\n        \n        return insights\n        \n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            if security.Type == SecurityType.Equity:\n                self.underlying = security.Symbol\n            else:\n                # Historical data\n                history = algorithm.History(security.Symbol, 10, Resolution.Minute)\n                algorithm.Debug(f\"We got {len(history)} from our history request for {security.Symbol}\")\n\n\nclass SingleSharePortfolioConstructionModel(PortfolioConstructionModel):\n    def CreateTargets(self, algorithm, insights):\n        targets = []\n        for insight in insights:\n            if algorithm.Securities[insight.Symbol].IsTradable:\n                targets.append(PortfolioTarget(insight.Symbol, insight.Direction))\n        return targets</code></pre>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing QuantConnect.Algorithm.Framework.Alphas;\nusing QuantConnect.Algorithm.Framework.Execution;\nusing QuantConnect.Algorithm.Framework.Portfolio;\nusing QuantConnect.Algorithm.Framework.Risk;\nusing QuantConnect.Algorithm.Framework.Selection;\nusing QuantConnect.Interfaces;\nusing QuantConnect.Securities;\n\nnamespace QuantConnect.Algorithm.CSharp\n{\n    public class USEquityOptionsDataAlgorithm : QCAlgorithm\n    {        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2020, 8, 1);\n            SetCash(100000);\n            \n            // Requesting data\n            SetUniverseSelection(new EarliestExpiringWeeklyAtTheMoneyCallOptionUniverseSelectionModel(SelectOptionChainSymbols));\n            \n            SetAlpha(new ConstantOptionsAlphaModel());\n            SetPortfolioConstruction(new SingleSharePortfolioConstructionModel());\n        }\n        \n        \n        private static IEnumerable&lt;Symbol&gt; SelectOptionChainSymbols(DateTime utcTime)\n        {\n            yield return QuantConnect.Symbol.Create(\"GOOG\", SecurityType.Option, Market.USA);\n        }\n\n        class EarliestExpiringWeeklyAtTheMoneyCallOptionUniverseSelectionModel : OptionUniverseSelectionModel\n        {\n            public EarliestExpiringWeeklyAtTheMoneyCallOptionUniverseSelectionModel(Func&lt;DateTime, IEnumerable&lt;Symbol&gt;&gt; optionChainSymbolSelector)\n                    : base(TimeSpan.FromDays(1), optionChainSymbolSelector) {}\n                \n            protected override OptionFilterUniverse Filter(OptionFilterUniverse filter)\n            {\n                return filter\n                    .Strikes(-1, -1)\n                    .Expiration(0, 7)\n                    .WeeklysOnly()\n                    .CallsOnly()\n                    .OnlyApplyFilterAtMarketOpen();\n            }\n        }\n        \n        class ConstantOptionsAlphaModel : AlphaModel\n        { \n            private Symbol? _underlying = null;\n            private OptionContract? _contract = null;\n            \n            public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n            {\n                var insights = new List&lt;Insight&gt;();\n                \n                if (algorithm.Portfolio[_underlying].Invested)\n                {\n                    insights.Add(Insight.Price(_underlying, TimeSpan.FromDays(7), InsightDirection.Flat));\n                }\n                    \n                if (_contract != null &amp;&amp; algorithm.Portfolio[_contract.Symbol].Invested)\n                {\n                    return insights;\n                }\n                \n                \n                foreach (var kvp in data.OptionChains)\n                {\n                    var chain = kvp.Value;\n                    _contract = chain.Last();\n                    insights.Add(Insight.Price(_contract.Symbol, _contract.Expiry + TimeSpan.FromDays(1), InsightDirection.Up));\n                }    \n                return insights;\n            }\n        \n            public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n            {\n                foreach (var security in changes.AddedSecurities)\n                {\n                    if (security.Type == SecurityType.Equity)\n                    {\n                        _underlying = security.Symbol;\n                    }\n                    else {\n                        // Historical data\n                        var history = algorithm.History(security.Symbol, 100, Resolution.Minute);\n                        algorithm.Debug($\"We got {history.Count()} from our history request for {security.Symbol}\");    \n                    }\n                }\n            }\n        }\n        \n        \n        class SingleSharePortfolioConstructionModel : PortfolioConstructionModel\n        {\n            public override IEnumerable&lt;PortfolioTarget&gt; CreateTargets(QCAlgorithm algorithm, Insight[] insights)\n            {\n                var targets = new List&lt;PortfolioTarget&gt;();\n                foreach (var insight in insights)\n                {\n                    if (algorithm.Securities[insight.Symbol].IsTradable)\n                    {\n                        targets.Add(new PortfolioTarget(insight.Symbol, (int) insight.Direction));\n                    }\n                }\n                return targets;\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-07-02 22:42:05"
      }
    ],
    "pricingText": "The QuantConnect-AlgoSeek partnership provides free access to US Equities market data in QuantConnect Cloud and paid access for downloads. Downloads are distributed in LEAN format and priced according to file resolution as below. This dataset depends on the US Security Master dataset because the US Security Master dataset contains information on splits, dividends, and symbol changes of the underlying security.",
    "pricing": [
      {
        "id": null,
        "master_product_id": 29,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>US Equity Options is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>US Equity Options can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 15 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>US Equity Options is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 94,
        "name": "AlgoSeek Options - Cloud Access",
        "description": "<p>Freely harness terabytes of US Equity Options data in the QuantConnect Cloud for your backtesting and live trading purposes.\n </p>\n    <ul><li>Curated, clean data</li>\n    <li>Updated nightly at 4am</li>\n    <li>American Standard and Weekly Equity Options</li>\n    <li>Option Margin Modeling Supported</li>\n                                        </ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 109,
        "name": "AlgoSeek Options - On Premise Download",
        "description": "<p>US Equity Options Minute resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day (include all contracts).</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>American Standard and Weekly Equity Options</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "On Premise Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "15 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      }
    ],
    "headerColor": "04a3db"
  },
  {
    "name": "US Futures",
    "vendorName": "AlgoSeek",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/algoseek-logo.svg",
    "landingFileName": "algoseek-us-futures.html",
    "url": "/datasets/algoseek-us-futures",
    "short_description": "Trade and quote US Futures data for the 142 most liquid tickers across the CME, CBOT, NYMEX, and COMEX markets.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The US Futures dataset by AlgoSeek provides Futures data, including price, volume, open interest, and expiry. The data covers the 75 most liquid contracts, starts in May 2009, and is delivered on any frequency from tick to daily. This dataset is created by monitoring the trading activity on the  CFE, CME, CBOT, NYMEX, ICE, SGX, HKFE, India, and COMEX markets.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\nAlgoSeek is a leading historical intraday US market data provider offering the most comprehensive and detailed market data and analytics products in the financial industry covering equities, futures, options, cash forex, and cryptocurrencies. AlgoSeek data is built for quantitative trading and machine learning.  For more information about AlgoSeek, visit <a href=\"https://www.algoseek.com\">algoseek.com</a>.\n</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">self.mini_gold = self.AddFuture(Futures.Metals.Gold)\nself.mini_gold .SetFilter(0, 90)\nself.micro_gold = self.AddFuture(Futures.Metals.MicroGold)\nself.micro_gold .SetFilter(0, 90)</code></pre>\n<pre><code class=\"language-cs\">_miniGold = AddFuture(Futures.Metals.Gold);\n_miniGold .SetFilter(0, 90);\n_microGold = AddFuture(Futures.Metals.MicroGold);\n_microGold .SetFilter(0, 90);</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>May 2009</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>75 Futures</td>\n        </tr><tr><td>Data Density</td>\n            <td>Dense</td>\n        </tr><tr><td>Resolution</td>\n            <td>Tick, Second, Minute, &amp; Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td><ul><li>Chicago (CME or CBOT)</li><li>New York (ICE, NYMEX or COMEX)</li><li>Singapore time (SGX)</li><li>Indian Standard Time (India)</li><li>Hong Kong Standard Time (HKFE)</li></ul></td>\n        </tr></tbody></table>"
      },
      {
        "title": "Supported Assets",
        "content": "<p>To view the supported assets in the US Futures dataset, see the <a href=\"/data/tree/future\">Data Explorer</a>.</p>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe AlgoSeek US Futures dataset enables researchers to accurately design Futures strategies. Examples include: \n</p>\n<ul><li>Buying the Futures contract with the most open interest to reduce slippage and market impact</li>\n<li>Trading bull calendar spreads to reduce volatility and margin requirements</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_9cab22f75bbc1438de1097e891489a50.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Futures dataset provides FuturesChain, Future, and OpenInterest objects. To configure the continuous Future settings, use the DataNormalizationMode and DataMappingMode enumerations.</p>\n\n<h4>DataNormalizationMode Values</h4>\n<p>The DataNormalizationMode enumeration has the following values:</p>\n<div data-tree=\"QuantConnect.DataNormalizationMode\"></div>\n\n<h4>DataMappingMode Values</h4>\n<p>The DataMappingMode enumeration has the following values:</p>\n<div data-tree=\"QuantConnect.DataMappingMode\"></div>\n\n<h4>Future Attributes</h4>\n<p>Future objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Securities.Future.Future\"></div>\n\n<h4>FuturesChain Attributes</h4>\n<p>FuturesChain objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.FuturesChain\"></div>\n\n<h4>OpenInterest Attributes</h4>\n<p>OpenInterest objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.OpenInterest\"></div>\n\n<h4>Reference Table</h4>\n<div class=\"sub-heading-content\"><p>The following reference table shows the Future assets you can use on QuantConnect. Add these Futures to your algorithm with the Symbol or the accessor code.\n</p>\n<table class=\"table qc-table table-reflow\"><thead><tr><th colspan=\"3\">Name</th></tr><tr><th>Symbol</th><th>Market</th><th>Accessor Code</th></tr></thead><tbody><tr><th colspan=\"3\">Black Sea Corn Financially Settled (Platts) Futures</th></tr><tr><td>BCF</td><td>CBOT</td><td><code>Futures.Grains.BlackSeaCornFinanciallySettledPlatts</code></td></tr><tr><th colspan=\"3\">Black Sea Wheat Financially Settled (Platts) Futures</th></tr><tr><td>BWF</td><td>CBOT</td><td><code>Futures.Grains.BlackSeaWheatFinanciallySettledPlatts</code></td></tr><tr><th colspan=\"3\">Chicago SRW Wheat Futures</th></tr><tr><td>ZW</td><td>CBOT</td><td><code>Futures.Grains.SRWWheat</code></td></tr><tr><th colspan=\"3\">KC HRW Wheat Futures</th></tr><tr><td>KE</td><td>CBOT</td><td><code>Futures.Grains.HRWWheat</code></td></tr><tr><th colspan=\"3\">Corn Futures</th></tr><tr><td>ZC</td><td>CBOT</td><td><code>Futures.Grains.Corn</code></td></tr><tr><th colspan=\"3\">Soybean Futures</th></tr><tr><td>ZS</td><td>CBOT</td><td><code>Futures.Grains.Soybeans</code></td></tr><tr><th colspan=\"3\">Soybean Meal Futures</th></tr><tr><td>ZM</td><td>CBOT</td><td><code>Futures.Grains.SoybeanMeal</code></td></tr><tr><th colspan=\"3\">Soybean Oil Futures</th></tr><tr><td>ZL</td><td>CBOT</td><td><code>Futures.Grains.SoybeanOil</code></td></tr><tr><th colspan=\"3\">Oats Futures</th></tr><tr><td>ZO</td><td>CBOT</td><td><code>Futures.Grains.Oats</code></td></tr><tr><th colspan=\"3\">US Dollar Index Futures</th></tr><tr><td>DX</td><td>ICE</td><td><code>Futures.Currencies.USD</code></td></tr><tr><th colspan=\"3\">British Pound Futures</th></tr><tr><td>6B</td><td>CME</td><td><code>Futures.Currencies.GBP</code></td></tr><tr><th colspan=\"3\">Canadian Dollar Futures</th></tr><tr><td>6C</td><td>CME</td><td><code>Futures.Currencies.CAD</code></td></tr><tr><th colspan=\"3\">Japanese Yen Futures</th></tr><tr><td>6J</td><td>CME</td><td><code>Futures.Currencies.JPY</code></td></tr><tr><th colspan=\"3\">Swiss Franc Futures</th></tr><tr><td>6S</td><td>CME</td><td><code>Futures.Currencies.CHF</code></td></tr><tr><th colspan=\"3\">Euro FX Futures</th></tr><tr><td>6E</td><td>CME</td><td><code>Futures.Currencies.EUR</code></td></tr><tr><th colspan=\"3\">Australian Dollar Futures</th></tr><tr><td>6A</td><td>CME</td><td><code>Futures.Currencies.AUD</code></td></tr><tr><th colspan=\"3\">New Zealand Dollar Futures</th></tr><tr><td>6N</td><td>CME</td><td><code>Futures.Currencies.NZD</code></td></tr><tr><th colspan=\"3\">Russian Ruble Futures</th></tr><tr><td>6R</td><td>CME</td><td><code>Futures.Currencies.RUB</code></td></tr><tr><th colspan=\"3\">Brazilian Real Futures</th></tr><tr><td>6L</td><td>CME</td><td><code>Futures.Currencies.BRL</code></td></tr><tr><th colspan=\"3\">Mexican Peso Futures</th></tr><tr><td>6M</td><td>CME</td><td><code>Futures.Currencies.MXN</code></td></tr><tr><th colspan=\"3\">South African Rand Futures</th></tr><tr><td>6Z</td><td>CME</td><td><code>Futures.Currencies.ZAR</code></td></tr><tr><th colspan=\"3\">Australian Dollar/Canadian Dollar Futures</th></tr><tr><td>ACD</td><td>CME</td><td><code>Futures.Currencies.AUDCAD</code></td></tr><tr><th colspan=\"3\">Australian Dollar/Japanese Yen Futures</th></tr><tr><td>AJY</td><td>CME</td><td><code>Futures.Currencies.AUDJPY</code></td></tr><tr><th colspan=\"3\">Australian Dollar/New Zealand Dollar Futures</th></tr><tr><td>ANE</td><td>CME</td><td><code>Futures.Currencies.AUDNZD</code></td></tr><tr><th colspan=\"3\">Bitcoin Futures</th></tr><tr><td>BTC</td><td>CME</td><td><code>Futures.Currencies.BTC</code></td></tr><tr><th colspan=\"3\">Canadian Dollar/Japanese Yen Futures</th></tr><tr><td>CJY</td><td>CME</td><td><code>Futures.Currencies.CADJPY</code></td></tr><tr><th colspan=\"3\">Standard-Size USD/Offshore RMB (CNH) Futures</th></tr><tr><td>CNH</td><td>CME</td><td><code>Futures.Currencies.StandardSizeUSDOffshoreRMBCNH</code></td></tr><tr><th colspan=\"3\">E-mini Euro FX Futures</th></tr><tr><td>E7</td><td>CME</td><td><code>Futures.Currencies.EuroFXEmini</code></td></tr><tr><th colspan=\"3\">Euro/Australian Dollar Futures</th></tr><tr><td>EAD</td><td>CME</td><td><code>Futures.Currencies.EURAUD</code></td></tr><tr><th colspan=\"3\">Euro/Canadian Dollar Futures</th></tr><tr><td>ECD</td><td>CME</td><td><code>Futures.Currencies.EURCAD</code></td></tr><tr><th colspan=\"3\">Euro/Swedish Krona Futures</th></tr><tr><td>ESK</td><td>CME</td><td><code>Futures.Currencies.EURSEK</code></td></tr><tr><th colspan=\"3\">E-mini Japanese Yen Futures</th></tr><tr><td>J7</td><td>CME</td><td><code>Futures.Currencies.JapaneseYenEmini</code></td></tr><tr><th colspan=\"3\">Micro Euro/U.S. Dollar (EUR/USD) Futures</th></tr><tr><td>M6E</td><td>CME</td><td><code>Futures.Currencies.MicroEUR</code></td></tr><tr><th colspan=\"3\">Micro Australian Dollar/U.S. Dollar (AUD/USD) Futures</th></tr><tr><td>M6A</td><td>CME</td><td><code>Futures.Currencies.MicroAUD</code></td></tr><tr><th colspan=\"3\">Micro British Pound Sterling/U.S. Dollar (GBP/USD) Futures</th></tr><tr><td>M6B</td><td>CME</td><td><code>Futures.Currencies.MicroGBP</code></td></tr><tr><th colspan=\"3\">Micro Canadian Dollar/U.S.Dollar(CAD/USD) Futures</th></tr><tr><td>MCD</td><td>CME</td><td><code>Futures.Currencies.MicroCADUSD</code></td></tr><tr><th colspan=\"3\">Micro Japanese Yen/U.S. Dollar (JPY/USD) Futures</th></tr><tr><td>MJY</td><td>CME</td><td><code>Futures.Currencies.MicroJPY</code></td></tr><tr><th colspan=\"3\">Micro Swiss Franc/U.S. Dollar (CHF/USD) Futures</th></tr><tr><td>MSF</td><td>CME</td><td><code>Futures.Currencies.MicroCHF</code></td></tr><tr><th colspan=\"3\">Micro USD/JPY Futures</th></tr><tr><td>M6J</td><td>CME</td><td><code>Futures.Currencies.MicroUSDJPY</code></td></tr><tr><th colspan=\"3\">Micro INR/USD Futures</th></tr><tr><td>MIR</td><td>CME</td><td><code>Futures.Currencies.MicroINRUSD</code></td></tr><tr><th colspan=\"3\">Micro USD/CAD Futures</th></tr><tr><td>M6C</td><td>CME</td><td><code>Futures.Currencies.MicroCAD</code></td></tr><tr><th colspan=\"3\">Micro USD/CHF Futures</th></tr><tr><td>M6S</td><td>CME</td><td><code>Futures.Currencies.MicroUSDCHF</code></td></tr><tr><th colspan=\"3\">Micro USD/CNH Futures</th></tr><tr><td>MNH</td><td>CME</td><td><code>Futures.Currencies.MicroUSDCNH</code></td></tr><tr><th colspan=\"3\">Micro Ether Futures</th></tr><tr><td>MET</td><td>CME</td><td><code>Futures.Currencies.MicroEther</code></td></tr><tr><th colspan=\"3\">Micro Bitcoin Futures</th></tr><tr><td>MBT</td><td>CME</td><td><code>Futures.Currencies.MicroBTC</code></td></tr><tr><th colspan=\"3\">BTIC on Micro Ether Futures</th></tr><tr><td>MRB</td><td>CME</td><td><code>Futures.Currencies.BTICMicroEther</code></td></tr><tr><th colspan=\"3\">BTIC on Micro Bitcoin Futures</th></tr><tr><td>MIB</td><td>CME</td><td><code>Futures.Currencies.BTICMicroBTC</code></td></tr><tr><th colspan=\"3\">Propane Non-LDH Mont Belvieu (OPIS) BALMO Futures</th></tr><tr><td>1S</td><td>NYMEX</td><td><code>Futures.Energies.PropaneNonLDHMontBelvieu</code></td></tr><tr><th colspan=\"3\">Argus Propane Far East Index BALMO Futures</th></tr><tr><td>22</td><td>NYMEX</td><td><code>Futures.Energies.ArgusPropaneFarEastIndexBALMO</code></td></tr><tr><th colspan=\"3\">Mini European 3.5% Fuel Oil Barges FOB Rdam (Platts) Futures</th></tr><tr><td>A0D</td><td>NYMEX</td><td><code>Futures.Energies.MiniEuropeanThreePointPercentFiveFuelOilBargesPlatts</code></td></tr><tr><th colspan=\"3\">Mini Singapore Fuel Oil 180 cst (Platts) Futures</th></tr><tr><td>A0F</td><td>NYMEX</td><td><code>Futures.Energies.MiniSingaporeFuelOil180CstPlatts</code></td></tr><tr><th colspan=\"3\">Gulf Coast ULSD (Platts) Up-Down BALMO Futures</th></tr><tr><td>A1L</td><td>NYMEX</td><td><code>Futures.Energies.GulfCoastULSDPlattsUpDownBALMO</code></td></tr><tr><th colspan=\"3\">Gulf Coast Jet (Platts) Up-Down BALMO Futures</th></tr><tr><td>A1M</td><td>NYMEX</td><td><code>Futures.Energies.GulfCoastJetPlattsUpDownBALMO</code></td></tr><tr><th colspan=\"3\">Propane Non-LDH Mont Belvieu (OPIS) Futures</th></tr><tr><td>A1R</td><td>NYMEX</td><td><code>Futures.Energies.PropaneNonLDHMontBelvieuOPIS</code></td></tr><tr><th colspan=\"3\">European Propane CIF ARA (Argus) BALMO Futures</th></tr><tr><td>A32</td><td>NYMEX</td><td><code>Futures.Energies.EuropeanPropaneCIFARAArgusBALMO</code></td></tr><tr><th colspan=\"3\">Premium Unleaded Gasoline 10 ppm FOB MED (Platts) Futures</th></tr><tr><td>A3G</td><td>NYMEX</td><td><code>Futures.Energies.PremiumUnleadedGasoline10ppmFOBMEDPlatts</code></td></tr><tr><th colspan=\"3\">Argus Propane Far East Index Futures</th></tr><tr><td>A7E</td><td>NYMEX</td><td><code>Futures.Energies.ArgusPropaneFarEastIndex</code></td></tr><tr><th colspan=\"3\">Gasoline Euro-bob Oxy NWE Barges (Argus) Crack Spread BALMO Futures</th></tr><tr><td>A7I</td><td>NYMEX</td><td><code>Futures.Energies.GasolineEurobobOxyNWEBargesArgusCrackSpreadBALMO</code></td></tr><tr><th colspan=\"3\">Mont Belvieu Natural Gasoline (OPIS) Futures</th></tr><tr><td>A7Q</td><td>NYMEX</td><td><code>Futures.Energies.MontBelvieuNaturalGasolineOPIS</code></td></tr><tr><th colspan=\"3\">Mont Belvieu Normal Butane (OPIS) BALMO Futures</th></tr><tr><td>A8J</td><td>NYMEX</td><td><code>Futures.Energies.MontBelvieuNormalButaneOPISBALMO</code></td></tr><tr><th colspan=\"3\">Conway Propane (OPIS) Futures</th></tr><tr><td>A8K</td><td>NYMEX</td><td><code>Futures.Energies.ConwayPropaneOPIS</code></td></tr><tr><th colspan=\"3\">Mont Belvieu LDH Propane (OPIS) BALMO Futures</th></tr><tr><td>A8O</td><td>NYMEX</td><td><code>Futures.Energies.MontBelvieuLDHPropaneOPISBALMO</code></td></tr><tr><th colspan=\"3\">Argus Propane Far East Index vs. European Propane CIF ARA (Argus) Futures</th></tr><tr><td>A91</td><td>NYMEX</td><td><code>Futures.Energies.ArgusPropaneFarEastIndexVsEuropeanPropaneCIFARAArgus</code></td></tr><tr><th colspan=\"3\">Argus Propane (Saudi Aramco) Futures</th></tr><tr><td>A9N</td><td>NYMEX</td><td><code>Futures.Energies.ArgusPropaneSaudiAramco</code></td></tr><tr><th colspan=\"3\">Group Three ULSD (Platts) vs. NY Harbor ULSD Futures</th></tr><tr><td>AA6</td><td>NYMEX</td><td><code>Futures.Energies.GroupThreeULSDPlattsVsNYHarborULSD</code></td></tr><tr><th colspan=\"3\">Group Three Sub-octane Gasoline (Platts) vs. RBOB Futures</th></tr><tr><td>AA8</td><td>NYMEX</td><td><code>Futures.Energies.GroupThreeSuboctaneGasolinePlattsVsRBOB</code></td></tr><tr><th colspan=\"3\">Singapore Fuel Oil 180 cst (Platts) BALMO Futures</th></tr><tr><td>ABS</td><td>NYMEX</td><td><code>Futures.Energies.SingaporeFuelOil180cstPlattsBALMO</code></td></tr><tr><th colspan=\"3\">Singapore Fuel Oil 380 cst (Platts) BALMO Futures</th></tr><tr><td>ABT</td><td>NYMEX</td><td><code>Futures.Energies.SingaporeFuelOil380cstPlattsBALMO</code></td></tr><tr><th colspan=\"3\">Mont Belvieu Ethane (OPIS) Futures</th></tr><tr><td>AC0</td><td>NYMEX</td><td><code>Futures.Energies.MontBelvieuEthaneOPIS</code></td></tr><tr><th colspan=\"3\">Mont Belvieu Normal Butane (OPIS) Futures</th></tr><tr><td>AD0</td><td>NYMEX</td><td><code>Futures.Energies.MontBelvieuNormalButaneOPIS</code></td></tr><tr><th colspan=\"3\">Brent Crude Oil vs. Dubai Crude Oil (Platts) Futures</th></tr><tr><td>ADB</td><td>NYMEX</td><td><code>Futures.Energies.BrentCrudeOilVsDubaiCrudeOilPlatts</code></td></tr><tr><th colspan=\"3\">Argus LLS vs. WTI (Argus) Trade Month Futures</th></tr><tr><td>AE5</td><td>NYMEX</td><td><code>Futures.Energies.ArgusLLSvsWTIArgusTradeMonth</code></td></tr><tr><th colspan=\"3\">Singapore Gasoil (Platts) vs. Low Sulphur Gasoil Futures</th></tr><tr><td>AGA</td><td>NYMEX</td><td><code>Futures.Energies.SingaporeGasoilPlattsVsLowSulphurGasoilFutures</code></td></tr><tr><th colspan=\"3\">Los Angeles CARBOB Gasoline (OPIS) vs. RBOB Gasoline Futures</th></tr><tr><td>AJL</td><td>NYMEX</td><td><code>Futures.Energies.LosAngelesCARBOBGasolineOPISvsRBOBGasoline</code></td></tr><tr><th colspan=\"3\">Los Angeles Jet (OPIS) vs. NY Harbor ULSD Futures</th></tr><tr><td>AJS</td><td>NYMEX</td><td><code>Futures.Energies.LosAngelesJetOPISvsNYHarborULSD</code></td></tr><tr><th colspan=\"3\">Los Angeles CARB Diesel (OPIS) vs. NY Harbor ULSD Futures</th></tr><tr><td>AKL</td><td>NYMEX</td><td><code>Futures.Energies.LosAngelesCARBDieselOPISvsNYHarborULSD</code></td></tr><tr><th colspan=\"3\">European Naphtha (Platts) BALMO Futures</th></tr><tr><td>AKZ</td><td>NYMEX</td><td><code>Futures.Energies.EuropeanNaphthaPlattsBALMO</code></td></tr><tr><th colspan=\"3\">European Propane CIF ARA (Argus) Futures</th></tr><tr><td>APS</td><td>NYMEX</td><td><code>Futures.Energies.EuropeanPropaneCIFARAArgus</code></td></tr><tr><th colspan=\"3\">Mont Belvieu Natural Gasoline (OPIS) BALMO Futures</th></tr><tr><td>AR0</td><td>NYMEX</td><td><code>Futures.Energies.MontBelvieuNaturalGasolineOPISBALMO</code></td></tr><tr><th colspan=\"3\">RBOB Gasoline Crack Spread Futures</th></tr><tr><td>ARE</td><td>NYMEX</td><td><code>Futures.Energies.RBOBGasolineCrackSpread</code></td></tr><tr><th colspan=\"3\">Gulf Coast HSFO (Platts) BALMO Futures</th></tr><tr><td>AVZ</td><td>NYMEX</td><td><code>Futures.Energies.GulfCoastHSFOPlattsBALMO</code></td></tr><tr><th colspan=\"3\">Mars (Argus) vs. WTI Trade Month Futures</th></tr><tr><td>AYV</td><td>NYMEX</td><td><code>Futures.Energies.MarsArgusVsWTITradeMonth</code></td></tr><tr><th colspan=\"3\">Mars (Argus) vs. WTI Financial Futures</th></tr><tr><td>AYX</td><td>NYMEX</td><td><code>Futures.Energies.MarsArgusVsWTIFinancial</code></td></tr><tr><th colspan=\"3\">Ethanol T2 FOB Rdam Including Duty (Platts) Futures</th></tr><tr><td>AZ1</td><td>NYMEX</td><td><code>Futures.Energies.EthanolT2FOBRdamIncludingDutyPlatts</code></td></tr><tr><th colspan=\"3\">Mont Belvieu LDH Propane (OPIS) Futures</th></tr><tr><td>B0</td><td>NYMEX</td><td><code>Futures.Energies.MontBelvieuLDHPropaneOPIS</code></td></tr><tr><th colspan=\"3\">Gasoline Euro-bob Oxy NWE Barges (Argus) Futures</th></tr><tr><td>B7H</td><td>NYMEX</td><td><code>Futures.Energies.GasolineEurobobOxyNWEBargesArgus</code></td></tr><tr><th colspan=\"3\">WTI-Brent Financial Futures</th></tr><tr><td>BK</td><td>NYMEX</td><td><code>Futures.Energies.WTIBrentFinancial</code></td></tr><tr><th colspan=\"3\">3.5% Fuel Oil Barges FOB Rdam (Platts) Crack Spread (1000mt) Futures</th></tr><tr><td>BOO</td><td>NYMEX</td><td><code>Futures.Energies.ThreePointFivePercentFuelOilBargesFOBRdamPlattsCrackSpread1000mt</code></td></tr><tr><th colspan=\"3\">Gasoline Euro-bob Oxy NWE Barges (Argus) BALMO Futures</th></tr><tr><td>BR7</td><td>NYMEX</td><td><code>Futures.Energies.GasolineEurobobOxyNWEBargesArgusBALMO</code></td></tr><tr><th colspan=\"3\">Brent Last Day Financial Futures</th></tr><tr><td>BZ</td><td>NYMEX</td><td><code>Futures.Energies.BrentLastDayFinancial</code></td></tr><tr><th colspan=\"3\">Crude Oil Futures</th></tr><tr><td>CL</td><td>NYMEX</td><td><code>Futures.Energies.CrudeOilWTI</code></td></tr><tr><th colspan=\"3\">Gulf Coast CBOB Gasoline A2 (Platts) vs. RBOB Gasoline Futures</th></tr><tr><td>CRB</td><td>NYMEX</td><td><code>Futures.Energies.GulfCoastCBOBGasolineA2PlattsVsRBOBGasoline</code></td></tr><tr><th colspan=\"3\">Clearbrook Bakken Sweet (NE2) Monthly Index Futures</th></tr><tr><td>CSW</td><td>NYMEX</td><td><code>Futures.Energies.ClearbrookBakkenSweetCrudeOilMonthlyIndexNetEnergy</code></td></tr><tr><th colspan=\"3\">WTI Financial Futures</th></tr><tr><td>CSX</td><td>NYMEX</td><td><code>Futures.Energies.WTIFinancial</code></td></tr><tr><th colspan=\"3\">Chicago Ethanol (Platts) Futures</th></tr><tr><td>CU</td><td>NYMEX</td><td><code>Futures.Energies.ChicagoEthanolPlatts</code></td></tr><tr><th colspan=\"3\">Singapore Mogas 92 Unleaded (Platts) Brent Crack Spread Futures</th></tr><tr><td>D1N</td><td>NYMEX</td><td><code>Futures.Energies.SingaporeMogas92UnleadedPlattsBrentCrackSpread</code></td></tr><tr><th colspan=\"3\">Dubai Crude Oil (Platts) Financial Futures</th></tr><tr><td>DCB</td><td>NYMEX</td><td><code>Futures.Energies.DubaiCrudeOilPlattsFinancial</code></td></tr><tr><th colspan=\"3\">Japan C&amp;F Naphtha (Platts) BALMO Futures</th></tr><tr><td>E6</td><td>NYMEX</td><td><code>Futures.Energies.JapanCnFNaphthaPlattsBALMO</code></td></tr><tr><th colspan=\"3\">Ethanol Futures</th></tr><tr><td>EH</td><td>CBOT</td><td><code>Futures.Energies.Ethanol</code></td></tr><tr><th colspan=\"3\">European Naphtha (Platts) Crack Spread Futures</th></tr><tr><td>EN</td><td>NYMEX</td><td><code>Futures.Energies.EuropeanNaphthaPlattsCrackSpread</code></td></tr><tr><th colspan=\"3\">European Propane CIF ARA (Argus) vs. Naphtha Cargoes CIF NWE (Platts) Futures</th></tr><tr><td>EPN</td><td>NYMEX</td><td><code>Futures.Energies.EuropeanPropaneCIFARAArgusVsNaphthaCargoesCIFNWEPlatts</code></td></tr><tr><th colspan=\"3\">Singapore Fuel Oil 380 cst (Platts) vs. European 3.5% Fuel Oil Barges FOB Rdam (Platts) Futures</th></tr><tr><td>EVC</td><td>NYMEX</td><td><code>Futures.Energies.SingaporeFuelOil380cstPlattsVsEuropeanThreePointFivePercentFuelOilBargesFOBRdamPlatts</code></td></tr><tr><th colspan=\"3\">East-West Gasoline Spread (Platts-Argus) Futures</th></tr><tr><td>EWG</td><td>NYMEX</td><td><code>Futures.Energies.EastWestGasolineSpreadPlattsArgus</code></td></tr><tr><th colspan=\"3\">East-West Naphtha: Japan C&amp;F vs. Cargoes CIF NWE Spread (Platts) Futures</th></tr><tr><td>EWN</td><td>NYMEX</td><td><code>Futures.Energies.EastWestNaphthaJapanCFvsCargoesCIFNWESpreadPlatts</code></td></tr><tr><th colspan=\"3\">RBOB Gasoline vs. Euro-bob Oxy NWE Barges (Argus) (350000 gallons) Futures</th></tr><tr><td>EXR</td><td>NYMEX</td><td><code>Futures.Energies.RBOBGasolineVsEurobobOxyNWEBargesArgusThreeHundredFiftyThousandGallons</code></td></tr><tr><th colspan=\"3\">3.5% Fuel Oil Barges FOB Rdam (Platts) Crack Spread Futures</th></tr><tr><td>FO</td><td>NYMEX</td><td><code>Futures.Energies.ThreePointFivePercentFuelOilBargesFOBRdamPlattsCrackSpread</code></td></tr><tr><th colspan=\"3\">Freight Route TC14 (Baltic) Futures</th></tr><tr><td>FRC</td><td>NYMEX</td><td><code>Futures.Energies.FreightRouteTC14Baltic</code></td></tr><tr><th colspan=\"3\">1% Fuel Oil Cargoes FOB NWE (Platts) vs. 3.5% Fuel Oil Barges FOB Rdam (Platts) Futures</th></tr><tr><td>FSS</td><td>NYMEX</td><td><code>Futures.Energies.OnePercentFuelOilCargoesFOBNWEPlattsVsThreePointFivePercentFuelOilBargesFOBRdamPlatts</code></td></tr><tr><th colspan=\"3\">Gulf Coast HSFO (Platts) vs. European 3.5% Fuel Oil Barges FOB Rdam (Platts) Futures</th></tr><tr><td>GCU</td><td>NYMEX</td><td><code>Futures.Energies.GulfCoastHSFOPlattsVsEuropeanThreePointFivePercentFuelOilBargesFOBRdamPlatts</code></td></tr><tr><th colspan=\"3\">WTI Houston Crude Oil Futures</th></tr><tr><td>HCL</td><td>NYMEX</td><td><code>Futures.Energies.WTIHoustonCrudeOil</code></td></tr><tr><th colspan=\"3\">Natural Gas (Henry Hub) Last-day Financial Futures</th></tr><tr><td>HH</td><td>NYMEX</td><td><code>Futures.Energies.NaturalGasHenryHubLastDayFinancial</code></td></tr><tr><th colspan=\"3\">NY Harbor ULSD Futures</th></tr><tr><td>HO</td><td>NYMEX</td><td><code>Futures.Energies.HeatingOil</code></td></tr><tr><th colspan=\"3\">Natural Gas (Henry Hub) Penultimate Financial Futures</th></tr><tr><td>HP</td><td>NYMEX</td><td><code>Futures.Energies.NaturalGasHenryHubPenultimateFinancial</code></td></tr><tr><th colspan=\"3\">WTI Houston (Argus) vs. WTI Trade Month Futures</th></tr><tr><td>HTT</td><td>NYMEX</td><td><code>Futures.Energies.WTIHoustonArgusVsWTITradeMonth</code></td></tr><tr><th colspan=\"3\">RBOB Gasoline Futures</th></tr><tr><td>RB</td><td>NYMEX</td><td><code>Futures.Energies.Gasoline</code></td></tr><tr><th colspan=\"3\">Henry Hub Natural Gas Futures</th></tr><tr><td>NG</td><td>NYMEX</td><td><code>Futures.Energies.NaturalGas</code></td></tr><tr><th colspan=\"3\">Brent Crude Futures</th></tr><tr><td>B</td><td>ICE</td><td><code>Futures.Energies.BrentCrude</code></td></tr><tr><th colspan=\"3\">Low Sulfur Gasoil</th></tr><tr><td>G</td><td>ICE</td><td><code>Futures.Energies.LowSulfurGasoil</code></td></tr><tr><th colspan=\"3\">Micro WTI Crude Oil Futures</th></tr><tr><td>MCL</td><td>NYMEX</td><td><code>Futures.Energies.MicroCrudeOilWTI</code></td></tr><tr><th colspan=\"3\">Micro Singapore FOB Marine Fuel 0.5% (Platts) Futures</th></tr><tr><td>S5O</td><td>NYMEX</td><td><code>Futures.Energies.MicroSingaporeFOBMarineFuelZeroPointFivePercetPlatts</code></td></tr><tr><th colspan=\"3\">Micro Gasoil 0.1% Barges FOB ARA (Platts) Futures</th></tr><tr><td>M1B</td><td>NYMEX</td><td><code>Futures.Energies.MicroGasoilZeroPointOnePercentBargesFOBARAPlatts</code></td></tr><tr><th colspan=\"3\">Micro European FOB Rdam Marine Fuel 0.5% Barges (Platts) Futures</th></tr><tr><td>R5O</td><td>NYMEX</td><td><code>Futures.Energies.MicroEuropeanFOBRdamMarineFuelZeroPointFivePercentBargesPlatts</code></td></tr><tr><th colspan=\"3\">Micro European 3.5% Fuel Oil Barges FOB Rdam (Platts) Futures</th></tr><tr><td>MEF</td><td>NYMEX</td><td><code>Futures.Energies.MicroEuropeanThreePointFivePercentOilBargesFOBRdamPlatts</code></td></tr><tr><th colspan=\"3\">Micro Singapore Fuel Oil 380CST (Platts) Futures </th></tr><tr><td>MAF</td><td>NYMEX</td><td><code>Futures.Energies.MicroSingaporeFuelOil380CSTPlatts</code></td></tr><tr><th colspan=\"3\">Micro Coal (API 5) fob Newcastle (Argus/McCloskey) Futures</th></tr><tr><td>M5F</td><td>NYMEX</td><td><code>Futures.Energies.MicroCoalAPIFivefobNewcastleArgusMcCloskey</code></td></tr><tr><th colspan=\"3\">Micro European 3.5% Fuel Oil Cargoes FOB Med (Platts) Futures</th></tr><tr><td>M35</td><td>NYMEX</td><td><code>Futures.Energies.MicroEuropeanThreePointFivePercentFuelOilCargoesFOBMedPlatts</code></td></tr><tr><th colspan=\"3\">U.S. Treasury Bond Futures</th></tr><tr><td>ZB</td><td>CBOT</td><td><code>Futures.Financials.Y30TreasuryBond</code></td></tr><tr><th colspan=\"3\">10-Year T-Note Futures</th></tr><tr><td>ZN</td><td>CBOT</td><td><code>Futures.Financials.Y10TreasuryNote</code></td></tr><tr><th colspan=\"3\">5-Year T-Note Futures</th></tr><tr><td>ZF</td><td>CBOT</td><td><code>Futures.Financials.Y5TreasuryNote</code></td></tr><tr><th colspan=\"3\">2-Year T-Note Futures</th></tr><tr><td>ZT</td><td>CBOT</td><td><code>Futures.Financials.Y2TreasuryNote</code></td></tr><tr><th colspan=\"3\">Eurodollar Futures</th></tr><tr><td>GE</td><td>CME</td><td><code>Futures.Financials.EuroDollar</code></td></tr><tr><th colspan=\"3\">5-Year USD MAC Swap Futures</th></tr><tr><td>F1U</td><td>CBOT</td><td><code>Futures.Financials.FiveYearUSDMACSwap</code></td></tr><tr><th colspan=\"3\">Ultra U.S. Treasury Bond Futures</th></tr><tr><td>UB</td><td>CBOT</td><td><code>Futures.Financials.UltraUSTreasuryBond</code></td></tr><tr><th colspan=\"3\">Ultra 10-Year U.S. Treasury Note Futures</th></tr><tr><td>TN</td><td>CBOT</td><td><code>Futures.Financials.UltraTenYearUSTreasuryNote</code></td></tr><tr><th colspan=\"3\">Micro 10-Year Yield Futures</th></tr><tr><td>10Y</td><td>CBOT</td><td><code>Futures.Financials.MicroY10TreasuryNote</code></td></tr><tr><th colspan=\"3\">Micro 30-Year Yield Futures</th></tr><tr><td>30Y</td><td>CBOT</td><td><code>Futures.Financials.MicroY30TreasuryBond</code></td></tr><tr><th colspan=\"3\">Micro 2-Year Yield Futures</th></tr><tr><td>2YY</td><td>CBOT</td><td><code>Futures.Financials.MicroY2TreasuryBond</code></td></tr><tr><th colspan=\"3\">Micro 5-Year Yield Futures</th></tr><tr><td>5YY</td><td>CBOT</td><td><code>Futures.Financials.MicroY5TreasuryBond</code></td></tr><tr><th colspan=\"3\">E-mini S&amp;P 500 Futures</th></tr><tr><td>ES</td><td>CME</td><td><code>Futures.Indices.SP500EMini</code></td></tr><tr><th colspan=\"3\">E-mini Nasdaq-100 Futures</th></tr><tr><td>NQ</td><td>CME</td><td><code>Futures.Indices.NASDAQ100EMini</code></td></tr><tr><th colspan=\"3\">E-mini Dow ($5) Futures</th></tr><tr><td>YM</td><td>CBOT</td><td><code>Futures.Indices.Dow30EMini</code></td></tr><tr><th colspan=\"3\">VIX futures </th></tr><tr><td>VX</td><td>CFE</td><td><code>Futures.Indices.VIX</code></td></tr><tr><th colspan=\"3\">E-mini  Russell 2000 Index Futures</th></tr><tr><td>RTY</td><td>CME</td><td><code>Futures.Indices.Russell2000EMini</code></td></tr><tr><th colspan=\"3\">Nikkei/USD Futures</th></tr><tr><td>NKD</td><td>CME</td><td><code>Futures.Indices.Nikkei225Dollar</code></td></tr><tr><th colspan=\"3\">Bloomberg Commodity Index Futures</th></tr><tr><td>AW</td><td>CBOT</td><td><code>Futures.Indices.BloombergCommodityIndex</code></td></tr><tr><th colspan=\"3\">E-mini Nasdaq-100 Biotechnology Index Futures</th></tr><tr><td>BIO</td><td>CME</td><td><code>Futures.Indices.NASDAQ100BiotechnologyEMini</code></td></tr><tr><th colspan=\"3\">E-mini FTSE Emerging Index Futures</th></tr><tr><td>EI</td><td>CME</td><td><code>Futures.Indices.FTSEEmergingEmini</code></td></tr><tr><th colspan=\"3\">E-mini S&amp;P MidCap 400 Futures</th></tr><tr><td>EMD</td><td>CME</td><td><code>Futures.Indices.SP400MidCapEmini</code></td></tr><tr><th colspan=\"3\">S&amp;P-GSCI Commodity Index Futures</th></tr><tr><td>GD</td><td>CME</td><td><code>Futures.Indices.SPGSCICommodity</code></td></tr><tr><th colspan=\"3\">USD-Denominated Ibovespa Index Futures</th></tr><tr><td>IBV</td><td>CME</td><td><code>Futures.Indices.USDDenominatedIbovespa</code></td></tr><tr><th colspan=\"3\">MSCI Taiwan Index Futures</th></tr><tr><td>TW</td><td>SGX</td><td><code>Futures.Indices.MSCITaiwanIndex</code></td></tr><tr><th colspan=\"3\">SGX Nikkei 225 Index Futures</th></tr><tr><td>NK</td><td>SGX</td><td><code>Futures.Indices.Nikkei225Yen</code></td></tr><tr><th colspan=\"3\">Nifty50 Index</th></tr><tr><td>NIFTY</td><td>INDIA</td><td><code>Futures.Indices.Nifty50</code></td></tr><tr><th colspan=\"3\">BankNifty Index</th></tr><tr><td>BANKNIFTY</td><td>INDIA</td><td><code>Futures.Indices.BankNifty</code></td></tr><tr><th colspan=\"3\">BSE S&amp;P Sensex Index</th></tr><tr><td>SENSEX</td><td>INDIA</td><td><code>Futures.Indices.BseSensex</code></td></tr><tr><th colspan=\"3\">Hang Seng Index</th></tr><tr><td>HSI</td><td>HKFE</td><td><code>Futures.Indices.HangSeng</code></td></tr><tr><th colspan=\"3\">Micro E-mini Standard and Poor's 500 Stock Price Index Futures</th></tr><tr><td>MES</td><td>CME</td><td><code>Futures.Indices.MicroSP500EMini</code></td></tr><tr><th colspan=\"3\">Micro E-mini Nasdaq-100 Index Futures</th></tr><tr><td>MNQ</td><td>CME</td><td><code>Futures.Indices.MicroNASDAQ100EMini</code></td></tr><tr><th colspan=\"3\">Micro E-mini Russell 2000 Index Futures</th></tr><tr><td>M2K</td><td>CME</td><td><code>Futures.Indices.MicroRussell2000EMini</code></td></tr><tr><th colspan=\"3\">Micro E-mini Dow Jones Industrial Average Index Futures</th></tr><tr><td>MYM</td><td>CBOT</td><td><code>Futures.Indices.MicroDow30EMini</code></td></tr><tr><th colspan=\"3\">Random Length Lumber Futures</th></tr><tr><td>LBS</td><td>CME</td><td><code>Futures.Forestry.RandomLengthLumber</code></td></tr><tr><th colspan=\"3\">Live Cattle Futures</th></tr><tr><td>LE</td><td>CME</td><td><code>Futures.Meats.LiveCattle</code></td></tr><tr><th colspan=\"3\">Feeder Cattle Futures</th></tr><tr><td>GF</td><td>CME</td><td><code>Futures.Meats.FeederCattle</code></td></tr><tr><th colspan=\"3\">Lean Hog Futures</th></tr><tr><td>HE</td><td>CME</td><td><code>Futures.Meats.LeanHogs</code></td></tr><tr><th colspan=\"3\">Gold Futures</th></tr><tr><td>GC</td><td>COMEX</td><td><code>Futures.Metals.Gold</code></td></tr><tr><th colspan=\"3\">Silver Futures</th></tr><tr><td>SI</td><td>COMEX</td><td><code>Futures.Metals.Silver</code></td></tr><tr><th colspan=\"3\">Platinum Futures</th></tr><tr><td>PL</td><td>NYMEX</td><td><code>Futures.Metals.Platinum</code></td></tr><tr><th colspan=\"3\">Palladium Futures</th></tr><tr><td>PA</td><td>NYMEX</td><td><code>Futures.Metals.Palladium</code></td></tr><tr><th colspan=\"3\">Aluminum MW U.S. Transaction Premium Platts (25MT) Futures</th></tr><tr><td>AUP</td><td>COMEX</td><td><code>Futures.Metals.AluminumMWUSTransactionPremiumPlatts25MT</code></td></tr><tr><th colspan=\"3\">Aluminium European Premium Duty-Paid (Metal Bulletin) Futures</th></tr><tr><td>EDP</td><td>COMEX</td><td><code>Futures.Metals.AluminiumEuropeanPremiumDutyPaidMetalBulletin</code></td></tr><tr><th colspan=\"3\">Copper Futures</th></tr><tr><td>HG</td><td>COMEX</td><td><code>Futures.Metals.Copper</code></td></tr><tr><th colspan=\"3\">U.S. Midwest Domestic Hot-Rolled Coil Steel (CRU) Index Futures</th></tr><tr><td>HRC</td><td>NYMEX</td><td><code>Futures.Metals.USMidwestDomesticHotRolledCoilSteelCRUIndex</code></td></tr><tr><th colspan=\"3\">Micro Gold Futures</th></tr><tr><td>MGC</td><td>COMEX</td><td><code>Futures.Metals.MicroGold</code></td></tr><tr><th colspan=\"3\">Micro Silver Futures</th></tr><tr><td>SIL</td><td>COMEX</td><td><code>Futures.Metals.MicroSilver</code></td></tr><tr><th colspan=\"3\">Micro Gold TAS Futures</th></tr><tr><td>MGT</td><td>COMEX</td><td><code>Futures.Metals.MicroGoldTAS</code></td></tr><tr><th colspan=\"3\">Micro Palladium Futures</th></tr><tr><td>PAM</td><td>NYMEX</td><td><code>Futures.Metals.MicroPalladium</code></td></tr><tr><th colspan=\"3\">Cotton No. 2 Futures</th></tr><tr><td>CT</td><td>ICE</td><td><code>Futures.Softs.Cotton2</code></td></tr><tr><th colspan=\"3\">Frozen Concentrated Orange Juice</th></tr><tr><td>OJ</td><td>ICE</td><td><code>Futures.Softs.OrangeJuice</code></td></tr><tr><th colspan=\"3\">Coffee C Arabica Futures</th></tr><tr><td>KC</td><td>ICE</td><td><code>Futures.Softs.Coffee</code></td></tr><tr><th colspan=\"3\">Sugar No. 11 Futures</th></tr><tr><td>SB</td><td>ICE</td><td><code>Futures.Softs.Sugar11</code></td></tr><tr><th colspan=\"3\">No. 11 Sugar Futures</th></tr><tr><td>YO</td><td>NYMEX</td><td><code>Futures.Softs.Sugar11CME</code></td></tr><tr><th colspan=\"3\">Cocoa Futures</th></tr><tr><td>CC</td><td>ICE</td><td><code>Futures.Softs.Cocoa</code></td></tr><tr><th colspan=\"3\">Cash-settled Butter Futures</th></tr><tr><td>CB</td><td>CME</td><td><code>Futures.Dairy.CashSettledButter</code></td></tr><tr><th colspan=\"3\">Cash-Settled Cheese Futures</th></tr><tr><td>CSC</td><td>CME</td><td><code>Futures.Dairy.CashSettledCheese</code></td></tr><tr><th colspan=\"3\">Class III Milk Futures</th></tr><tr><td>DC</td><td>CME</td><td><code>Futures.Dairy.ClassIIIMilk</code></td></tr><tr><th colspan=\"3\">Dry Whey Futures</th></tr><tr><td>DY</td><td>CME</td><td><code>Futures.Dairy.DryWhey</code></td></tr><tr><th colspan=\"3\">Class IV Milk Futures</th></tr><tr><td>GDK</td><td>CME</td><td><code>Futures.Dairy.ClassIVMilk</code></td></tr><tr><th colspan=\"3\">Nonfat Dry Milk Futures</th></tr><tr><td>GNF</td><td>CME</td><td><code>Futures.Dairy.NonfatDryMilk</code></td></tr></tbody></table></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add US Futures data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on requesting market data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class USFuturesDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2013, 12, 20) \n        self.SetEndDate(2014, 2, 20) \n        self.SetCash(1000000) \n        \n        self.gold = self.AddFuture(Futures.Metals.Gold) \n        self.gold.SetFilter(0, 90)</code></pre>\n<pre><code class=\"language-cs\">using QuantConnect.Securities;\nusing QuantConnect.Securities.Future;\n\nnamespace QuantConnect\n{\n    public class USFuturesDataAlgorithm : QCAlgorithm\n    {\n        private Future _gold;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2013, 12, 20);\n            SetEndDate(2014, 2, 20);\n            SetCash(1000000);\n            \n            _gold = AddFuture(Futures.Metals.Gold);\n            _gold.SetFilter(0, 90);\n        }\n    }\n}\n</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in tick, second, and minute resolutions. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    for kvp in data.FutureChains:\n        for contract in kvp.Value:\n            self.Log(f\"Time: {self.Time}; Underlying Symbol: {kvp.Key}; Contract: {contract}; Open Interest: {contract.OpenInterest}; Expiry: {contract.Expiry}; Last price: {contract.LastPrice}; Volume: {contract.Volume}; Bid price: {contract.BidPrice}; Bid size: {contract.BidSize}; Ask price: {contract.AskPrice}; Ask size: {contract.AskSize};\")</code></pre>\n<pre><code class=\"language-cs\">\npublic override void OnData(Slice data)\n{\n    foreach (var kvp in data.FutureChains)\n    {\n        foreach (var contract in kvp.Value)\n        {\n            Log($\"Time: {Time}; Underlying Symbol: {kvp.Key}; Contract: {contract}; Open Interest: {contract.OpenInterest}; Expiry: {contract.Expiry}; Last price: {contract.LastPrice}; Volume: {contract.Volume}; Bid price: {contract.BidPrice}; Bid size: {contract.BidSize}; Ask price: {contract.AskPrice}; Ask size: {contract.AskSize};\");\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical Futures data by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for US Futures by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(contract.Symbol, 10, Resolution.Minute)</code></pre>\n<pre><code class=\"language-cs\">var history = History(contract.Symbol, 10, Resolution.Minute);</code></pre>\n</div>\n\n<p>You can request historical Futures data in the Research environment by using the GetFutureHistory method of the QuantBook class. To learn more about historical data requests for Futures in the Research environment, please visit the <a href=\"https://www.quantconnect.com/docs/research/historical-data#Historical-Data-Historical-Futures-Data\">Research Historical Data</a> documentation. The following example gets the historical data for US Futures in the Research environment.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">qb = QuantBook()\ngold = qb.AddFuture(Futures.Metals.Gold) \ngold.SetFilter(0, 90)\nhistory = qb.GetFutureHistory(gold.Symbol, datetime(2020, 6, 1), datetime(2020, 6, 5))\nhistory.GetAllData()</code></pre>\n<pre><code class=\"language-cs\">var qb = new QuantBook();\nvar gold = qb.AddFuture(Futures.Metals.Gold);\ngold.SetFilter(0, 90);\nvar history = qb.GetFutureHistory(gold.Symbol, new DateTime(2020, 6, 1), new DateTime(2020, 6, 5));\nvar historicalFutureData = history.GetAllData();</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Futures dataset provides FuturesChain, Future, and OpenInterest objects. To configure the continuous Future settings, use the DataNormalizationMode and DataMappingMode enumerations.</p>\n\n<h4>DataNormalizationMode Values</h4>\n<p>The DataNormalizationMode enumeration has the following values:</p>\n<div data-tree=\"QuantConnect.DataNormalizationMode\"></div>\n\n<h4>DataMappingMode Values</h4>\n<p>The DataMappingMode enumeration has the following values:</p>\n<div data-tree=\"QuantConnect.DataMappingMode\"></div>\n\n<h4>Future Attributes</h4>\n<p>Future objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Securities.Future.Future\"></div>\n\n<h4>FuturesChain Attributes</h4>\n<p>FuturesChain objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.FuturesChain\"></div>\n\n<h4>OpenInterest Attributes</h4>\n<p>OpenInterest objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.OpenInterest\"></div>"
      }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "",
    "examples": [
      {
        "id": 411,
        "master_product_id": 30,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we buy the Mini Gold Futures contract with the greatest open interest, and sell the Micro Gold Futures contract with the greatest open interest. When the open interest of a different contract exceeds the open interest of the contract we're holding, we rebalance the portfolio.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class USFuturesDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2013, 12, 20) \n        self.SetEndDate(2014, 2, 20)\n        self.SetCash(1000000) \n        \n        # Requesting data\n        self.mini_gold = self.AddFuture(Futures.Metals.Gold) \n        self.mini_gold.SetFilter(0, 90)\n        \n        self.micro_gold = self.AddFuture(Futures.Metals.MicroGold) \n        self.micro_gold.SetFilter(0, 90)\n        \n        self.contract = {self.mini_gold.Symbol: None, self.micro_gold.Symbol: None}\n    \n    def OnData(self, data):\n        for kvp in data.FutureChains:\n            symbol = kvp.Key\n            \n            if symbol in self.contract:\n                chain = kvp.Value\n                \n                # Select the contract with the greatest open interest\n                most_liquid_contract = sorted(chain, key=lambda contract: contract.OpenInterest, reverse=True)[0]\n                \n                if self.contract[symbol] is None or most_liquid_contract.Symbol != self.contract[symbol].Symbol:\n                    if self.contract[symbol] is not None:\n                        self.Liquidate(self.contract[symbol].Symbol)\n                    self.contract[symbol] = most_liquid_contract\n                    \n                    if symbol == self.mini_gold.Symbol:\n                        self.MarketOrder(self.contract[symbol].Symbol, 1)\n                    elif symbol == self.micro_gold.Symbol:\n                        self.MarketOrder(self.contract[symbol].Symbol, -1)\n                \n                \n    def OnSecuritiesChanged(self, changes):\n        for security in changes.AddedSecurities:\n            # Historical data\n            history = self.History(security.Symbol, 10, Resolution.Minute)\n            self.Debug(f\"We got {len(history)} from our history request for {security.Symbol}\")</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class USFuturesDataAlgorithm : QCAlgorithm\n    {\n        private Future _miniGold;\n        private Future _microGold;\n        private Dictionary&lt;Symbol, FuturesContract?&gt; _contract = new Dictionary&lt;Symbol, FuturesContract?&gt;();\n        \n        public override void Initialize()\n        {\n            SetStartDate(2013, 12, 20);\n            SetEndDate(2014, 2, 20);\n            SetCash(1000000);\n            \n            _miniGold = AddFuture(Futures.Metals.Gold);\n            _miniGold.SetFilter(0, 90);\n            _contract.Add(_miniGold.Symbol, null);\n            \n            _microGold = AddFuture(Futures.Metals.MicroGold);\n            _microGold.SetFilter(0, 90);\n            _contract.Add(_microGold.Symbol, null);\n        }\n\n        public override void OnData(Slice data)\n        {\n            foreach (var kvp in data.FutureChains)\n            {\n                var symbol = kvp.Key;\n                var chain = kvp.Value;\n                \n                if (_contract.ContainsKey(symbol))\n                {\n                    // Select the contract with the greatest open interest\n                    var mostLiquidContract = chain.OrderBy(x =&gt; x.OpenInterest).Last();\n                    \n                    if (_contract[symbol] == null || mostLiquidContract.Symbol != _contract[symbol].Symbol)\n                    {\n                        if (_contract[symbol] != null)\n                        {\n                            Liquidate(_contract[symbol].Symbol);\n                        }\n                        _contract[symbol] = mostLiquidContract;\n                        \n                        if (symbol == _miniGold.Symbol)\n                        {\n                            MarketOrder(_contract[symbol].Symbol, 1);\n                        }\n                        else if (symbol == _microGold.Symbol)\n                        {\n                            MarketOrder(_contract[symbol].Symbol, -1);\n                        }\n                    }\n                }\n            }\n        }\n        \n        public override void OnSecuritiesChanged(SecurityChanges changes)\n        {\n            foreach (var security in changes.AddedSecurities)\n            {\n                // Historical data\n                var history = History(security.Symbol, 100, Resolution.Minute);\n                Debug($\"We got {history.Count()} from our history request for {security.Symbol}\");\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-02-17 15:24:12"
      },
      {
        "id": 413,
        "master_product_id": 30,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this example, we buy the front-month Mini Gold Futures contract, and sell the front-month Micro Gold Futures contract. When the front-month contract changes, we rebalance the portfolio.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from Selection.FutureUniverseSelectionModel import FutureUniverseSelectionModel\n\nclass USFuturesDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n\n        self.SetStartDate(2013, 12, 20) \n        self.SetEndDate(2014, 2, 20)\n        self.SetCash(100000)\n\n        self.SetUniverseSelection(FrontMonthFutureUniverseSelectionModel(self.SelectFutureChainSymbols))\n        self.AddAlpha(ConstantFuturesAlphaModel(self))\n        self.SetPortfolioConstruction(SingleSharePortfolioConstructionModel())\n        \n    def SelectFutureChainSymbols(self, utcTime):\n        self.mini_gold = Symbol.Create(Futures.Metals.Gold, SecurityType.Future, Market.COMEX)\n        self.micro_gold = Symbol.Create(Futures.Metals.MicroGold, SecurityType.Future, Market.COMEX)\n        \n        return [self.mini_gold, self.micro_gold]\n        \nclass FrontMonthFutureUniverseSelectionModel(FutureUniverseSelectionModel):\n    '''Creates futures chain universes that select the front month contract and runs a user\n    defined futureChainSymbolSelector every day to enable choosing different futures chains'''\n    def __init__(self, select_future_chain_symbols):\n        super().__init__(timedelta(1), select_future_chain_symbols)\n\n    def Filter(self, filter):\n        '''Defines the futures chain universe filter'''\n        return (filter.FrontMonth()\n                      .OnlyApplyFilterAtMarketOpen())\n\nclass ConstantFuturesAlphaModel(AlphaModel):\n    \n    def __init__(self, algo):\n        self.algo = algo\n        \n    def Update(self, algorithm, data):\n        if algorithm.Portfolio.Invested:\n            return []\n        \n        insights = []\n        for kvp in data.FutureChains:\n            chain = [contract for contract in kvp.Value]\n            contract = chain[0]\n            \n            if kvp.Key == self.algo.mini_gold:\n                insights.append(Insight.Price(contract.Symbol, contract.Expiry + timedelta(days=1), InsightDirection.Up))\n            elif kvp.Key == self.algo.micro_gold:\n                insights.append(Insight.Price(contract.Symbol, contract.Expiry + timedelta(days=1), InsightDirection.Down))\n        \n        return insights\n        \n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            # Historical data\n            history = algorithm.History(security.Symbol, 10, Resolution.Minute)\n            algorithm.Debug(f\"We got {len(history)} from our history request for {security.Symbol}\")\n\nclass SingleSharePortfolioConstructionModel(PortfolioConstructionModel):\n    def CreateTargets(self, algorithm, insights):\n        targets = []\n        for insight in insights:\n            if algorithm.Securities[insight.Symbol].IsTradable:\n                targets.append(PortfolioTarget(insight.Symbol, insight.Direction))\n        return targets</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class USFuturesDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _miniGold;\n        private Symbol _microGold;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2013, 12, 20);\n            SetEndDate(2014, 2, 20);\n            SetCash(1000000);\n            \n            // Requesting data\n            SetUniverseSelection(new FrontMonthFutureUniverseSelectionModel(SelectFutureChainSymbols));\n            \n            SetAlpha(new ConstantFuturesAlphaModel(this));\n            SetPortfolioConstruction(new SingleSharePortfolioConstructionModel());\n        }\n        \n        private IEnumerable&lt;Symbol&gt; SelectFutureChainSymbols(DateTime utcTime)\n        {\n            _miniGold = QuantConnect.Symbol.Create(Futures.Metals.Gold, SecurityType.Future, Market.COMEX);\n            _microGold = QuantConnect.Symbol.Create(Futures.Metals.MicroGold, SecurityType.Future, Market.COMEX);\n            \n            return new List&lt;Symbol&gt;{_miniGold, _microGold};\n        }\n        \n        class FrontMonthFutureUniverseSelectionModel : FutureUniverseSelectionModel\n        {\n            public FrontMonthFutureUniverseSelectionModel(Func&lt;DateTime, IEnumerable&lt;Symbol&gt;&gt; futureChainSymbolSelector)\n                : base(TimeSpan.FromDays(1), futureChainSymbolSelector) {}\n\n            protected override FutureFilterUniverse Filter(FutureFilterUniverse filter)\n            {\n                return filter\n                    .FrontMonth()\n                    .OnlyApplyFilterAtMarketOpen();\n            }\n        }\n\n\n        class ConstantFuturesAlphaModel : AlphaModel\n        {\n            private USFuturesDataAlgorithm _algorithm;\n            \n            public ConstantFuturesAlphaModel(USFuturesDataAlgorithm algorithm)\n            {\n                _algorithm = algorithm;\n            }\n            \n            public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n            {\n                var insights = new List&lt;Insight&gt;();\n                \n                foreach (var kvp in data.FutureChains)\n                {\n                    var symbol = kvp.Key;\n                    var chain = kvp.Value;\n                    var contract = chain.First();\n                    \n                    if (symbol == _algorithm._miniGold)\n                    {\n                        insights.Add(Insight.Price(contract.Symbol, contract.Expiry + TimeSpan.FromDays(1), InsightDirection.Up));\n                    }\n                    else if (symbol == _algorithm._microGold)\n                    {\n                        insights.Add(Insight.Price(contract.Symbol, contract.Expiry + TimeSpan.FromDays(1), InsightDirection.Down));\n                    }\n                }\n\n                return insights;\n            }\n            \n            public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n            {\n                foreach (var security in changes.AddedSecurities)\n                {\n                // Historical data\n                    var history = algorithm.History(security.Symbol, 100, Resolution.Minute);\n                    algorithm.Debug($\"We got {history.Count()} from our history request for {security.Symbol}\");\n                }\n            }\n        }\n        \n        \n        class SingleSharePortfolioConstructionModel : PortfolioConstructionModel\n        {\n            public override IEnumerable&lt;PortfolioTarget&gt; CreateTargets(QCAlgorithm algorithm, Insight[] insights)\n            {\n                var targets = new List&lt;PortfolioTarget&gt;();\n                foreach (var insight in insights)\n                {\n                    if (algorithm.Securities[insight.Symbol].IsTradable)\n                    {\n                        targets.Add(new PortfolioTarget(insight.Symbol, (int) insight.Direction));\n                    }\n                }\n                return targets;\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-02-17 15:23:24"
      }
    ],
    "pricingText": "The QuantConnect-AlgoSeek partnership provides free access to US Futures market data in QuantConnect Cloud. This dataset depends on the US Futures Security Master dataset because the US Futures Security Master dataset contains information on symbol changes.",
    "pricing": [
      {
        "id": null,
        "master_product_id": 30,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>US Futures is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>  \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>US Futures is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 98,
        "name": "US Futures - Cloud Access",
        "description": "<p>Free access to the most popular US Futures in QuantConnect Cloud for backtest and research.</p>\n<ul><li>Tick to minute resolution data</li>\n    <li>Universe selection on Future chains</li>\n    <li>Uncorrelated asset class</li>\n</ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      }
    ],
    "headerColor": "04a3db"
  },
  {
    "name": "US Future Options",
    "vendorName": "AlgoSeek",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/algoseek-logo.svg",
    "landingFileName": "algoseek-us-future-options.html",
    "url": "/datasets/algoseek-us-future-options",
    "short_description": "Future Options data by AlgoSeek provides data for 15 liquid US CME Future commodity contracts at minute resolution.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The US Future Options dataset by AlgoSeek provides Option data on US Future contracts, including prices, strikes, expires, implied volatility, and Greeks. The data covers 15 Monthly Future contracts, starts in January 2012, and is delivered on a minute frequency. This dataset is created by monitoring the trading activity on the CME, CBOT, NYMEX, and COMEX markets.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\nAlgoSeek is a leading historical intraday US market data provider offering the most comprehensive and detailed market data and analytics products in the financial industry covering equities, futures, options, cash forex, and cryptocurrencies. AlgoSeek data is built for quantitative trading and machine learning.  For more information about AlgoSeek, visit <a href=\"https://www.algoseek.com\">algoseek.com</a>.\n</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">gold_futures = self.AddFuture(Futures.Metals.Gold, Resolution.Minute)\ngold_futures.SetFilter(0, 90)\nself.AddFutureOption(gold_futures.Symbol, lambda universe: universe.Strikes(-5, +5))</code></pre>\n<pre><code class=\"language-cs\">var goldFutures = AddFuture(Futures.Metals.Gold, Resolution.Minute);\ngoldFutures.SetFilter(0, 90);\nAddFutureOption(goldFutures.Symbol, universe =&gt; universe.Strikes(-5, +5));</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 2012</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>15 Monthly Future Contracts</td>\n        </tr><tr><td>Data Density</td>\n            <td>Dense</td>\n        </tr><tr><td>Resolution</td>\n            <td>Minute</td>\n        </tr><tr><td>Timezone</td>\n            <td>New York</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Supported Assets",
        "content": "<p>The following table shows the available Future Options:</p>\n\n<table class=\"table qc-table\"><thead><tr><td>Ticker</td><td>Underlying Ticker</td><td>Underlying Futures Name</td></tr></thead><tbody><tr><td>DC</td><td>DC</td><td>Class III Milk</td></tr><tr><td>ES</td><td>ES</td><td>E-mini S&amp;P 500</td></tr><tr><td>HXE</td><td>HG</td><td>Copper</td></tr><tr><td>LO</td><td>CL</td><td>Crude Oil WTI</td></tr><tr><td>NQ</td><td>NQ</td><td>E-mini NASDAQ 100</td></tr><tr><td>OB</td><td>RB</td><td>Gulf Coast CBOB vs. RBOB Gasoline</td></tr><tr><td>OG</td><td>GC</td><td>Gold</td></tr><tr><td>OH</td><td>HO</td><td>Heating Oil</td></tr><tr><td>ON</td><td>NG</td><td>Natural Gas</td></tr><tr><td>OZB</td><td>ZB</td><td>30Y U.S. Treasury Bond</td></tr><tr><td>OZC</td><td>ZC</td><td>Corn</td></tr><tr><td>OZS</td><td>ZS</td><td>Soybeans</td></tr><tr><td>OZT</td><td>ZT</td><td>2Y U.S. Treasury Note</td></tr><tr><td>OZW</td><td>ZW</td><td>Chicago SRW Wheat</td></tr><tr><td>SO</td><td>SI</td><td>Hang Seng</td></tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe AlgoSeek US Future Options dataset enables researchers to accurately design Future Option strategies. Examples include: \n</p>\n<ul><li>Selling out of the money Future Option contracts to collect the premium paid by the Option buyer</li>\n<li>Buying put Options to hedge against downward price movement in Futures you have a positive position in</li>\n<li>Exploiting arbitrage opportunities that arise when the price of Option contracts deviate from their theoretical value</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_0a3da85c76a4ab60587893f89095e0bf.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Future Options dataset provides TradeBar, QuoteBar, and OpenInterest objects.</p>\n\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>OpenInterest Attributes</h4>\n<p>OpenInterest objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.OpenInterest\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add US Future Options data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on requesting market data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class FutureOptionDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 1, 28)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        gold_futures = self.AddFuture(Futures.Metals.Gold, Resolution.Minute)\n        gold_futures.SetFilter(0, 90)\n        self.AddFutureOption(gold_futures.Symbol, lambda universe: universe.Strikes(-5, +5))</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class FutureOptionDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2020, 1, 28);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n            \n            var goldFutures = AddFuture(Futures.Metals.Gold, Resolution.Minute);\n            goldFutures.SetFilter(0, 90);\n            AddFutureOption(goldFutures.Symbol, universe =&gt; universe.Strikes(-5, +5));\n        }\n    }\n}</code></pre>\n</div>\n\n<p>The Future resolution must be less than or equal to the Future Option resolution. Future Options only have minute resolution available, so the Future must have tick, second, or minute resolution.</p>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in minute resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    for kvp in data.OptionChains:\n        underlying_future_contract = kvp.Key.Underlying\n        chain = kvp.Value\n        for contract in chain:\n            self.Debug(f\"Time: {self.Time}; Canonical Symbol: {kvp.Key}; Underlying Future contract: {underlying_future_contract} Contract: {contract}; Right: {contract.Right}; Expiry: {contract.Expiry}; Bid price: {contract.BidPrice}; Ask price: {contract.AskPrice}; ImpliedVolatility: {contract.ImpliedVolatility}; Delta: {contract.Greeks.Delta}; Gamma: {contract.Greeks.Gamma}; Vega: {contract.Greeks.Vega}; Rho: {contract.Greeks.Rho}; Lambda: {contract.Greeks.Lambda}\")</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    foreach (var kvp in data.OptionChains)\n    {\n        var underlyingFutureContract = kvp.Key.Underlying;\n        var chain = kvp.Value;\n        foreach (var contract in chain)\n        {\n            algorithm.Debug($\"Time: {algorithm.Time}; Canonical Symbol: {kvp.Key}; Underlying Future contract: {underlyingFutureContract} Contract: {contract}; Right: {contract.Right}; Expiry: {contract.Expiry}; Bid price: {contract.BidPrice}; Ask price: {contract.AskPrice}; ImpliedVolatility: {contract.ImpliedVolatility}; Delta: {contract.Greeks.Delta}; Gamma: {contract.Greeks.Gamma}; Vega: {contract.Greeks.Vega}; Rho: {contract.Greeks.Rho}; Lambda: {contract.Greeks.Lambda}\");\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical Future Options data in your algorithm using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for US Future Options by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(security.Symbol, 10, Resolution.Minute)</code></pre>\n<pre><code class=\"language-cs\">var history = History(security.Symbol, 10, Resolution.Minute);</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Future Options dataset provides TradeBar, QuoteBar, and OpenInterest objects.</p>\n\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>OpenInterest Attributes</h4>\n<p>OpenInterest objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.OpenInterest\"></div>"
      }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "",
    "examples": [
      {
        "id": 427,
        "master_product_id": 31,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we buy the Gold Future Option contracts. We select the back month call Option contract with the lowest strike price. When the option expires, we liquidate the underlying Future contract and purchase the next Option contract that meets our criteria.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass FutureOptionDataAlgorithm(QCAlgorithm):\n    \n    option_contract_by_underlying_future_contract = {}\n    \n    def Initialize(self):\n        self.SetStartDate(2020, 1, 28)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        # Requesting data\n        gold_futures = self.AddFuture(Futures.Metals.Gold, Resolution.Minute)\n        gold_futures.SetFilter(0, 90)\n        self.AddFutureOption(gold_futures.Symbol, lambda universe: universe.Strikes(-5, +5)\n                                                                           .CallsOnly()\n                                                                           .BackMonth()\n                                                                           .OnlyApplyFilterAtMarketOpen())\n        \n    def OnData(self, data):\n        for kvp in data.OptionChains:\n            # Liquidate underlying Future contract after Option assignment\n            underlying_future_contract = kvp.Key.Underlying\n            if self.Portfolio[underlying_future_contract].Invested:\n                self.Liquidate(underlying_future_contract)\n                self.option_contract_by_underlying_future_contract.pop(underlying_future_contract)\n            \n            chain = kvp.Value\n            chain = [contract for contract in chain if self.Securities[contract.Symbol].IsTradable]\n            \n            # Continue if chain is empty or already invested in an Option on this Futures contract\n            if not chain or underlying_future_contract in self.option_contract_by_underlying_future_contract:\n                continue\n\n            # Select the Option contract with the lowest strike price\n            contract = sorted(chain, key = lambda x: x.Strike)[0]\n            \n            self.MarketOrder(contract.Symbol, 1)\n            self.option_contract_by_underlying_future_contract[kvp.Key.Underlying] = contract\n        \n        \n    def OnSecuritiesChanged(self, changes):\n        for security in changes.AddedSecurities:\n            if security.Type == SecurityType.FutureOption:\n                # Historical data\n                history = self.History(security.Symbol, 10, Resolution.Minute)\n                self.Debug(f\"We got {len(history)} from our history request for {security.Symbol}\")</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class FutureOptionDataAlgorithm : QCAlgorithm\n    {\n        private Dictionary&lt;Symbol, OptionContract&gt; optionContractByUnderlyingFutureContract = new Dictionary&lt;Symbol, OptionContract&gt;();\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 1, 28);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n            \n            // Requesting data\n            var goldFutures = AddFuture(Futures.Metals.Gold, Resolution.Minute);\n            goldFutures.SetFilter(0, 90);\n            AddFutureOption(goldFutures.Symbol, universe =&gt; universe.Strikes(-5, +5)\n                                                                    .CallsOnly()\n                                                                    .BackMonth()\n                                                                    .OnlyApplyFilterAtMarketOpen());\n        }\n\n        public override void OnData(Slice data)\n        {\n            foreach (var kvp in data.OptionChains)\n            {\n                // Liquidate underlying Future contract after Option assignment\n                var underlyingFutureContract = kvp.Key.Underlying;\n                if (Portfolio[underlyingFutureContract].Invested)\n                {\n                    Liquidate(underlyingFutureContract);\n                    optionContractByUnderlyingFutureContract.Remove(underlyingFutureContract);\n                }\n                \n                var chain = kvp.Value.Where(contract =&gt; Securities[contract.Symbol].IsTradable);\n                // Continue if chain is empty or already invested in an Option on this Futures contract\n                if (chain.Count() == 0 || optionContractByUnderlyingFutureContract.ContainsKey(underlyingFutureContract))\n                {\n                    continue;\n                }\n    \n                // Select the Option contract with the lowest strike price\n                var contract = chain.OrderByDescending(contract =&gt; contract.Strike).Last();\n                \n                MarketOrder(contract.Symbol, 1);\n                optionContractByUnderlyingFutureContract.Add(kvp.Key.Underlying, contract);\n            }\n        }\n        \n        \n        public override void OnSecuritiesChanged(SecurityChanges changes)\n        {\n            foreach (var security in changes.AddedSecurities)\n            {\n                if (security.Type == SecurityType.FutureOption)\n                {\n                    // Historical data\n                    var history = History(security.Symbol, 10, Resolution.Minute);\n                    Debug($\"We got {history.Count()} from our history request for {security.Symbol}\");\n                }\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-07-06 19:40:23"
      },
      {
        "id": 429,
        "master_product_id": 31,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this example, we buy the Gold Future Option contracts. We select the back month call Option contract with the lowest strike price. When the option expires, we liquidate the underlying Future contract and purchase the next Option contract that meets our criteria.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass FutureOptionDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 1, 28)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        # Requesting data\n        gold_futures = self.AddFuture(Futures.Metals.Gold, Resolution.Minute)\n        gold_futures.SetFilter(0, 90)\n        self.AddFutureOption(gold_futures.Symbol, lambda universe: universe.Strikes(-5, +5)\n                                                                           .CallsOnly()\n                                                                           .BackMonth()\n                                                                           .OnlyApplyFilterAtMarketOpen())\n                                                                           \n        self.SetAlpha(ConstantFutureOptionsAlphaModel())\n        self.SetPortfolioConstruction(SingleSharePortfolioConstructionModel())\n        \nclass ConstantFutureOptionsAlphaModel(AlphaModel):\n\n    option_contract_by_underlying_future_contract = {}\n\n    def Update(self, algorithm, data):\n        insights = []\n        \n        for kvp in data.OptionChains:\n            # Liquidate underlying Future contract after Option assignment\n            underlying_future_contract = kvp.Key.Underlying\n            if algorithm.Portfolio[underlying_future_contract].Invested:\n                insights.append(Insight.Price(underlying_future_contract, timedelta(days=7), InsightDirection.Flat))\n                self.option_contract_by_underlying_future_contract.pop(underlying_future_contract)\n            \n            chain = kvp.Value\n            chain = [contract for contract in chain if algorithm.Securities[contract.Symbol].IsTradable]\n            \n            # Continue if chain is empty or already invested in an Option on this Futures contract\n            if not chain or underlying_future_contract in self.option_contract_by_underlying_future_contract:\n                continue\n\n            # Select the Option contract with the lowest strike price\n            contract = sorted(chain, key = lambda x: x.Strike)[0]\n            \n            insights.append(Insight.Price(contract.Symbol, contract.Expiry + timedelta(days=1), InsightDirection.Up))\n            self.option_contract_by_underlying_future_contract[kvp.Key.Underlying] = contract\n        \n        return insights\n\n        \n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            if security.Type == SecurityType.FutureOption:\n                # Historical data\n                history = algorithm.History(security.Symbol, 10, Resolution.Minute)\n                algorithm.Debug(f\"We got {len(history)} from our history request for {security.Symbol}\")\n\n                \nclass SingleSharePortfolioConstructionModel(PortfolioConstructionModel):\n    def CreateTargets(self, algorithm, insights):\n        targets = []\n        for insight in insights:\n            if algorithm.Securities[insight.Symbol].IsTradable:\n                targets.append(PortfolioTarget(insight.Symbol, insight.Direction))\n        return targets</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class FutureOptionDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2020, 1, 28);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n            \n            // Requesting data\n            var goldFutures = AddFuture(Futures.Metals.Gold, Resolution.Minute);\n            goldFutures.SetFilter(0, 90);\n            AddFutureOption(goldFutures.Symbol, universe =&gt; universe.Strikes(-5, +5)\n                                                                    .CallsOnly()\n                                                                    .BackMonth()\n                                                                    .OnlyApplyFilterAtMarketOpen());\n                                                                    \n            SetAlpha(new ConstantFutureOptionsAlphaModel());\n            SetPortfolioConstruction(new SingleSharePortfolioConstructionModel());\n        }\n\n        \n        class ConstantFutureOptionsAlphaModel : AlphaModel\n        {\n            private Dictionary&lt;Symbol, OptionContract&gt; optionContractByUnderlyingFutureContract = new Dictionary&lt;Symbol, OptionContract&gt;();\n            \n            public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n            {\n                var insights = new List&lt;Insight&gt;();\n                \n                foreach (var kvp in data.OptionChains)\n                {\n                    // Liquidate underlying Future contract after Option assignment\n                    var underlyingFutureContract = kvp.Key.Underlying;\n                    if (algorithm.Portfolio[underlyingFutureContract].Invested)\n                    {\n                        insights.Add(Insight.Price(underlyingFutureContract, TimeSpan.FromDays(7), InsightDirection.Flat));\n                        optionContractByUnderlyingFutureContract.Remove(underlyingFutureContract);\n                    }\n                    \n                    var chain = kvp.Value.Where(contract =&gt; algorithm.Securities[contract.Symbol].IsTradable);\n                    // Continue if chain is empty or already invested in an Option on this Futures contract\n                    if (chain.Count() == 0 || optionContractByUnderlyingFutureContract.ContainsKey(underlyingFutureContract))\n                    {\n                        continue;\n                    }\n        \n                    // Select the Option contract with the lowest strike price\n                    var contract = chain.OrderByDescending(contract =&gt; contract.Strike).Last();\n                    \n                    insights.Add(Insight.Price(contract.Symbol, contract.Expiry + TimeSpan.FromDays(1), InsightDirection.Up));\n                    optionContractByUnderlyingFutureContract.Add(kvp.Key.Underlying, contract);\n                }            \n                return insights;\n            }\n        \n            public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n            {\n                foreach (var security in changes.AddedSecurities)\n                {\n                    if (security.Type == SecurityType.FutureOption)\n                    {\n                        // Historical data\n                        var history = algorithm.History(security.Symbol, 10, Resolution.Minute);\n                        algorithm.Debug($\"We got {history.Count()} from our history request for {security.Symbol}\");\n                    }\n                }\n            }\n        }\n        \n        \n        class SingleSharePortfolioConstructionModel : PortfolioConstructionModel\n        {\n            public override IEnumerable&lt;PortfolioTarget&gt; CreateTargets(QCAlgorithm algorithm, Insight[] insights)\n            {\n                var targets = new List&lt;PortfolioTarget&gt;();\n                foreach (var insight in insights)\n                {\n                    if (algorithm.Securities[insight.Symbol].IsTradable)\n                    {\n                        targets.Add(new PortfolioTarget(insight.Symbol, (int) insight.Direction));\n                    }\n                }\n                return targets;\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-07-06 19:58:19"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 31,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>US Future Options is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>  \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>US Future Options is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 97,
        "name": "US Future Options - Cloud Access",
        "description": "<p>Free access to US Future Options from CME, COMEX, CBOT, and NYMEX on the QuantConnect Cloud platform for research, backtest, and live trading. Futures Options are available in minute resolution.</p>\n<ul><li>Carefully curated data</li>\n    <li>Hedge futures strategies.</li>\n    <li>Measure open interest imbalances</li> \n<li>Trading options-strategies on future contracts</li>\n</ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      }
    ],
    "headerColor": "42dffe"
  },
  {
    "name": "Benzinga News Feed",
    "vendorName": "Benzinga",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/benzinga-logo3.svg",
    "landingFileName": "benzinga-news-feed.html",
    "url": "/datasets/benzinga-news-feed",
    "short_description": "Mainstream US media articles and financial news publications condensed into a news feed with titles and article bodies for sentiment analysis",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The Benzinga News Feed dataset by Benzinga tracks US Equity news releases. The data covers about 1,250 articles per day across 8,000 Equities, starts in January 2016, and is delivered on a second frequency. This dataset is created by structuring the content produced by Benzinga's editorial team.</p>\n\n<p>This dataset depends on the <a href=\"https://www.quantconnect.com/datasets/quantconnect-us-equity-security-master\">US Equity Security Master</a> dataset because the US Equity Security Master dataset contains information on splits, dividends, and symbol changes.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\nBenzinga was founded by Jason Raznick in 2010 with goal of connecting the world with news, data, and education that makes the path to financial prosperity easier for everyone, everyday. Benzinga provides access to real-time news for individual investors.\n</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\naapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nbenzingaSymbol = self.AddData(BenzingaNews, aapl).Symbol</code></pre>\n<pre><code class=\"language-cs\">\nvar aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\nvar benzingaSymbol = AddData&lt;BenzingaNews&gt;(aapl).Symbol;</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>September 2017</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>1,250 Articles/Day, 8,000 Equities</td>\n        </tr><tr><td>Data Density</td>\n            <td>Sparse</td>\n        </tr><tr><td>Resolution</td>\n            <td>Second</td>\n        </tr><tr><td>Timezone</td>\n            <td>New York</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe Benzinga News Feed enables researchers to accurately design strategies harnessing real-time news releases. Examples include: \n</p>\n<ul><li>Creating a dictionary of sentiment scores for various words and assigning a sentiment score to the content of each news release</li>\n<li>Calculating the sentiment of news releases with Natural Language Processing (NLP)</li>\n<li>Trading securities when their news releases are tagged by Benzinga with current buzzwords</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_3b579e5abdb550424b546cc3dc0dd941.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Benzinga News Feed dataset provides BenzingaNews objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.BenzingaNews\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add Benzinga News Feed data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass BenzingaNewsDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n        \n        self.aapl = self.AddEquity(\"AAPL\", Resolution.Minute).Symbol\n        self.benzinga_symbol = self.AddData(BenzingaNews, self.aapl).Symbol</code></pre>\n<pre><code class=\"language-cs\">using System.Linq;\nusing QuantConnect.Data;\n\nnamespace QuantConnect.Algorithm.CSharp.AltData\n{\n    public class BenzingaNewsDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _aapl;\n        private Symbol _benzingaSymbol;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            \n            _aapl = AddEquity(\"AAPL\", Resolution.Minute).Symbol;\n            _benzingaSymbol = AddData&lt;BenzingaNews&gt;(_aapl).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in second resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    if data.ContainsKey(self.benzinga_symbol):\n        article = data[self.benzinga_symbol]\n        self.Log(f\"Received Benzinga News article at {self.Time}; ID: {article.Id}; Author {article.Author}; Created at: {article.CreatedAt}; Updated at: {article.UpdatedAt}; Title: {article.Title}; Teaser {article.Teaser}; Contents: {article.Contents}; Symbols: {article.Symbols}; Tags: {article.Tags}; EndTime {article.EndTime}\")\n</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    if (data.ContainsKey(_benzingaSymbol))\n    {\n        var article = data[_benzingaSymbol];\n        Log($\"Received Benzinga News article at {Time}; ID: {article.Id}; Author {article.Author}; Created at: {article.CreatedAt}; Updated at: {article.UpdatedAt}; Title: {article.Title}; Teaser {article.Teaser}; Contents: {article.Contents}; Symbols: {article.Symbols}; Tags: {article.Tags}; EndTime {article.EndTime}\");\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for Benzinga News by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.benzinga_symbol, 14, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History&lt;BenzingaNews&gt;(_benzingaSymbol, 14, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Benzinga News Feed dataset provides BenzingaNews objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.BenzingaNews\"></div>"
      }
    ],
    "priceCTA": "From $20/mo",
    "vendorWebsite": "https://www.benzinga.com/",
    "examples": [
      {
        "id": 443,
        "master_product_id": 32,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we parse the content of the news articles provided by Benzinga. If the sentiment is positive, we buy the security. Otherwise, we liquidate our position in the security.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass BenzingaNewsDataAlgorithm(QCAlgorithm):\n\n    current_holdings = 0\n    target_holdings = 0\n    word_scores = {\n        'good': 1, 'great': 1, 'best': 1, 'growth': 1,\n        'bad': -1, 'terrible': -1, 'worst': -1, 'loss': -1}\n\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n        \n        # Requesting data\n        self.aapl = self.AddEquity(\"AAPL\", Resolution.Minute).Symbol\n        self.benzinga_symbol = self.AddData(BenzingaNews, self.aapl).Symbol\n        \n        # Historical data\n        history = self.History(self.benzinga_symbol, 14, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request\")\n        \n        \n    def OnData(self, data):\n        if data.ContainsKey(self.benzinga_symbol):\n            # Assign a sentiment score to the news article\n            content_words = data[self.benzinga_symbol].Contents.lower()\n            score = 0\n            for word, word_score in self.word_scores.items():\n                score += (content_words.count(word) * word_score)\n            self.target_holdings = int(score &gt; 0)\n        \n        # Ensure we have AAPL data in the current Slice\n        if not (data.ContainsKey(self.aapl) and data[self.aapl] is not None and not data[self.aapl].IsFillForward):\n            return\n        \n        # Buy or sell if the sentiment has changed from our current holdings\n        if self.current_holdings != self.target_holdings:\n            self.SetHoldings(self.aapl, self.target_holdings)\n            self.current_holdings = self.target_holdings</code></pre>\n<pre><code class=\"language-cs\">using System.Linq;\nusing System.Text.RegularExpressions;\n\nnamespace QuantConnect.Algorithm.CSharp.AltData\n{\n    public class BenzingaNewsDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _aapl;\n        private Symbol _benzingaSymbol;\n        private int _currentHoldings = 0;\n        private int _targetHoldings = 0;\n        private Dictionary&lt;string, int&gt; _wordScores = new Dictionary&lt;string, int&gt;(){\n            {\"good\", 1}, {\"great\", 1}, {\"best\", 1}, {\"growth\", 1},\n            {\"bad\", -1}, {\"terrible\", -1}, {\"worst\", -1}, {\"loss\", -1}\n        };\n        \n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            \n            // Requesting data\n            _aapl = AddEquity(\"AAPL\", Resolution.Minute).Symbol;\n            _benzingaSymbol = AddData&lt;BenzingaNews&gt;(_aapl).Symbol;\n            \n            // Historical data\n            var history = History&lt;BenzingaNews&gt;(_benzingaSymbol, 14, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request\");\n        }\n        \n        public override void OnData(Slice data)\n        {\n            if (data.ContainsKey(_benzingaSymbol))\n            {\n                // Assign a sentiment score to the news article\n                var contentWords = data[_benzingaSymbol].Contents.ToLower();\n                var score = 0;\n                foreach (KeyValuePair&lt;string, int&gt; entry in _wordScores)\n                {\n                    score += (Regex.Matches(contentWords, entry.Key).Count * entry.Value);\n                }\n                _targetHoldings = Convert.ToInt32(score &gt; 0);\n            }\n            \n            \n            // Ensure we have AAPL data in the current Slice\n            if (!(data.ContainsKey(_aapl) &amp;&amp; data[_aapl] != null &amp;&amp; !data[_aapl].IsFillForward))\n            {\n                return;\n            }\n            \n            // Buy or sell if the sentiment has changed from our current holdings\n            if (_currentHoldings != _targetHoldings)\n            {\n                SetHoldings(_aapl, _targetHoldings);\n                _currentHoldings = _targetHoldings;\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-05-10 13:46:38"
      },
      {
        "id": 445,
        "master_product_id": 32,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this example, we parse the content of the news articles provided by Benzinga. If the sentiment is positive, we buy the security for 14 days. Otherwise, we liquidate our position in the security.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\nfrom QuantConnect.Data.Custom.Benzinga import *\n\nclass BenzingaNewsDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n        \n        symbols = [ Symbol.Create(\"AAPL\", SecurityType.Equity, Market.USA) ]\n        self.AddUniverseSelection(ManualUniverseSelectionModel(symbols))\n        \n        self.AddAlpha(BenzingaNewsAlphaModel())\n        \n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n        \n        self.AddRiskManagement(NullRiskManagementModel())\n        \n        self.SetExecution(ImmediateExecutionModel())\n        \n            \nclass BenzingaNewsAlphaModel(AlphaModel):\n    \n    symbol_data_by_symbol = {}\n    word_scores = {'good': 1, 'great': 1, 'best': 1, 'growth': 1,\n                   'bad': -1, 'terrible': -1, 'worst': -1, 'loss': -1}\n    \n    def Update(self, algorithm, data):\n        insights = []\n        \n        for symbol, symbol_data in self.symbol_data_by_symbol.items():\n            if data.ContainsKey(symbol_data.benzinga_symbol):\n                # Assign a sentiment score to the news article\n                content_words = data[symbol_data.benzinga_symbol].Contents.lower()\n                score = 0\n                for word, word_score in self.word_scores.items():\n                    score += (content_words.count(word) * word_score)\n                symbol_data.target_direction = InsightDirection.Up if score &gt; 0 else InsightDirection.Flat\n        \n            # Ensure we have security data in the current Slice\n            if not (data.ContainsKey(symbol) and data[symbol] is not None and not data[symbol].IsFillForward):\n                continue\n        \n            # Buy or sell if the sentiment has changed from our current holdings\n            if symbol_data.current_direction != symbol_data.target_direction:\n                symbol_data.current_direction = symbol_data.target_direction\n                insights.append(Insight.Price(symbol, timedelta(days=14), symbol_data.target_direction))\n        \n        return insights\n        \n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            symbol = security.Symbol\n            self.symbol_data_by_symbol[symbol] = SymbolData(algorithm, symbol)\n        \n        for security in changes.RemovedSecurities:\n            symbol_data = self.symbol_data_by_symbol.pop(security.Symbol, None)\n            if symbol_data:\n                symbol_data.dispose()\n                \n            \nclass SymbolData:\n    \n    current_direction = InsightDirection.Flat\n    target_direction = InsightDirection.Flat\n    \n    def __init__(self, algorithm, symbol):\n        self.algorithm = algorithm\n        \n        # Requesting data\n        self.benzinga_symbol = algorithm.AddData(BenzingaNews, symbol).Symbol\n        \n        # Historical data\n        history = algorithm.History(self.benzinga_symbol, 14, Resolution.Daily)\n        algorithm.Debug(f\"We got {len(history)} items from our history request\")\n        \n        \n    def dispose(self):\n        # Unsubscribe from Benzinga news feed for this security\n        self.algorithm.RemoveSecurity(self.benzinga_symbol)</code></pre>\n<pre><code class=\"language-cs\">using System.Linq;\nusing QuantConnect.Data;\nusing QuantConnect.Data.Custom.Benzinga;\nusing System.Text.RegularExpressions;\n\nnamespace QuantConnect.Algorithm.CSharp.AltData\n{\n    public class BenzingaNewsDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            \n            AddUniverseSelection(\n                new ManualUniverseSelectionModel(\n                    QuantConnect.Symbol.Create(\"AAPL\", SecurityType.Equity, Market.USA)\n            ));\n            \n            AddAlpha(new BenzingaAlphaModel());\n            \n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n            \n            AddRiskManagement(new NullRiskManagementModel());\n            \n            SetExecution(new ImmediateExecutionModel());\n        }\n    }\n    \n    \n    public class BenzingaAlphaModel : AlphaModel\n    {\n        private Dictionary&lt;Symbol, SymbolData&gt; _symbolDataBySymbol = new Dictionary&lt;Symbol, SymbolData&gt;();\n        private Dictionary&lt;string, int&gt; _wordScores = new Dictionary&lt;string, int&gt;(){\n            {\"good\", 1}, {\"great\", 1}, {\"best\", 1}, {\"growth\", 1},\n            {\"bad\", -1}, {\"terrible\", -1}, {\"worst\", -1}, {\"loss\", -1}\n        };\n\n        public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n        {\n            var insights = new List&lt;Insight&gt;();\n            \n            foreach (var kvp in _symbolDataBySymbol)\n            {\n                var symbol = kvp.Key;\n                var symbolData = kvp.Value;\n                \n                if (data.ContainsKey(symbolData.benzingaSymbol))\n                {\n                    // Assign a sentiment score to the news article\n                    var contentWords = data[symbolData.benzingaSymbol].Contents.ToLower();\n                    var score = 0;\n                    foreach (var entry in _wordScores)\n                    {\n                        score += (Regex.Matches(contentWords, entry.Key).Count * entry.Value);\n                    }\n                    symbolData.targetDirection = score &gt; 0 ? InsightDirection.Up : InsightDirection.Flat;\n                }\n                \n                \n                // Ensure we have security data in the current Slice\n                if (!(data.ContainsKey(symbol) &amp;&amp; data[symbol] != null &amp;&amp; !data[symbol].IsFillForward))\n                {\n                    continue;\n                }\n                \n                // Buy or sell if the sentiment has changed from our current holdings\n                if (symbolData.currentDirection != symbolData.targetDirection)\n                {\n                    insights.Add(Insight.Price(symbol, TimeSpan.FromDays(14), symbolData.targetDirection));\n                    symbolData.currentDirection = symbolData.targetDirection;\n                }\n            }\n            return insights;\n        }\n\n        public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n        {\n            foreach (var security in changes.AddedSecurities)\n            {\n                var symbol = security.Symbol;\n                _symbolDataBySymbol.Add(symbol, new SymbolData(algorithm, symbol));\n            }\n\n            foreach (var security in changes.RemovedSecurities)\n            {\n                var symbol = security.Symbol;\n                if (_symbolDataBySymbol.ContainsKey(symbol))\n                {\n                    _symbolDataBySymbol[symbol].dispose();\n                    _symbolDataBySymbol.Remove(symbol);\n                }\n            }\n        }\n    }\n    \n    \n    public class SymbolData\n    {\n        private QCAlgorithm _algorithm;\n        public Symbol benzingaSymbol;\n        public InsightDirection currentDirection = InsightDirection.Flat;\n        public InsightDirection targetDirection = InsightDirection.Flat;\n        \n        \n        public SymbolData(QCAlgorithm algorithm, Symbol symbol)\n        {\n            _algorithm = algorithm;\n            \n            // Requesting data\n            benzingaSymbol = algorithm.AddData&lt;BenzingaNews&gt;(symbol).Symbol;\n            \n            // Historical data\n            var history = algorithm.History&lt;BenzingaNews&gt;(benzingaSymbol, 14, Resolution.Daily);\n            algorithm.Debug($\"We got {history.Count()} items from our history request\");\n        }\n        \n        public void dispose()\n        {\n            // Unsubscribe from the Benzinga feed for this security\n            _algorithm.RemoveSecurity(benzingaSymbol);\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-07-07 20:37:16"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 32,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>Benzinga News Feed is allowed to be used in the cloud \r\n            for personal and commercial projects with a subscription. The data is permissioned for use within \r\n            the licensed organization only</p><p>Subscription Required | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>Benzinga News Feed can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 15000 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>Benzinga News Feed is allowed to be used for free by approved Alpha Stream authors with more than 3 \r\n                    Alpha Streams listed in the marketplace. The Benzinga will add on a charge of 2 Basis Points \r\n                    for the use of the data to the Alpha Stream reserve price.</p>\r\n                    <p>Free for Authors with 3+ Alphas | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 96,
        "name": "Benzinga News Feed - On Premise Download",
        "description": "<p>Benzinga News Feed archived in LEAN format for on premise backtesting and research. One file per ticker.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "On Premise Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "10 QCC/file",
          "monthlyPrice": 50,
          "yearlyPrice": 600,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 600
      },
      {
        "id": 95,
        "name": "Benzinga News Feed - Cloud Access",
        "description": "<p>Harness Benzinga News Feed data in the QuantConnect Cloud for your backtesting and live trading purposes.\n </p>\n    <ul><li>Curated, clean data</li>\n         <li>Updated nightly at 4am</li>\n         <li>Mapped to US Equity data with full historical SIP feed</li>\n   </ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "$120/mo",
          "monthlyPrice": 120,
          "yearlyPrice": 1440,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 1440
      }
    ],
    "headerColor": "04a3db"
  },
  {
    "name": "Brain Sentiment Indicator",
    "vendorName": "Brain",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/data-market-brain-light.png",
    "landingFileName": "brain-sentiment-indicator.html",
    "url": "/datasets/brain-sentiment-indicator",
    "short_description": "Proprietary sentiment analysis algorithm for 4,000 US Equities. Data is provided on a daily frequency since January 2016.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The Brain Sentiment Indicator dataset by Brain tracks the public sentiment around US Equities. The data covers 4,500 US Equities, starts in August 2016, and is delivered on a daily frequency. This dataset is created by analyzing financial news using Natural Language Processing techniques while taking into account the similarity and repetition of news on the same topic. The sentiment score assigned to each stock ranges from -1 (most negative) to +1 (most positive). The sentiment score corresponds to the average sentiment for each piece of news. The score is updated daily and is available on two time scales: 7 days and 30 days. For more information, see Brain's <a href=\"https://braincompany.co/assets/files/BSI_summary.pdf\">summary paper</a>.</p>\n\n<p>This dataset depends on the <a href=\"https://www.quantconnect.com/datasets/quantconnect-us-equity-security-master\">US Equity Security Master</a> dataset because the US Equity Security Master dataset contains information on splits, dividends, and symbol changes.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p><a href=\"https://braincompany.co/bsr.html\">Brain</a> is a Research Company that creates proprietary datasets and algorithms for investment strategies, combining experience in financial markets with strong competencies in Statistics, Machine Learning, and Natural Language Processing. The founders share a common academic background of research in Physics as well as extensive experience in Financial markets. </p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nself.symbol = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n\nself.dataset_7day_symbol = self.AddData(BrainSentimentIndicator7Day, self.symbol).Symbol\nself.dataset_30day_symbol = self.AddData(BrainSentimentIndicator30Day, self.symbol).Symbol\n\nself.AddUniverse(BrainSentimentIndicatorUniverse, \"BrainSentimentIndicatorUniverse\", Resolution.Daily, self.UniverseSelectionMethod)</code></pre>\n<pre><code class=\"language-cs\">\n_symbol = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n\n_dataset7DaySymbol = AddData&lt;BrainSentimentIndicator7Day&gt;(_symbol).Symbol;\n_dataset30DaySymbol = AddData&lt;BrainSentimentIndicator30Day&gt;(_symbol).Symbol;\n\nAddUniverse&lt;BrainSentimentIndicatorUniverse&gt;(\"BrainSentimentIndicatorUniverse\", Resolution.Daily, UniverseSelectionMethod);</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>August 2016</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>4,500 US Equities</td>\n        </tr><tr><td>Data Density</td>\n            <td>Dense</td>\n        </tr><tr><td>Resolution</td>\n            <td>Sparse</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      { "title": "", "content": "" },
      {
        "title": "Example Applications",
        "content": "<p>\nThe Brain Sentiment Indicator dataset enables researchers to incorporate sentiment from financial news sources into their strategies. Possible approaches to be tested include:\n</p>\n<ul><li>Buying when the public sentiment for a security is increasing</li>\n<li>Short selling when the public sentiment for a security is decreasing</li>\n<li>Scaling the position sizing of securities based on how many times they are mentioned in financial news articles</li> \n</ul><p>\nDisclaimer: The dataset is provided by the data provider for informational purposes only and does not constitute an offer to sell, a solicitation to buy, or a recommendation or endorsement for any security or strategy, nor do they constitute an offer to provide investment advisory or other services by the data provider.\n</p>\n<div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_b84766e6d2b693bdc59d14c66e257c68.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Brain Sentiment Indicator dataset provides BrainSentimentIndicatorBase and BrainSentimentIndicatorUniverse objects.</p>\n\n<h4>BrainSentimentIndicatorBase Attributes</h4>\n<p>BrainSentimentIndicatorBase objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.BrainSentimentIndicatorBase\"></div>\n\n<h4>BrainSentimentIndicatorUniverse Attributes</h4>\n<p>BrainSentimentIndicatorUniverse objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.BrainSentimentIndicatorUniverse\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add Brain Sentiment data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass BrainSentimentDataAlgorithm(QCAlgorithm):\n    \n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2021, 7, 8)\n        self.SetCash(100000) \n        \n        self.symbol = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        self.dataset_symbol = self.AddData(BrainSentimentIndicator30Day, self.symbol).Symbol</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class BrainSentimentDataAlgorithm : QCAlgorithm\n    {\n    \tprivate Symbol _symbol;\n    \tprivate Symbol _datasetSymbol;\n    \t\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2021, 7, 8);\n            SetCash(100000);\n            \n            _symbol = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            _datasetSymbol = AddData&lt;BrainSentimentIndicator30Day&gt;(_symbol).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    if data.ContainsKey(self.dataset_symbol):\n        point = data[self.dataset_symbol]\n        self.Log(f\"Data point received for {self.dataset_symbol} at {data.Time}. Sentiment: {point.Sentiment}\")</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    if (data.ContainsKey(_datasetSymbol))\n    {\n        var point = data[_datasetSymbol];\n        Log($\"Data point received for {_datasetSymbol} at {data.Time}. Sentiment: {point.Sentiment}\");\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for Brain Sentiment by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.dataset_symbol, 100, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History&lt;BrainSentimentIndicator30Day&gt;(_datasetSymbol, 100, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Universe Selection",
        "content": "<p>You can filter and select US equities based by AddUniverse&lt;BrainSentimentIndicatorUniverse&gt;() based on daily Brain Sentiment Indicator data.\n</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def Initialize(self):\n    # Data ADDED via universe selection is added with Daily resolution.\n    self.UniverseSettings.Resolution = Resolution.Daily\n\n    # add a custom universe data source (defaults to usa-equity)\n    self.AddUniverse(BrainSentimentIndicatorUniverse, \"BrainSentimentIndicatorUniverse\", Resolution.Daily, self.UniverseSelection)\n\ndef UniverseSelection(self, alt_coarse):\n    for datum in alt_coarse:\n        self.Log(f\"\"\"{datum.Symbol},\n                {datum.TotalArticleMentions7Days},\n                {datum.SentimentalArticleMentions7Days},\n                {datum.Sentiment7Days},\n                {datum.TotalBuzzVolume7Days},\n                {datum.SentimentalBuzzVolume7Days},\n                {datum.TotalArticleMentions30Days},\n                {datum.SentimentalArticleMentions30Days},\n                {datum.Sentiment30Days},\n                {datum.TotalBuzzVolume30Days},\n                {datum.SentimentalBuzzVolume30Days}\"\"\")\n\n    # define our selection criteria\n    return [d.Symbol for d in alt_coarse \\\n                if d.TotalArticleMentions7Days &gt; 0 \\\n                and d.Sentiment7Days]</code></pre>\n<pre><code class=\"language-cs\">AddUniverse&lt;BrainSentimentIndicatorUniverse&gt;(\"BrainSentimentIndicatorUniverse\", Resolution.Daily, altCoarse=&gt;\n{\n    foreach (var datum in altCoarse)\n    {\n        Log($@\"{datum.Symbol},\n               {datum.TotalArticleMentions7Days},\n               {datum.SentimentalArticleMentions7Days},\n               {datum.Sentiment7Days},\n               {datum.TotalBuzzVolume7Days},\n               {datum.SentimentalBuzzVolume7Days},\n               {datum.TotalArticleMentions30Days},\n               {datum.SentimentalArticleMentions30Days},\n               {datum.Sentiment30Days},\n               {datum.TotalBuzzVolume30Days},\n               {datum.SentimentalBuzzVolume30Days}\");\n    }\n\n    // define our selection criteria\n    return from d in altCoarse \n           where d.TotalArticleMentions7Days &gt; 0m &amp;&amp; d.Sentiment7Days &gt; 0m\n           select d.Symbol;\n});</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Brain Sentiment Indicator dataset provides BrainSentimentIndicatorBase and BrainSentimentIndicatorUniverse objects.</p>\n\n<h4>BrainSentimentIndicatorBase Attributes</h4>\n<p>BrainSentimentIndicatorBase objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.BrainSentimentIndicatorBase\"></div>\n\n<h4>BrainSentimentIndicatorUniverse Attributes</h4>\n<p>BrainSentimentIndicatorUniverse objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.BrainSentimentIndicatorUniverse\"></div>"
      }
    ],
    "priceCTA": "From $10/mo",
    "vendorWebsite": "https://braincompany.co/",
    "examples": [
      {
        "id": 459,
        "master_product_id": 33,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we buy when the 30 day Brain Sentiment indicator increases and remain in cash otherwise.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass BrainSentimentDataAlgorithm(QCAlgorithm):\n    \n    latest_sentiment_value = None\n    target_holdings = 0\n    \n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2021, 7, 8)\n        self.SetCash(100000) \n        \n        # Requesting data\n        self.symbol = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        self.dataset_symbol = self.AddData(BrainSentimentIndicator30Day, self.symbol).Symbol\n        \n        # Historical data\n        history = self.History(self.dataset_symbol, 100, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request for {self.dataset_symbol}\")\n        if history.empty:\n            return\n        \n        # Warm up historical sentiment values\n        previous_sentiment_values = history.loc[self.dataset_symbol].sentiment.values\n        for sentiment in previous_sentiment_values:\n            self.update(sentiment)\n            \n    def update(self, sentiment):\n        if self.latest_sentiment_value is not None:\n            self.target_holdings = int(sentiment &gt; self.latest_sentiment_value)\n        self.latest_sentiment_value = sentiment\n        \n    def OnData(self, data):\n        if data.ContainsKey(self.dataset_symbol):\n            sentiment = data[self.dataset_symbol].Sentiment\n            self.update(sentiment)\n           \n        # Ensure we have security data in the current slice\n        if not (data.ContainsKey(self.symbol) and data[self.symbol] is not None):\n            return\n            \n        if self.target_holdings != self.Portfolio.Invested:\n            self.SetHoldings(self.symbol, self.target_holdings)</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class BrainSentimentDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _symbol;\n        private Symbol _datasetSymbol;\n        private decimal? _latestSentimentValue = null;\n        private int _targetHoldings = 0;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2021, 7, 8);\n            SetCash(100000);\n            \n            // Requesting data\n            _symbol = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            _datasetSymbol = AddData&lt;BrainSentimentIndicator30Day&gt;(_symbol).Symbol;\n            \n            // Historical data\n            var history = History&lt;BrainSentimentIndicator30Day&gt;(_datasetSymbol, 100, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request for {_datasetSymbol}\");\n            \n            // Warm up historical sentiment values\n            var previousSentimentValues = history.Select(x =&gt; x.Sentiment);\n            foreach (var sentiment in previousSentimentValues)\n            {\n                Update(sentiment);\n            }\n        }\n\n        \n        public void Update(decimal sentiment)\n        {\n            if (_latestSentimentValue != null)\n            {\n                _targetHoldings = sentiment &gt; _latestSentimentValue ? 1 : 0;\n            }\n            _latestSentimentValue = sentiment;\n        }\n        \n        public override void OnData(Slice data)\n        {\n            if (data.ContainsKey(_datasetSymbol))\n            {\n                var sentiment = data[_datasetSymbol].Sentiment;\n                Update(sentiment);\n            }\n                \n            if (_targetHoldings == 1 != Portfolio.Invested)\n            {\n                SetHoldings(_symbol, _targetHoldings);\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-10-13 20:40:35"
      },
      {
        "id": 461,
        "master_product_id": 33,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this example, we hold an equal-weighted portfolio with equities that have their 30-day Brain Sentiment indicator increases and any article mentioned within 7 days.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass BrainSentimentDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2021, 7, 8)\n        self.SetCash(100000) \n        \n        self.UniverseSettings.Resolution = Resolution.Daily\n        self.AddUniverse(BrainSentimentIndicatorUniverse, \"BrainSentimentIndicatorUniverse\", Resolution.Daily, self.UniverseSelection)\n        \n        self.AddAlpha(BrainSentimentAlphaModel())\n        \n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n         \n        self.AddRiskManagement(NullRiskManagementModel())\n        \n        self.SetExecution(ImmediateExecutionModel())\n\n    def UniverseSelection(self, alt_coarse):\n        # define our selection criteria\n        return [d.Symbol for d in alt_coarse \\\n                    if d.TotalArticleMentions7Days &gt; 0]\n\n        \nclass BrainSentimentAlphaModel(AlphaModel):\n    \n    symbol_data_by_symbol = {}\n\n    def Update(self, algorithm, data):\n        insights = []\n        \n        for symbol, symbol_data in self.symbol_data_by_symbol.items():\n            if data.ContainsKey(symbol_data.dataset_symbol):\n                sentiment = data[symbol_data.dataset_symbol].Sentiment\n                symbol_data.update(sentiment)\n               \n            # Ensure we have security data in the current slice\n            if not (data.ContainsKey(symbol) and data[symbol] is not None):\n                continue\n                \n            if symbol_data.target_direction == InsightDirection.Up != algorithm.Portfolio[symbol].Invested:\n                insights.append(Insight.Price(symbol, timedelta(days=100), symbol_data.target_direction))\n        return insights\n        \n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            symbol = security.Symbol\n            self.symbol_data_by_symbol[symbol] = SymbolData(algorithm, symbol)\n        \n        for security in changes.RemovedSecurities:\n            symbol_data = self.symbol_data_by_symbol.pop(security.Symbol, None)\n            if symbol_data:\n                symbol_data.dispose()\n\n\nclass SymbolData:\n    \n    target_direction = InsightDirection.Flat\n    _latest_sentiment_value = None\n    \n    def __init__(self, algorithm, symbol):\n        self.algorithm = algorithm\n        \n        # Requesting data\n        self.dataset_symbol = algorithm.AddData(BrainSentimentIndicator30Day, symbol).Symbol\n        \n        # Historical data\n        history = algorithm.History(self.dataset_symbol, 100, Resolution.Daily)\n        algorithm.Debug(f\"We got {len(history)} items from our history request for {self.dataset_symbol}\")\n        if history.empty:\n            return\n        \n        # Warm up historical sentiment values\n        previous_sentiment_values = history.loc[self.dataset_symbol].sentiment.values\n        for sentiment in previous_sentiment_values:\n            self.update(sentiment)\n        \n    def dispose(self):\n        # Unsubscribe from the Brain Sentiment feed for this security\n        self.algorithm.RemoveSecurity(self.dataset_symbol)\n        \n    def update(self, sentiment):\n        if self._latest_sentiment_value is not None:\n            if sentiment &gt; self._latest_sentiment_value:\n                self.target_direction = InsightDirection.Up\n            else:\n                self.target_direction = InsightDirection.Flat\n        self._latest_sentiment_value = sentiment</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class BrainSentimentDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2021, 7, 8);\n            SetCash(100000);\n            \n            UniverseSettings.Resolution = Resolution.Daily;\n            AddUniverse&lt;BrainSentimentIndicatorUniverse&gt;(\"BrainSentimentIndicatorUniverse\", Resolution.Daily, altCoarse =&gt;\n            {\n                // define our selection criteria\n                return from d in altCoarse\n                    where d.TotalArticleMentions7Days &gt; 0m\n                    select d.Symbol;\n            });\n            \n            AddAlpha(new BrainSentimentAlphaModel());\n            \n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n            \n            AddRiskManagement(new NullRiskManagementModel());\n            \n            SetExecution(new ImmediateExecutionModel());\n        }\n    }\n        \n        \n    public class BrainSentimentAlphaModel : AlphaModel\n    {\n        private Dictionary&lt;Symbol, SymbolData&gt; _symbolDataBySymbol = new Dictionary&lt;Symbol, SymbolData&gt;();\n\n        public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n        {\n            var insights = new List&lt;Insight&gt;();\n            \n            foreach (var entry in _symbolDataBySymbol)\n            {\n                var symbol = entry.Key;\n                var symbolData = entry.Value;\n                \n                if (data.ContainsKey(symbolData.datasetSymbol))\n                {\n                    var sentiment = data[symbolData.datasetSymbol].Sentiment;\n                    symbolData.Update(sentiment);\n                }\n                \n                // Ensure we have security data in the current slice\n                if (!(data.ContainsKey(symbol) &amp;&amp; data[symbol] != null))\n                {\n                    continue;\n                }\n                \n                if (symbolData.targetDirection == InsightDirection.Up != algorithm.Portfolio[symbol].Invested)\n                {\n                    insights.Add(Insight.Price(symbol, TimeSpan.FromDays(365), symbolData.targetDirection));\n                }\n            }\n            \n            return insights;\n        }\n\n        public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n        {\n            foreach (var security in changes.AddedSecurities)\n            {\n                var symbol = security.Symbol;\n                _symbolDataBySymbol.Add(symbol, new SymbolData(algorithm, symbol));\n            }\n\n            foreach (var security in changes.RemovedSecurities)\n            {\n                var symbol = security.Symbol;\n                if (_symbolDataBySymbol.ContainsKey(symbol))\n                {\n                    _symbolDataBySymbol[symbol].dispose();\n                    _symbolDataBySymbol.Remove(symbol);\n                }\n            }\n        }\n    }\n    \n    \n    public class SymbolData\n    {\n        public Symbol datasetSymbol;\n        public InsightDirection targetDirection = InsightDirection.Flat;\n        private QCAlgorithm _algorithm;\n        private decimal? _latestSentimentValue = null;\n\n        public SymbolData(QCAlgorithm algorithm, Symbol symbol)\n        {\n            _algorithm = algorithm;\n            \n            // Requesting data\n            datasetSymbol = algorithm.AddData&lt;BrainSentimentIndicator30Day&gt;(symbol).Symbol;\n            \n            // Historical data\n            var history = algorithm.History&lt;BrainSentimentIndicator30Day&gt;(datasetSymbol, 100, Resolution.Daily);\n            algorithm.Debug($\"We got {history.Count()} items from our history request for {symbol}\");\n            if (history.Count() == 0)\n            {\n                return;\n            }\n            \n            // Warm up historical sentiment values\n            var previousSentimentValues = history.Select(x =&gt; x.Sentiment);\n            foreach (var sentiment in previousSentimentValues)\n            {\n                Update(sentiment);\n            }\n        }\n        \n        public void dispose()\n        {\n            // Unsubscribe from the Brain Sentiment feed for this security\n            _algorithm.RemoveSecurity(datasetSymbol);\n        }\n        \n        public void Update(decimal sentiment)\n        {\n            if (_latestSentimentValue != null)\n            {\n                targetDirection = sentiment &gt; _latestSentimentValue ? InsightDirection.Up : InsightDirection.Flat;\n            }\n            _latestSentimentValue = sentiment;\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-05-09 17:56:20"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 33,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>Brain Sentiment Indicator is allowed to be used in the cloud \r\n            for personal and commercial projects with a subscription. The data is permissioned for use within \r\n            the licensed organization only</p><p>Subscription Required | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>Brain Sentiment Indicator can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 100 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>Brain Sentiment Indicator is allowed to be used for free by approved Alpha Stream authors with more than 3 \r\n                    Alpha Streams listed in the marketplace. The Brain will add on a charge of 2 Basis Points \r\n                    for the use of the data to the Alpha Stream reserve price.</p>\r\n                    <p>Free for Authors with 3+ Alphas | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 100,
        "name": "Brain Sentiment - On Premise Download",
        "description": "<p>Brain Sentiment Indicator archived in LEAN format for on premise backtesting and research. One file per ticker.</p>\n    <ul><li>Ownership of the data for internal use</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "On Premise Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "100 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 99,
        "name": "Brain Sentiment - Cloud Access",
        "description": "<p>Harness Brain Sentiment analysis data in the QuantConnect Cloud for your backtesting and live trading purposes.\n </p>\n    <ul><li>Curated, clean data</li>\n         <li>Preprocessed sentiment analysis data</li>\n         <li>Updated nightly at 4am</li>\n         <li>Mapped to US Equity data with full historical SIP feed</li>\n   </ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "$10/mo",
          "monthlyPrice": 10,
          "yearlyPrice": 110,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 110
      }
    ],
    "headerColor": "8b000a"
  },
  {
    "name": "Brain ML Stock Ranking",
    "vendorName": "Brain",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/data-market-brain-light.png",
    "landingFileName": "brain-ml-stock-ranking.html",
    "url": "/datasets/brain-ml-stock-ranking",
    "short_description": "Proprietary machine learning ranking algorithm for 1,000 US Equities. Data is provided on a daily frequency since January 2010.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>\nThe Brain ML Stock Ranking dataset by Brain generates a daily ranking for US Equities based on their predicted ranking of future returns relative to the universe median across four-time horizons: next 2, 3, 5, 10, and 21 days (one trading month). The data covers 1,000 US Equities (universe updated yearly by including the largest 1,000 US companies of the previous year), starts in January 2010, and is delivered on a daily frequency. This dataset is created by a voting scheme of machine learning classifiers that non-linearly combine a variety of features with a series of techniques aimed at mitigating the well-known overfitting problem for financial data with a low signal-to-noise ratio. Examples of features are time-varying stock-specific features like price and volume-related metrics or fundamentals; time-fixed stock-specific features like the sector and other database information; market regime features such as volatility and other financial stress indicators; calendar features representing possible anomalies, for example, the month of the year. \n</p>\n<p>\nMore precisely the ML Stock Ranking score is related to the confidence of a Machine Learning classifier in predicting top or bottom quintile returns for the next N trading days (e.g. next 21 days) for a stock with the respect to the median of the universe and ranges from -1 to +1.\n</p>\n<p>\nA negative score means that the system is more confident that the stock belongs to the lower returns quintile, a positive score means that the system is more confident that the stock belongs to the higher returns quintile. It is important to note that the score has a meaning only if used to compare different stocks to perform a ranking.\n</p>\n<p>\nTypical use is to download the score for a large stock universe for a given day, e.g. 500 stocks or the full universe of 1000 stocks, order the stocks by mlAlpha score and go long the top K stocks, or build a long-short strategy going long the top K and short the bottom K stocks.\n</p>\n\n<p>For more information, refer to Brain's <a href=\"https://braincompany.co/assets/files/BSI_summary.pdf\">summary paper</a>.</p>\n\n<p>This dataset depends on the <a href=\"https://www.quantconnect.com/datasets/quantconnect-us-equity-security-master\">US Equity Security Master</a> dataset because the US Equity Security Master dataset contains information on splits, dividends, and symbol changes.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p><a href=\"https://braincompany.co/bsr.html\">Brain</a> is a Research Company that creates proprietary datasets and algorithms for investment strategies, combining experience in financial markets with strong competencies in Statistics, Machine Learning, and Natural Language Processing. The founders share a common academic background of research in Physics as well as extensive experience in Financial markets. </p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.DataSource import *\n\nself.symbol = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nself.dataset_symbol = self.AddData(BrainStockRanking2Day, symbol).Symbol\n\nself.AddUniverse(BrainStockRankingUniverse, \"BrainStockRankingUniverse\", Resolution.Daily, self.UniverseSelectionMethod)</code></pre>\n<pre><code class=\"language-cs\">using QuantConnect.DataSource;\n\n_symbol = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n_datasetSymbol = AddData&lt;BrainStockRanking2Day&gt;(_symbol).Symbol;\n\nAddUniverse&lt;BrainStockRankingUniverse&gt;(\"BrainStockRankingUniverse\", Resolution.Daily, UniverseSelectionMethod);</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 2010</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>1,000 US Equities</td>\n        </tr><tr><td>Data Density</td>\n            <td>Sparse</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe Brain ML Stock Ranking dataset enables researchers to test strategies using the machine learning ranking provided by Brain also in combination with other datasets. Examples to be tested include:\n</p>\n<ul><li>Constructing a portfolio of securities with each security's weight in the portfolio reflecting its Brain ML Rank</li>\n<li>Test a strategy that goes long a certain number of  stocks at the top of the Brain ML Stock Ranking</li>\n<li>Build a market-neutral strategy based on  the top N and bottom N stocks ranked by the dataset</li>\n</ul><p>\nDisclaimer: The dataset is provided by the data provider for informational purposes only and do not constitute an offer to sell, a solicitation to buy, or a recommendation or endorsement for any security or strategy, nor do they constitute an offer to provide investment advisory or other services by the data provider.\n</p>\n<div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_2fe7e709f4265ecb7b01cdc7d6c2202c.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Brain ML Stock Ranking dataset provides BrainStockRankingBase and BrainStockRankingUniverse objects.</p>\n\n<h4>BrainStockRankingBase Attributes</h4> \n<p>BrainStockRankingBase objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.BrainStockRankingBase\"></div>\n\n<h4>BrainStockRankingUniverse Attributes</h4> \n<p>BrainStockRankingUniverse objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.BrainStockRankingUniverse\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add Brain ML Ranking data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.DataSource import *\n\nclass BrainMLRankingDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 7, 8)\n        self.SetCash(100000) \n        \n        self.symbol = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        self.dataset_symbol = self.AddData(BrainStockRanking2Day, symbol).Symbol</code></pre>\n<pre><code class=\"language-cs\">using QuantConnect.DataSource;\n\nnamespace QuantConnect\n{\n    public class BrainMLRankingDataAlgorithm : QCAlgorithm\n    {\n    \tprivate Symbol _symbol;\n    \tprivate Symbol _datasetSymbol;\n    \t\n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 7, 8);\n            SetCash(100000);\n            \n            _symbol = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            _datasetSymbol = AddData&lt;BrainStockRanking2Day&gt;(symbol).Symbol;\n        }\n    }\n}</code></pre></div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(BrainStockRanking2Day)\n    for point in points.Values:\n        self.Log(f\"Ranking for {point.Symbol} at {data.Time}: {point.Rank}\")\n</code></pre>\n\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var points = data.Get&lt;BrainStockRanking2Day&gt;();\n    foreach (var point in points.Values)\n    {\n        Log($\"Ranking for {point.Symbol} at {data.Time}: {point.Rank}\");\n    }\n}</code></pre></div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for Brain ML Ranking by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.dataset_symbol, 365, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History&lt;BrainStockRanking2Day&gt;(_datasetSymbol, 365, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Universe Selection",
        "content": "<p>You can filter and select US equities by AddUniverse() based on daily Brain Stock Ranking data.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def Initialize(self):\n    # Data ADDED via universe selection is added with Daily resolution.\n    self.UniverseSettings.Resolution = Resolution.Daily\n\n    # add a custom universe data source (defaults to usa-equity)\n    self.AddUniverse(BrainStockRankingUniverse, \"BrainStockRankingUniverse\", Resolution.Daily, self.UniverseSelection)\n\ndef UniverseSelection(self, alt_coarse):\n    for datum in alt_coarse:\n        self.Log(f\"{datum.Symbol},{datum.Rank2Days},{datum.Rank3Days},{datum.Rank5Days},{datum.Rank10Days},{datum.Rank21Days}\")\n\n    # define our selection criteria\n    return [d.Symbol for d in alt_coarse \\\n                if d.Rank2Days &gt; 0 \\\n                and d.Rank3Days &gt; 0 \\\n                and d.Rank5Days &gt; 0]</code></pre>\n<pre><code class=\"language-cs\">AddUniverse&lt;BrainStockRankingUniverse&gt;(\"BrainStockRankingUniverse\", Resolution.Daily, altCoarse =&gt;\n{\n    foreach (var datum in altCoarse)\n    {\n        Log($\"{datum.Symbol},{datum.Rank2Days},{datum.Rank3Days},{datum.Rank5Days},{datum.Rank10Days},{datum.Rank21Days}\");\n    }\n\n    // define our selection criteria\n    return from d in altCoarse \n        where d.Rank2Days &gt; 0m &amp;&amp; d.Rank3Days &gt; 0m  &amp;&amp; d.Rank5Days &gt; 0m\n        select d.Symbol;\n});</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Brain ML Stock Ranking dataset provides BrainStockRankingBase and BrainStockRankingUniverse objects.</p>\n\n<h4>BrainStockRankingBase Attributes</h4> \n<p>BrainStockRankingBase objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.BrainStockRankingBase\"></div>\n\n<h4>BrainStockRankingUniverse Attributes</h4> \n<p>BrainStockRankingUniverse objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.BrainStockRankingUniverse\"></div>"
      }
    ],
    "priceCTA": "From $10/mo",
    "vendorWebsite": "https://braincompany.co/",
    "examples": [
      {
        "id": 475,
        "master_product_id": 34,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we construct a portfolio where the weight of each security in the portfolio is scaled based on its Brain ML Ranking. If the security has a higher Brain ML Ranking than the other securities in the universe, it is allocated a larger weight in the portfolio.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.DataSource import *\nclass BrainMLRankingDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 7, 8)\n        self.SetCash(100000) \n        \n        tickers = [\"AAPL\", \"TSLA\", \"MSFT\", \"F\", \"KO\"]\n        self.symbol_by_dataset_symbol = {}\n        for ticker in tickers:\n            \n            # Requesting data\n            symbol = self.AddEquity(ticker, Resolution.Daily).Symbol\n            dataset_symbol = self.AddData(BrainStockRanking2Day, symbol).Symbol\n            self.symbol_by_dataset_symbol[dataset_symbol] = symbol\n            \n            # Historical data\n            history = self.History(dataset_symbol, 365, Resolution.Daily)\n            self.Debug(f\"We got {len(history)} items from our history request for {symbol}\")\n        \n    def OnData(self, data):\n        \n        # Collect rankings for all symbols\n        points = data.Get(BrainStockRanking2Day)\n        if points is None:\n            return\n        symbols = []\n        ranks = []\n        for point in points.Values:\n            symbols.append(self.symbol_by_dataset_symbol[point.Symbol])\n            ranks.append(point.Rank)\n        \n        # Rank each symbol's Brain ML ranking relative to each other\n        if len(ranks) == 0:\n            return\n        ranks = [sorted(ranks).index(rank) + 1 for rank in ranks]\n        \n        # Place orders\n        for i, rank in enumerate(ranks):\n            weight = rank / sum(ranks)\n            self.SetHoldings(symbols[i], weight)</code></pre>\n<pre><code class=\"language-cs\">using QuantConnect.DataSource;\n\nnamespace QuantConnect\n{\n    public class BrainMLRankingDataAlgorithm : QCAlgorithm\n    {\n        private Dictionary&lt;Symbol, Symbol&gt; _symbolByDatasetSymbol = new Dictionary&lt;Symbol, Symbol&gt;();\n        \n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 7, 8);\n            SetCash(100000);\n            \n            var tickers = new List&lt;string&gt;() {\"AAPL\", \"TSLA\", \"MSFT\", \"F\", \"KO\"};\n            foreach (var ticker in tickers)\n            {\n                // Requesting data\n                var symbol = AddEquity(ticker, Resolution.Daily).Symbol;\n                var datasetSymbol = AddData&lt;BrainStockRanking2Day&gt;(symbol).Symbol;\n                _symbolByDatasetSymbol.Add(datasetSymbol, symbol);\n                \n                // Historical data\n                var history = History&lt;BrainStockRanking2Day&gt;(datasetSymbol, 365, Resolution.Daily);\n                Debug($\"We got {history.Count()} items from our history request for {symbol}\");\n            }\n        }\n\n        public override void OnData(Slice data)\n        {\n            // Collect rankings for all symbols\n            var points = data.Get&lt;BrainStockRanking2Day&gt;();\n            if (points == null)\n            {\n                return;\n            }\n            var symbols = new List&lt;Symbol&gt;();\n            var ranks = new List&lt;decimal&gt;();\n            foreach (var point in points.Values)\n            {\n                symbols.Add(_symbolByDatasetSymbol[point.Symbol]);\n                ranks.Add(point.Rank);\n            }\n            \n            // Rank each symbol's Brain ML ranking relative to the other symbols\n            if (ranks.Count() == 0) return;\n            var sortedRanksTemp = new List&lt;decimal&gt;(ranks); \n            sortedRanksTemp.Sort();\n            var sortedRanks = new List&lt;decimal&gt;();\n            for (var i = 0; i &lt; symbols.Count(); i++)\n            {\n                sortedRanks.Add(sortedRanksTemp.IndexOf(ranks[i]) + 1);\n            }\n            \n            // Place orders -- give higher weight to symbols with higher Brain ML Ranking\n            for (var i = 0; i &lt; symbols.Count(); i++)\n            {\n                var rank = sortedRanks[i];\n                var weight = rank / sortedRanks.Sum();\n                SetHoldings(symbols[i], weight);\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-07-09 20:02:40"
      },
      {
        "id": 477,
        "master_product_id": 34,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this example, we construct a portfolio where the weight of each security in the portfolio is scaled based on its Brain ML Ranking. If the security has a higher Brain ML Ranking than the other securities in the universe, it is allocated a larger weight in the portfolio.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.DataSource import *\n\nclass BrainMLRankingDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 7, 8)\n        self.SetCash(100000) \n        \n        self.UniverseSettings.Resolution = Resolution.Daily\n        self.AddUniverse(BrainStockRankingUniverse, \"BrainStockRankingUniverse\", Resolution.Daily, self.UniverseSelection)\n        \n        self.AddAlpha(BrainMLRankingAlphaModel())\n        \n        self.SetPortfolioConstruction(InsightWeightingPortfolioConstructionModel())\n         \n        self.AddRiskManagement(NullRiskManagementModel())\n        \n        self.SetExecution(ImmediateExecutionModel())\n\n    def UniverseSelection(self, alt_coarse):\n        # define our selection criteria\n        return [d.Symbol for d in alt_coarse \\\n                    if d.Rank2Days &gt; 0.2 \\\n                    and d.Rank3Days &gt; 0.2]\n        \n        \nclass BrainMLRankingAlphaModel(AlphaModel):\n    \n    symbol_data_by_symbol = {}\n    symbol_by_dataset_symbol = {}\n    \n    def Update(self, algorithm, data):\n        insights = []\n        \n        # Collect rankings for all symbols\n        points = data.Get(BrainStockRanking2Day)\n        if points is None:\n            return []\n        symbols = []\n        ranks = []\n        for point in points.Values:\n            symbols.append(self.symbol_by_dataset_symbol[point.Symbol])\n            ranks.append(point.Rank)\n        \n        # Rank each symbol's Brain ML ranking relative to each other\n        if len(ranks) == 0:\n            return []\n        ranks = [sorted(ranks).index(rank) + 1 for rank in ranks]\n        \n        # Place orders -- give higher weight to symbols with higher Brain ML Ranking\n        for i, rank in enumerate(ranks):\n            weight = rank / sum(ranks)\n            insights.append(Insight.Price(symbols[i], timedelta(days=7), InsightDirection.Up, None, None, None, weight))\n        \n        return insights\n        \n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            symbol = security.Symbol\n            symbol_data = SymbolData(algorithm, symbol)\n            self.symbol_data_by_symbol[symbol] = symbol_data\n            self.symbol_by_dataset_symbol[symbol_data.dataset_symbol] = symbol\n        \n        for security in changes.RemovedSecurities:\n            symbol_data = self.symbol_data_by_symbol.pop(security.Symbol, None)\n            if symbol_data:\n                symbol_data.dispose()\n                \n            for dataset_symbol, symbol in self.symbol_by_dataset_symbol.items():\n                if symbol == security.Symbol:\n                    self.symbol_by_dataset_symbol.pop(dataset_symbol)\n                    break\n\n\nclass SymbolData:\n    def __init__(self, algorithm, symbol):\n        self.algorithm = algorithm\n        \n        # Requesting data\n        self.dataset_symbol = algorithm.AddData(BrainStockRanking2Day, symbol).Symbol\n        \n        # Historical data\n        history = algorithm.History(self.dataset_symbol, 365, Resolution.Daily)\n        algorithm.Debug(f\"We got {len(history)} items from our history request for {symbol}\")\n        \n    def dispose(self):\n        # Unsubscribe from the Brain ML Ranking feed for this security\n        self.algorithm.RemoveSecurity(self.dataset_symbol)</code></pre>\n<pre><code class=\"language-cs\">using System.Linq;\nusing QuantConnect.DataSource;\n\nnamespace QuantConnect\n{\n    public class BrainMLRankingDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 7, 8);\n            SetCash(100000);\n            \n            AddUniverse&lt;BrainStockRankingUniverse&gt;(\"BrainStockRankingUniverse\", Resolution.Daily, altCoarse =&gt;\n            {\n                // define our selection criteria\n                return from d in altCoarse \n                    where d.Rank2Days &gt; 0.2m &amp;&amp; d.Rank3Days &gt; 0.2m\n                    select d.Symbol;\n            });\n            \n            AddAlpha(new BrainMLRankingAlphaModel());\n            \n            SetPortfolioConstruction(new InsightWeightingPortfolioConstructionModel());\n            \n            AddRiskManagement(new NullRiskManagementModel());\n            \n            SetExecution(new ImmediateExecutionModel());\n        }\n    }\n        \n        \n    public class BrainMLRankingAlphaModel : AlphaModel\n    {\n        private Dictionary&lt;Symbol, SymbolData&gt; _symbolDataBySymbol = new Dictionary&lt;Symbol, SymbolData&gt;();\n        private Dictionary&lt;Symbol, Symbol&gt; _symbolByDatasetSymbol = new Dictionary&lt;Symbol, Symbol&gt;();\n\n        public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n        {\n            var insights = new List&lt;Insight&gt;();\n            \n            // Collect rankings for all symbols\n            var points = data.Get&lt;BrainStockRanking2Day&gt;();\n            if (points == null)\n            {\n                return insights;\n            }\n            var symbols = new List&lt;Symbol&gt;();\n            var ranks = new List&lt;decimal&gt;();\n            foreach (var point in points.Values)\n            {\n                symbols.Add(_symbolByDatasetSymbol[point.Symbol]);\n                ranks.Add(point.Rank);\n            }\n            \n            // Rank each symbol's Brain ML ranking relative to the other symbols\n            if (ranks.Count() == 0) \n            {\n                return insights; \n            }\n            var sortedRanksTemp = new List&lt;decimal&gt;(ranks); \n            sortedRanksTemp.Sort();\n            var sortedRanks = new List&lt;decimal&gt;();\n            for (var i = 0; i &lt; symbols.Count(); i++)\n            {\n                sortedRanks.Add(sortedRanksTemp.IndexOf(ranks[i]) + 1);\n            }\n            \n            // Place orders -- give higher weight to symbols with higher Brain ML Ranking\n            for (var i = 0; i &lt; symbols.Count(); i++)\n            {\n                var rank = sortedRanks[i];\n                var weight = rank / sortedRanks.Sum();\n                insights.Add(Insight.Price(symbols[i], TimeSpan.FromDays(7), InsightDirection.Up, null, null, null, (double)weight));\n            }\n            \n            return insights;\n        }\n\n        public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n        {\n            foreach (var security in changes.AddedSecurities)\n            {\n                var symbol = security.Symbol;\n                var symbolData = new SymbolData(algorithm, symbol);\n                _symbolDataBySymbol.Add(symbol, symbolData);\n                _symbolByDatasetSymbol.Add(symbolData.datasetSymbol, symbol);\n            }\n\n            foreach (var security in changes.RemovedSecurities)\n            {\n                var symbol = security.Symbol;\n                if (_symbolDataBySymbol.ContainsKey(symbol))\n                {\n                    _symbolDataBySymbol[symbol].dispose();\n                    _symbolDataBySymbol.Remove(symbol);\n                }\n                \n                foreach (var entry in _symbolByDatasetSymbol)\n                {\n                    if (entry.Value == symbol)\n                    {\n                        _symbolByDatasetSymbol.Remove(entry.Key);\n                    }\n                }\n            }\n        }\n    }\n    \n    \n    public class SymbolData\n    {\n        private QCAlgorithm _algorithm;\n        public Symbol datasetSymbol;\n\n        public SymbolData(QCAlgorithm algorithm, Symbol symbol)\n        {\n            _algorithm = algorithm;\n            \n            // Requesting data\n            datasetSymbol = algorithm.AddData&lt;BrainStockRanking2Day&gt;(symbol).Symbol;\n            \n            // Historical data\n            var history = algorithm.History&lt;BrainStockRanking2Day&gt;(datasetSymbol, 365, Resolution.Daily);\n            algorithm.Debug($\"We got {history.Count()} items from our history request for {symbol}\");\n        }\n        \n        public void dispose()\n        {\n            // Unsubscribe from the Brain ML Ranking feed for this security\n            _algorithm.RemoveSecurity(datasetSymbol);\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-05-10 06:16:10"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 34,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>Brain ML Stock Ranking is allowed to be used in the cloud \r\n            for personal and commercial projects with a subscription. The data is permissioned for use within \r\n            the licensed organization only</p><p>Subscription Required | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>Brain ML Stock Ranking can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 100 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>Brain ML Stock Ranking is allowed to be used for free by approved Alpha Stream authors with more than 3 \r\n                    Alpha Streams listed in the marketplace. The Brain will add on a charge of 2 Basis Points \r\n                    for the use of the data to the Alpha Stream reserve price.</p>\r\n                    <p>Free for Authors with 3+ Alphas | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 102,
        "name": "Brain ML Ranking - On Premise Download",
        "description": "<p>Brain ML Ranking archived in LEAN format for on premise backtesting and research. One file per month, per ticker.</p>\n    <ul><li>Ownership of the data for internal use</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "On Premise Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "100 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 101,
        "name": "Brain ML Ranking - Cloud Access",
        "description": "<p>Harness Brain ML ranking data in the QuantConnect Cloud for your backtesting and live trading purposes.\n </p>\n    <ul><li>Curated, clean data</li>\n         <li>Preprocessed machine learning data</li>\n         <li>Updated nightly at 4am</li>\n         <li>Mapped to US Equity data</li>\n   </ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "$10/mo",
          "monthlyPrice": 10,
          "yearlyPrice": 110,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 110
      }
    ],
    "headerColor": "ff1841"
  },
  {
    "name": "Brain Language Metrics on Company Filings",
    "vendorName": "Brain",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/data-market-brain-light.png",
    "landingFileName": "brain-language-metrics-company-filings.html",
    "url": "/datasets/brain-language-metrics-company-filings",
    "short_description": "Proprietary NLP algorithm that monitors several language metrics on 10-K and 10-Q company reports for 3,000 US Equities. Data is provided on a daily frequency since January 2007.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The Brain Language Metrics on Company Filings dataset provides the results of an NLP system that monitors several language metrics on 10-K and 10-Q company reports for US Equities. The data covers 5,000 US Equities, starts in January 2010, and is delivered on a daily frequency. The dataset is made of two parts; the first one includes the language metrics of the most recent 10-K or 10-Q report for each firm, namely:</p>\n<ol><li>Financial sentiment</li>\n<li>Percentage of words belonging to financial domain classified by language types (e.g. \u201clitigious\u201d or \u201cconstraining\u201d language)</li>\n<li>Readability score</li>\n<li>Lexical metrics such as lexical density and richness</li>\n<li>Text statistics such as the report length and the average sentence length</li>\n</ol><p>The second part includes the differences between the two most recent 10-Ks or 10-Qs reports of the same period for each company, namely:</p>\n<ol><li>Difference of the various language metrics (e.g. delta sentiment, delta readability score, delta percentage of a specific language type etc.)</li>\n<li>Similarity metrics between documents, also with respect to a specific language type (for example similarity with respect to \u201clitigious\u201d language or \u201cuncertainty\u201d language)</li>\n</ol><p>The analysis is available for the whole report and for specific sections of the report (e.g. Risk Factors and MD&amp;A).</p>\n\n<p>For more information, refer to Brain's <a href=\"https://braincompany.co/assets/files/BLM_CF_V2_summary.pdf\">summary paper</a>.</p>\n\n<p>This dataset depends on the <a href=\"https://www.quantconnect.com/datasets/quantconnect-us-equity-security-master\">US Equity Security Master</a> dataset because the US Equity Security Master dataset contains information on splits, dividends, and symbol changes.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p><a href=\"https://braincompany.co/bsr.html\">Brain</a> is a Research Company that creates proprietary datasets and algorithms for investment strategies, combining experience in financial markets with strong competencies in Statistics, Machine Learning, and Natural Language Processing. The founders share a common academic background of research in Physics as well as extensive experience in Financial markets.</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.DataSource import *\n\nself.symbol = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nself.dataset_10k_symbol = self.AddData(BrainCompanyFilingLanguageMetrics10K , self.symbol).Symbol\nself.dataset_all_symbol = self.AddData(BrainCompanyFilingLanguageMetricsAll, self.symbol).Symbol\n\nself.AddUniverse(BrainCompanyFilingLanguageMetricsUniverse10K, \"BrainCompanyFilingLanguageMetricsUniverse10K\", Resolution.Daily, self.UniverseSelection)\nself.AddUniverse(BrainCompanyFilingLanguageMetricsUniverseAll, \"BrainCompanyFilingLanguageMetricsUniverseAll\", Resolution.Daily, self.UniverseSelection)\n</code></pre>\n<pre><code class=\"language-cs\">using QuantConnect.DataSource;\n\n_symbol = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n_dataset10KSymbol = AddData&lt;BrainCompanyFilingLanguageMetrics10K&gt;(_symbol).Symbol;\n_datasetAllSymbol = AddData&lt;BrainCompanyFilingLanguageMetricsAll&gt;(_symbol).Symbol;\n\nAddUniverse&lt;BrainCompanyFilingLanguageMetricsUniverse10K&gt;(\"BrainCompanyFilingLanguageMetricsUniverse10K\", Resolution.Daily, UniverseSelection);\nAddUniverse&lt;BrainCompanyFilingLanguageMetricsUniverseAll&gt;(\"BrainCompanyFilingLanguageMetricsUniverseAll\", Resolution.Daily, UniverseSelection);\n</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 2010</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>5,000 US Equities</td>\n        </tr><tr><td>Data Density</td>\n            <td>Sparse</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nBrain Language Metrics on Company Filings dataset enables researchers to test strategies using language metrics and their differences gathered from 10K and 10Q reports. Possible applications to be tested include:\n</p>\n<p>Possible applications to be tested include:\n</p>\n<ul><li>Using the similarity among reports to determine position sizing of securities (some examples are discussed in the paper <a href=\"https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1658471\">Lazy Prices, Cohen et al. 2018</a> or <a href=\"https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3690461\">The Positive Similarity of Company Filings and the Cross-section of Stock Returns, M. Padys\u030ca\u0301k 2020</a></li>\n<li>Using the sentiment of the latest report to determine the portfolio allocation to give to each security in the universe</li>\n<li>Using levels of uncertainty, readability, or litigious language in the report to determine position sizing of securities</li>\n</ul><p>\nDisclaimer: The dataset is provided by the data provider for informational purposes only and does not constitute an offer to sell, a solicitation to buy, or a recommendation or endorsement for any security or strategy, nor do they constitute an offer to provide investment advisory or other services by the data provider.\n</p>\n<div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_8ecda28ac0b0626d008313ee7624ee07.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Brain Language Metrics on Company Filings dataset provides BrainCompanyFilingLanguageMetrics and BrainCompanyFilingLanguageMetricsUniverse objects.</p>\n\n<h4>BrainCompanyFilingLanguageMetrics Attributes</h4>\n<p>BrainCompanyFilingLanguageMetrics objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.BrainCompanyFilingLanguageMetrics\"></div>\n\n<h4>BrainCompanyFilingLanguageMetricsUniverse Attributes</h4>\n<p>BrainCompanyFilingLanguageMetricsUniverse objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.BrainCompanyFilingLanguageMetricsUniverse\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add Brain Company Filings NLP data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.DataSource import *\n\nclass BrainCompanyFilingNLPDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2010, 1, 1)\n        self.SetEndDate(2021, 7, 8)\n        self.SetCash(100000) \n        \n        self.symbol = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        self.dataset_symbol = self.AddData(BrainCompanyFilingLanguageMetrics10K , self.symbol).Symbol</code></pre>\n<pre><code class=\"language-cs\">using QuantConnect.DataSource;\n\nnamespace QuantConnect\n{\n    public class BrainCompanyFilingNLPDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _symbol;\n        private Symbol _datasetSymbol;\n    \t\n        public override void Initialize()\n        {\n            SetStartDate(2010, 1, 1);\n            SetEndDate(2021, 7, 8);\n            SetCash(100000);\n            \n            _symbol = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            _datasetSymbol = AddData&lt;BrainCompanyFilingLanguageMetrics10K&gt;(_symbol).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    if data.ContainsKey(self.dataset_symbol):\n        point = data[self.dataset_symbol]\n        self.Log(f\"Data point received for {self.dataset_symbol} at {data.Time}. Sentiment: {point.ReportSentiment.Sentiment}\")</code>\n</pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    if (data.ContainsKey(_datasetSymbol))\n    {\n        var point = data[_datasetSymbol];\n        Log(f\"Data point received for {_datasetSymbol} at {data.Time}. Sentiment: {point.ReportSentiment.Sentiment}\");\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for Brain Company Filings NLP by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.dataset_symbol, 365, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History&lt;BrainCompanyFilingLanguageMetrics10K&gt;(_datasetSymbol, 365, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Universe Selection",
        "content": "<p>You can filter and select US equities based by AddUniverse&lt;BrainCompanyFilingLanguageMetricsUniverse10K&gt;() and/or AddUniverse&lt;BrainCompanyFilingLanguageMetricsUniverseAll&gt;() based on daily Brain Company Filing Language Metrics data.\n</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def Initialize(self):\n    # Data ADDED via universe selection is added with Daily resolution.\n    self.UniverseSettings.Resolution = Resolution.Daily\n\n    # add a custom universe data source (defaults to usa-equity)\n    self.AddUniverse(BrainCompanyFilingLanguageMetricsUniverseAll, \"BrainCompanyFilingLanguageMetricsUniverseAll\", Resolution.Daily, self.UniverseSelection)\n\ndef UniverseSelection(self, alt_coarse):\n    for datum in alt_coarse:\n            self.Log(f\"\"\"{datum.Symbol},\n                    {datum.ReportSentiment.Sentiment},\n                    {datum.RiskFactorsStatementSentiment.Uncertainty},\n                    {datum.ManagementDiscussionAnalyasisOfFinancialConditionAndResultsOfOperations.Litigious},\n                    {datum.ReportSentiment.Constraining},\n                    {datum.RiskFactorsStatementSentiment.Interesting},\n                    {datum.ManagementDiscussionAnalyasisOfFinancialConditionAndResultsOfOperations.Readability},\n                    {datum.ReportSentiment.LexicalRichness},\n                    {datum.RiskFactorsStatementSentiment.LexicalDensity},\n                    {datum.ManagementDiscussionAnalyasisOfFinancialConditionAndResultsOfOperations.SpecificDensity},\n                    {datum.ReportSentiment.SentenceCount},\n                    {datum.RiskFactorsStatementSentiment.MeanSentenceLength}\"\"\")\n\n    # define our selection criteria\n    return [d.Symbol for d in alt_coarse \\\n                if d.ReportSentiment.Sentiment &gt; 0 \\\n                and d.ManagementDiscussionAnalyasisOfFinancialConditionAndResultsOfOperations.Sentiment &gt; 0]</code></pre>\n<pre><code class=\"language-cs\">AddUniverse&lt;BrainCompanyFilingLanguageMetricsUniverseAll&gt;(\"BrainCompanyFilingLanguageMetricsUniverseAll\", Resolution.Daily, altCoarse =&gt;\n{\n    foreach (var datum in altCoarse)\n    {\n        Log($@\"{datum.Symbol},\n        {datum.ReportSentiment.Sentiment},\n        {datum.RiskFactorsStatementSentiment.Uncertainty},\n        {datum.ManagementDiscussionAnalyasisOfFinancialConditionAndResultsOfOperations.Litigious},\n        {datum.ReportSentiment.Constraining},\n        {datum.RiskFactorsStatementSentiment.Interesting},\n        {datum.ManagementDiscussionAnalyasisOfFinancialConditionAndResultsOfOperations.Readability},\n        {datum.ReportSentiment.LexicalRichness},\n        {datum.RiskFactorsStatementSentiment.LexicalDensity},\n        {datum.ManagementDiscussionAnalyasisOfFinancialConditionAndResultsOfOperations.SpecificDensity},\n        {datum.ReportSentiment.SentenceCount},\n        {datum.RiskFactorsStatementSentiment.MeanSentenceLength}\");\n    }\n\n    // define our selection criteria\n    return from d in altCoarse \n        where d.ReportSentiment.Sentiment &gt; 0m &amp;&amp; d.ManagementDiscussionAnalyasisOfFinancialConditionAndResultsOfOperations.Sentiment &gt; 0m\n        select d.Symbol;\n});</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Brain Language Metrics on Company Filings dataset provides BrainCompanyFilingLanguageMetrics and BrainCompanyFilingLanguageMetricsUniverse objects.</p>\n\n<h4>BrainCompanyFilingLanguageMetrics Attributes</h4>\n<p>BrainCompanyFilingLanguageMetrics objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.BrainCompanyFilingLanguageMetrics\"></div>\n\n<h4>BrainCompanyFilingLanguageMetricsUniverse Attributes</h4>\n<p>BrainCompanyFilingLanguageMetricsUniverse objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.BrainCompanyFilingLanguageMetricsUniverse\"></div>"
      }
    ],
    "priceCTA": "From $10/mo",
    "vendorWebsite": "https://braincompany.co/",
    "examples": [
      {
        "id": 491,
        "master_product_id": 35,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we buy Apple when the sentiment of their 10K report is positive and remain in cash otherwise.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass BrainCompanyFilingNLPDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2010, 1, 1)\n        self.SetEndDate(2021, 7, 8)\n        self.SetCash(100000) \n        \n        # Requesting data\n        self.symbol = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        self.dataset_symbol = self.AddData(BrainCompanyFilingLanguageMetrics10K , self.symbol).Symbol\n        \n        # Historical data\n        history = self.History(self.dataset_symbol, 365, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request for {self.dataset_symbol}\")\n        \n        \n    def OnData(self, data):\n        if data.ContainsKey(self.dataset_symbol):\n            sentiment = data[self.dataset_symbol].ReportSentiment.Sentiment\n            self.SetHoldings(self.symbol, int(sentiment &gt; 0))</code></pre>\n<pre><code class=\"language-cs\">using QuantConnect.DataSource;\n\nnamespace QuantConnect\n{\n    public class BrainCompanyFilingNLPDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _symbol;\n        private Symbol _datasetSymbol;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2010, 1, 1);\n            SetEndDate(2021, 7, 8);\n            SetCash(100000);\n            \n            // Requesting data\n            _symbol = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            _datasetSymbol = AddData&lt;BrainCompanyFilingLanguageMetrics10K&gt;(_symbol).Symbol;\n            \n            // Historical data\n            var history = History&lt;BrainCompanyFilingLanguageMetrics10K&gt;(_datasetSymbol, 365, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request for {_datasetSymbol}\");\n        }\n\n        public override void OnData(Slice data)\n        {\n            if (data.ContainsKey(_datasetSymbol))\n            {\n                var sentiment = data[_datasetSymbol].ReportSentiment.Sentiment;\n                SetHoldings(_symbol, sentiment &gt; 0 ? 1 : 0);\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-05-10 13:51:33"
      },
      {
        "id": 493,
        "master_product_id": 35,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this example, we hold an equal-weighting portfolio with equities which their sentiment of their 10K report is positive.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.DataSource import *\n\nclass BrainCompanyFilingNLPDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2010, 1, 1)\n        self.SetEndDate(2021, 7, 8)\n        self.SetCash(100000) \n        \n        self.UniverseSettings.Resolution = Resolution.Daily\n        self.AddUniverse(BrainCompanyFilingLanguageMetricsUniverse10K, \"BrainCompanyFilingLanguageMetricsUniverse10K\", Resolution.Daily, self.UniverseSelection)\n        \n        self.AddAlpha(BrainCompanyFilingNLPAlphaModel())\n        \n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n         \n        self.AddRiskManagement(NullRiskManagementModel())\n        \n        self.SetExecution(ImmediateExecutionModel())\n\n    def UniverseSelection(self, alt_coarse):\n        # define our selection criteria\n        return [d.Symbol for d in alt_coarse \\\n                    if d.ReportSentiment.Sentiment &gt; 0]\n        \n        \nclass BrainCompanyFilingNLPAlphaModel(AlphaModel):\n    \n    def Update(self, algorithm, data):\n        insights = []\n        \n        for symbol in algorithm.ActiveSecurities.Keys:\n            if not data.ContainsKey(symbol):\n                continue\n            insights.append(Insight.Price(symbol, timedelta(days=1), InsightDirection.Up))\n        \n        return insights</code></pre>\n<pre><code class=\"language-cs\">using QuantConnect.DataSource;\n\nnamespace QuantConnect\n{\n    public class BrainCompanyFilingNLPDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2010, 1, 1);\n            SetEndDate(2021, 7, 8);\n            SetCash(100000);\n            \n            UniverseSettings.Resolution = Resolution.Daily;\n            AddUniverse&lt;BrainCompanyFilingLanguageMetricsUniverseAll&gt;(\"BrainCompanyFilingLanguageMetricsUniverseAll\", Resolution.Daily, altCoarse =&gt;\n            {\n                // define our selection criteria\n                return from d in altCoarse \n                    where d.ReportSentiment.Sentiment &gt; 0m\n                    select d.Symbol;\n            });\n            \n            AddAlpha(new BrainCompanyFilingNLPAlphaModel());\n            \n            SetPortfolioConstruction(new InsightWeightingPortfolioConstructionModel());\n            \n            AddRiskManagement(new NullRiskManagementModel());\n            \n            SetExecution(new ImmediateExecutionModel());\n        }\n    }\n        \n        \n    public class BrainCompanyFilingNLPAlphaModel : AlphaModel\n    {\n        private Dictionary&lt;Symbol, SymbolData&gt; _symbolDataBySymbol = new Dictionary&lt;Symbol, SymbolData&gt;();\n\n        public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n        {\n            var insights = new List&lt;Insight&gt;();\n            \n            foreach (var symbol in algorithm.ActiveSecurities.Keys)\n            {\n                if (!data.ContainsKey(symbol))\n                {\n                    continue;\n                }\n                insights.Add(Insight.Price(symbol, TimeSpan.FromDays(1), InsightDirection.Up));\n            }\n            return insights;\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-05-10 06:31:16"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 35,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>Brain Language Metrics on Company Filings is allowed to be used in the cloud \r\n            for personal and commercial projects with a subscription. The data is permissioned for use within \r\n            the licensed organization only</p><p>Subscription Required | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>Brain Language Metrics on Company Filings can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 100 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>Brain Language Metrics on Company Filings is allowed to be used for free by approved Alpha Stream authors with more than 3 \r\n                    Alpha Streams listed in the marketplace. The Brain will add on a charge of 2 Basis Points \r\n                    for the use of the data to the Alpha Stream reserve price.</p>\r\n                    <p>Free for Authors with 3+ Alphas | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 104,
        "name": "Brain Company Filings - On Premise Download",
        "description": "<p>Brain NLP Filing archived in LEAN format for on premise backtesting and research. One file per ticker.</p>\n    <ul><li>Ownership of the data for internal use</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "On Premise Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "100 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 103,
        "name": "Brain Company Filings - Cloud Access",
        "description": "<p>Harness Brain Company Filing NLP data in the QuantConnect Cloud for your backtesting and live trading purposes.\n </p>\n    <ul><li>Curated, clean data</li>\n         <li>Natutal language processed company fillings</li>\n         <li>Updated nightly at 4am</li>\n         <li>Mapped to US Equity data with full US SIP feed</li>\n   </ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "$10/mo",
          "monthlyPrice": 10,
          "yearlyPrice": 110,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 110
      }
    ],
    "headerColor": "8b000a"
  },
  {
    "name": "US Coarse Universe",
    "vendorName": "QuantConnect",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/qc-logo.svg",
    "landingFileName": "quantconnect-us-coarse-universe-constituents.html",
    "url": "/datasets/quantconnect-us-coarse-universe-constituents",
    "short_description": "Universe of all US Equities with closing price and volume, generated each trading day since 1998. Dataset powers the Coarse Universe function of LEAN.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The US Coarse Universe dataset by QuantConnect is a daily universe of all trading stocks in the US for a given day with the end of day price and volume. The data covers 30,000 US Equities in total, with approximately 8,000 Equities per day. The data starts in January 1998 and is delivered each trading day. This dataset is created by taking the closing auction price tick from the daily L1 trade and quote exchange dumps.\n</p>\n\n<p>This dataset depends on the <a href=\"https://www.quantconnect.com/datasets/quantconnect-us-equity-security-master\">US Equity Security Master</a> dataset because the US Equity Security Master dataset contains information on splits, dividends, and symbol changes.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\nQuantConnect was founded in 2012 to serve quants everywhere with the best possible algorithmic trading technology. Seeking to disrupt a notoriously closed-source industry, QuantConnect takes a radically open-source approach to algorithmic trading. Through the QuantConnect web platform, more than 50,000 quants are served every month.\n</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">self.AddUniverse(self.CoarseSelectionFunction)</code></pre>\n<pre><code class=\"language-cs\">AddUniverse(CoarseSelectionFunction);</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 1998</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>30,000 US Equities</td>\n        </tr><tr><td>Data Density</td>\n            <td>Dense</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>New York</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe QuantConnect US Security Master enables researchers to accurately design a universe of securities. Examples include: \n</p>\n<ul><li>Selecting securities with the largest dollar volume</li>\n<li>Selecting securities within a specific price range</li>\n<li>Selecting securities that have fundamental data available (requires an additional fine universe selection model)</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_999503b8529037f3e8698222509facf4.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Coarse Universe dataset provides CoarseFundamental objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.UniverseSelection.CoarseFundamental\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add US Coarse Universe Constituents data to your algorithm, use the AddUniverse() method to request the data. To select which constituents occupy the universe, you need to provide a selection function.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class USCoarseUniverseConstituentsDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 7, 1)\n        self.SetCash(100000)\n        \n        self.AddUniverse(self.CoarseSelectionFunction)\n</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class USCoarseUniverseConstituentsDataAlgorithm : QCAlgorithm\n    {    \t\n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 7, 1);\n            SetCash(100000);\n            \n            AddUniverse(CoarseSelectionFunction);\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via the IEnumerable object that is piped into the user-defined selector function. Coarse data is available in daily resolution. You can see an example of using this data in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def CoarseSelectionFunction(self, coarse):\n\n    sortedByDollarVolume = sorted(coarse, key=lambda x: x.DollarVolume, reverse=True)[:3]\n    for cf in sortedByDollarVolume :\n        self.Debug(f\"{cf.EndTime} :: {cf.Symbol} : {cf.AdjustedPrice} :: {cf.DollarVolume}\")\n\n    return [ x.Symbol for x in sortedByDollarVolume]    \n\n</code></pre>\n<pre><code class=\"language-cs\">\npublic IEnumerable&lt;Symbol&gt; CoarseSelectionFunction(IEnumerable&lt;CoarseFundamental&gt; coarse)\n{\n    var sortedByDollarVolume = coarse\n        .OrderByDescending(x =&gt; x.DollarVolume)\n        .Take(3).ToList();\n\n    foreach (var cf in sortedByDollarVolume)\n    {\n        Debug($\"{cf.EndTime} :: {cf.Symbol} : {cf.AdjustedPrice} :: {cf.DollarVolume}\");\n    }\n\n    return sortedByDollarVolume.Select(x =&gt; x.Symbol);\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can't request historical values for CoarseFundamental members, but you can request historical market data on the security by using the data Symbol object of the CoarseFundamental members. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for securities by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def CoarseSelectionFunction(self, coarse):\n\n    selected_symbols = [x.Symbol \n        for x in sorted(coarse, key=lambda x: x.DollarVolume, reverse=True)[:3]]\n\n    history = self.History(selected_symbols, 10, Resolution.Daily)\n\n    return selected_symbols\n</code></pre>\n<pre><code class=\"language-cs\">\npublic IEnumerable&lt;Symbol&gt; CoarseSelectionFunction(IEnumerable&lt;CoarseFundamental&gt; coarse)\n{\n    var selectedSymbols = coarse\n        .OrderByDescending(x =&gt; x.DollarVolume)\n        .Take(3)\n        .Select(x =&gt; x.Symbol)\n        .ToList();\n\n    var history = History(selectedSymbols, 10, Resolution.Daily);\n\n    return selectedSymbols;\n}</code></pre>\n</div>"
      },
      {
        "title": "Data Point Properties",
        "content": "<p>The US Coarse Universe dataset provides CoarseFundamental objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.UniverseSelection.CoarseFundamental\"></div>"
      }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "https://www.quantconnect.com/data",
    "examples": [
      {
        "id": 507,
        "master_product_id": 36,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we construct an equal-weighted portfolio across the 3 securities with the largest dollar volume.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass USCoarseUniverseConstituentsDataAlgorithm(QCAlgorithm):\n\n    _number_of_symbols = 3\n    _changes = None\n\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 7, 1)\n        self.SetCash(100000)\n        \n        # Requesting data\n        self.AddUniverse(self.CoarseSelectionFunction)\n\n    def CoarseSelectionFunction(self, coarse):\n        sortedByDollarVolume = sorted(coarse, key=lambda x: x.DollarVolume, reverse=True)\n        return [ x.Symbol for x in sortedByDollarVolume[:self._number_of_symbols] ]\n\n\n    def OnData(self, data):\n        # if we have no changes, do nothing\n        if self._changes is None: return\n\n        # liquidate removed securities\n        for security in self._changes.RemovedSecurities:\n            if security.Invested:\n                self.Liquidate(security.Symbol)\n\n        # we want 1/N allocation in each security in our universe\n        for security in self._changes.AddedSecurities:\n            self.SetHoldings(security.Symbol, 1 / self._number_of_symbols)\n\n        self._changes = None\n\n    def OnSecuritiesChanged(self, changes):\n        self._changes = changes\n        \n        for security in changes.AddedSecurities:\n            # Historical data\n            history = self.History(security.Symbol, 7, Resolution.Daily)\n            self.Debug(f\"We got {len(history)} from our history request for {security.Symbol}\")</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class USCoarseUniverseConstituentsDataAlgorithm : QCAlgorithm\n    {\n        private int _numberOfSymbols = 3;\n        private SecurityChanges _changes = SecurityChanges.None;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 7, 1);\n            SetCash(100000);\n\n            // Requesting data\n            AddUniverse(CoarseSelectionFunction);\n        }\n\n        public IEnumerable&lt;Symbol&gt; CoarseSelectionFunction(IEnumerable&lt;CoarseFundamental&gt; coarse)\n        {\n            return coarse.OrderByDescending(x =&gt; x.DollarVolume)\n                .Take(_numberOfSymbols).Select(x =&gt; x.Symbol);\n        }\n\n        public override void OnData(Slice data)\n        {\n            // if we have no changes, do nothing\n            if (_changes == SecurityChanges.None) return;\n\n            // liquidate removed securities\n            foreach (var security in _changes.RemovedSecurities)\n            {\n                if (security.Invested)\n                {\n                    Liquidate(security.Symbol);\n                }\n            }\n\n            // we want 1/N allocation in each security in our universe\n            foreach (var security in _changes.AddedSecurities)\n            {\n                SetHoldings(security.Symbol, 1m / _numberOfSymbols);\n            }\n\n            _changes = SecurityChanges.None;\n        }\n        \n        public override void OnSecuritiesChanged(SecurityChanges changes)\n        {\n            _changes = changes;\n\n\n            foreach (var security in changes.AddedSecurities)\n            {\n                // Historical data\n                var history = History(security.Symbol, 7, Resolution.Daily);\n                Debug($\"We got {history.Count()} from our history request for {security.Symbol}\");\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-07-09 14:58:17"
      },
      {
        "id": 509,
        "master_product_id": 36,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this example, we construct an equal-weighted portfolio across the 3 securities with the largest dollar volume.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass USCoarseUniverseConstituentsDataAlgorithm(QCAlgorithm):\n\n    _number_of_symbols = 3\n\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 7, 1)\n        self.SetCash(100000)\n        \n        # Requesting data\n        self.SetUniverseSelection(\n            CoarseFundamentalUniverseSelectionModel(self.CoarseSelectionFunction))\n        \n        self.SetAlpha(ConstantAlphaModel(InsightType.Price, InsightDirection.Up, timedelta(1)))\n        \n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n         \n        self.AddRiskManagement(NullRiskManagementModel())\n        \n        self.SetExecution(ImmediateExecutionModel())\n        \n\n    def CoarseSelectionFunction(self, coarse):\n        sortedByDollarVolume = sorted(coarse, key=lambda x: x.DollarVolume, reverse=True)\n        return [ x.Symbol for x in sortedByDollarVolume[:self._number_of_symbols] ]</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class USCoarseUniverseConstituentsDataAlgorithm : QCAlgorithm\n    {\n        private int _numberOfSymbols = 3;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 7, 1);\n            SetCash(100000);\n            \n            // Requesting data\n            SetUniverseSelection(\n                new CoarseFundamentalUniverseSelectionModel(CoarseSelectionFunction));\n            \n            SetAlpha(new ConstantAlphaModel(InsightType.Price, InsightDirection.Up, TimeSpan.FromDays(1)));\n            \n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n            \n            AddRiskManagement(new NullRiskManagementModel());\n            \n            SetExecution(new ImmediateExecutionModel());\n        }\n\n        public IEnumerable&lt;Symbol&gt; CoarseSelectionFunction(IEnumerable&lt;CoarseFundamental&gt; coarse)\n        {\n            return coarse.OrderByDescending(x =&gt; x.DollarVolume)\n                .Take(_numberOfSymbols).Select(x =&gt; x.Symbol);\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-07-09 14:59:12"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 36,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>US Coarse Universe is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>US Coarse Universe can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 5 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>US Coarse Universe is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 105,
        "name": "QC US Universe Constituents - Cloud Access",
        "description": "<p>Free access for universe selection strategies on the QuantConnect Cloud. Create custom filters using price and volume for the whole US stock universe. </p>\n<ul><li>Every asset traded since 1998</li>\n    <li>Universe delivery by 6am ET</li>\n    <li>Carefully curated data</li>\n</ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 106,
        "name": "QC US Universe Constituents - On Premise Download",
        "description": "<p>On premise download of US Equity Coarse Universe constituent data files, including closing price and volume for the day for local backtesting.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "On Premise Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "5 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      }
    ],
    "headerColor": "340064"
  },
  {
    "name": "US Equities Short Availability",
    "vendorName": "Atreyu Trading",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/atreyu-logo.png",
    "landingFileName": "atreyu-trading-us-equities-short-availability.html",
    "url": "/datasets/atreyu-trading-us-equities-short-availability",
    "short_description": "Short Availability by Atreyu Trading provides the available shares for open short positions in the US Equity market. The data covers 10,500 US Equities, starting in January 2018.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The US Equity Short Availability dataset by <a href=\"https://qnt.co/atreyu\">Atreyu Trading</a> provides the available shares for open short positions in the US Equity market. The data covers 10,500 US Equities, starts in January 2018, and is delivered on a daily frequency. This dataset is created by <a href=\"https://qnt.co/atreyu\">Atreyu Trading</a> using information from the exchanges.\n</p>\n\n<p>This dataset depends on the <a href=\"https://www.quantconnect.com/datasets/quantconnect-us-equity-security-master\">US Equity Security Master</a> dataset because the US Equity Security Master dataset contains information on splits, dividends, and symbol changes.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\n<a href=\"https://qnt.co/atreyu\">Atreyu Trading</a> is a high-tech electronic brokerage connecting quantitative managers to U.S. markets founded in 2015. They offer an institutional platform, modern APIs, expert support, and competitive pricing.\n\nAs a technology firm and introducing broker, <a href=\"https://qnt.co/atreyu\">Atreyu Trading</a> focuses on systematic managers whose expertise is designing trading models, not trading infrastructure.\n</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Requesting data:\nself.SetBrokerageModel(AtreyuBrokerageModel())\n</code></pre>\n<pre><code class=\"language-cs\">// Requesting data:\nSetBrokerageModel(new AtreyuBrokerageModel())\n</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 2018</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>10,500 US Equities</td>\n        </tr><tr><td>Data Density</td>\n            <td>Sparse</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>New York</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Supported Assets",
        "content": "<p>To view the supported assets in the US Equities Short Availability dataset, see the <a href=\"/data/tree/equity/usa/shortable/atreyu/symbols\">Data Explorer</a>.</p>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe QuantConnect US Equities Short Availability enables researchers to accurately design strategies harnessing information about short availability. Examples include: \n</p>\n<ul><li>Avoid placing orders that will be rejected</li>\n<li>Select securities based on how many shares are available to short</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_88ea0f2745736c6af73243add201625a.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Equities Short Availability data is a Symbol/decimal pair.</p>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add Short Availability data to your algorithm, use the SetBrokerageModel() method to request the data as the ShortableProvider is a brokerage property. The AtreyuBrokerageModel includes the AtreyuShortableProvider ready to use. If we want to extend other brokerage models, we need to create a custom brokerage model. to use this data. For detailed documentation on using brokerage models, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/reality-modelling\">Reality Modelling</a>.\n\n</p><div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass ShortAvailabilityDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000) \n        aapl = self.AddEquity(\"AAPL\", Resolution.Minute).Symbol\n        self.SetBrokerageModel(InteractiveBrokersBrokerageModelWithShortable())\n \nclass InteractiveBrokersBrokerageModelWithShortable(InteractiveBrokersBrokerageModel):\n    def __init__(self):\n        super().__init__()\n        self.ShortableProvider = AtreyuShortableProvider(SecurityType.Equity, Market.USA)\n</code></pre>\n\n<pre><code class=\"language-cs\">\nusing QuantConnect.Data.Shortable;\nnamespace QuantConnect\n{\n    public class ShortAvailabilityDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n            var aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            SetBrokerageModel(new InteractiveBrokersBrokerageModelWithShortable());\n        }\n        \n        public override void OnEndOfDay(Symbol symbol) =&gt;\n            Plot(symbol, \"EOD\", (int)((Equity)Securities[symbol]).TotalShortableQuantity.Value);\n\t\t\n        public class InteractiveBrokersBrokerageModelWithShortable : InteractiveBrokersBrokerageModel\n        {\n            public InteractiveBrokersBrokerageModelWithShortable() : base()\n            {\n                ShortableProvider = new AtreyuShortableProvider(SecurityType.Equity, Market.USA);\n            }\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via QCAlgorithm methods: AllShortableSymbols, ShortableQuantity, and Shortable.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    # Gets all Symbols that are shortable, as well as the quantity shortable for them.\n    # Returns a Dictionary of quantity shortable (long) keyed by Symbol.\n    all_shortable_symbols = self.AllShortableSymbols()\n\n    # Gets the quantity shortable for the given asset. Zero if not shortable\n    shortable_quantity = self.ShortableQuantity(self.appl)\n\n    # Determines if the Symbol is shortable at the brokerage.\n    # Use a given order's quantity to check if it is currently shortable,\n    # taking into account current holdings and open orders.\n    is_shortable = self.Shortable(self.appl, 1000000)\n</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect.Algorithm\n{    \n        public override void OnData(Slice data)\n        {\n            // Gets all Symbols that are shortable, as well as the quantity shortable for them.\n            // Returns a Dictionary of quantity shortable (long) keyed by Symbol.\n            var AllShortableSymbols = AllShortableSymbols();\n            \n            // Gets the quantity shortable for the given asset. Zero if not shortable\n            var shortableQuantity = ShortableQuantity(_appl);\n\n            // Determines if the Symbol is shortable at the brokerage.\n            // Use a given order's quantity to check if it is currently shortable,\n            // taking into account current holdings and open orders.\n            var isShortable = self.Shortable(_appl, 1000000);\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Equities Short Availability data is a Symbol/decimal pair.</p>"
      }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "https://www.atreyugroup.com/",
    "examples": [
      {
        "id": 523,
        "master_product_id": 37,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we short GameStop every day if there are available shares to short. If we receive a margin call, we liquidate the position and start again on the next day.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass ShortAvailabilityDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 7, 1)\n        self.SetCash(1000)\n        self.SetBrokerageModel(InteractiveBrokersBrokerageModelWithShortable())\n        self.equity = self.AddEquity(\"GME\")\n\n        self.Schedule.On(\n            self.DateRules.EveryDay(self.equity.Symbol),\n            self.TimeRules.AfterMarketOpen(self.equity.Symbol, 10),\n            self.Rebalance)\n\n    def Rebalance(self):\n        symbol = self.equity.Symbol;\n\n        self.Plot('Total Shortable Quantity', symbol, self.equity.TotalShortableQuantity)\n\n        # First, let's not rebalance if there are no shares to short\n        if self.ShortableQuantity(symbol) &lt; 0: return\n\n        # Then, test whether we can short the desired quantity\n        quantity = self.CalculateOrderQuantity(symbol, -1)\n        if self.Shortable(symbol, quantity):\n            self.MarketOrder(symbol, quantity)\n\n    def OnMarginCallWarning(self):\n        self.Liquidate()\n \nclass InteractiveBrokersBrokerageModelWithShortable(InteractiveBrokersBrokerageModel):\n    def __init__(self):\n        super().__init__()\n        self.ShortableProvider = AtreyuShortableProvider(SecurityType.Equity, Market.USA)\n</code></pre>\n<pre><code class=\"language-cs\">\nusing QuantConnect.Data.Shortable;\nnamespace QuantConnect\n{\n    public class ShortAvailabilityDataAlgorithm : QCAlgorithm\n    {\n        private Equity _equity;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 7, 1);\n            SetCash(1000);\n            SetBrokerageModel(new InteractiveBrokersBrokerageModelWithShortable());\n            _equity = AddEquity(\"GME\");\n            \n            Schedule.On(\n                DateRules.EveryDay(_equity.Symbol),\n                TimeRules.AfterMarketOpen(_equity.Symbol, 10),\n                Rebalance);\n        }\n        \n        public void Rebalance()\n        {\n            var symbol = _equity.Symbol;\n            \n            Plot(\"Total Shortable Quantity\", symbol, _equity.TotalShortableQuantity ?? 0m);\n            \n            // First, let's not rebalance if there are no shares to short\n            if (ShortableQuantity(symbol) &lt; 0) return;\n            \n            // Then, test whether we can short the desired quantity\n            var quantity = CalculateOrderQuantity(symbol, -1m);\n            if (Shortable(symbol, quantity))\n            {\n                MarketOrder(symbol, quantity);\n            }\n        }\n        \n        public override void OnMarginCallWarning()\n        {\n            Liquidate();\n        }\n\n        public class InteractiveBrokersBrokerageModelWithShortable : InteractiveBrokersBrokerageModel\n        {\n            public InteractiveBrokersBrokerageModelWithShortable() : base()\n            {\n                ShortableProvider = new AtreyuShortableProvider(SecurityType.Equity, Market.USA);\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-07-08 16:27:28"
      },
      {
        "id": 525,
        "master_product_id": 37,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this example, we short GameStop every day if there are available shares to short. If we receive a margin call, we liquidate the position and start again on the next day.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\"> \nclass ShortAvailabilityDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        \n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 7, 1)\n        self.SetCash(1000)\n        self.SetBrokerageModel(InteractiveBrokersBrokerageModelWithShortable())\n\n        self.SetUniverseSelection(ManualUniverseSelectionModel(\n            [Symbol.Create(\"GME\", SecurityType.Equity, Market.USA)]))           \n\n        # Emit down-direction insights to short all securities in the universe            \n        self.SetAlpha(ConstantAlphaModel(InsightType.Price, InsightDirection.Down, timedelta(1)))\n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n        self.SetExecution(ShortableExecutionModel())\n\n    # On Margin Call, emit flat-direction insights to liquidate the positions\n    def OnMarginCallWarning(self):\n        self.EmitInsights([Insight.Price(kvp.Key, timedelta(1), InsightDirection.Flat)\n            for kvp in self.Securities if kvp.Value.Invested])\n\nclass ShortableExecutionModel(ExecutionModel):\n\n    def __init__(self):\n        self.targetsCollection = PortfolioTargetCollection()\n\n    def Execute(self, algorithm, targets):\n        '''Immediately submits orders for the specified portfolio targets.\n        Args:\n            algorithm: The algorithm instance\n            targets: The portfolio targets to be ordered'''\n\n        # for performance we check count value, OrderByMarginImpact and ClearFulfilled are expensive to call\n        self.targetsCollection.AddRange(targets)\n        if self.targetsCollection.Count &gt; 0:\n            for target in self.targetsCollection.OrderByMarginImpact(algorithm):\n                # calculate remaining quantity to be ordered\n                quantity = OrderSizing.GetUnorderedQuantity(algorithm, target)\n                # If the quantity is negative, ensure that the security is shortable\n                if quantity &gt; 0 or algorithm.Shortable(target.Symbol, quantity):\n                    algorithm.MarketOrder(target.Symbol, quantity)\n\n            self.targetsCollection.ClearFulfilled(algorithm)\n\nclass InteractiveBrokersBrokerageModelWithShortable(InteractiveBrokersBrokerageModel):\n    def __init__(self):\n        super().__init__()\n        self.ShortableProvider = AtreyuShortableProvider(SecurityType.Equity, Market.USA)\n</code></pre>\n<pre><code class=\"language-cs\"> \nusing QuantConnect.Data.Shortable;\nnamespace QuantConnect\n{\n    public class ShortAvailabilityDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 7, 1);\n            SetCash(1000);\n            SetBrokerageModel(new InteractiveBrokersBrokerageModelWithShortable());\n\n            SetUniverseSelection(new ManualUniverseSelectionModel(\n                QuantConnect.Symbol.Create(\"GME\", SecurityType.Equity, Market.USA)));            \n            \n            // Emit down-direction insights to short all securities in the universe            \n            SetAlpha(new ConstantAlphaModel(InsightType.Price, InsightDirection.Down, TimeSpan.FromDays(1)));\n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n            SetExecution(new ShortableExecutionModel());\n        }\n\n        // On Margin Call, emit flat-direction insights to liquidate the positions\n        public override void OnMarginCallWarning()\n        {\n            EmitInsights(Securities\n                .Where(kvp =&gt; kvp.Value.Invested)\n                .Select(kvp =&gt; Insight.Price(kvp.Key, TimeSpan.FromDays(1), InsightDirection.Flat))\n                .ToArray());\n        }\n            \n        public class ShortableExecutionModel : ImmediateExecutionModel\n        {\n            private readonly PortfolioTargetCollection _targetsCollection = new PortfolioTargetCollection();\n            \n            public override void Execute(QCAlgorithm algorithm, IPortfolioTarget[] targets)\n            {\n                _targetsCollection.AddRange(targets);\n                // for performance we check count value, OrderByMarginImpact and ClearFulfilled are expensive to call\n                if (_targetsCollection.Count &gt; 0)\n                {\n                    foreach (var target in _targetsCollection.OrderByMarginImpact(algorithm))\n                    {\n                        // calculate remaining quantity to be ordered\n                        var quantity = OrderSizing.GetUnorderedQuantity(algorithm, target);\n                        // If the quantity is negative, ensure that the security is shortable\n                        if (quantity &gt; 0 || algorithm.Shortable(target.Symbol, quantity))\n                        {\n                            algorithm.MarketOrder(target.Symbol, quantity);\n                        }\n                    }\n\n                    _targetsCollection.ClearFulfilled(algorithm);\n                }\n          }\n        }\n    \n        public class InteractiveBrokersBrokerageModelWithShortable : InteractiveBrokersBrokerageModel\n        {\n            public InteractiveBrokersBrokerageModelWithShortable() : base()\n            {\n                ShortableProvider = new AtreyuShortableProvider(SecurityType.Equity, Market.USA);\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-07-08 16:38:25"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 37,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>US Equities Short Availability is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>  \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>US Equities Short Availability is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 107,
        "name": "US Short Availability - Cloud Access",
        "description": "<p>Enable realistic modeling of shortable stock limits for your QuantConnect Cloud backtesting. Plot and explore the data in backtesting and research.</p>\n<ul><li>Realistic modeling of short strategies</li>\n    <li>Model availability of stocks over time</li> \n</ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 108,
        "name": "US Short Availability - On Premise Download",
        "description": "<p>Download Atreyu short availability data on premise for your local backtesting and research. Data prepared as CSV by ticker and date.</p>\n<ul><li>Realistic modeling of short strategies</li>\n    <li>Model availability of stocks over time</li>\n    <li>Load into custom charting environments</li>\n</ul>",
        "shortDescription": "On Premise Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "5 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      }
    ],
    "headerColor": "04a3db"
  },
  {
    "name": "US ETF Constituents",
    "vendorName": "QuantConnect",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/qc-logo.svg",
    "landingFileName": "quantconnect-us-etf-constituents.html",
    "url": "/datasets/quantconnect-us-etf-constituents",
    "short_description": "Equity constituent components and weightings for 2650 US ETF listings. Ideal for universe selection without imposing selection bias.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The US ETF Constituents dataset by QuantConnect tracks the constituents and weighting of US Equities in 2,650 ETF listings. The data starts in January 2009 and is delivered on a daily basis. This dataset is created by tracking the host ETF websites and can be delayed by up to 1 week.\n</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\nQuantConnect was founded in 2012 to serve quants everywhere with the best possible algorithmic trading technology. Seeking to disrupt a notoriously closed-source industry, QuantConnect takes a radically open-source approach to algorithmic trading. Through the QuantConnect web platform, more than 160,000 quants are served every month.\n</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Requesting data:\nspy = self.AddEquity(\"SPY\").Symbol\nself.AddUniverse(self.Universe.ETF(spy, self.UniverseSettings, self.ETFConstituentsFilter))\n</code></pre>\n<pre><code class=\"language-cs\">// Requesting data:\nvar spy = AddEquity(\"SPY\").Symbol;\nAddUniverse(Universe.ETF(spy, UniverseSettings, ETFConstituentsFilter));\n</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 2009</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>2,650 US ETF Listings</td>\n        </tr><tr><td>Data Density</td>\n            <td>Dense</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>New York</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nETF Constituents lists provide an excellent source of tradable universes for strategies without selection bias. When the ETF constituents are used for universe selection, the original ETF can serve as an excellent benchmark for your strategy performance. Other applications are covered below:\n</p>\n<ul><li>Create index-tracking algorithm for customized passive portfolio management.</li>\n<li>Statistical arbitrage with the base ETF.</li>\n<li>Hedging by portfolio composed of some of the underlyings.</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_bf6cbc1a9dca916b9faae7ba3acede9f.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The ETF Constituents dataset provides ETFConstituentData objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.UniverseSelection.ETFConstituentData\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add US ETF Constituents data to your algorithm, use the AddUniverse() and Universe.ETF() methods to request the data. To select which constituents occupy the universe, you need to provide the ETF Symbol and a selection function.\n</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class ETFConstituentsDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2018, 1, 1)\n        self.SetEndDate(2020, 8, 25)\n        self.SetCash(100000)\n        \n        spy = self.AddEquity(\"SPY\").Symbol\n        self.UniverseSettings.Resolution = Resolution.Minute\n\n        self.AddUniverse(self.Universe.ETF(spy, self.UniverseSettings, self.ETFConstituentsFilter))\n</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n   public class ETFConstituentsDataAlgorithm : QCAlgorithm\n   {\n       public override void Initialize()\n       {\n           SetStartDate(2018, 1, 1);\n           SetEndDate(2020, 8, 25);\n           SetCash(100000);\n\n           var spy = AddEquity(\"SPY\").Symbol;\n           UniverseSettings.Resolution = Resolution.Minute;\n\n           AddUniverse(Universe.ETF(spy, UniverseSettings, ETFConstituentsFilter));\n       }\n    }\n}\n</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via the IEnumerable object that is piped into the user-defined selection function. US ETF constituent data is available in daily resolution. You can see an example of using this data in the code below.\n</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def ETFConstituentsFilter(self, constituents):\n    for c in constituents:\n        self.Debug(f'{c.EndTime} :: {c.LastUpdate} :: {c.Weight} :: {c.SharesHeld} :: {c.MarketValue}')\n    return [x.Symbol for x in constituents]    \n </code></pre>\n<pre><code class=\"language-cs\">\npublic IEnumerable&lt;Symbol&gt; ETFConstituentsFilter(IEnumerable&lt;ETFConstituentData&gt; constituents)\n{\n    foreach (var c in constituents)\n    {\n        Debug($\"{c.EndTime} :: {c.LastUpdate} :: {c.Weight} :: {c.SharesHeld} :: {c.MarketValue}\");\n    }\n\n    return constituents.Select(c =&gt; c.Symbol);\n}\n</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can't request historical values for ETFConstituentData members, but you can request historical market data on the security by using the data Symbol object of the ETFConstituentData members. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for securities by using the History API.\n</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\ndef ETFConstituentsFilter(self, constituents):\n    # Get the 20 largest weighting constituents\n    selected = sorted([c for c in constituents if c.Weight],\n        key=lambda c: c.Weight, reverse=True)[:20]\n    selectedSymbols = [c.Symbol for c in selected]\n\n    history = History(selectedSymbols, 10, Resolution.Daily)\n                \n    return selectedSymbols \n</code></pre>\n<pre><code class=\"language-cs\">\nprivate IEnumerable&lt;Symbol&gt; ETFConstituentsFilter(IEnumerable&lt;ETFConstituentData&gt; constituents)\n{\n    // Get the 20 largest weighting constituents\n    var selectedSymbols = constituents\n        .OrderByDescending(c =&gt; c.Weight)\n        .Take(10)\n        .Select(c =&gt; c.Symbol)\n\n    var history = History(selectedSymbols, 10, Resolution.Daily);\n\n    return selectedSymbols;\n}\n</code></pre>\n</div>"
      },
      {
        "title": "Data Point Properties",
        "content": "<p>The ETF Constituents dataset provides ETFConstituentData objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.UniverseSelection.ETFConstituentData\"></div>"
      },
      { "title": "", "content": "" }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "https://www.quantconnect.com/data",
    "examples": [
      {
        "id": 540,
        "master_product_id": 38,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>This algorithm demonstrates the use of US ETF Constituents dataset. In this demonstration, we buy and hold the 10 largest constituents in their corresponding weight while shorting SPY itself.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class ETFConstituentsDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2016, 1, 1)\n        self.SetEndDate(2021, 1, 1)\n        self.SetCash(100000)\n        \n        self.UniverseSettings.Resolution = Resolution.Minute\n        \n        # Requesting data\n        self.spy = self.AddEquity(\"SPY\").Symbol\n        self.AddUniverse(self.Universe.ETF(self.spy, self.UniverseSettings, self.ETFConstituentsFilter))\n        \n        self.weightBySymbol = {}\n        \n        self.Schedule.On(\n            self.DateRules.EveryDay(self.spy),\n            self.TimeRules.AfterMarketOpen(self.spy, 1),\n            self.Rebalance)\n\n    def ETFConstituentsFilter(self, constituents):\n        # Get the 10 securities with the largest weight in the index\n        selected = sorted([c for c in constituents if c.Weight],\n            key=lambda c: c.Weight, reverse=True)[:10]\n        self.weightBySymbol = {c.Symbol: c.Weight for c in selected}\n        \n        return list(self.weightBySymbol.keys())\n\n    def Rebalance(self):\n        spyWeight = sum(self.weightBySymbol.values())\n\n        if spyWeight &gt; 0:\n            for symbol in self.Portfolio.Keys:\n                if symbol not in self.weightBySymbol:\n                    self.Liquidate(symbol)\n    \n            for symbol, weight in self.weightBySymbol.items():\n                self.SetHoldings(symbol, 0.5 * weight / spyWeight)\n                \n            self.SetHoldings(self.spy, -0.5)\n\n    def OnSecurityChanged(self, changes):\n        for security in changes.RemovedSecurities:\n            if security.Invested:\n                algorithm.Liquidate(security.Symbol, 'Removed From Universe')\n\n        for security in changes.AddedSecurities:\n            # Historical data\n            history = self.History(security.Symbol, 7, Resolution.Daily)\n            self.Debug(f'We got {len(history)} from our history request for {security.Symbol}')</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class ETFConstituentsDataAlgorithm : QCAlgorithm\n    { \n        public Symbol _spy;\n        public Dictionary&lt;Symbol, decimal&gt; _weightBySymbol = new Dictionary&lt;Symbol, decimal&gt;();\n        \n        public override void Initialize()\n        {\n            SetStartDate(2016, 1, 1);\n            SetEndDate(2021, 1, 1);\n            SetCash(100000);\n            \n            UniverseSettings.Resolution = Resolution.Minute;\n\n            // Requesting data\n            _spy = AddEquity(\"SPY\").Symbol;            \n            AddUniverse(Universe.ETF(_spy, UniverseSettings, ETFConstituentsFilter));\n            \n            Schedule.On(\n                DateRules.EveryDay(_spy),\n                TimeRules.AfterMarketOpen(_spy, 1),\n                Rebalance);\n        }\n        \n        private IEnumerable&lt;Symbol&gt; ETFConstituentsFilter(IEnumerable&lt;ETFConstituentData&gt; constituents)\n        {\n            // Get the 10 securities with the largest weight in the index\n            _weightBySymbol = constituents.OrderByDescending(c =&gt; c.Weight).Take(10)\n                .ToDictionary(c =&gt; c.Symbol, c =&gt; c.Weight ?? 0m);\n\n            return _weightBySymbol.Keys;\n        }\n        \n        private void Rebalance()\n        {\n            var spyWeight = _weightBySymbol.Values.Sum();\n                \n            if (spyWeight &gt; 0)\n            {\n                foreach(var symbol in Portfolio.Keys)\n                {\n                \tif (!_weightBySymbol.ContainsKey(symbol))\n                \t{\n                \t\tLiquidate(symbol);\n                \t}\n                }\n\t            \n\t            foreach(var kvp in _weightBySymbol)\n\t            {\n\t                SetHoldings(kvp.Key, 0.5m * kvp.Value / spyWeight);\n\t            }\n\t            \n\t            SetHoldings(_spy, -0.5m);\n            }\n        }\n        \n        public void OnSecurityChanged(SecurityChanges changes)\n        {\n            foreach (var security in changes.RemovedSecurities.Where(x =&gt; x.Invested))\n            {\n                 algorithm.Liquidate(security.Symbol, \"Removed From Universe\");\n            }\n\n            foreach (var security in changes.AddedSecurities)\n            {\n                // Historical data\n                var history = History(security.Symbol, 7, Resolution.Daily);\n                Debug($\"We got {history.Count()} from our history request for {security.Symbol}\");\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-04-07 20:20:27"
      },
      {
        "id": 542,
        "master_product_id": 38,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>This algorithm demonstrates the use of US ETF Constituents dataset. In this demonstration, we buy and hold the 10 largest constituents in their corresponding weight while shorting SPY itself.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class ETFConstituentsDataFrameworkAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2016, 1, 1)\n        self.SetEndDate(2021, 1, 1)\n        self.SetCash(100000)\n        \n        self.UniverseSettings.Resolution = Resolution.Minute\n        self.weightBySymbol = {}\n        \n        # Requesting data\n        spy = self.AddEquity(\"SPY\").Symbol\n        self.AddUniverse(self.Universe.ETF(spy, self.UniverseSettings, self.ETFConstituentsFilter))\n\n        self.AddAlpha(ETFConstituentsAlphaModel(self, spy))\n\n        pcm = InsightWeightingPortfolioConstructionModel()\n        pcm.RebalanceOnInsightChanges = False\n        self.SetPortfolioConstruction(pcm)\n\n        self.AddRiskManagement(NullRiskManagementModel())\n\n        self.SetExecution(ImmediateExecutionModel())\n\n    def ETFConstituentsFilter(self, constituents):\n        # Get the 10 securities with the largest weight in the index\n        selected = sorted([c for c in constituents if c.Weight],\n            key=lambda c: c.Weight, reverse=True)[:10]\n        self.weightBySymbol = {c.Symbol: c.Weight for c in selected}\n\n        return list(self.weightBySymbol.keys())\n\nclass ETFConstituentsAlphaModel(AlphaModel):\n\n    def __init__(self, algorithm, etf):\n        self.algorithm = algorithm\n        self.etf = etf\n        self.day = -1\n\n    def Update(self, algorithm, data):\n\n        if self.day == algorithm.Time.day:\n            return []\n\n        self.day = algorithm.Time.day\n\n        insights = []\n\n        etfWeight = sum(self.algorithm.weightBySymbol.values())\n\n        if etfWeight&gt; 0:\n            insights.append(Insight.Price(self.etf, Expiry.EndOfDay, InsightDirection.Down, weight=0.5))\n\n            for symbol, weight in self.algorithm.weightBySymbol.items():\n                insights.append(Insight.Price(symbol, Expiry.EndOfDay, InsightDirection.Up, weight=0.5*weight/etfWeight))\n\n        return insights\n\n    def OnSecurityChanged(self, algorithm, changes):\n        for security in changes.RemovedSecurities:\n            if security.Invested:\n                algorithm.Liquidate(security.Symbol, 'Removed From Universe')\n\n        for security in changes.AddedSecurities:\n            # Historical data\n            history = algorithm.History(security.Symbol, 7, Resolution.Daily)\n            algorithm.Debug(f'We got {len(history)} from our history request for {security.Symbol}')</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class ETFConstituentsDataFrameworkAlgorithm : QCAlgorithm\n    { \n        public Dictionary&lt;Symbol, decimal&gt; WeightBySymbol = new Dictionary&lt;Symbol, decimal&gt;();\n    \t\n        public override void Initialize()\n        {\n            SetStartDate(2016, 1, 1);\n            SetEndDate(2021, 1, 1);\n            SetCash(100000);\n            \n            UniverseSettings.Resolution = Resolution.Minute;\n\n            // Requesting data\n            var spy = AddEquity(\"SPY\").Symbol;            \n            AddUniverse(Universe.ETF(spy, UniverseSettings, ETFConstituentsFilter));\n            \n            AddAlpha(new ETFConstituentsAlphaModel(this, spy));\n            \n            var pcm = new InsightWeightingPortfolioConstructionModel();\n            pcm.RebalanceOnInsightChanges = false;\n            SetPortfolioConstruction(pcm);\n            \n            AddRiskManagement(new NullRiskManagementModel());\n            \n            SetExecution(new ImmediateExecutionModel());\n        }\n        \n        private IEnumerable&lt;Symbol&gt; ETFConstituentsFilter(IEnumerable&lt;ETFConstituentData&gt; constituents)\n        {\n            // Get the 10 securities with the largest weight in the index\n            WeightBySymbol = constituents.OrderByDescending(c =&gt; c.Weight).Take(10)\n                .ToDictionary(c =&gt; c.Symbol, c =&gt; c.Weight ?? 0m);\n\n            return WeightBySymbol.Keys;\n        }\n    }\n    \n    public class ETFConstituentsAlphaModel : AlphaModel\n    {\n    \tprivate int _day = -1;\n    \tprivate Symbol _etf;\n    \tprivate ETFConstituentsDataFrameworkAlgorithm _algorithm;\n    \t\n    \tpublic ETFConstituentsAlphaModel(ETFConstituentsDataFrameworkAlgorithm algorithm, Symbol etf)\n    \t{\n    \t\t_etf = etf;\n    \t\t_algorithm = algorithm;\n    \t}\n    \t\n    \tpublic override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n    \t{\n    \t\tif (_day == algorithm.Time.Day)\n    \t\t{\n    \t\t\treturn Enumerable.Empty&lt;Insight&gt;();\n    \t\t}\n    \t\t\n    \t\t_day = algorithm.Time.Day;\n    \t\t\n    \t\tvar insights = new List&lt;Insight&gt;();\n    \t\t\n    \t\tvar etfWeight = (double)_algorithm.WeightBySymbol.Values.Sum();\n            \n            if (etfWeight &gt; 0)\n            {\n                insights.Add(Insight.Price(_etf, Expiry.EndOfDay, InsightDirection.Down, weight: 0.5));\n\t            \n                foreach(var kvp in _algorithm.WeightBySymbol)\n\t            {\n\t                insights.Add(Insight.Price(kvp.Key, Expiry.EndOfDay, InsightDirection.Up, weight: (double)kvp.Value/etfWeight * 0.5));\n\t            }\n            }\n            \n            return insights;\n    \t}\n    \t\n    \tpublic void OnSecurityChanged(QCAlgorithm algorithm, SecurityChanges changes)\n        {\n            foreach (var security in changes.RemovedSecurities.Where(x =&gt; x.Invested))\n            {\n                algorithm.Liquidate(security.Symbol, \"Removed From Universe\");\n            }\n \n            foreach (var security in changes.AddedSecurities)\n            {\n                // Historical data\n                var history = algorithm.History(security.Symbol, 7, Resolution.Daily);\n                algorithm.Debug($\"We got {history.Count()} from our history request for {security.Symbol}\");\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-08-26 15:54:47"
      },
      {
        "id": 546,
        "master_product_id": 38,
        "position": 3,
        "section": "examples",
        "title": "",
        "content": "",
        "updated": "2021-08-26 14:53:20"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 38,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>US ETF Constituents is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>US ETF Constituents can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 50 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>US ETF Constituents is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 111,
        "name": "US ETF Constituents - Cloud Access",
        "description": "<p>Free access for universe selection strategies on the QuantConnect Cloud. Create custom filters using price and volume for the ETF constituents. </p>\n<ul><li>Every asset traded since 1998</li>\n    <li>Universe delivery by 6am ET</li>\n    <li>Carefully curated data</li>\n</ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 112,
        "name": "US ETF Constituent List - On Premise Download",
        "description": "<p>On premise download of ETF constituent data files, including closing price and volume for the day for local backtesting.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "On Premise Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "50 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      }
    ],
    "headerColor": "4eff2b"
  },
  {
    "name": "US Cash Indices",
    "vendorName": "TickData",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/tickdata-logo3.png",
    "landingFileName": "tickdata-us-cash-indices.html",
    "url": "/datasets/tickdata-us-cash-indices",
    "short_description": "Cash Index data for NDX, SPX and VIX since January 1998, Data is provided from tick to daily resolution. ",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The US Cash Indices dataset by TickData covers 3 US Indices: SPX, VIX, and NDX. The data starts on various dates from Janunary 1998 and is delivered on any frequency from tick to daily. This dataset is created by TickData negotiating directly with exchanges for their official archive and by partnering with real-time data providers who have direct exchange connections and multiple redundant ticker plants.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p><a href=\"https://www.tickdata.com/\">TickData</a> was founded by a futures broker and a programmer in 1984 as the first company in the world to offer historical tick-by-tick prices on the futures and index markets. TickData provides access to comprehensive and detailed market data and analytics products in the financial industry covering Equities, Futures, Options, cash FOREX, and Cash Indices.</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Requesting data:\nvix = self.AddIndex(\"VIX\", Resolution.Daily).Symbol\n</code></pre>\n<pre><code class=\"language-cs\">// Requesting data:\nvar vix = AddIndex(\"VIX\", Resolution.Daily).Symbol;\n</code></pre></div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 1998*</td>\n        </tr><tr><td>Coverage</td>\n            <td>3 US Indices</td>\n        </tr><tr><td>Data Density</td>\n            <td>Dense</td>\n        </tr><tr><td>Resolution</td>\n            <td>Tick, Second, Minute, Hour, &amp; Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>New York</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Supported Indices",
        "content": "<p>The following table shows the available indices:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Ticker</th><th>Index</th><th>Expiry</th><th>Start Date</th></tr></thead><tbody><tr><td>VIX</td> <td>S&amp;P500</td><td>30 Days</td><td>Jul 2003</td></tr><tr><td>SPX</td><td>S&amp;P500</td><td>-</td><td>Jan 1998</td></tr><tr><td>NDX</td><td>NASDAQ-100</td><td>-</td><td>Jan 1998</td></tr></tbody></table><h4>VIX - CBOE Volatility Index</h4>\n<p>The Cboe Volatility Index (VIX) is a real-time index that represents the market's expectations for the relative strength of near-term price changes of the S&amp;P 500 index (SPX). Because it's derived from the prices of SPX index Options with near-term expiration dates, it generates a 30-day forward projection of volatility. Volatility, or how fast prices change, is often seen as a way to gauge market sentiment, and in particular, the degree of fear among market participants.</p>\n\n<h4>SPX - S&amp;P 500 Index</h4>\n<p>The S&amp;P 500 Index, or the Standard &amp; Poor's 500 Index, is a market-capitalization-weighted index of the 500 largest publicly-traded companies in the U.S. It is not an exact list of the top 500 U.S. companies by market capitalization because there are other criteria included in the index. The index is widely regarded as the best gauge of large-cap U.S. Equities. </p>\n\n<h4>NDX - Nasdaq 100 Index</h4>\n<p>The Nasdaq 100 Index is a basket of the 100 largest, most actively traded U.S companies listed on the Nasdaq stock exchange. The index includes companies from various industries except for the financial industry, like commercial and investment banks. These non-financial sectors include retail, biotechnology, industrial, technology, health care, and others.</p>"
      },
      {
        "title": "Example Applications",
        "content": "<ul><li>Explore the difference between the Index and the ETF that tracks it</li>\n<li>Underlying asset for US Index Options strategies.</li>\n<li>Understanding the stock market's level of expected forward-looking volatility, also known as the \"fear index\". When the VIX starts moving higher, it is telling you that traders are getting nervous. When the VIX starts moving lower, it is telling you that traders are gaining confidence.</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_7d801a5ba3412b6ac9c26427487fb4b8.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Cash Indices dataset provides TradeBar and Tick objects.</p>\n\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>Tick Attributes</h4>\n<p>Tick objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add US Cash Index Options data to your algorithm, use the AddIndex() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on requesting market data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class USCashIndexAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        self.vix = self.AddIndex(\"VIX\").Symbol\n</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class USCashIndexAlgorithm : QCAlgorithm\n    {\n        private Symbol _vix;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            \n            // Requesting data\n            _vix = AddIndex(\"VIX\").Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass USCashIndexAlgorithm(QCAlgorithm):\n    def OnData(self, data):\n        # The marketData object can be a TradeBar or a List of Tick\n        marketData = data[self.vix]\n\n        # If it's TradeBar:\n        self.Log(f'Symbol: {self.vix} - Data: {marketData}')\n\n        # If it's Tick data:\n        for tick in marketData:\n            self.Log(f\"Time: {tick.EndTime}; Symbol: {self.symbol}; Tick: {tick}\")\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class USCashIndexAlgorithm : QCAlgorithm\n    {\n        public override void OnData(Slice data)\n        {\n            // The marketData object can be a TradeBar or a List of Tick\n            var marketData = data[_vix];\n\n            // If it's TradeBar:\n            Log($\"Symbol: {_vix} - Data: {marketData}\");\n\n            // If it's Tick data:\n            foreach (var tick in marketData)\n            {\n                 Log($\"Time: {tick.EndTime}; Symbol: {_vix} Tick: {tick}\");\n            }\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical US Cash Indices data by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for Cash Indices by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.vix, 10, Resolution.Minute)</code></pre>\n<pre><code class=\"language-cs\">var history = History(_vix, 10, Resolution.Minute);</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Cash Indices dataset provides TradeBar and Tick objects.</p>\n\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>Tick Attributes</h4>\n<p>Tick objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"></div>"
      }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "https://www.quantconnect.com/market",
    "examples": [
      {
        "id": 583,
        "master_product_id": 39,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we buy SPY when the 80-day EMA of SPX crosses above the 200-day EMA of SPX and liquidate our holdings otherwise.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass IndexDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 1, 1)\n        self.SetEndDate(2021, 7, 8)\n        self.SetCash(100000)\n\n        # Trade on SPY\n        self.spy = self.AddEquity(\"SPY\").Symbol\n\n        # Use indicator for signal; but it cannot be traded\n        spx = self.AddIndex(\"SPX\").Symbol\n        self.emaFast = self.EMA(spx, 80, Resolution.Daily)\n        self.emaSlow = self.EMA(spx, 200, Resolution.Daily)\n        self.SetWarmUp(200, Resolution.Daily)\n\n        history = self.History(spx, 60, Resolution.Daily)\n        self.Debug(f'We got {len(history.index)} items from our history request')\n\n    def OnData(self, data):\n        # Warm up indicators\n        if self.IsWarmingUp or not self.emaSlow.IsReady:\n            return\n\n        if not self.Portfolio.Invested and self.emaFast &gt; self.emaSlow:\n            self.SetHoldings(self.spy, 1)\n        elif self.emaFast &lt; self.emaSlow:\n            self.Liquidate()\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class IndexDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _spy;\n        private ExponentialMovingAverage _emaSlow;\n        private ExponentialMovingAverage _emaFast;\n\n        public override void Initialize()\n        {\n            SetStartDate(2020, 1, 1);\n            SetEndDate(2021, 7, 8);\n            SetCash(1000000);\n\n            // Trade on SPY\n            _spy = AddEquity(\"SPY\").Symbol;\n\n            // Use indicator for signal; but it cannot be traded\n            var spx = AddIndex(\"SPX\").Symbol;\n            _emaFast = EMA(spx, 80, Resolution.Daily);\n            _emaSlow = EMA(spx, 200, Resolution.Daily);\n            SetWarmUp(200, Resolution.Daily);\n\n            var history = History(spx, 60, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request\");\n        }\n\n        public override void OnData(Slice slice)\n        {\n            // Warm up indicators\n            if (IsWarmingUp || !_emaSlow.IsReady)\n            {\n                return;\n            }\n\n            if (!Portfolio.Invested &amp;&amp; _emaFast &gt; _emaSlow)\n            {\n                SetHoldings(_spy, 1);\n            }\n            else if (_emaFast &lt; _emaSlow)\n            {\n                Liquidate();\n            }\n        }\n    }\n}</code></pre></div>",
        "updated": "2021-07-09 13:24:46"
      },
      {
        "id": 585,
        "master_product_id": 39,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this example, we buy SPY when the 80-day EMA of SPX crosses above the 200-day EMA of SPX and liquidate our holdings otherwise.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass IndexDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 1, 1)\n        self.SetEndDate(2021, 7, 8)\n        self.SetCash(100000)\n\n        self.SetUniverseSelection(ManualUniverseSelectionModel\n        (\n            Symbol.Create(\"SPY\", SecurityType.Equity, Market.USA)\n        ))\n\n        self.SetAlpha(SpxEmaCrossAlphaModel(self))\n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel(Expiry.EndOfMonth))\n    \nclass SpxEmaCrossAlphaModel(AlphaModel):\n    def __init__(self, algorithm):\n        # Use indicator for signal; but it cannot be traded\n        spx = algorithm.AddIndex(\"SPX\").Symbol\n        self.emaFast = algorithm.EMA(spx, 80, Resolution.Daily)\n        self.emaSlow = algorithm.EMA(spx, 200, Resolution.Daily)\n        algorithm.SetWarmUp(200, Resolution.Daily)\n\n        history = algorithm.History(spx, 60, Resolution.Daily)\n        algorithm.Debug(f'We got {len(history.index)} items from our history request')\n    \n    def Update(self, algorithm, data):\n        # Warm up indicators\n        if algorithm.IsWarmingUp or not self.emaSlow.IsReady:\n            return []\n\n        if not algorithm.Portfolio.Invested and self.emaFast &gt; self.emaSlow:\n            return [Insight.Price(kvp.Key, Expiry.EndOfMonth, InsightDirection.Up)\n                for kvp in algorithm.ActiveSecurities if kvp.Value.IsTradable]\n\n        elif self.emaFast &lt; self.emaSlow:\n            return [Insight.Price(kvp.Key, Expiry.EndOfMonth, InsightDirection.Flat)\n                for kvp in algorithm.ActiveSecurities if kvp.Value.IsTradable]\n            \n        return []\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class IndexDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2020, 1, 1);\n            SetEndDate(2021, 7, 8);\n            SetCash(1000000);\n\n            SetUniverseSelection(new ManualUniverseSelectionModel\n            (\n                QuantConnect.Symbol.Create(\"SPY\", SecurityType.Equity, Market.USA)\n            ));\n\n            SetAlpha(new SpxEmaCrossAlphaModel(this));\n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel(Expiry.EndOfMonth));\n        }\n    }\n\n    public class SpxEmaCrossAlphaModel : AlphaModel\n    {\n        private ExponentialMovingAverage _emaSlow;\n        private ExponentialMovingAverage _emaFast;\n\n        public SpxEmaCrossAlphaModel(QCAlgorithm algorithm)\n        {\n            // Use indicator for signal; but it cannot be traded\n            var spx = algorithm.AddIndex(\"SPX\").Symbol;\n            _emaFast = algorithm.EMA(spx, 80, Resolution.Daily);\n            _emaSlow = algorithm.EMA(spx, 200, Resolution.Daily);\n            algorithm.SetWarmUp(200, Resolution.Daily);\n\n            var history = algorithm.History(spx, 60, Resolution.Daily);\n            algorithm.Debug($\"We got {history.Count()} items from our history request\");\n        }\n\n        public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice slice)\n        {\n            // Warm up indicators\n            if (algorithm.IsWarmingUp || !_emaSlow.IsReady)\n            {\n                return Enumerable.Empty&lt;Insight&gt;();\n            }\n\n            if (!algorithm.Portfolio.Invested &amp;&amp; _emaFast &gt; _emaSlow)\n            {\n                return algorithm.ActiveSecurities\n                    .Where(kvp =&gt; kvp.Value.IsTradable)\n                    .Select(kvp =&gt; Insight.Price(kvp.Key, Expiry.EndOfMonth, InsightDirection.Up));\n            }\n            else if (_emaFast &lt; _emaSlow)\n            {\n                return algorithm.ActiveSecurities\n                    .Where(kvp =&gt; kvp.Value.IsTradable)\n                    .Select(kvp =&gt; Insight.Price(kvp.Key, Expiry.EndOfMonth, InsightDirection.Flat));\n            }\n    \n            return Enumerable.Empty&lt;Insight&gt;();\n        }\n    }\n}</code></pre></div>",
        "updated": "2021-07-09 14:02:23"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 39,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>US Cash Indices is allowed to be used in the cloud \r\n            for personal and commercial projects with a subscription. The data is permissioned for use within \r\n            the licensed organization only</p><p>Subscription Required | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div>  \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>US Cash Indices is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [],
    "headerColor": "ff1841"
  },
  {
    "name": "US Index Options",
    "vendorName": "AlgoSeek",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/algoseek-logo.svg",
    "landingFileName": "algoseek-us-index-options.html",
    "url": "/datasets/algoseek-us-index-options",
    "short_description": "Minute resolution European Option contract data for 3 US Indexes: SPX, VIX, and NDX.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The US Index Options dataset by AlgoSeek covers European Option contracts for 3 US Indexes: SPX, VIX, and NDX. The dataset starts from June 2010 and is delivered on minute resolution. This dataset is created by monitoring Options Price Reporting Authority (OPRA) data feed, which consolidates last sale and quotation information originating from the national securities exchanges that have been approved by the Securities and Exchange Commission.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\nAlgoSeek is a leading historical intraday US market data provider offering the most comprehensive and detailed market data and analytics products in the financial industry covering Equities, Futures, Options, cash FOREX, and Cryptocurrencies. AlgoSeek data is built for quantitative trading and machine learning.  For more information about AlgoSeek, visit <a href=\"https://www.algoseek.com\">algoseek.com</a>.\n</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">self.indexSymbol = self.AddIndex('VIX').Symbol\noption = self.AddIndexOption(self.indexSymbol)\noption.SetFilter(-2, 2, 0, 90)\nself.option_symbol = option.Symbol</code></pre>\n<pre><code class=\"language-cs\">_indexSymbol = AddIndex(\"VIX\").Symbol;\nvar option = AddIndexOption(_indexSymbol);\noption.SetFilter(-2, 2, 0, 90);\n_optionSymbol = option.Symbol;</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>June 2010</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>3 Index Options</td>\n        </tr><tr><td>Data Density</td>\n            <td>Regular</td>\n        </tr><tr><td>Resolution</td>\n            <td>Minute</td>\n        </tr><tr><td>Timezone</td>\n            <td>New York</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Supported Assets",
        "content": "<p>To view the list of supported indices in the US Index Options dataset, see <a href=\"/datasets/tickdata-us-cash-indices\">US Cash Indices</a>.</p>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe AlgoSeek US Index Options dataset enables researchers to accurately design strategies for Index Options. Examples include: \n</p>\n<ul><li>Buying VIX call Options to hedge against upcoming volatility</li>\n<li>Buying VIX put Options to capture the natural downward price movement in the VIX index</li>\n<li>Buying SPX put Options to protect against downward price movement in the S&amp;P 500</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_33af89131afc9e850fafd22de0c6e335.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Properties",
        "content": "<p>The US Index Options dataset provides TradeBar and QuoteBar objects.</p>\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add US Index Options data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class IndexOptionsDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1);\n        self.SetEndDate(2021, 6, 1);\n        self.SetCash(1000000);\n        \n        self.indexSymbol = self.AddIndex('VIX').Symbol\n        option = self.AddIndexOption(self.indexSymbol)\n        option.SetFilter(-2, 2, 0, 90)\n        self.option_symbol = option.Symbol</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class IndexOptionsDataAlgorithm : QCAlgorithm\n    {\n    \tprivate Symbol _indexSymbol;\n    \tprivate Symbol _optionSymbol;\n\n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            \n            _indexSymbol = AddIndex(\"VIX\").Symbol;\n            var option = AddIndexOption(_indexSymbol);\n            option.SetFilter(-2, 2, 0, 90);\n            _optionSymbol = option.Symbol;\n        }\n    }\n}</code></pre>\n</div>\n\n<p>The Index resolution must be less than or equal to the Index Option resolution. Index Options only have minute resolution available, so the Index must have tick, second, or minute resolution.</p>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in minute resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    chain = data.OptionChains.get(self.option_symbol)\n    if chain:\n        for contract in chain:\n            self.Log(f\"Bar received for {contract.Symbol} at {data.Time}\")\n</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    if (data.OptionChains.ContainsKey(_optionSymbol))\n    {\n        var chain = data.OptionChains[_optionSymbol];\n\n        foreach (var contract in chain)\n        {\n            Log($\"Bar received for {contract.Symbol} at {data.Time}\");\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical Options data by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for US Index Options by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(contract.Symbol, 10, Resolution.Minute)</code></pre>\n<pre><code class=\"language-cs\">var history = History(contract.Symbol, 10, Resolution.Minute);</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Index Options dataset provides TradeBar and QuoteBar objects.</p>\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>"
      }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "",
    "examples": [
      {
        "id": 599,
        "master_product_id": 40,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we buy the VIX Index Option Bull Call Spread with the furthest expiration.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\nclass IndexOptionsDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2020, 1, 1)\n        self.SetEndDate(2021, 1, 1)\n        self.SetCash(200000)\n\n        index = self.AddIndex(\"VIX\")\n        option = self.AddOption(index.Symbol)\n        option.SetFilter(-2, +2, 0, 180)\n        self.optionSymbol = option.Symbol\n\n    def OnData(self, data):\n        if not self.Portfolio.Invested and self.IsMarketOpen(self.optionSymbol):\n            chain = data.OptionChains.get(self.optionSymbol)\n            if not chain:\n                return\n            \n            callContracts = [c for c in chain if c.Right == OptionRight.Call]\n            if callContracts:\n                    \n                expiry = max([c.Expiry for c in callContracts])\n                callContracts = sorted([c for c in callContracts if c.Expiry == expiry],\n                    key=lambda c: c.Strike)\n                        \n                if len(callContracts) &lt; 2:\n                    return\n                \n                longCall, shortCall = callContracts[0:2]\n                \n                # Use all the buying power\n                quantity = min([\n                    abs(self.CalculateOrderQuantity(shortCall.Symbol, -1)),\n                    abs(self.CalculateOrderQuantity(longCall.Symbol, 1))])\n                \n                self.MarketOrder(shortCall.Symbol, -quantity)\n                self.MarketOrder(longCall.Symbol, quantity)\n                \n                expectedMarginUsage = max((longCall.Strike - shortCall.Strike) * self.Securities[longCall.Symbol].SymbolProperties.ContractMultiplier * quantity, 0)\n                if expectedMarginUsage != self.Portfolio.TotalMarginUsed:\n                    raise Exception(\"Unexpect margin used!\")\n\n\n    def OnSecuritiesChanged(self, changes):\n        for security in changes.AddedSecurities:\n            if security.Type == SecurityType.IndexOption:\n                # Historical data\n                history = self.History(security.Symbol, 10, Resolution.Minute)\n                self.Debug(f\"We got {len(history)} from our history request for {security.Symbol}\")</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class VixBullSpreadAlgorithm : QCAlgorithm\n    {\n        private Symbol _optionSymbol;\n\n        public override void Initialize()\n        {\n            SetStartDate(2020, 1, 1);\n            SetEndDate(2021, 1, 1);\n            SetCash(200000);\n\n            var index = AddIndex(\"VIX\");\n            var option = AddOption(index.Symbol);\n            option.SetFilter(-2, +2, 0, 180);\n            _optionSymbol = option.Symbol;\n        }\n        \n        public override void OnData(Slice slice)\n        {\n            if (!Portfolio.Invested &amp;&amp; IsMarketOpen(_optionSymbol))\n            {\n                OptionChain chain;\n                if (slice.OptionChains.TryGetValue(_optionSymbol, out chain))\n                {\n                    var callContracts = chain\n                        .Where(contract =&gt; contract.Right == OptionRight.Call)\n                        .OrderByDescending(x =&gt; x.Expiry)\n                        .ThenBy(x =&gt; x.Strike)\n                        .ToList();\n\n                    if (callContracts.Count &lt; 2)\n                    {\n                        return;\n                    }\n\n                    var longCall = callContracts.First();\n                    var shortCall = callContracts.First(contract =&gt; contract.Strike &gt; longCall.Strike &amp;&amp; contract.Expiry == longCall.Expiry);\n\n                    // Use all the buying power\n                    var quantity = new[] {\n                        CalculateOrderQuantity(shortCall.Symbol, -1m),\n                        CalculateOrderQuantity(longCall.Symbol, 1m) }\n                        .Min(x=&gt; Math.Abs(x));\n\n                    MarketOrder(shortCall.Symbol, -quantity);\n                    MarketOrder(longCall.Symbol, quantity);\n\n                    var expectedMarginUsage = Math.Max((longCall.Strike - shortCall.Strike) * Securities[longCall.Symbol].SymbolProperties.ContractMultiplier * quantity, 0);\n                    if (expectedMarginUsage != Portfolio.TotalMarginUsed)\n                    {\n                        throw new Exception(\"Unexpect margin used!\");\n                    }\n                }\n            }\n        }\n\n        public override void OnSecuritiesChanged(SecurityChanges changes)\n        {\n            foreach (var security in changes.AddedSecurities)\n            {\n                if (security.Type == SecurityType.IndexOption)\n                {\n                    // Historical data\n                    var history = History(security.Symbol, 10, Resolution.Minute);\n                    Debug($\"We got {history.Count()} from our history request for {security.Symbol}\");\n                }\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-04-06 00:01:22"
      },
      {
        "id": 601,
        "master_product_id": 40,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this example, we buy the VIX Index Option Bull Call Spread with the furthest expiration.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass IndexOptionsDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 1, 1)\n        self.SetEndDate(2021, 1, 1)\n        self.SetCash(200000)\n\n        index = self.AddIndex(\"VIX\")\n        option = self.AddOption(index.Symbol)\n        option.SetFilter(-2, +2, 0, 180)\n\n        self.SetAlpha(BullCallSpreadAlphaModel(option.Symbol))\n        self.SetPortfolioConstruction(SingleSharePortfolioConstructionModel())\n\nclass BullCallSpreadAlphaModel(AlphaModel):\n    def __init__(self, optionSymbol):\n        self.optionSymbol = optionSymbol\n\n    def Update(self, algorithm, data):\n        \n        if algorithm.Portfolio.Invested:\n            return []\n            \n        chain = data.OptionChains.get(self.optionSymbol)\n        if not chain:\n            return []\n            \n        callContracts = [c for c in chain if c.Right == OptionRight.Call]\n        if callContracts:\n                    \n            expiry = max([c.Expiry for c in callContracts])\n            callContracts = sorted([c for c in callContracts if c.Expiry == expiry],\n                key=lambda c: c.Strike)\n                        \n            if len(callContracts) &lt; 2:\n                return []\n                \n            longCall, shortCall = callContracts[0:2]\n            \n        return Insight.Group(\n            [\n                Insight.Price(longCall.Symbol, expiry + timedelta(1), InsightDirection.Up),\n                Insight.Price(shortCall.Symbol, expiry + timedelta(1), InsightDirection.Down),\n            ])\n        \n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            if security.Type == SecurityType.IndexOption:\n                # Historical data\n                history = algorithm.History(security.Symbol, 10, Resolution.Minute)\n                algorithm.Debug(f\"We got {len(history)} from our history request for {security.Symbol}\")\n\n\nclass SingleSharePortfolioConstructionModel(PortfolioConstructionModel):\n    def CreateTargets(self, algorithm, insights):\n        if not insights:\n            return []\n\n        quantity = min([abs(algorithm.CalculateOrderQuantity(i.Symbol, i.Direction))\n            for i in insights])\n    \n        return [PortfolioTarget(i.Symbol, quantity * i.Direction)\n            for i in insights]</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class IndexOptionsDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2020, 1, 1);\n            SetEndDate(2021, 1, 1);\n            SetCash(200000);\n\n            var equity = AddIndex(\"VIX\");\n            var option = AddOption(equity.Symbol);\n            option.SetFilter(-2, +2, 0, 180);\n\n            SetAlpha(new BullCallSpreadAlphaModel(option.Symbol));\n            SetPortfolioConstruction(new SingleSharePortfolioConstructionModel());\n        }\n    }\n\n    public class BullCallSpreadAlphaModel : AlphaModel\n    {\n        private Symbol _optionSymbol;\n\n        public BullCallSpreadAlphaModel(Symbol optionSymbol)\n        {\n            _optionSymbol = optionSymbol;\n        }\n\n        public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n        {\n            if (algorithm.Portfolio.Invested || !algorithm.IsMarketOpen(_optionSymbol))\n            {\n                return Enumerable&lt;Insight&gt;.Empty();\n            }\n                \n            OptionChain chain;\n            if (!slice.OptionChains.TryGetValue(_optionSymbol, out chain))\n            {\n            \treturn Enumerable&lt;Insight&gt;.Empty();\n            }\n            \n            var callContracts = chain\n            \t.Where(contract =&gt; contract.Right == OptionRight.Call)\n                .OrderByDescending(x =&gt; x.Expiry)\n                .ThenBy(x =&gt; x.Strike)\n                .ToList();\n\n            if (callContracts.Count &lt; 2)\n            {\n            \treturn Enumerable&lt;Insight&gt;.Empty();\n            }\n\n            var longCall = callContracts.First();\n            var shortCall = callContracts.First(contract =&gt; contract.Strike &gt; longCall.Strike &amp;&amp; contract.Expiry == longCall.Expiry);\n\n            var expiry = longCall.Expiry.AddDays(1);\n\n            return Insight.Group(\n            \tInsight.Price(longCall.Symbol, expiry, InsightDirection.Up),\n                Insight.Price(shortCall.Symbol, expiry, InsightDirection.Down));\n        }\n        \n        public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n        {\n            foreach (var security in changes.AddedSecurities)\n            {\n                if (security.Type == SecurityType.IndexOption)\n                {\n                    // Historical data\n                    var history = algorithm.History(security.Symbol, 10, Resolution.Minute);\n                    algorithm.Debug($\"We got {history.Count()} from our history request for {security.Symbol}\");\n                }\n            }\n        }\n    }\n        \n    public class SingleSharePortfolioConstructionModel : PortfolioConstructionModel\n    {\n        public override IEnumerable&lt;PortfolioTarget&gt; CreateTargets(QCAlgorithm algorithm, Insight[] insights)\n        {\n           if (insights.Count() == 0)\n           {\n                return Enumerable&lt;PortfolioTarget&gt;.Empty();\n           }\n\n            var quantity = insights\n                .Select(i =&gt; Math.Abs(algorithm.CalculateOrderQuantity(i.Symbol, (decimal)i.Direction)))\n                .Min();\n\n            return insights\n                .Select(i =&gt; new PortfolioTarget(i.Symbol, quantity * (decimal)i.Direction));\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-09-22 21:08:37"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 40,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>US Index Options is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>US Index Options can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 15 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>US Index Options is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 114,
        "name": "US Index Options",
        "description": "<p>Free access to US Index Options on the QuantConnect Cloud platform for research, backtest, and live trading. Index Options are available in minute resolution. Live trading via Interactive Brokers only.</p>\n<ul><li>European Index Options</li>\n    <li>NDX, SPX, and VIX Indexes</li>\n    <li>Option Margin Modeling Supported</li>\n</ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 116,
        "name": "On Premise Download",
        "description": "<p>Download AlgoSeek Index Options on premise in LEAN format for your local research and backtesting.</p>\n<ul><li>Data ownership for internal use</li>\n    <li>Harness local compute resources</li>\n    <li>Preformatted in LEAN files</li>\n</ul>",
        "shortDescription": "On Premise Download\n",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "15 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      }
    ],
    "headerColor": "8b000a"
  },
  {
    "name": "US Fundamental Data",
    "vendorName": "Morningstar",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/morningstar-logo.svg",
    "landingFileName": "morning-star-us-fundamentals.html",
    "url": "/datasets/morning-star-us-fundamentals",
    "short_description": "US Equities Fundamental data for use with LEAN for fine universe selection based on industry classification, and underlying company performance indicators.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The US Fundamental Data by Morningstar tracks US Equity fundamentals. The data covers 5,000 US Equities, starts in January 1998, and is delivered on a daily frequency. This dataset is created by using a combination of string matching, Regular Expressions, and Machine Learning to gather the fundamental data published by companies.</p>\n\n<p>For older symbols, the file date is approximated 45 days after the as of date. When a filing date is present on the Morningstar data, it is used. As we are a quant platform, all the data is loaded using \"As Original Reported\" figures. If there was a mistake reporting the figure, this will not be fixed later. The market typically responds quickly to these initially reported figures. Data is available for multiple periods depending on the property. Periods available include: 1 mo, 2 mo, 3 mo, 6 mo, 9 mo, 12 mo, 1 Yr, 2 Yr, 3 Yr, and 5 Yr. Morningstar symbols cover the NYSE, NASDAQ, AMEX, and BATS exchanges.</p>\n\n<p>In live trading, Morningstar data is delivered to your algorithm at approximately 6 am each day. The majority of the fundamental data update occurs once per month. This includes updates to all of the key information for each security Morningstar supports. On top of this monthly update, there are daily updates of the financial ratios.</p>\n\n<p>As Morningstar data arrives, it updates the master copy and is passed into your algorithm, similar to how TradeBars are fill-forwarded in your data feed. If there have been no updates this week, you'll receive the same fundamental data.</p>\n\n<p>This dataset depends on the <a href=\"https://www.quantconnect.com/datasets/quantconnect-us-equity-security-master\">US Equity Security Master</a> dataset because the US Equity Security Master dataset contains information on splits, dividends, and symbol changes.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\nMorningstar was founded by Joe Mansueto in 1984 with the goal of empowering investors by connecting people to the investing information and tools they need. Morningstar provides access extensive line of products and services for individual investors, financial advisors, asset managers, and retirement plan providers. Morningstar provides data on approximately 525,000 investment offerings including stocks, mutual funds, and similar vehicles, along with real-time global market data on nearly 18 million equities, indexes, futures, options, commodities, and precious metals, in addition to foreign exchange and Treasury markets. Morningstar also offers investment management services through its investment advisory subsidiaries, with $244 billion in assets under advisement or management as of 2021.</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">self.AddUniverse(self.SelectCoarse, self.SelectFine)</code></pre>\n<pre><code class=\"language-cs\">AddUniverse(SelectCoarse, SelectFine);</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 1998</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>5,000 US Equities</td>\n        </tr><tr><td>Corporate Indicators / Tracked Fields</td><td>900 Fields</td>\n        </tr><tr><td>Data Density</td>\n            <td>Sparse</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>New York</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Supported Assets",
        "content": "<p>To view the supported assets in the US Fundamental dataset, see the <a href=\"/data/tree/equity/usa/fundamental/fine\">Data Explorer</a>.</p>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe MorningStar US Fundamentals dataset enables researchers to design strategies harnessing fundamental data points. Examples include: \n</p>\n<ul><li>Ranking a universe of securities by a value factor like the book-to-market ratio and buying a subset of universe with the best factor ranking</li>\n<li>Using the Morningstar asset classification to target specific industries or to ensure your strategy is diversified across several sectors</li>\n<li>Trading securities that recently performed an IPO</li>\n\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_dae6cac9d770781a0dc8a9bb0b632d80.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Fundamentals dataset provides FineFundamental objects. To filter FineFundamental objects, you can use the MorningstarSectorCode, MorningstarIndustryGroupCode, and MorningstarIndustryCode enumeration values.</p>\n\n<h4>FineFundamental Attributes</h4>\n<p>FineFundamental objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Fundamental.FineFundamental\"></div>\n\n<h4>MorningstarSectorCode Enumeration</h4>\n<p>Sectors are large super categories of data. They are accessed with the <b>MorningstarSectorCode</b> property.</p>\n<div class=\"section-example-container\">\n    <pre><code class=\"language-cs\">filteredFine = fine.Where(x =&gt; x.AssetClassification.MorningstarSectorCode == MorningstarSectorCode.Technology);</code></pre>\n    <pre><code class=\"language-python\">filtered_fine = [x for x in fine if x.AssetClassification.MorningstarSectorCode == MorningstarSectorCode.Technology]</code></pre>\n</div>\n<p>The MorningstarSectorCode enumeration has the following values:</p>\n<table class=\"table qc-table table-reflow\"><thead><tr><th><b>MorningstarSectorCode</b></th><th>Sector Code</th></tr></thead><tbody><tr><td><b>BasicMaterials</b></td><td>101</td></tr><tr><td><b>ConsumerCyclical</b></td><td>102</td></tr><tr><td><b>FinancialServices</b></td><td>103</td></tr><tr><td><b>RealEstate</b></td><td>104</td></tr><tr><td><b>ConsumerDefensive</b></td><td>205</td></tr><tr><td><b>Healthcare</b></td><td>206</td></tr><tr><td><b>Utilities</b></td><td>207</td></tr><tr><td><b>CommunicationServices</b></td><td>308</td></tr><tr><td><b>Energy</b></td><td>309</td></tr><tr><td><b>Industrials</b></td><td>310</td></tr><tr><td><b>Technology</b></td><td>311</td></tr></tbody></table><h4>MorningstarIndustryGroupCode Enumeration</h4>\n<p>Industry groups are clusters of related industries which tie together. They are accessed with the <b>MorningstarIndustryGroupCode</b> property.</p>\n<div class=\"section-example-container\">\n    <pre><code class=\"language-cs\">filteredFine = fine.Where(x =&gt; x.AssetClassification.MorningstarIndustryGroupCode == MorningstarIndustryGroupCode.ApplicationSoftware);</code></pre>\n    <pre><code class=\"language-python\">filtered_fine = [x for x in fine if x.AssetClassification.MorningstarIndustryGroupCode == MorningstarIndustryGroupCode.ApplicationSoftware]</code></pre>\n</div>\n<p>The MorningstarIndustryGroupCode enumeration has the following values:</p>\n<table class=\"table qc-table table-reflow\"><thead><tr><th><b>MorningstarIndustryGroupCode</b></th><th>Industry Group Code</th></tr></thead><tbody><tr><td><b>Agriculture</b></td><td>10110</td></tr><tr><td><b>BuildingMaterials</b></td><td>10120</td></tr><tr><td><b>Chemicals</b></td><td>10130</td></tr><tr><td><b>ForestProducts</b></td><td>10140</td></tr><tr><td><b>MetalsAndMining</b></td><td>10150</td></tr><tr><td><b>Steel</b></td><td>10160</td></tr><tr><td><b>VehiclesAndParts</b></td><td>10200</td></tr><tr><td><b>Furnishings</b></td><td>10220</td></tr><tr><td><b>FixturesAndAppliances</b></td><td>10220</td></tr><tr><td><b>HomebuildingAndConstruction</b></td><td>10230</td></tr><tr><td><b>ManufacturingApparelAndAccessories</b></td><td>10240</td></tr><tr><td><b>PackagingAndContainers</b></td><td>10250</td></tr><tr><td><b>PersonalServices</b></td><td>10260</td></tr><tr><td><b>Restaurants</b></td><td>10270</td></tr><tr><td><b>RetailCyclical</b></td><td>10280</td></tr><tr><td><b>TravelAndLeisure</b></td><td>10290</td></tr><tr><td><b>AssetManagement</b></td><td>10310</td></tr><tr><td><b>Banks</b></td><td>10320</td></tr><tr><td><b>CapitalMarkets</b></td><td>10330</td></tr><tr><td><b>Insurance</b></td><td>10340</td></tr><tr><td><b>DiversifiedFinancialServices</b></td><td>10350</td></tr><tr><td><b>CreditServices</b></td><td>10360</td></tr><tr><td><b>RealEstate</b></td><td>10410</td></tr><tr><td><b>REITs</b></td><td>10420</td></tr><tr><td><b>BeveragesAlcoholic</b></td><td>20510</td></tr><tr><td><b>BeveragesNonAlcoholic</b></td><td>20520</td></tr><tr><td><b>ConsumerPackagedGoods</b></td><td>20525</td></tr><tr><td><b>Education</b></td><td>20540</td></tr><tr><td><b>RetailDefensive</b></td><td>20550</td></tr><tr><td><b>TobaccoProducts</b></td><td>20560</td></tr><tr><td><b>Biotechnology</b></td><td>20610</td></tr><tr><td><b>DrugManufacturers</b></td><td>20620</td></tr><tr><td><b>HealthcarePlans</b></td><td>20630</td></tr><tr><td><b>HealthcareProvidersAndServices</b></td><td>20645</td></tr><tr><td><b>MedicalDevicesAndInstruments</b></td><td>20650</td></tr><tr><td><b>MedicalDiagnosticsAndResearch</b></td><td>20660</td></tr><tr><td><b>MedicalDistribution</b></td><td>20670</td></tr><tr><td><b>UtilitiesIndependentPowerProducers</b></td><td>20710</td></tr><tr><td><b>UtilitiesRegulated</b></td><td>20720</td></tr><tr><td><b>TelecommunicationServices</b></td><td>30810</td></tr><tr><td><b>MediaDiversified</b></td><td>30820</td></tr><tr><td><b>InteractiveMedia</b></td><td>30830</td></tr><tr><td><b>OilAndGas</b></td><td>30910</td></tr><tr><td><b>OtherEnergySources</b></td><td>30920</td></tr><tr><td><b>AerospaceAndDefense</b></td><td>31010</td></tr><tr><td><b>BusinessServices</b></td><td>31020</td></tr><tr><td><b>Conglomerates</b></td><td>31030</td></tr><tr><td><b>Construction</b></td><td>31040</td></tr><tr><td><b>FarmAndHeavyConstructionMachinery</b></td><td>31050</td></tr><tr><td><b>IndustrialDistribution</b></td><td>31060</td></tr><tr><td><b>IndustrialProducts</b></td><td>31070</td></tr><tr><td><b>Transportation</b></td><td>31080</td></tr><tr><td><b>WasteManagement</b></td><td>31090</td></tr><tr><td><b>Software</b></td><td>31110</td></tr><tr><td><b>Hardware</b></td><td>31120</td></tr><tr><td><b>Semiconductors</b></td><td>31130</td></tr></tbody></table><h4>MorningstarIndustryCode Enumeration</h4>\n<p>Industries are the finest level of classification available, and are the individual industries according to the Morningstar classification system. They are accessed with the <b>MorningstarIndustryCode</b> property:</p>\n<div class=\"section-example-container\">\n    <pre><code class=\"language-cs\">filteredFine = fine.Where(x =&gt; x.AssetClassification.MorningstarIndustryCode == MorningstarIndustryCode.SoftwareApplication);</code></pre>\n    <pre><code class=\"language-python\">filtered_fine = [x for x in fine if x.AssetClassification.MorningstarIndustryCode == MorningstarIndustryCode.SoftwareApplication]</code></pre>\n</div>\n<p>The MorningstarIndustryCode enumeration has the following values:</p>\n<table class=\"table qc-table table-reflow\"><thead><tr><th><b>MorningstarIndustryCode</b></th><th>Industry Code</th></tr></thead><tbody><tr><td><b>AgriculturalInputs</b></td><td>10110010</td></tr><tr><td><b>BuildingMaterials</b></td><td>10120010</td></tr><tr><td><b>Chemicals</b></td><td>10130010</td></tr><tr><td><b>SpecialtyChemicals</b></td><td>10130020</td></tr><tr><td><b>LumberAndWoodProduction</b></td><td>10140010</td></tr><tr><td><b>PaperAndPaperProducts</b></td><td>10140020</td></tr><tr><td><b>Aluminum</b></td><td>10150010</td></tr><tr><td><b>Copper</b></td><td>10150020</td></tr><tr><td><b>OtherIndustrialMetalsAndMining</b></td><td>10150030</td></tr><tr><td><b>Gold</b></td><td>10150040</td></tr><tr><td><b>Silver</b></td><td>10150050</td></tr><tr><td><b>OtherPreciousMetalsAndMining</b></td><td>10150060</td></tr><tr><td><b>CokingCoal</b></td><td>10160010</td></tr><tr><td><b>Steel</b></td><td>10160020</td></tr><tr><td><b>AutoAndTruckDealerships</b></td><td>10200010</td></tr><tr><td><b>AutoManufacturers</b></td><td>10200020</td></tr><tr><td><b>AutoParts</b></td><td>10200030</td></tr><tr><td><b>RecreationalVehicles</b></td><td>10200040</td></tr><tr><td><b>Furnishings</b></td><td>10220010</td></tr><tr><td><b>FixturesAndAppliances</b></td><td>10220010</td></tr><tr><td><b>ResidentialConstruction</b></td><td>10230010</td></tr><tr><td><b>TextileManufacturing</b></td><td>10240010</td></tr><tr><td><b>ApparelManufacturing</b></td><td>10240020</td></tr><tr><td><b>FootwearAndAccessories</b></td><td>10240030</td></tr><tr><td><b>PackagingAndContainers</b></td><td>10250010</td></tr><tr><td><b>PersonalServices</b></td><td>10260010</td></tr><tr><td><b>Restaurants</b></td><td>10270010</td></tr><tr><td><b>ApparelRetail</b></td><td>10280010</td></tr><tr><td><b>DepartmentStores</b></td><td>10280020</td></tr><tr><td><b>HomeImprovementRetail</b></td><td>10280030</td></tr><tr><td><b>LuxuryGoods</b></td><td>10280040</td></tr><tr><td><b>InternetRetail</b></td><td>10280050</td></tr><tr><td><b>SpecialtyRetail</b></td><td>10280060</td></tr><tr><td><b>Gambling</b></td><td>10290010</td></tr><tr><td><b>Leisure</b></td><td>10290020</td></tr><tr><td><b>Lodging</b></td><td>10290030</td></tr><tr><td><b>ResortsAndCasinos</b></td><td>10290040</td></tr><tr><td><b>TravelServices</b></td><td>10290050</td></tr><tr><td><b>AssetManagement</b></td><td>10310010</td></tr><tr><td><b>BanksDiversified</b></td><td>10320010</td></tr><tr><td><b>BanksRegional</b></td><td>10320020</td></tr><tr><td><b>MortgageFinance</b></td><td>10320030</td></tr><tr><td><b>CapitalMarkets</b></td><td>10330010</td></tr><tr><td><b>FinancialDataAndStockExchanges</b></td><td>10330020</td></tr><tr><td><b>InsuranceLife</b></td><td>10340010</td></tr><tr><td><b>InsurancePropertyAndCasualty</b></td><td>10340020</td></tr><tr><td><b>InsuranceReinsurance</b></td><td>10340030</td></tr><tr><td><b>InsuranceSpecialty</b></td><td>10340040</td></tr><tr><td><b>InsuranceBrokers</b></td><td>10340050</td></tr><tr><td><b>InsuranceDiversified</b></td><td>10340060</td></tr><tr><td><b>ShellCompanies</b></td><td>10350010</td></tr><tr><td><b>FinancialConglomerates</b></td><td>10350020</td></tr><tr><td><b>CreditServices</b></td><td>10360010</td></tr><tr><td><b>RealEstateDevelopment</b></td><td>10410010</td></tr><tr><td><b>RealEstateServices</b></td><td>10410020</td></tr><tr><td><b>RealEstateDiversified</b></td><td>10410030</td></tr><tr><td><b>REITHealthcareFacilities</b></td><td>10420010</td></tr><tr><td><b>REITHotelAndMotel</b></td><td>10420020</td></tr><tr><td><b>REITIndustrial</b></td><td>10420030</td></tr><tr><td><b>REITOffice</b></td><td>10420040</td></tr><tr><td><b>REITResidential</b></td><td>10420050</td></tr><tr><td><b>REITRetail</b></td><td>10420060</td></tr><tr><td><b>REITMortgage</b></td><td>10420070</td></tr><tr><td><b>REITSpecialty</b></td><td>10420080</td></tr><tr><td><b>REITDiversified</b></td><td>10420090</td></tr><tr><td><b>BeveragesBrewers</b></td><td>20510010</td></tr><tr><td><b>BeveragesWineriesAndDistilleries</b></td><td>20510020</td></tr><tr><td><b>BeveragesNonAlcoholic</b></td><td>20520010</td></tr><tr><td><b>Confectioners</b></td><td>20525010</td></tr><tr><td><b>FarmProducts</b></td><td>20525020</td></tr><tr><td><b>HouseholdAndPersonalProducts</b></td><td>20525030</td></tr><tr><td><b>PackagedFoods</b></td><td>20525040</td></tr><tr><td><b>EducationAndTrainingServices</b></td><td>20540010</td></tr><tr><td><b>DiscountStores</b></td><td>20550010</td></tr><tr><td><b>FoodDistribution</b></td><td>20550020</td></tr><tr><td><b>GroceryStores</b></td><td>20550030</td></tr><tr><td><b>Tobacco</b></td><td>20560010</td></tr><tr><td><b>Biotechnology</b></td><td>20610010</td></tr><tr><td><b>DrugManufacturersGeneral</b></td><td>20620010</td></tr><tr><td><b>DrugManufacturersSpecialtyAndGeneric</b></td><td>20620020</td></tr><tr><td><b>HealthcarePlans</b></td><td>20630010</td></tr><tr><td><b>MedicalCareFacilities</b></td><td>20645010</td></tr><tr><td><b>PharmaceuticalRetailers</b></td><td>20645020</td></tr><tr><td><b>HealthInformationServices</b></td><td>20645030</td></tr><tr><td><b>MedicalDevices</b></td><td>20650010</td></tr><tr><td><b>MedicalInstrumentsAndSupplies</b></td><td>20650020</td></tr><tr><td><b>DiagnosticsAndResearch</b></td><td>20660010</td></tr><tr><td><b>MedicalDistribution</b></td><td>20670010</td></tr><tr><td><b>UtilitiesIndependentPowerProducers</b></td><td>20710010</td></tr><tr><td><b>UtilitiesRenewable</b></td><td>20710020</td></tr><tr><td><b>UtilitiesRegulatedWater</b></td><td>20720010</td></tr><tr><td><b>UtilitiesRegulatedElectric</b></td><td>20720020</td></tr><tr><td><b>UtilitiesRegulatedGas</b></td><td>20720030</td></tr><tr><td><b>UtilitiesDiversified</b></td><td>20720040</td></tr><tr><td><b>TelecomServices</b></td><td>30810010</td></tr><tr><td><b>AdvertisingAgencies</b></td><td>30820010</td></tr><tr><td><b>Publishing</b></td><td>30820020</td></tr><tr><td><b>Broadcasting</b></td><td>30820030</td></tr><tr><td><b>Entertainment</b></td><td>30820040</td></tr><tr><td><b>InternetContentAndInformation</b></td><td>30830010</td></tr><tr><td><b>ElectronicGamingAndMultimedia</b></td><td>30830020</td></tr><tr><td><b>OilAndGasDrilling</b></td><td>30910010</td></tr><tr><td><b>OilAndGasEAndP</b></td><td>30910020</td></tr><tr><td><b>OilAndGasIntegrated</b></td><td>30910030</td></tr><tr><td><b>OilAndGasMidstream</b></td><td>30910040</td></tr><tr><td><b>OilAndGasRefiningAndMarketing</b></td><td>30910050</td></tr><tr><td><b>OilAndGasEquipmentAndServices</b></td><td>30910060</td></tr><tr><td><b>ThermalCoal</b></td><td>30920010</td></tr><tr><td><b>Uranium</b></td><td>30920020</td></tr><tr><td><b>AerospaceAndDefense</b></td><td>31010010</td></tr><tr><td><b>SpecialtyBusinessServices</b></td><td>31020010</td></tr><tr><td><b>ConsultingServices</b></td><td>31020020</td></tr><tr><td><b>RentalAndLeasingServices</b></td><td>31020030</td></tr><tr><td><b>SecurityAndProtectionServices</b></td><td>31020040</td></tr><tr><td><b>StaffingAndEmploymentServices</b></td><td>31020050</td></tr><tr><td><b>Conglomerates</b></td><td>31030010</td></tr><tr><td><b>EngineeringAndConstruction</b></td><td>31040010</td></tr><tr><td><b>InfrastructureOperations</b></td><td>31040020</td></tr><tr><td><b>BuildingProductsAndEquipment</b></td><td>31040030</td></tr><tr><td><b>FarmAndHeavyConstructionMachinery</b></td><td>31050010</td></tr><tr><td><b>IndustrialDistribution</b></td><td>31060010</td></tr><tr><td><b>BusinessEquipmentAndSupplies</b></td><td>31070010</td></tr><tr><td><b>SpecialtyIndustrialMachinery</b></td><td>31070020</td></tr><tr><td><b>MetalFabrication</b></td><td>31070030</td></tr><tr><td><b>PollutionAndTreatmentControls</b></td><td>31070040</td></tr><tr><td><b>ToolsAndAccessories</b></td><td>31070050</td></tr><tr><td><b>ElectricalEquipmentAndParts</b></td><td>31070060</td></tr><tr><td><b>AirportsAndAirServices</b></td><td>31080010</td></tr><tr><td><b>Airlines</b></td><td>31080020</td></tr><tr><td><b>Railroads</b></td><td>31080030</td></tr><tr><td><b>MarineShipping</b></td><td>31080040</td></tr><tr><td><b>Trucking</b></td><td>31080050</td></tr><tr><td><b>IntegratedFreightAndLogistics</b></td><td>31080060</td></tr><tr><td><b>WasteManagement</b></td><td>31090010</td></tr><tr><td><b>InformationTechnologyServices</b></td><td>31110010</td></tr><tr><td><b>SoftwareApplication</b></td><td>31110020</td></tr><tr><td><b>SoftwareInfrastructure</b></td><td>31110030</td></tr><tr><td><b>CommunicationEquipment</b></td><td>31120010</td></tr><tr><td><b>ComputerHardware</b></td><td>31120020</td></tr><tr><td><b>ConsumerElectronics</b></td><td>31120030</td></tr><tr><td><b>ElectronicComponents</b></td><td>31120040</td></tr><tr><td><b>ElectronicsAndComputerDistribution</b></td><td>31120050</td></tr><tr><td><b>ScientificAndTechnicalInstruments</b></td><td>31120060</td></tr><tr><td><b>SemiconductorEquipmentAndMaterials</b></td><td>31130010</td></tr><tr><td><b>Semiconductors</b></td><td>31130020</td></tr><tr><td><b>Solar</b></td><td>31130030</td></tr></tbody></table><h4>Exchange ID Values</h4>\n<p>Exchange ID is mapped to represent the exchange of the equity listed in. They are accessed with the PrimaryExchangeID property.</p>\n<div class=\"section-example-container\">\n    <pre><code class=\"language-cs\">filteredFine = fine.Where(x =&gt; x.CompanyReference.PrimaryExchangeID == \"NAS\");</code></pre>\n    <pre><code class=\"language-python\">filtered_fine = [x for x in fine if x.CompanyReference.PrimaryExchangeID == \"NAS\"]</code></pre>\n</div>\n<p>The exchanges are represented by the following string values:</p>\n<table class=\"table qc-table table-reflow\"><thead><tr><th>String Representation</th><th>Exchange</th></tr></thead><tbody><tr><td>NYS</td><td>New York Stock Exchange (NYSE)</td></tr><tr><td>NAS</td><td>NASDAQ</td></tr><tr><td>ASE</td><td>American Stock Exchange (AMEX)</td></tr><tr><td>TSE</td><td>Tokyo Stock Exchange</td></tr><tr><td>AMS</td><td>Amsterdam Internet Exchange</td></tr><tr><td>SGO</td><td>Santiago Stock Exchange</td></tr><tr><td>XMAD</td><td>Madrid Stock Exchange</td></tr><tr><td>ASX</td><td>Australian Securities Exchange</td></tr><tr><td>BVMF</td><td>B3 (stock exchange)</td></tr><tr><td>LON</td><td>London Stock Exchange</td></tr><tr><td>TKS</td><td>Istanbul Stock Exchange Settlement and Custody Bank</td></tr><tr><td>SHG</td><td>Shanghai Exchange</td></tr><tr><td>LIM</td><td>Lima Stock Exchange</td></tr><tr><td>FRA</td><td>Frankfurt Stock Exchange</td></tr><tr><td>JSE</td><td>Johannesburg Stock Exchange</td></tr><tr><td>MIL</td><td>Milan Stock Exchange</td></tr><tr><td>TAE</td><td>Tel Aviv Stock Exchange</td></tr><tr><td>STO</td><td>Stockholm Stock Exchange</td></tr><tr><td>ETR</td><td>Deutsche Boerse Xetra Core</td></tr><tr><td>PAR</td><td>Paris Stock Exchange</td></tr><tr><td>BUE</td><td>Buenos Aires Stock Exchange</td></tr><tr><td>KRX</td><td>Korea Exchange</td></tr><tr><td>SWX</td><td>SIX Swiss Exchange</td></tr><tr><td>PINX</td><td>Pink Sheets (OTC)</td></tr><tr><td>CSE</td><td>Canadian Securities Exchange</td></tr><tr><td>PHS</td><td>Philippine Stock Exchange</td></tr><tr><td>MEX</td><td>Mexican Stock Exchange</td></tr><tr><td>TAI</td><td>Taiwan Stock Exchange</td></tr><tr><td>IDX</td><td>Indonesia Stock Exchange</td></tr><tr><td>OSL</td><td>Oslo Stock Exchange</td></tr><tr><td>BOG</td><td>Colombia Stock Exchange</td></tr><tr><td>NSE</td><td>National Stock Exchange of India</td></tr><tr><td>HEL</td><td>Nasdaq Helsinki</td></tr><tr><td>MISX</td><td>Moscow Exchange</td></tr><tr><td>HKG</td><td>Hong Kong Stock Exchange</td></tr><tr><td>IST</td><td>Istanbul Stock Exchange</td></tr><tr><td>BOM</td><td>Bombay Stock Exchange</td></tr><tr><td>TSX</td><td>Toronto Stock Exchange</td></tr><tr><td>BRU</td><td>Brussels Stock Exchange</td></tr><tr><td>BATS</td><td>BATS Global Markets</td></tr><tr><td>ARCX</td><td>NYSE Arca</td></tr><tr><td>GREY</td><td>Grey Market (OTC)</td></tr><tr><td>DUS</td><td>Dusseldorf Stock Exchange</td></tr><tr><td>BER</td><td>Berlin Stock Exchange</td></tr><tr><td>ROCO</td><td>Taipei Exchange</td></tr><tr><td>CNQ</td><td>Canadian Trading and Quotation System Inc.</td></tr><tr><td>BSP</td><td>Bangko Sentral ng Pilipinas</td></tr><tr><td>NEOE</td><td>NEO Exchange</td></tr></tbody></table>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add US Fundamental data to your algorithm, you need to provide a fine universe selection method to AddUniverse() or AddUniverseSelection(). For detailed documentation on using fundamental data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/universes#Universes-Fundamentals-Selection\">Fundamentals Selection</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class MorningStarDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 7, 1)\n        self.SetCash(100000) \n        \n        self.AddUniverse(self.SelectCoarse, self.SelectFine)</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class MorningStarDataAlgorithm : QCAlgorithm\n    {    \t\n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 7, 1);\n            SetCash(100000);\n            \n            AddUniverse(SelectCoarse, SelectFine);\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via the IEnumerable object that is piped into the user-defined selector function. The symbol objects that are selected by the coarse selection function are the symbols that comprise the Fine Fundamental IEnumerable object passed to the fine fundamental selection function. Fundamental data is available in daily resolution. You can see an example of using this data in the code below.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def SelectCoarse(self, coarse):\n    selected = [c for c in coarse if c.HasFundamentalData]\n    sorted_by_dollar_volume = sorted(selected, key=lambda c: c.DollarVolume, reverse=True)\n    return [ c.Symbol for c in sorted_by_dollar_volume[:20] ]\n    \ndef SelectFine(self, fine):\n    sorted_by_pe_ratio = sorted(fine, key=lambda f: f.ValuationRatios.PERatio, reverse=True)\n    return [ f.Symbol for f in sorted_by_pe_ratio[:5] ]</code></pre>\n<pre><code class=\"language-cs\">public IEnumerable&lt;Symbol&gt; SelectCoarse(IEnumerable&lt;CoarseFundamental&gt; coarse)\n{\n    return coarse.OrderByDescending(x =&gt; x.DollarVolume).Take(20).Select(x =&gt; x.Symbol);\n}\n        \npublic IEnumerable&lt;Symbol&gt; SelectFine(IEnumerable&lt;FineFundamental&gt; fine)\n{\n    return fine.OrderByDescending(x =&gt; x.ValuationRatios.PERatio).Take(5).Select(x =&gt; x.Symbol);\n}</code></pre>\n</div>\n<p>Many of the MorningStar values are <b>MultiPeriodField</b> objects. These represent a timespan of data, normally either <b>OneMonth</b>, <b>ThreeMonths</b>, <b>SixMonths</b>, or <b>TwelveMonths</b>. You can see <a href=\"https://raw.githubusercontent.com/QuantConnect/Lean/master/Common/Data/Fundamental/Generated/MultiPeriodValueTypes.cs\">the auto-generated classes on Github</a> if you'd like to see the objects.</p>"
      },
      {
        "title": "Historical Data",
        "content": "<p>It's currently only possible to retrieve historical fundamental data from the Research environment. You can request historical fundamental data by using the data Symbol object. To learn more about historical fundamental data requests, please visit the <a href=\"https://www.quantconnect.com/docs/research/fundamental-data#Fundamental-Data-Accessing-Historical-Fundamental-Data\">Accessing Historical Fundamental Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical fundamental data by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = qb.GetFundamental(symbol, \"ValuationRatios.PERatio\", datetime(2021, 1, 1), datetime(2021, 7, 1))</code></pre>\n<pre><code class=\"language-cs\">var history = qb.GetFundamental(symbol, \"ValuationRatios.PERatio\", new DateTime(2021, 1, 1), new DateTime(2021, 7, 1));</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Fundamentals dataset provides FineFundamental objects. To filter FineFundamental objects, you can use the MorningstarSectorCode, MorningstarIndustryGroupCode, and MorningstarIndustryCode enumeration values.</p>\n\n<h4>FineFundamental Attributes</h4>\n<p>FineFundamental objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Fundamental.FineFundamental\"></div>\n\n<h4>MorningstarSectorCode Enumeration</h4>\n<p>Sectors are large super categories of data. They are accessed with the <b>MorningstarSectorCode</b> property.</p>\n<div class=\"section-example-container\">\n    <pre><code class=\"language-cs\">filteredFine = fine.Where(x =&gt; x.AssetClassification.MorningstarSectorCode == MorningstarSectorCode.Technology);</code></pre>\n    <pre><code class=\"language-python\">filtered_fine = [x for x in fine if x.AssetClassification.MorningstarSectorCode == MorningstarSectorCode.Technology]</code></pre>\n</div>\n<p>The MorningstarSectorCode enumeration has the following values:</p>\n<table class=\"table qc-table table-reflow\"><thead><tr><th><b>MorningstarSectorCode</b></th><th>Sector Code</th></tr></thead><tbody><tr><td><b>BasicMaterials</b></td><td>101</td></tr><tr><td><b>ConsumerCyclical</b></td><td>102</td></tr><tr><td><b>FinancialServices</b></td><td>103</td></tr><tr><td><b>RealEstate</b></td><td>104</td></tr><tr><td><b>ConsumerDefensive</b></td><td>205</td></tr><tr><td><b>Healthcare</b></td><td>206</td></tr><tr><td><b>Utilities</b></td><td>207</td></tr><tr><td><b>CommunicationServices</b></td><td>308</td></tr><tr><td><b>Energy</b></td><td>309</td></tr><tr><td><b>Industrials</b></td><td>310</td></tr><tr><td><b>Technology</b></td><td>311</td></tr></tbody></table><h4>MorningstarIndustryGroupCode Enumeration</h4>\n<p>Industry groups are clusters of related industries which tie together. They are accessed with the <b>MorningstarIndustryGroupCode</b> property.</p>\n<div class=\"section-example-container\">\n    <pre><code class=\"language-cs\">filteredFine = fine.Where(x =&gt; x.AssetClassification.MorningstarIndustryGroupCode == MorningstarIndustryGroupCode.ApplicationSoftware);</code></pre>\n    <pre><code class=\"language-python\">filtered_fine = [x for x in fine if x.AssetClassification.MorningstarIndustryGroupCode == MorningstarIndustryGroupCode.ApplicationSoftware]</code></pre>\n</div>\n<p>The MorningstarIndustryGroupCode enumeration has the following values:</p>\n<table class=\"table qc-table table-reflow\"><thead><tr><th><b>MorningstarIndustryGroupCode</b></th><th>Industry Group Code</th></tr></thead><tbody><tr><td><b>Agriculture</b></td><td>10110</td></tr><tr><td><b>BuildingMaterials</b></td><td>10120</td></tr><tr><td><b>Chemicals</b></td><td>10130</td></tr><tr><td><b>ForestProducts</b></td><td>10140</td></tr><tr><td><b>MetalsAndMining</b></td><td>10150</td></tr><tr><td><b>Steel</b></td><td>10160</td></tr><tr><td><b>VehiclesAndParts</b></td><td>10200</td></tr><tr><td><b>Furnishings</b></td><td>10220</td></tr><tr><td><b>FixturesAndAppliances</b></td><td>10220</td></tr><tr><td><b>HomebuildingAndConstruction</b></td><td>10230</td></tr><tr><td><b>ManufacturingApparelAndAccessories</b></td><td>10240</td></tr><tr><td><b>PackagingAndContainers</b></td><td>10250</td></tr><tr><td><b>PersonalServices</b></td><td>10260</td></tr><tr><td><b>Restaurants</b></td><td>10270</td></tr><tr><td><b>RetailCyclical</b></td><td>10280</td></tr><tr><td><b>TravelAndLeisure</b></td><td>10290</td></tr><tr><td><b>AssetManagement</b></td><td>10310</td></tr><tr><td><b>Banks</b></td><td>10320</td></tr><tr><td><b>CapitalMarkets</b></td><td>10330</td></tr><tr><td><b>Insurance</b></td><td>10340</td></tr><tr><td><b>DiversifiedFinancialServices</b></td><td>10350</td></tr><tr><td><b>CreditServices</b></td><td>10360</td></tr><tr><td><b>RealEstate</b></td><td>10410</td></tr><tr><td><b>REITs</b></td><td>10420</td></tr><tr><td><b>BeveragesAlcoholic</b></td><td>20510</td></tr><tr><td><b>BeveragesNonAlcoholic</b></td><td>20520</td></tr><tr><td><b>ConsumerPackagedGoods</b></td><td>20525</td></tr><tr><td><b>Education</b></td><td>20540</td></tr><tr><td><b>RetailDefensive</b></td><td>20550</td></tr><tr><td><b>TobaccoProducts</b></td><td>20560</td></tr><tr><td><b>Biotechnology</b></td><td>20610</td></tr><tr><td><b>DrugManufacturers</b></td><td>20620</td></tr><tr><td><b>HealthcarePlans</b></td><td>20630</td></tr><tr><td><b>HealthcareProvidersAndServices</b></td><td>20645</td></tr><tr><td><b>MedicalDevicesAndInstruments</b></td><td>20650</td></tr><tr><td><b>MedicalDiagnosticsAndResearch</b></td><td>20660</td></tr><tr><td><b>MedicalDistribution</b></td><td>20670</td></tr><tr><td><b>UtilitiesIndependentPowerProducers</b></td><td>20710</td></tr><tr><td><b>UtilitiesRegulated</b></td><td>20720</td></tr><tr><td><b>TelecommunicationServices</b></td><td>30810</td></tr><tr><td><b>MediaDiversified</b></td><td>30820</td></tr><tr><td><b>InteractiveMedia</b></td><td>30830</td></tr><tr><td><b>OilAndGas</b></td><td>30910</td></tr><tr><td><b>OtherEnergySources</b></td><td>30920</td></tr><tr><td><b>AerospaceAndDefense</b></td><td>31010</td></tr><tr><td><b>BusinessServices</b></td><td>31020</td></tr><tr><td><b>Conglomerates</b></td><td>31030</td></tr><tr><td><b>Construction</b></td><td>31040</td></tr><tr><td><b>FarmAndHeavyConstructionMachinery</b></td><td>31050</td></tr><tr><td><b>IndustrialDistribution</b></td><td>31060</td></tr><tr><td><b>IndustrialProducts</b></td><td>31070</td></tr><tr><td><b>Transportation</b></td><td>31080</td></tr><tr><td><b>WasteManagement</b></td><td>31090</td></tr><tr><td><b>Software</b></td><td>31110</td></tr><tr><td><b>Hardware</b></td><td>31120</td></tr><tr><td><b>Semiconductors</b></td><td>31130</td></tr></tbody></table><h4>MorningstarIndustryCode Enumeration</h4>\n<p>Industries are the finest level of classification available, and are the individual industries according to the Morningstar classification system. They are accessed with the <b>MorningstarIndustryCode</b> property:</p>\n<div class=\"section-example-container\">\n    <pre><code class=\"language-cs\">filteredFine = fine.Where(x =&gt; x.AssetClassification.MorningstarIndustryCode == MorningstarIndustryCode.SoftwareApplication);</code></pre>\n    <pre><code class=\"language-python\">filtered_fine = [x for x in fine if x.AssetClassification.MorningstarIndustryCode == MorningstarIndustryCode.SoftwareApplication]</code></pre>\n</div>\n<p>The MorningstarIndustryCode enumeration has the following values:</p>\n<table class=\"table qc-table table-reflow\"><thead><tr><th><b>MorningstarIndustryCode</b></th><th>Industry Code</th></tr></thead><tbody><tr><td><b>AgriculturalInputs</b></td><td>10110010</td></tr><tr><td><b>BuildingMaterials</b></td><td>10120010</td></tr><tr><td><b>Chemicals</b></td><td>10130010</td></tr><tr><td><b>SpecialtyChemicals</b></td><td>10130020</td></tr><tr><td><b>LumberAndWoodProduction</b></td><td>10140010</td></tr><tr><td><b>PaperAndPaperProducts</b></td><td>10140020</td></tr><tr><td><b>Aluminum</b></td><td>10150010</td></tr><tr><td><b>Copper</b></td><td>10150020</td></tr><tr><td><b>OtherIndustrialMetalsAndMining</b></td><td>10150030</td></tr><tr><td><b>Gold</b></td><td>10150040</td></tr><tr><td><b>Silver</b></td><td>10150050</td></tr><tr><td><b>OtherPreciousMetalsAndMining</b></td><td>10150060</td></tr><tr><td><b>CokingCoal</b></td><td>10160010</td></tr><tr><td><b>Steel</b></td><td>10160020</td></tr><tr><td><b>AutoAndTruckDealerships</b></td><td>10200010</td></tr><tr><td><b>AutoManufacturers</b></td><td>10200020</td></tr><tr><td><b>AutoParts</b></td><td>10200030</td></tr><tr><td><b>RecreationalVehicles</b></td><td>10200040</td></tr><tr><td><b>Furnishings</b></td><td>10220010</td></tr><tr><td><b>FixturesAndAppliances</b></td><td>10220010</td></tr><tr><td><b>ResidentialConstruction</b></td><td>10230010</td></tr><tr><td><b>TextileManufacturing</b></td><td>10240010</td></tr><tr><td><b>ApparelManufacturing</b></td><td>10240020</td></tr><tr><td><b>FootwearAndAccessories</b></td><td>10240030</td></tr><tr><td><b>PackagingAndContainers</b></td><td>10250010</td></tr><tr><td><b>PersonalServices</b></td><td>10260010</td></tr><tr><td><b>Restaurants</b></td><td>10270010</td></tr><tr><td><b>ApparelRetail</b></td><td>10280010</td></tr><tr><td><b>DepartmentStores</b></td><td>10280020</td></tr><tr><td><b>HomeImprovementRetail</b></td><td>10280030</td></tr><tr><td><b>LuxuryGoods</b></td><td>10280040</td></tr><tr><td><b>InternetRetail</b></td><td>10280050</td></tr><tr><td><b>SpecialtyRetail</b></td><td>10280060</td></tr><tr><td><b>Gambling</b></td><td>10290010</td></tr><tr><td><b>Leisure</b></td><td>10290020</td></tr><tr><td><b>Lodging</b></td><td>10290030</td></tr><tr><td><b>ResortsAndCasinos</b></td><td>10290040</td></tr><tr><td><b>TravelServices</b></td><td>10290050</td></tr><tr><td><b>AssetManagement</b></td><td>10310010</td></tr><tr><td><b>BanksDiversified</b></td><td>10320010</td></tr><tr><td><b>BanksRegional</b></td><td>10320020</td></tr><tr><td><b>MortgageFinance</b></td><td>10320030</td></tr><tr><td><b>CapitalMarkets</b></td><td>10330010</td></tr><tr><td><b>FinancialDataAndStockExchanges</b></td><td>10330020</td></tr><tr><td><b>InsuranceLife</b></td><td>10340010</td></tr><tr><td><b>InsurancePropertyAndCasualty</b></td><td>10340020</td></tr><tr><td><b>InsuranceReinsurance</b></td><td>10340030</td></tr><tr><td><b>InsuranceSpecialty</b></td><td>10340040</td></tr><tr><td><b>InsuranceBrokers</b></td><td>10340050</td></tr><tr><td><b>InsuranceDiversified</b></td><td>10340060</td></tr><tr><td><b>ShellCompanies</b></td><td>10350010</td></tr><tr><td><b>FinancialConglomerates</b></td><td>10350020</td></tr><tr><td><b>CreditServices</b></td><td>10360010</td></tr><tr><td><b>RealEstateDevelopment</b></td><td>10410010</td></tr><tr><td><b>RealEstateServices</b></td><td>10410020</td></tr><tr><td><b>RealEstateDiversified</b></td><td>10410030</td></tr><tr><td><b>REITHealthcareFacilities</b></td><td>10420010</td></tr><tr><td><b>REITHotelAndMotel</b></td><td>10420020</td></tr><tr><td><b>REITIndustrial</b></td><td>10420030</td></tr><tr><td><b>REITOffice</b></td><td>10420040</td></tr><tr><td><b>REITResidential</b></td><td>10420050</td></tr><tr><td><b>REITRetail</b></td><td>10420060</td></tr><tr><td><b>REITMortgage</b></td><td>10420070</td></tr><tr><td><b>REITSpecialty</b></td><td>10420080</td></tr><tr><td><b>REITDiversified</b></td><td>10420090</td></tr><tr><td><b>BeveragesBrewers</b></td><td>20510010</td></tr><tr><td><b>BeveragesWineriesAndDistilleries</b></td><td>20510020</td></tr><tr><td><b>BeveragesNonAlcoholic</b></td><td>20520010</td></tr><tr><td><b>Confectioners</b></td><td>20525010</td></tr><tr><td><b>FarmProducts</b></td><td>20525020</td></tr><tr><td><b>HouseholdAndPersonalProducts</b></td><td>20525030</td></tr><tr><td><b>PackagedFoods</b></td><td>20525040</td></tr><tr><td><b>EducationAndTrainingServices</b></td><td>20540010</td></tr><tr><td><b>DiscountStores</b></td><td>20550010</td></tr><tr><td><b>FoodDistribution</b></td><td>20550020</td></tr><tr><td><b>GroceryStores</b></td><td>20550030</td></tr><tr><td><b>Tobacco</b></td><td>20560010</td></tr><tr><td><b>Biotechnology</b></td><td>20610010</td></tr><tr><td><b>DrugManufacturersGeneral</b></td><td>20620010</td></tr><tr><td><b>DrugManufacturersSpecialtyAndGeneric</b></td><td>20620020</td></tr><tr><td><b>HealthcarePlans</b></td><td>20630010</td></tr><tr><td><b>MedicalCareFacilities</b></td><td>20645010</td></tr><tr><td><b>PharmaceuticalRetailers</b></td><td>20645020</td></tr><tr><td><b>HealthInformationServices</b></td><td>20645030</td></tr><tr><td><b>MedicalDevices</b></td><td>20650010</td></tr><tr><td><b>MedicalInstrumentsAndSupplies</b></td><td>20650020</td></tr><tr><td><b>DiagnosticsAndResearch</b></td><td>20660010</td></tr><tr><td><b>MedicalDistribution</b></td><td>20670010</td></tr><tr><td><b>UtilitiesIndependentPowerProducers</b></td><td>20710010</td></tr><tr><td><b>UtilitiesRenewable</b></td><td>20710020</td></tr><tr><td><b>UtilitiesRegulatedWater</b></td><td>20720010</td></tr><tr><td><b>UtilitiesRegulatedElectric</b></td><td>20720020</td></tr><tr><td><b>UtilitiesRegulatedGas</b></td><td>20720030</td></tr><tr><td><b>UtilitiesDiversified</b></td><td>20720040</td></tr><tr><td><b>TelecomServices</b></td><td>30810010</td></tr><tr><td><b>AdvertisingAgencies</b></td><td>30820010</td></tr><tr><td><b>Publishing</b></td><td>30820020</td></tr><tr><td><b>Broadcasting</b></td><td>30820030</td></tr><tr><td><b>Entertainment</b></td><td>30820040</td></tr><tr><td><b>InternetContentAndInformation</b></td><td>30830010</td></tr><tr><td><b>ElectronicGamingAndMultimedia</b></td><td>30830020</td></tr><tr><td><b>OilAndGasDrilling</b></td><td>30910010</td></tr><tr><td><b>OilAndGasEAndP</b></td><td>30910020</td></tr><tr><td><b>OilAndGasIntegrated</b></td><td>30910030</td></tr><tr><td><b>OilAndGasMidstream</b></td><td>30910040</td></tr><tr><td><b>OilAndGasRefiningAndMarketing</b></td><td>30910050</td></tr><tr><td><b>OilAndGasEquipmentAndServices</b></td><td>30910060</td></tr><tr><td><b>ThermalCoal</b></td><td>30920010</td></tr><tr><td><b>Uranium</b></td><td>30920020</td></tr><tr><td><b>AerospaceAndDefense</b></td><td>31010010</td></tr><tr><td><b>SpecialtyBusinessServices</b></td><td>31020010</td></tr><tr><td><b>ConsultingServices</b></td><td>31020020</td></tr><tr><td><b>RentalAndLeasingServices</b></td><td>31020030</td></tr><tr><td><b>SecurityAndProtectionServices</b></td><td>31020040</td></tr><tr><td><b>StaffingAndEmploymentServices</b></td><td>31020050</td></tr><tr><td><b>Conglomerates</b></td><td>31030010</td></tr><tr><td><b>EngineeringAndConstruction</b></td><td>31040010</td></tr><tr><td><b>InfrastructureOperations</b></td><td>31040020</td></tr><tr><td><b>BuildingProductsAndEquipment</b></td><td>31040030</td></tr><tr><td><b>FarmAndHeavyConstructionMachinery</b></td><td>31050010</td></tr><tr><td><b>IndustrialDistribution</b></td><td>31060010</td></tr><tr><td><b>BusinessEquipmentAndSupplies</b></td><td>31070010</td></tr><tr><td><b>SpecialtyIndustrialMachinery</b></td><td>31070020</td></tr><tr><td><b>MetalFabrication</b></td><td>31070030</td></tr><tr><td><b>PollutionAndTreatmentControls</b></td><td>31070040</td></tr><tr><td><b>ToolsAndAccessories</b></td><td>31070050</td></tr><tr><td><b>ElectricalEquipmentAndParts</b></td><td>31070060</td></tr><tr><td><b>AirportsAndAirServices</b></td><td>31080010</td></tr><tr><td><b>Airlines</b></td><td>31080020</td></tr><tr><td><b>Railroads</b></td><td>31080030</td></tr><tr><td><b>MarineShipping</b></td><td>31080040</td></tr><tr><td><b>Trucking</b></td><td>31080050</td></tr><tr><td><b>IntegratedFreightAndLogistics</b></td><td>31080060</td></tr><tr><td><b>WasteManagement</b></td><td>31090010</td></tr><tr><td><b>InformationTechnologyServices</b></td><td>31110010</td></tr><tr><td><b>SoftwareApplication</b></td><td>31110020</td></tr><tr><td><b>SoftwareInfrastructure</b></td><td>31110030</td></tr><tr><td><b>CommunicationEquipment</b></td><td>31120010</td></tr><tr><td><b>ComputerHardware</b></td><td>31120020</td></tr><tr><td><b>ConsumerElectronics</b></td><td>31120030</td></tr><tr><td><b>ElectronicComponents</b></td><td>31120040</td></tr><tr><td><b>ElectronicsAndComputerDistribution</b></td><td>31120050</td></tr><tr><td><b>ScientificAndTechnicalInstruments</b></td><td>31120060</td></tr><tr><td><b>SemiconductorEquipmentAndMaterials</b></td><td>31130010</td></tr><tr><td><b>Semiconductors</b></td><td>31130020</td></tr><tr><td><b>Solar</b></td><td>31130030</td></tr></tbody></table><h4>Exchange ID Values</h4>\n<p>Exchange ID is mapped to represent the exchange of the equity listed in. They are accessed with the PrimaryExchangeID property.</p>\n<div class=\"section-example-container\">\n    <pre><code class=\"language-cs\">filteredFine = fine.Where(x =&gt; x.CompanyReference.PrimaryExchangeID == \"NAS\");</code></pre>\n    <pre><code class=\"language-python\">filtered_fine = [x for x in fine if x.CompanyReference.PrimaryExchangeID == \"NAS\"]</code></pre>\n</div>\n<p>The exchanges are represented by the following string values:</p>\n<table class=\"table qc-table table-reflow\"><thead><tr><th>String Representation</th><th>Exchange</th></tr></thead><tbody><tr><td>NYS</td><td>New York Stock Exchange (NYSE)</td></tr><tr><td>NAS</td><td>NASDAQ</td></tr><tr><td>ASE</td><td>American Stock Exchange (AMEX)</td></tr><tr><td>TSE</td><td>Tokyo Stock Exchange</td></tr><tr><td>AMS</td><td>Amsterdam Internet Exchange</td></tr><tr><td>SGO</td><td>Santiago Stock Exchange</td></tr><tr><td>XMAD</td><td>Madrid Stock Exchange</td></tr><tr><td>ASX</td><td>Australian Securities Exchange</td></tr><tr><td>BVMF</td><td>B3 (stock exchange)</td></tr><tr><td>LON</td><td>London Stock Exchange</td></tr><tr><td>TKS</td><td>Istanbul Stock Exchange Settlement and Custody Bank</td></tr><tr><td>SHG</td><td>Shanghai Exchange</td></tr><tr><td>LIM</td><td>Lima Stock Exchange</td></tr><tr><td>FRA</td><td>Frankfurt Stock Exchange</td></tr><tr><td>JSE</td><td>Johannesburg Stock Exchange</td></tr><tr><td>MIL</td><td>Milan Stock Exchange</td></tr><tr><td>TAE</td><td>Tel Aviv Stock Exchange</td></tr><tr><td>STO</td><td>Stockholm Stock Exchange</td></tr><tr><td>ETR</td><td>Deutsche Boerse Xetra Core</td></tr><tr><td>PAR</td><td>Paris Stock Exchange</td></tr><tr><td>BUE</td><td>Buenos Aires Stock Exchange</td></tr><tr><td>KRX</td><td>Korea Exchange</td></tr><tr><td>SWX</td><td>SIX Swiss Exchange</td></tr><tr><td>PINX</td><td>Pink Sheets (OTC)</td></tr><tr><td>CSE</td><td>Canadian Securities Exchange</td></tr><tr><td>PHS</td><td>Philippine Stock Exchange</td></tr><tr><td>MEX</td><td>Mexican Stock Exchange</td></tr><tr><td>TAI</td><td>Taiwan Stock Exchange</td></tr><tr><td>IDX</td><td>Indonesia Stock Exchange</td></tr><tr><td>OSL</td><td>Oslo Stock Exchange</td></tr><tr><td>BOG</td><td>Colombia Stock Exchange</td></tr><tr><td>NSE</td><td>National Stock Exchange of India</td></tr><tr><td>HEL</td><td>Nasdaq Helsinki</td></tr><tr><td>MISX</td><td>Moscow Exchange</td></tr><tr><td>HKG</td><td>Hong Kong Stock Exchange</td></tr><tr><td>IST</td><td>Istanbul Stock Exchange</td></tr><tr><td>BOM</td><td>Bombay Stock Exchange</td></tr><tr><td>TSX</td><td>Toronto Stock Exchange</td></tr><tr><td>BRU</td><td>Brussels Stock Exchange</td></tr><tr><td>BATS</td><td>BATS Global Markets</td></tr><tr><td>ARCX</td><td>NYSE Arca</td></tr><tr><td>GREY</td><td>Grey Market (OTC)</td></tr><tr><td>DUS</td><td>Dusseldorf Stock Exchange</td></tr><tr><td>BER</td><td>Berlin Stock Exchange</td></tr><tr><td>ROCO</td><td>Taipei Exchange</td></tr><tr><td>CNQ</td><td>Canadian Trading and Quotation System Inc.</td></tr><tr><td>BSP</td><td>Bangko Sentral ng Pilipinas</td></tr><tr><td>NEOE</td><td>NEO Exchange</td></tr></tbody></table>"
      }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "https://www.quantconnect.com/market",
    "examples": [
      {
        "id": 615,
        "master_product_id": 41,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we select the 100 stocks with the greatest dollar volume traded. We then reduce the universe to the 10 securities with the greatest PE ratio and create an equal-weighted portfolio.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\nclass MorningStarDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 7, 1)\n        self.SetCash(100000) \n        \n        # Requesting data\n        self.AddUniverse(self.SelectCoarse, self.SelectFine)\n        self.num_coarse_symbols = 100\n        self.num_fine_symbols = 10\n        self.UniverseSettings.Resolution = Resolution.Daily\n        \n        \n    def SelectCoarse(self, coarse):\n        selected = [c for c in coarse if c.HasFundamentalData]\n        sorted_by_dollar_volume = sorted(selected, key=lambda c: c.DollarVolume, reverse=True)\n        return [ c.Symbol for c in sorted_by_dollar_volume[:self.num_coarse_symbols] ]\n        \n        \n    def SelectFine(self, fine):\n        sorted_by_pe_ratio = sorted(fine, key=lambda f: f.ValuationRatios.PERatio, reverse=True)\n        return [ f.Symbol for f in sorted_by_pe_ratio[:self.num_fine_symbols] ]\n        \n\n    def OnData(self, data):\n        # if we have no changes, do nothing\n        if self._changes is None: return\n\n        # liquidate removed securities\n        for security in self._changes.RemovedSecurities:\n            if security.Invested:\n                self.Liquidate(security.Symbol)\n\n        # we want 1/N allocation in each security in our universe\n        for security in self._changes.AddedSecurities:\n            self.SetHoldings(security.Symbol, 1 / self.num_fine_symbols)\n\n        self._changes = None\n           \n           \n    def OnSecuritiesChanged(self, changes):\n        self._changes = changes\n        \n        for security in changes.AddedSecurities:\n            # Historical data\n            history = self.History(security.Symbol, 7, Resolution.Daily)\n            self.Debug(f\"We got {len(history)} from our history request for {security.Symbol}\")</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class MorningStarDataAlgorithm : QCAlgorithm\n    {\n        private int _numCoarseSymbols = 100;\n        private int _numFineSymbols = 10;\n        private SecurityChanges _changes = SecurityChanges.None;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 7, 1);\n            SetCash(100000);\n            \n            // Requesting data\n            AddUniverse(SelectCoarse, SelectFine);\n            UniverseSettings.Resolution = Resolution.Daily;\n        }\n\n        public IEnumerable&lt;Symbol&gt; SelectCoarse(IEnumerable&lt;CoarseFundamental&gt; coarse)\n        {\n            return coarse.OrderByDescending(x =&gt; x.DollarVolume).Take(_numCoarseSymbols).Select(x =&gt; x.Symbol);\n        }\n        \n        public IEnumerable&lt;Symbol&gt; SelectFine(IEnumerable&lt;FineFundamental&gt; fine)\n        {\n            return fine.OrderByDescending(x =&gt; x.ValuationRatios.PERatio).Take(_numFineSymbols).Select(x =&gt; x.Symbol);\n        }\n\n        public override void OnData(Slice data)\n        {\n            // if we have no changes, do nothing\n            if (_changes == SecurityChanges.None) return;\n\n            // liquidate removed securities\n            foreach (var security in _changes.RemovedSecurities)\n            {\n                if (security.Invested)\n                {\n                    Liquidate(security.Symbol);\n                }\n            }\n\n            // we want 1/N allocation in each security in our universe\n            foreach (var security in _changes.AddedSecurities)\n            {\n                SetHoldings(security.Symbol, 1m / _numFineSymbols);\n            }\n\n            _changes = SecurityChanges.None;\n        }\n        \n        public override void OnSecuritiesChanged(SecurityChanges changes)\n        {\n            _changes = changes;\n\n\n            foreach (var security in changes.AddedSecurities)\n            {\n                // Historical data\n                var history = History(security.Symbol, 7, Resolution.Daily);\n                Debug($\"We got {history.Count()} from our history request for {security.Symbol}\");\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-07-12 20:27:48"
      },
      {
        "id": 617,
        "master_product_id": 41,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this example, we select the 100 stocks with the greatest dollar volume traded. We then reduce the universe to the 10 securities with the greatest PE ratio and create an equal-weighted portfolio.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass MorningStarDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 7, 1)\n        self.SetCash(100000) \n        \n        # Requesting data\n        self.AddUniverseSelection(\n           FineFundamentalUniverseSelectionModel(self.SelectCoarse, self.SelectFine)\n        )\n        self.num_coarse_symbols = 100\n        self.num_fine_symbols = 10\n        self.UniverseSettings.Resolution = Resolution.Daily\n        \n        self.SetAlpha(ConstantAlphaModel(InsightType.Price, InsightDirection.Up, timedelta(1)))\n        \n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n         \n        self.AddRiskManagement(NullRiskManagementModel())\n        \n        self.SetExecution(ImmediateExecutionModel())\n        \n        \n    def SelectCoarse(self, coarse):\n        selected = [c for c in coarse if c.HasFundamentalData]\n        sorted_by_dollar_volume = sorted(selected, key=lambda c: c.DollarVolume, reverse=True)\n        return [ c.Symbol for c in sorted_by_dollar_volume[:self.num_coarse_symbols] ]\n        \n        \n    def SelectFine(self, fine):\n        sorted_by_pe_ratio = sorted(fine, key=lambda f: f.ValuationRatios.PERatio, reverse=True)\n        return [ f.Symbol for f in sorted_by_pe_ratio[:self.num_fine_symbols] ]</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class MorningStarDataAlgorithm : QCAlgorithm\n    {\n        private int _numCoarseSymbols = 100;\n        private int _numFineSymbols = 10;\n        private SecurityChanges _changes = SecurityChanges.None;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 7, 1);\n            SetCash(100000);\n            \n            AddUniverseSelection(new FineFundamentalUniverseSelectionModel(SelectCoarse, SelectFine));\n            UniverseSettings.Resolution = Resolution.Daily;\n            \n            SetAlpha(new ConstantAlphaModel(InsightType.Price, InsightDirection.Up, TimeSpan.FromDays(1)));\n            \n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n            \n            AddRiskManagement(new NullRiskManagementModel());\n            \n            SetExecution(new ImmediateExecutionModel());\n        }\n\n        public IEnumerable&lt;Symbol&gt; SelectCoarse(IEnumerable&lt;CoarseFundamental&gt; coarse)\n        {\n            return coarse.OrderByDescending(x =&gt; x.DollarVolume).Take(_numCoarseSymbols).Select(x =&gt; x.Symbol);\n        }\n        \n        public IEnumerable&lt;Symbol&gt; SelectFine(IEnumerable&lt;FineFundamental&gt; fine)\n        {\n            return fine.OrderByDescending(x =&gt; x.ValuationRatios.PERatio).Take(_numFineSymbols).Select(x =&gt; x.Symbol);\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-07-12 20:27:57"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 41,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>US Fundamental Data is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>  \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>US Fundamental Data is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 115,
        "name": "US Fundamental - Cloud Access",
        "description": "<p>Cloud access to Morning Star US Fundamental and Classification data since January 1998, available for research and universe selection.</p>\n<ul><li>Clean, rich dataset covering 1100 properties</li>\n    <li>Daily updates to key indicators</li> \n    <li>Institutional calibre data</li>\n</ul>",
        "shortDescription": "US Fundamental Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      }
    ],
    "headerColor": "4eff2b"
  },
  {
    "name": "Twitter Followers",
    "vendorName": "Quiver Quantitative",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/quiver-logo.png",
    "landingFileName": "quiver-quantitative-twitter-followers.html",
    "url": "/datasets/quiver-quantitative-twitter-followers",
    "short_description": "Corporate twitter follower growth over the preceding day, week, and month for use in socially based investment strategies.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The Twitter Followers dataset by Quiver Quantitative tracks the number of followers on the official Twitter pages of US-listed companies. The data covers 2,000 equities, starts in May 2020, and is delivered on a daily frequency. This dataset is created by scraping the number of Twitter followers from the official Twitter page of the security.</p>\n\n<p>This dataset depends on the <a href=\"https://www.quantconnect.com/datasets/quantconnect-us-equity-security-master\">US Equity Security Master</a> dataset because the US Equity Security Master dataset contains information on splits, dividends, and symbol changes.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p><a href=\"https://www.quiverquant.com/\">Quiver Quantitative</a> was founded by two college students in February 2020 with the goal of bridging the information gap between Wall Street and non-professional investors. Quiver allows retail investors to tap into the power of big data and have access to actionable, easy to interpret data that hasn\u2019t already been dissected by Wall Street.</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">aapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nquiverQuantTwitterFollowers = self.AddData(QuiverQuantTwitterFollowers, aapl).Symbol\n\nself.AddUniverse(QuiverQuantTwitterFollowersUniverse, \"QuiverQuantTwitterFollowersUniverse\", Resolution.Daily, self.UniverseSelectionMethod)</code></pre>\n<pre><code class=\"language-cs\">var aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\nvar quiverQuantTwitterFollowers = AddData&lt;QuiverQuantTwitterFollowers&gt;(aapl).Symbol;\n\nAddUniverse&lt;QuiverQuantTwitterFollowersUniverse&gt;(\"QuiverQuantTwitterFollowersUniverse\", Resolution.Daily, UniverseSelectionMethod);</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>May 2020</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>2,000 US Equities</td>\n        </tr><tr><td>Data Density</td>\n            <td>Sparse</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>Chicago</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe Quiver Quantitative Twitter Followers dataset enables researchers to create strategies using the number of Twitter followers for companies. Examples include:\n</p>\n<ul><li>Trading securities that are on a upward/downward trend for number of followers</li>\n<li>Trading the security that has the highest/lowest increase in followers on a given day</li>\n<li>Trading securities with big changes in their follower count, prices, and volume</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_635f264bbb281ceaff0b3e77398af127.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Twitter Followers dataset provides QuiverQuantTwitterFollowers and QuiverQuantTwitterFollowersUniverse objects.</p>\n\n<h4>QuiverQuantTwitterFollowers Attributes</h4>\n<p>QuiverQuantTwitterFollowers objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.QuiverQuantTwitterFollowers\"></div>\n\n<h4>QuiverQuantTwitterFollowersUniverse Attributes</h4>\n<p>QuiverQuantTwitterFollowersUniverse objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.QuiverQuantTwitterFollowersUniverse\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add QuiverQuantTwitterFollowers data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from QuantConnect.DataSource import *\nclass QuiverQuantTwitterFollowersDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2021, 1, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        aapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        quiverQuantTwitterFollowers = self.AddData(QuiverQuantTwitterFollowers, aapl).Symbol</code></pre>\n<pre><code class=\"language-cs\">using QuantConnect.DataSource;\nnamespace QuantConnect\n{\n    public class QuiverQuantTwitterFollowersDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2021, 1, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n            var aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            var quiverQuantTwitterFollowers = AddData&lt;QuiverQuantTwitterFollowers&gt;(aapl).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(QuiverQuantTwitterFollowers)\n    for kvp in points:\n        Log(f\u2019Symbol: {kvp.Key} - Followers: {kvp.Value.Followers} - Day Change: {kvp.Value.DayPercentChange}\u2019)\n</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{    \n        public override void OnData(Slice data)\n        {\n            var points = data.Get&lt;QuiverQuantTwitterFollowers&gt;();\n            foreach (var point in points.Values)\n            {\n                Log($\"Symbol: {kvp.Key} - Followers: {kvp.Value.Followers} - Day Change: {kvp.Value.DayPercentChange}\");\n            }\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical custom data in your algorithm using the custom data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no custom data in the period you request, the history result will be empty. The following example gets the historical data for Twitter followers by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(QuiverQuantTwitterFollowers, quiverQuantTwitterFollowers, 60, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History&lt;QuiverQuantTwitterFollowers&gt;(quiverQuantTwitterFollowers, 60, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Universe Selection",
        "content": "<p>You can add an universe to select Equities based on QuiverQuantTwitterFollowers daily data.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\ndef Initialize(self):\n    # add a custom universe data source (defaults to usa-equity)\n    self.AddUniverse(QuiverQuantTwitterFollowersUniverse, \"QuiverQuantTwitterFollowersUniverse\", Resolution.Daily, self.UniverseSelection)\n        \ndef UniverseSelection(self, alt_coarse):\n    for datum in alt_coarse:\n        self.Log(f\"{datum.Symbol},{datum.Followers},{datum.DayPercentChange},{datum.WeekPercentChange}\")\n        \n    # define our selection criteria\n    return [d.Symbol for d in alt_coarse\\\n                if d.Followers &gt; 200000 \\\n                and d.WeekPercentChange &gt; 0]</code></pre>\n<pre><code class=\"language-cs\">public override void Initialize()\n{\n    // add a custom universe data source (defaults to usa-equity)\n    AddUniverse(\"QuiverQuantTwitterFollowersUniverse\", Resolution.Daily, altCoarse =&gt;\n    {\n        foreach (var datum in altCoarse)\n        {\n            Log($\"{datum.Symbol},{datum.Followers},{datum.DayPercentChange},{datum.WeekPercentChange}\");\n        }\n\n        // define our selection criteria\n        return from d in altCoarse\n            where d.Followers &gt; 200000 &amp;&amp; d.WeekPercentChange &gt; 0m \n            select d.Symbol;\n    });\n}</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Twitter Followers dataset provides QuiverQuantTwitterFollowers and QuiverQuantTwitterFollowersUniverse objects.</p>\n\n<h4>QuiverQuantTwitterFollowers Attributes</h4>\n<p>QuiverQuantTwitterFollowers objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.QuiverQuantTwitterFollowers\"></div>\n\n<h4>QuiverQuantTwitterFollowersUniverse Attributes</h4>\n<p>QuiverQuantTwitterFollowersUniverse objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.QuiverQuantTwitterFollowersUniverse\"></div>"
      }
    ],
    "priceCTA": "From $5/User/mo\n",
    "vendorWebsite": "https://www.quantconnect.com/market",
    "examples": [
      {
        "id": 631,
        "master_product_id": 42,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this algorithm, we form an equal-weighted portfolio consisting of a selected universe based on Twitter followers data.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass QuiverTwitterFollowersDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 5, 1)\n        self.SetEndDate(2020, 7, 1)\n        self.SetCash(100000)\n        \n        self.UniverseSettings.Resolution = Resolution.Daily\n\n        # add a custom universe data source (defaults to usa-equity)\n        self.AddUniverse(QuiverQuantTwitterFollowersUniverse, \"QuiverQuantTwitterFollowersUniverse\", Resolution.Daily, self.UniverseSelection)\n        \n    def UniverseSelection(self, alt_coarse):\n        for datum in alt_coarse:\n            self.Log(f\"{datum.Symbol},{datum.Followers},{datum.DayPercentChange},{datum.WeekPercentChange}\")\n        \n        # define our selection criteria\n        return [d.Symbol for d in alt_coarse \\\n                    if d.Followers &gt; 200000 \\\n                    and d.WeekPercentChange &gt; 0]    \n\n    def OnData(self, data):\n        points = data.Get(QuiverQuantTwitterFollowers)\n            \n        # Get all (symbol, followers) pair\n        number = [(point.Symbol.Underlying, point.Followers) for point in points.Values]\n        \n        # sort the list to get top 5 most followed companies\n        sort_number = sorted(number, key=lambda x: x[1], reverse=True)[:5]\n        selected_symbols = [x[0] for x in sort_number]\n            \n        # We liquidate the stocks that fall out of top 5 most followed companies if invested previously\n        for symbol in self.Portfolio.Keys:\n            if self.Portfolio[symbol].Invested and symbol not in selected_symbols:\n                self.Liquidate(symbol)\n\n        # set equal holdings for the 5 selected\n        for symbol in selected_symbols:\n            self.SetHoldings(symbol, 1/len(selected_symbols))\n\n    def OnSecuritiesChanged(self, changes):\n        for added in changes.AddedSecurities:\n            symbol = added.Symbol\n            self.AddData(QuiverQuantTwitterFollowers, symbol).Symbol\n\n            # Historical data\n            history = self.History(QuiverQuantTwitterFollowers, symbol, 60, Resolution.Daily)\n            self.Debug(f\"We got {len(history.index)} items from our history request\")\n</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class QuiverQuantTwitterFollowersDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2020, 5, 1);\n            SetEndDate(2020, 7, 1);\n            SetCash(100000);\n            \n            // add a custom universe data source (defaults to usa-equity)\n            AddUniverse&lt;QuiverQuantTwitterFollowersUniverse&gt;(\"QuiverQuantTwitterFollowersUniverse\", Resolution.Daily, altCoarse =&gt;\n            {\n                foreach (var datum in altCoarse)\n                {\n                    Log($\"{datum.Symbol},{datum.Followers},{datum.DayPercentChange},{datum.WeekPercentChange}\");\n                }\n\n                // define our selection criteria\n                return from d in altCoarse\n                    where d.Followers &gt; 200000 &amp;&amp; d.WeekPercentChange &gt; 0m \n                    select d.Symbol;\n            });\n        }\n\n        public override void OnData(Slice data)\n        {\n            var points = data.Get&lt;QuiverQuantTwitterFollowers&gt;();\n            \n            // Get top 5 most followed companies\n            var selected = (from s in points.Values\n                where (s.Followers != null)\n                orderby s.Followers descending\n                select s.Symbol.Underlying).Take(5).ToList();\n\n            // We liquidate the stocks that fall out of top 5 most followed companies if invested previously            \n            foreach (var symbol in Portfolio.Keys)\n            {\n                if (!selected.Contains(symbol) &amp;&amp; Portfolio[symbol].Invested)\n                {\n                    Liquidate(symbol);\n                }\n            }\n            \n             // Set equal holdings for the 5 selected          \n             foreach (var symbol in selected)\n            {\n                SetHoldings(symbol, 1m/selected.Count);\n            }\n        }\n\n        public override void OnSecuritiesChanged(SecurityChange changes)\n        {\n            foreach (var added in changes.AddedSecurities)\n            {\n                var symbol = added.Symbol;                \n                AddData&lt;QuiverQuantTwitterFollowers&gt;(symbol);\n\n                // Historical data\n                var history = History&lt;QuiverQuantTwitterFollowers&gt;(symbol, 60, Resolution.Daily);\n                Debug($\"We got {history.Count()} items from our history request\");\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-05-10 11:25:35"
      },
      {
        "id": 633,
        "master_product_id": 42,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this algorithm, we form an equal-weighted portfolio based on Twitter followers data.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\"> \nfrom QuantConnect.DataSource import QuiverQuantTwitterFollowers\n\nclass QuiverTwitterFollowersDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 5, 1)\n        self.SetEndDate(2020, 7, 1)\n        self.SetCash(100000)\n\n        self.UniverseSettings.Resolution = Resolution.Daily\n\n        self.AddUniverse(QuiverQuantTwitterFollowersUniverse, \"QuiverQuantTwitterFollowersUniverse\", Resolution.Daily, self.UniverseSelection)\n        \n        self.AddAlpha(TwitterFollowersAlphaModel())\n        \n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n        \n        self.AddRiskManagement(NullRiskManagementModel())\n        \n        self.SetExecution(ImmediateExecutionModel())\n\n    def UniverseSelection(self, alt_coarse):\n        for datum in alt_coarse:\n            self.Log(f\"{datum.Symbol},{datum.Followers},{datum.DayPercentChange},{datum.WeekPercentChange}\")\n        \n        # define our selection criteria\n        return [d.Symbol for d in alt_coarse \\\n                    if d.Followers &gt; 200000 \\\n                    and d.WeekPercentChange &gt; 0]\n        \n\nclass TwitterFollowersAlphaModel(AlphaModel):\n    \n    symbol_data_by_symbol = {}\n\n    def Update(self, algorithm, data):\n\n        points = data.Get(QuiverQuantTwitterFollowers)\n        \n        # sort the dict to get top 5 most followed companies    \n        sorted_by_followers = sorted(points.Values, key=lambda x: x.Followers, reverse=True)[:5]\n\n        # emit insight for the 5 selected\n        return [Insight.Price(x.Symbol.Underlying, Expiry.EndOfDay, InsightDirection.Up)\n            for x in sorted_by_followers]\n\n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            symbol = security.Symbol\n            self.symbol_data_by_symbol[symbol] = SymbolData(algorithm, symbol)\n        \n        for security in changes.RemovedSecurities:\n            symbol_data = self.symbol_data_by_symbol.pop(security.Symbol, None)\n            if symbol_data:\n                symbol_data.dispose()\n\n\nclass SymbolData:\n\n    def __init__(self, algorithm, symbol):\n        self.algorithm = algorithm\n        \n        # Requesting data\n        self.quiver_tf_symbol = algorithm.AddData(QuiverQuantTwitterFollowers, symbol).Symbol\n        \n        # Historical data\n        history = algorithm.History(self.quiver_tf_symbol, 60, Resolution.Daily)\n        algorithm.Debug(f\"We got {len(history)} items from our history request for {symbol} Quiver TwitterFollowers data\")\n        \n    def dispose(self):\n        # Unsubscribe from the Quiver TwitterFollowers feed for this security\n        self.algorithm.RemoveSecurity(self.quiver_tf_symbol)</code></pre>\n<pre><code class=\"language-cs\"> \nusing QuantConnect.DataSource;\n\nnamespace QuantConnect\n{\n    public class QuiverTwitterFollowersDataAlgorithm : QCAlgorithm\n    { \n        public override void Initialize()\n        {\n            SetStartDate(2020, 5, 1);\n            SetEndDate(2020, 7, 1);\n            SetCash(100000);\n            \n            AddUniverse&lt;QuiverQuantTwitterFollowersUniverse&gt;(\"QuiverQuantTwitterFollowersUniverse\", Resolution.Daily, altCoarse =&gt;\n            {\n                foreach (var datum in altCoarse)\n                {\n                    Log($\"{datum.Symbol},{datum.Followers},{datum.DayPercentChange},{datum.WeekPercentChange}\");\n                }\n\n                // define our selection criteria\n                return from d in altCoarse\n                    where d.Followers &gt; 200000 &amp;&amp; d.WeekPercentChange &gt; 0m \n                    select d.Symbol;\n            });\n                \n            UniverseSettings.Resolution = Resolution.Daily;\n            \n            AddAlpha(new TwitterFollowersAlphaModel());\n            \n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n            \n            AddRiskManagement(new NullRiskManagementModel());\n            \n            SetExecution(new ImmediateExecutionModel());\n        }\n    }\n\n    public class TwitterFollowersAlphaModel : AlphaModel\n    {\n        private Dictionary&lt;Symbol, SymbolData&gt; _symbolDataBySymbol = new Dictionary&lt;Symbol, SymbolData&gt;();\n        \n        public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n        {\n            var insights = new List&lt;Insight&gt;();\n            \n            var points = data.Get&lt;QuiverQuantTwitterFollowers&gt;();\n            \n            var selected = (from value in points.Values\n                            where (value.Followers != null)\n                            orderby value.Followers descending\n                            select value.Symbol.Underlying).Take(5).ToList();\n            \n            // emit insight for the 5 selected\n            foreach(var symbol in selected)\n            {\n                insights.Add(Insight.Price(symbol, Expiry.EndOfDay, InsightDirection.Up));\n            }\n            return insights;\n        }\n\n        public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n        {\n            foreach (var security in changes.AddedSecurities)\n            {\n                var symbol = security.Symbol;\n                _symbolDataBySymbol.Add(symbol, new SymbolData(algorithm, symbol));\n            }\n\n            foreach (var security in changes.RemovedSecurities)\n            {\n                var symbol = security.Symbol;\n                if (_symbolDataBySymbol.ContainsKey(symbol))\n                {\n                    _symbolDataBySymbol[symbol].dispose();\n                    _symbolDataBySymbol.Remove(symbol);\n                }\n            }\n        }\n    }\n    \n    public class SymbolData\n    {\n        public Symbol _quiverTFSymbol;\n        private QCAlgorithm _algorithm;\n        \n        public SymbolData(QCAlgorithm algorithm, Symbol symbol)\n        {\n            _algorithm = algorithm;\n            \n            // Requesting data\n            _quiverTFSymbol = algorithm.AddData&lt;QuiverQuantTwitterFollowers&gt;(symbol).Symbol;\n            \n            // Historical data\n            var history = algorithm.History&lt;QuiverQuantTwitterFollowers&gt;(_quiverTFSymbol, 60, Resolution.Daily);\n            algorithm.Debug($\"We got {history.Count()} items from our history request for {symbol} Quiver TwitterFollowers data\");\n        }\n        \n        public void dispose()\n        {\n            // Unsubscribe from the Quiver TwitterFollowers feed for this security\n            _algorithm.RemoveSecurity(_quiverTFSymbol);\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-05-09 17:55:19"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 42,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>Twitter Followers is allowed to be used in the cloud \r\n            for personal and commercial projects with a subscription. The data is permissioned for use within \r\n            the licensed organization only</p><p>Subscription Required | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>Twitter Followers can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 10 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>Twitter Followers is allowed to be used for free by approved Alpha Stream authors with more than 3 \r\n                    Alpha Streams listed in the marketplace. The Quiver Quantitative will add on a charge of 2 Basis Points \r\n                    for the use of the data to the Alpha Stream reserve price.</p>\r\n                    <p>Free for Authors with 3+ Alphas | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 118,
        "name": "Quiver Quant Twitter Followers",
        "description": "<p>Download Twitter Follower historical records for your LEAN backtesting on premise with the LEAN CLI.</p>\n<ul><li>Ownership of the data for internal use</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "On Premise Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "10 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 117,
        "name": "Quiver Quant Twitter Followers",
        "description": "<p>Harness Twitter Follower data in the QuantConnect Cloud for your backtesting and live trading purposes.</p>\n<ul><li>Sort and filter stocks by social popularity</li>\n    <li>Detect early swells in followers</li>\n    <li>Track follower reductions for early shorts</li>\n</ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "$5/mo",
          "monthlyPrice": 5,
          "yearlyPrice": 55,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 55
      }
    ],
    "headerColor": "4eff2b"
  },
  {
    "name": "Estimize",
    "vendorName": "ExtractAlpha",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/extractalpha-logo.png",
    "landingFileName": "extractalpha-estimize.html",
    "url": "/datasets/extractalpha-estimize",
    "short_description": "Estimize by ExtractAlpha estimates companies\u2019 financials include EPS, revenues, industry-specific KPIs, and macroeconomic indicators by crowdsourcing from 100,000+ prediction.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The Estimize dataset by ExtractAlpha estimates the financials of companies, including EPS, revenues, industry-specific KPIs, macroeconomic indicators, and more. The data covers over 2,800 US-listed Equities\u2019 EPS/Revenue, over 200 company KPIs, 27 US and 55 international macroeconomic indicator datasets, and more. The data starts in January 2011 and is delivered on a daily frequency. This dataset is crowdsourced from a community of 100,000+ contributors via the data provider\u2019s web platform.\n</p>\n\n<p>This dataset depends on the <a href=\"https://www.quantconnect.com/datasets/quantconnect-us-equity-security-master\">US Equity Security Master</a> dataset because the US Equity Security Master dataset contains information on splits, dividends, and symbol changes.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\n<a href=\"https://extractalpha.com/\">ExtractAlpha</a> was founded by Vinesh Jha in 2013 with the goal of providing alternative data for investors. ExtractAlpha's rigorously researched data sets and quantitative stock selection models leverage unique sources and analytical techniques, allowing users to gain an investment edge.\n</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Requesting data:\nself.aapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nestimize_consensus_symbol = self.AddData(EstimizeConsensus, self.aapl).Symbol\nestimize_estimate_symbol = self.AddData(EstimizeEstimate, self.aapl).Symbol\nestimize_release_symbol = self.AddData(EstimizeRelease, self.aapl).Symbol\n</code></pre>\n<pre><code class=\"language-cs\">// Requesting data:\nvar aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\nvar estimizeConsensusSymbol = AddData&lt;EstimizeConsensus&gt;(aapl).Symbol;\nvar estimizeEstimateSymbol = AddData&lt;EstimizeEstimate&gt;(aapl).Symbol; \nvar estimizeReleaseSymbol = AddData&lt;EstimizeRelease&gt;(aapl).Symbol; </code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 2011</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>2,800 US Equities</td>\n        </tr><tr><td>Data Density</td>\n            <td>Sparse</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe Estimize dataset by ExtractAlpha enables researchers to estimates the financial data of a company more accurately for alpha. Examples include:\n</p>\n<ul><li>Better fundamental estimates for ML regression/classification.</li>\n<li>Arbitrage/Sentiment trading on market \u201csurprise\u201d from ordinary expectations based on the better expectation by the dataset.</li>\n<li>Use industry-specific KPIs for specific individual sectors\u2019 return prediction.</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_e8f2c8765ca86596f0f8c60cbb554a54.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Estimize dataset provides EstimizeConsensus, EstimizeEstimate, and EstimizeRelease objects.</p>\n\n<h4>EstimizeConsensus Attributes</h4>\n<p>EstimizeConsensus objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.EstimizeConsensus\"></div>\n\n<h4>EstimizeEstimate Attributes</h4>\n<p>EstimizeEstimate objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.EstimizeEstimate\"></div>\n\n<h4>EstimizeRelease Attributes</h4>\n<p>EstimizeRelease objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.EstimizeRelease\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add Estimize dataset by ExtractAlpha to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class ExtractAlphaEstimizeDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        self.aapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        estimize_consensus_symbol = self.AddData(EstimizeConsensus, self.aapl).Symbol\n        estimize_estimate_symbol = self.AddData(EstimizeEstimate, self.aapl).Symbol\n        estimize_release_symbol = self.AddData(EstimizeRelease, self.aapl).Symbol</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class ExtractAlphaEstimizeDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n\n            var aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            var estimizeConsensusSymbol = AddData&lt;EstimizeConsensus&gt;(aapl).Symbol;\n            var estimizeEstimateSymbol = AddData&lt;EstimizeEstimate&gt;(aapl).Symbol; \n            var estimizeReleaseSymbol = AddData&lt;EstimizeRelease&gt;(aapl).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    consensus = data.Get(EstimizeConsensus)\n    for symbol, value in consensus.items():\n        self.Log(f\"\"\"Symbol: {symbol} - Consensus Source: {value.Source},\n                  Consensus Type: {value.Type}, Mean: {value.Mean}, \n                  Value: {value.Value}, High: {value.High}, Low: {value.Low}, \n                  Standard Deviation: {value.StandardDeviation}, Count: {value.Count},\n                  Fiscal Year: {value.FiscalYear}, Fiscal Quarter: {value.FiscalQuarter}\"\"\")\n\n    estimate = data.Get(EstimizeEstimate)\n    for symbol, value in estimate.items():\n        self.Log(f\"\"\"Symbol: {symbol} - EPS: {value.Eps}, Revenue: {value.Revenue},\n                  Fiscal Year: {value.FiscalYear}, Fiscal Quarter: {value.FiscalQuarter},\n                  User Name: {value.UserName}, Analyst Id: {value.AnalystId}, \n                  Flagged: {value.Flagged}\"\"\")\n\n    release = data.Get(EstimizeRelease)\n    for symbol, value in release.items():\n        self.Log(f\"\"\"Symbol: {symbol} - EPS: {value.Eps}, Revenue: {value.Revenue},\n                  Fiscal Year: {value.FiscalYear}, Fiscal Quarter: {value.FiscalQuarter},\n                  Wall Street EPS Estimate: {value.WallStreetEpsEstimate}, \n                  Wall Street Revenue Estimate: {value.WallStreetRevenueEstimate},\n                  Consensus Street EPS Estimate: {value.ConsensusEpsEstimate}, \n                  Consensus Revenue Estimate: {value.ConsensusRevenueEstimate},\n                  Consensus Weighted Street EPS Estimate: {value.ConsensusWeightedEpsEstimate}, \n                  Consensus Weighted Revenue Estimate: {value.ConsensusWeightedRevenueEstimate}\"\"\")\n</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{    \n        public override void OnData(Slice data)\n        {\n            var consensus = data.Get&lt;EstimizeConsensus&gt;();\n            foreach (var kvp in consensus)\n            {\n                Log($@\"Symbol: {kvp.Key} - Consensus Source: {kvp.Value.Source},\n                      Consensus Type: {kvp.Value.Type}, Mean: {kvp.Value.Mean}, \n                      Value: {kvp.Value.Value}, High: {kvp.Value.High}, Low: {kvp.Value.Low}, \n                      Standard Deviation: {kvp.Value.StandardDeviation}, Count: {kvp.Value.Count},\n                      Fiscal Year: {kvp.Value.FiscalYear}, Fiscal Quarter: {kvp.Value.FiscalQuarter}\");\n            }\n            \n            var estimate = data.Get&lt;EstimizeEstimate&gt;();\n            foreach (var kvp in estimate)\n            {\n                Log($@\"Symbol: {kvp.Key} - EPS: {kvp.Value.Eps}, Revenue: {kvp.Value.Revenue},\n                      Fiscal Year: {kvp.Value.FiscalYear}, Fiscal Quarter: {kvp.Value.FiscalQuarter},\n                      User Name: {kvp.Value.UserName}, Analyst Id: {kvp.Value.AnalystId}, \n                      Flagged: {kvp.Value.Flagged}\");\n            }\n            \n            var release = data.Get&lt;EstimizeRelease&gt;();\n            foreach (var kvp in release)\n            {\n                Log($@\"Symbol: {kvp.Key} - EPS: {kvp.Value.Eps}, Revenue: {kvp.Value.Revenue},\n                      Fiscal Year: {kvp.Value.FiscalYear}, Fiscal Quarter: {kvp.Value.FiscalQuarter},\n                      Wall Street EPS Estimate: {kvp.Value.WallStreetEpsEstimate}, \n                      Wall Street Revenue Estimate: {kvp.Value.WallStreetRevenueEstimate},\n                      Consensus Street EPS Estimate: {kvp.Value.ConsensusEpsEstimate}, \n                      Consensus Revenue Estimate: {kvp.Value.ConsensusRevenueEstimate},\n                      Consensus Weighted Street EPS Estimate: {kvp.Value.ConsensusWeightedEpsEstimate}, \n                      Consensus Weighted Revenue Estimate: {kvp.Value.ConsensusWeightedRevenueEstimate}\");\n            }\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request the alternative dataset\u2019s historical data by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the alternative dataset\u2019s historical data by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nconsensus_history = self.History(estimize_consensus_symbol, 10, Resolution.Daily)\nestimate_history = self.History(estimize_estimate_symbol, 10, Resolution.Daily)\nrelease_history = self.History(estimize_release_symbol, 10, Resolution.Daily)\n\nhistory = self.History([estimize_consensus_symbol,\n                        estimize_estimate_symbol,\n                        estimize_release_symbol],\n                       10,\n                       Resolution.Daily)\n</code></pre>\n<pre><code class=\"language-cs\">\nvar consensusHistory = History(new[]{estimizeConsensusSymbol}, 10, Resolution.Daily);\nvar estimateHistory = History(new[]{estimizeEstimateSymbol}, 10, Resolution.Daily);\nvar releaseHistory = History(new[]{estimizeReleaseSymbol}, 10, Resolution.Daily);\n\nvar history = History(new[]{estimizeConsensusSymbol,\n                            estimizeEstimateSymbol,\n                            estimizeReleaseSymbol},\n                           10,\n                           Resolution.Daily)\n</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Estimize dataset provides EstimizeConsensus, EstimizeEstimate, and EstimizeRelease objects.</p>\n\n<h4>EstimizeConsensus Attributes</h4>\n<p>EstimizeConsensus objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.EstimizeConsensus\"></div>\n\n<h4>EstimizeEstimate Attributes</h4>\n<p>EstimizeEstimate objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.EstimizeEstimate\"></div>\n\n<h4>EstimizeRelease Attributes</h4>\n<p>EstimizeRelease objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.EstimizeRelease\"></div>"
      }
    ],
    "priceCTA": "$75/mo",
    "vendorWebsite": "https://www.quantconnect.com/market",
    "examples": [
      {
        "id": 666,
        "master_product_id": 44,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>This algorithm demonstrates the use of Estimize for shortlisting the best 10 and worst 10 stocks with the upcoming EPS estimation, such as building a monthly rebalancing equal-weighting dollar-neutral portfolio.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass ExtractAlphaEstimizeAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 12, 31)\n        self.SetCash(100000)\n        \n        self.time = datetime.min\n        \n        self.AddUniverse(self.MyCoarseFilterFunction)\n        self.UniverseSettings.Resolution = Resolution.Minute\n        \n    def MyCoarseFilterFunction(self, coarse):\n        sorted_by_dollar_volume = sorted([x for x in coarse if x.HasFundamentalData and x.Price &gt; 4], \n                                key=lambda x: x.DollarVolume, reverse=True)\n        selected = [x.Symbol for x in sorted_by_dollar_volume[:500]]\n        return selected\n\n    def OnData(self, data):\n        if self.time &gt; self.Time: return\n    \n        # Accessing Data\n        consensus = data.Get(EstimizeConsensus)\n        estimate = data.Get(EstimizeEstimate)\n        release = data.Get(EstimizeRelease)\n        \n        if not estimate: return\n        \n        sorted_by_eps_estimate = sorted([x for x in estimate.items() if x[1].Eps], key=lambda x: x[1].Eps)\n        long_symbols = [x[0].Underlying for x in sorted_by_eps_estimate[-10:]]\n        short_symbols = [x[0].Underlying for x in sorted_by_eps_estimate[:10]]\n        \n        for symbol in [x.Symbol for x in self.Portfolio.Values if x.Invested]:\n            if symbol not in long_symbols + short_symbols:\n                self.Liquidate(symbol)\n        \n        long_targets = [PortfolioTarget(symbol, 0.05) for symbol in long_symbols]\n        short_targets = [PortfolioTarget(symbol, -0.05) for symbol in short_symbols]\n        self.SetHoldings(long_targets + short_targets)\n        \n        self.time = Expiry.EndOfMonth(self.Time)\n        \n    def OnSecuritiesChanged(self, changes):\n        for security in changes.AddedSecurities:\n            # Requesting Data\n            estimize_consensus_symbol = self.AddData(EstimizeConsensus, security.Symbol).Symbol\n            estimize_estimate_symbol = self.AddData(EstimizeEstimate, security.Symbol).Symbol\n            estimize_release_symbol = self.AddData(EstimizeRelease, security.Symbol).Symbol\n\n            # Historical Data\n            history = self.History([estimize_consensus_symbol,\n                                    estimize_estimate_symbol,\n                                    estimize_release_symbol\n                                    ], 10, Resolution.Daily)\n            self.Debug(f\"We got {len(history)} items from our history request\")\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n\tpublic class ExtractAlphaEstimizeAlgorithm : QCAlgorithm\n\t{\n\t\tprivate DateTime _time = DateTime.MinValue;\n\t\t\n\t\tpublic override void Initialize()\n\t\t{\n\t\t\tSetStartDate(2019, 1, 1);\n\t\t\tSetEndDate(2020, 12, 31);\n\t\t\tSetCash(100000);\n\t\t\t\n\t\t\tAddUniverse(MyCoarseFilterFunction);\n\t\t\tUniverseSettings.Resolution = Resolution.Minute;\n\t\t}\n\t\t\n\t\tprivate IEnumerable&lt;Symbol&gt; MyCoarseFilterFunction(IEnumerable&lt;CoarseFundamental&gt; coarse)\n\t\t{\n\t\t\treturn (from c in coarse\n\t\t\t\t\twhere c.HasFundamentalData &amp;&amp; c.Price &gt; 4\n\t\t\t\t\torderby c.DollarVolume descending\n\t\t\t\t\tselect c.Symbol).Take(500);\n\t\t}\n\t\t\n\t\tpublic override void OnData(Slice data)\n\t\t{\n\t\t\tif (_time &gt; Time) return;\n\t\t\t\n\t\t\t// Accessing Data\n\t\t\tvar consensus = data.Get&lt;EstimizeConsensus&gt;();\n\t\t\tvar estimate = data.Get&lt;EstimizeEstimate&gt;();\n\t\t\tvar release = data.Get&lt;EstimizeRelease&gt;();\n\t\t\t\n\t\t\tif (estimate.IsNullOrEmpty()) return;\n\t\t\t\n\t\t\tvar sortedByEpsEstimate = from value in estimate.Values\n\t\t\t\t\t\t\twhere (value.Eps != null)\n\t\t\t\t\t\t\torderby value.Eps descending\n\t\t\t\t\t\t\tselect value.Symbol.Underlying;\n\t\t\tvar longSymbols = sortedByEpsEstimate.Take(10).ToList();\n\t\t\tvar shortSymbols = sortedByEpsEstimate.TakeLast(10).ToList();\n\t\t\t\n\t\t\tforeach (var kvp in Portfolio)\n\t\t\t{\n\t\t\t\tvar symbol = kvp.Key;\n\t\t\t\tif (kvp.Value.Invested &amp;&amp; \n\t\t\t\t!longSymbols.Contains(symbol) &amp;&amp; \n\t\t\t\t!shortSymbols.Contains(symbol))\n\t\t\t\t{\n\t\t\t\t\tLiquidate(symbol);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar targets = new List&lt;PortfolioTarget&gt;();\n\t\t\ttargets.AddRange(longSymbols.Select(symbol =&gt; new PortfolioTarget(symbol, 0.05m)));\n\t\t\ttargets.AddRange(shortSymbols.Select(symbol =&gt; new PortfolioTarget(symbol, -0.05m)));\n\t\t\t\n\t\t\tSetHoldings(targets);\n\t\t\t\n\t\t\t_time = Expiry.EndOfMonth(Time);\n\t\t}\n\t\t\n\t\tpublic override void OnSecuritiesChanged(SecurityChanges changes)\n\t\t{\n\t\t\tforeach(var security in changes.AddedSecurities)\n\t\t\t{\n\t\t\t\t// Requesting Data\n\t\t\t\tvar consensusSymbol = AddData&lt;EstimizeConsensus&gt;(security.Symbol).Symbol;\n\t\t\t\tvar estimateSymbol = AddData&lt;EstimizeEstimate&gt;(security.Symbol).Symbol;\n\t\t\t\tvar releaseSymbol = AddData&lt;EstimizeRelease&gt;(security.Symbol).Symbol;\n\t\t\t\t\n\t\t\t\t// Historical Data\n\t\t\t\tvar history = History(new[]{\n\t\t\t\t\tconsensusSymbol,\n\t\t\t\t\testimateSymbol,\n\t\t\t\t\treleaseSymbol\n\t\t\t\t}, 10, Resolution.Daily);\n\t\t\t\tDebug($\"We got {history.Count()} items from our history request\");\n\t\t\t}\n\t\t}\n\t}\n}\n</code></pre>\n</div>",
        "updated": "2021-11-19 17:44:12"
      },
      {
        "id": 668,
        "master_product_id": 44,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>This algorithm demonstrates the use of Estimize for shortlisting the best 10 and worst 10 stocks with the upcoming EPS estimation, such as building a monthly rebalancing equal-weighting dollar-neutral portfolio in QC Framework.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass ExtractAlphaEstimizeFrameworkAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 12, 31)\n        self.SetCash(100000)\n        \n        self.AddUniverse(self.MyCoarseFilterFunction)\n        self.UniverseSettings.Resolution = Resolution.Minute\n        \n        self.AddAlpha(ExtractAlphaEstimizeAlphaModel())\n        \n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n        \n        self.SetExecution(ImmediateExecutionModel())\n        \n    def MyCoarseFilterFunction(self, coarse):\n        sorted_by_dollar_volume = sorted([x for x in coarse if x.HasFundamentalData and x.Price &gt; 4], \n                                key=lambda x: x.DollarVolume, reverse=True)\n        selected = [x.Symbol for x in sorted_by_dollar_volume[:500]]\n        return selected\n        \nclass ExtractAlphaEstimizeAlphaModel(AlphaModel):\n    \n    def __init__(self):\n        self.time = datetime.min\n        \n    def Update(self, algorithm, data):\n        if self.time &gt; algorithm.Time: return []\n        \n        # Accessing Data\n        consensus = data.Get(EstimizeConsensus)\n        estimate = data.Get(EstimizeEstimate)\n        release = data.Get(EstimizeRelease)\n        \n        if not estimate: return []\n        \n        sorted_by_eps_estimate = sorted([x for x in estimate.items() if x[1].Eps], key=lambda x: x[1].Eps)\n        long_symbols = [x[0].Underlying for x in sorted_by_eps_estimate[-10:]]\n        short_symbols = [x[0].Underlying for x in sorted_by_eps_estimate[:10]]\n        \n        insights = []\n    \n        for symbol in long_symbols:\n            insights.append(Insight.Price(symbol, Expiry.EndOfMonth, InsightDirection.Up))\n        \n        for symbol in short_symbols:\n            insights.append(Insight.Price(symbol, Expiry.EndOfMonth, InsightDirection.Down))\n        \n        self.time = Expiry.EndOfMonth(algorithm.Time)\n        \n        return insights\n        \n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            # Requesting Data\n            estimize_consensus_symbol = algorithm.AddData(EstimizeConsensus, security.Symbol).Symbol\n            estimize_estimate_symbol = algorithm.AddData(EstimizeEstimate, security.Symbol).Symbol\n            estimize_release_symbol = algorithm.AddData(EstimizeRelease, security.Symbol).Symbol\n            \n            # Historical Data\n            history = algorithm.History([estimize_consensus_symbol,\n                                         estimize_estimate_symbol,\n                                         estimize_release_symbol\n                                        ], 10, Resolution.Daily)\n            algorithm.Debug(f\"We got {len(history)} items from our history request\")\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n\tpublic class ExtractAlphaEstimizeAlgorithm : QCAlgorithm\n\t{\n\t\tpublic override void Initialize()\n\t\t{\n\t\t\tSetStartDate(2019, 1, 1);\n\t\t\tSetEndDate(2021, 1, 1);\n\t\t\tSetCash(100000);\n\t\t\t\n\t\t\tAddUniverse(MyCoarseFilterFunction);\n\t\t\tUniverseSettings.Resolution = Resolution.Minute;\n\t\t\t\n\t\t\tAddAlpha(new ExtractAlphaEstimizeAlphaModel());\n\t\t\t\n\t\t\tSetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n\t\t\t\n\t\t\tSetExecution(new ImmediateExecutionModel());\n\t\t}\n\t\t\n\t\tprivate IEnumerable&lt;Symbol&gt; MyCoarseFilterFunction(IEnumerable&lt;CoarseFundamental&gt; coarse)\n\t\t{\n\t\t\treturn (from c in coarse\n\t\t\t\t\twhere c.HasFundamentalData &amp;&amp; c.Price &gt; 4\n\t\t\t\t\torderby c.DollarVolume descending\n\t\t\t\t\tselect c.Symbol).Take(500);\n\t\t}\n\t}\n\t\n\tpublic class ExtractAlphaEstimizeAlphaModel: AlphaModel\n\t{\n\t\tpublic DateTime _time;\n\t\t\n\t\tpublic ExtractAlphaEstimizeAlphaModel()\n\t\t{\n\t\t\t_time = DateTime.MinValue;\n\t\t}\n\t\t\n\t\tpublic override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n\t\t{\n\t\t\tif (_time &gt; algorithm.Time) return new List&lt;Insight&gt;();\n\t\t\t\n\t\t\t// Accessing Data\n\t\t\tvar consensus = data.Get&lt;EstimizeConsensus&gt;();\n\t\t\tvar estimate = data.Get&lt;EstimizeEstimate&gt;();\n\t\t\tvar release = data.Get&lt;EstimizeRelease&gt;();\n\t\t\t\n\t\t\tif (estimate.IsNullOrEmpty()) return new List&lt;Insight&gt;();\n\t\t\t\n\t\t\tvar sortedByEpsEstimate = from s in estimate.Values\n\t\t\t\t\t\t\twhere (s.Eps != null)\n\t\t\t\t\t\t\torderby s.Eps descending\n\t\t\t\t\t\t\tselect s.Symbol.Underlying;\n\t\t\tvar longSymbols = sortedByEpsEstimate.Take(10).ToList();\n\t\t\tvar shortSymbols = sortedByEpsEstimate.TakeLast(10).ToList();\n\t\t\t\n\t\t\tvar insights = new List&lt;Insight&gt;();\n\t\t\tinsights.AddRange(longSymbols.Select(symbol =&gt; new Insight(symbol, Expiry.EndOfMonth, InsightType.Price, InsightDirection.Up)));\n\t\t\tinsights.AddRange(shortSymbols.Select(symbol =&gt; new Insight(symbol, Expiry.EndOfMonth, InsightType.Price, InsightDirection.Down)));\n\t\t\t\n\t\t\t_time = Expiry.EndOfMonth(algorithm.Time);\n\t\t\t\n\t\t\treturn insights;\n\t\t}\n\t\t\n\t\tpublic override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n\t\t{\n\t\t\tforeach(var security in changes.AddedSecurities)\n\t\t\t{\n\t\t\t\t// Requesting Data\n\t\t\t\tvar consensusSymbol = algorithm.AddData&lt;EstimizeConsensus&gt;(security.Symbol).Symbol;\n\t\t\t\tvar estimateSymbol = algorithm.AddData&lt;EstimizeEstimate&gt;(security.Symbol).Symbol;\n\t\t\t\tvar releaseSymbol = algorithm.AddData&lt;EstimizeRelease&gt;(security.Symbol).Symbol;\n\t\t\t\t\n\t\t\t\t// Historical Data\n\t\t\t\tvar history = algorithm.History(new[]{\n\t\t\t\t\tconsensusSymbol,\n\t\t\t\t\testimateSymbol,\n\t\t\t\t\treleaseSymbol\n\t\t\t\t}, 10, Resolution.Daily);\n\t\t\t\talgorithm.Debug($\"We got {history.Count()} items from our history request\");\n\t\t\t}\n\t\t}\n\t}\n}\n</code></pre>\n</div>",
        "updated": "2021-11-19 17:43:55"
      },
      {
        "id": 672,
        "master_product_id": 44,
        "position": 3,
        "section": "examples",
        "title": "",
        "content": "",
        "updated": "2021-09-17 13:20:21"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 44,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>Estimize is allowed to be used in the cloud \r\n            for personal and commercial projects with a subscription. The data is permissioned for use within \r\n            the licensed organization only</p><p>Subscription Required | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div>  \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>Estimize is allowed to be used for free by approved Alpha Stream authors with more than 3 \r\n                    Alpha Streams listed in the marketplace. The ExtractAlpha will add on a charge of 2 Basis Points \r\n                    for the use of the data to the Alpha Stream reserve price.</p>\r\n                    <p>Free for Authors with 3+ Alphas | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 121,
        "name": "Estimize by Extract Alpha",
        "description": "<p>Using ExtractAlpha Estimize data in the QuantConnect Cloud for your backtesting and live trading purposes.</p>\n<ul><li>Curated, clean data</li>\n    <li>Updated nightly at 4am</li>\n    <li>Mapped to US Equity data with full historical SIP feed</li>\n</ul>",
        "shortDescription": "Cloud Access\n",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "$75/mo",
          "monthlyPrice": 75,
          "yearlyPrice": 825,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 825
      }
    ],
    "headerColor": "ff1841"
  },
  {
    "name": "True Beats",
    "vendorName": "ExtractAlpha",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/extractalpha-logo.png",
    "landingFileName": "extractalpha-true-beats.html",
    "url": "/datasets/extractalpha-true-beats",
    "short_description": "True Beats by ExtractAlpha are quantitative predictions of EPS and Revenues for U.S. equities based on expert opinion, historical performance and peer competition",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The True Beats dataset by ExtractAlpha provides quantitative predictions of EPS and Revenues for US Equities. The data covers a dynamic universe of around 4,000-5,000 US-listed Equities on a daily average. The data starts in January 2000 and is delivered on a daily frequency. This dataset is created by incorporating the opinions of expert analysts, historical earnings, revenue trends for the company and its peers, and metrics on company earnings management.\n</p>\n\n<p>This dataset depends on the <a href=\"https://www.quantconnect.com/datasets/quantconnect-us-equity-security-master\">US Equity Security Master</a> dataset because the US Equity Security Master dataset contains information on splits, dividends, and symbol changes.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\n<a href=\"https://extractalpha.com/\">ExtractAlpha</a> was founded by Vinesh Jha in 2013 with the goal of providing alternative data for investors. ExtractAlpha's rigorously researched data sets and quantitative stock selection models leverage unique sources and analytical techniques, allowing users to gain an investment edge.\n</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Requesting data:\naapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nextract_alpha_true_beats_symbol = self.AddData(ExtractAlphaTrueBeats, aapl).Symbol</code></pre>\n<pre><code class=\"language-cs\">// Requesting data:\nvar aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\nvar extractAlphaTrueBeatsSymbol = AddData&lt;ExtractAlphaTrueBeats&gt;(aapl).Symbol;</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 2000</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>Over 5,000 US Equities</td>\n        </tr><tr><td>Data Density</td>\n            <td>Sparse</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe True Beats dataset by ExtractAlpha enables researchers to predict EPS and revenue of US-listed Equities for trading. Examples include:\n</p>\n<ul><li>Finding surprise in EPS or revenue for sentiment/arbitrage trading</li>\n<li>Stock or sector selections based on EPS or revenue predictions</li>\n<li>Calculate expected return by valuation models based on EPS or revenue predictions (e.g. Black-Litterman)</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_3780a06ffa04f6a9c8dc4927fadda425.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The True Beats dataset provides ExtractAlphaTrueBeat objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.ExtractAlphaTrueBeat\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add True Beats dataset by ExtractAlpha to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class ExtractAlphaTrueBeatsDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        aapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        extract_alpha_true_beats_symbol = self.AddData(ExtractAlphaTrueBeats, aapl).Symbol</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class ExtractAlphaTrueBeatsDataAlgorithm: QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n\n            var aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            var extractAlphaTrueBeatsSymbol = AddData&lt;ExtractAlphaTrueBeats&gt;(aapl).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(ExtractAlphaTrueBeats)\n    for kvp in points:\n        for trueBeat in kvp.Value:\n            self.Log(f\"\"\"Symbol: {point.Key} - Fiscal Period: {trueBeat.FiscalPeriod.Annual}\n\t\t             - Analyst Estimates Count: {trueBeat.AnalystEstimatesCount} - True Beats: {trueBeat.TrueBeat}\n\t\t             - Expert Beats: {trueBeat.ExpertBeat} - Trend Beats: {trueBeat.TrendBeat}\n\t\t             - Management Beats: {trueBeat.ManagementBeat}\"\"\")  \n</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var points = data.Get&lt;ExtractAlphaTrueBeats&gt;();\n    foreach (var point in points)\n    {\n        foreach (ExtractAlphaTrueBeat trueBeat in point.Value)\n        {\n            Log($@\"Symbol: {point.Key} - Fiscal Period: {trueBeat.FiscalPeriod.Annual} - \n\t\t            Analyst Estimates Count: {trueBeat.AnalystEstimatesCount} - True Beats: {trueBeat.TrueBeat}\n\t\t            - Expert Beats: {trueBeat.ExpertBeat} - Trend Beats: {trueBeat.TrendBeat}\n\t\t            - Management Beats: {trueBeat.ManagementBeat}\");\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request the alternative dataset\u2019s historical data by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the alternative dataset\u2019s historical data by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(extract_alpha_true_beats_symbol, 10, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History(new[]{extractAlphaTrueBeatsSymbol}, 10, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The True Beats dataset provides ExtractAlphaTrueBeat objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.ExtractAlphaTrueBeat\"></div>"
      }
    ],
    "priceCTA": "$75/mo",
    "vendorWebsite": "https://www.quantconnect.com/market",
    "examples": [
      {
        "id": 682,
        "master_product_id": 45,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>This algorithm demonstrates the use of True Beats for predicting the top 10 best and worst surprising companies on their financials, such as building a daily rebalancing equal-weighting dollar-neutral portfolio.</p>\n<div class=\"section-example-container\"><pre><code class=\"language-python\">class ExtractAlphaTrueBeatsDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 1, 1)\n        self.SetCash(100000)\n        \n        self.time = datetime.min\n        \n        self.AddUniverse(self.MyCoarseFilterFunction)\n        self.UniverseSettings.Resolution = Resolution.Minute\n        \n    def MyCoarseFilterFunction(self, coarse):\n        sortedByDollarVolume = sorted([x for x in coarse if x.HasFundamentalData], \n                                key=lambda x: x.DollarVolume, reverse=True)\n        selected = [x.Symbol for x in sortedByDollarVolume[:100]]\n        return selected\n\n    def OnData(self, data):\n        if self.time &gt; self.Time: return\n        \n        # Retrieve Data\n        points = data.Get(ExtractAlphaTrueBeats)\n        \n        if not points: return\n        \n        trueBeats = {point.Key: trueBeat for point in points for trueBeat in point.Value}\n            \n        sortedByTrueBeat = sorted(trueBeats.items(), key=lambda x: x[1].TrueBeat)\n        \n        longSymbols = [x[0].Underlying for x in sortedByTrueBeat[-10:]]\n        shortSymbols = [x[0].Underlying for x in sortedByTrueBeat[:10]]\n        \n        for symbol in self.Portfolio.Keys:\n            if self.Portfolio[symbol].Invested \\\n            and symbol not in longSymbols \\\n            and symbol not in shortSymbols:\n                self.Liquidate(symbol)\n        \n        longTargets = [PortfolioTarget(symbol, 0.05) for symbol in longSymbols]\n        shortTargets = [PortfolioTarget(symbol, -0.05) for symbol in shortSymbols]\n\n        self.SetHoldings(longTargets + shortTargets)\n        \n        self.time = Expiry.EndOfDay(self.Time)\n        \n    def OnSecuritiesChanged(self, changes):\n        for security in changes.AddedSecurities:\n            # Requesting data\n            extract_alpha_true_beats_symbol = self.AddData(ExtractAlphaTrueBeats, security.Symbol).Symbol\n            \n            # Historical Data\n            history = self.History(extract_alpha_true_beats_symbol, 10, Resolution.Daily)\n            self.Log(f\"We got {len(history)} items from our history request for {security.Symbol} ExtractAlpha True Beats data\")\n</code>\n</pre><pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n\tpublic class ExtractAlphaTrueBeatsDataAlgorithm : QCAlgorithm\n\t{\n\t\tprivate DateTime _time = DateTime.MinValue;\n\t\t\n\t\tpublic override void Initialize()\n\t\t{\n\t\t\tSetStartDate(2021, 1, 1);\n\t\t\tSetEndDate(2021, 7, 1);\n\t\t\tSetCash(100000);\n\t\t\t\n\t\t\tAddUniverse(MyCoarseFilterFunction);\n\t\t\tUniverseSettings.Resolution = Resolution.Minute;\n\t\t}\n\t\t\n\t\tprivate IEnumerable&lt;Symbol&gt; MyCoarseFilterFunction(IEnumerable&lt;CoarseFundamental&gt; coarse)\n\t\t{\n\t\t\treturn (from c in coarse\n\t\t\t\t\twhere c.HasFundamentalData\n\t\t\t\t\torderby c.DollarVolume descending\n\t\t\t\t\tselect c.Symbol).Take(100);\n\t\t}\n\t\t\n\t\tpublic override void OnData(Slice data)\n\t\t{\n\t\t\tif (_time &gt; Time) return;\n\t\t\t\n\t\t\t// Retrieve data\n\t\t\tvar points = data.Get&lt;ExtractAlphaTrueBeats&gt;();\n\t\t\t\n\t\t\tif (points.IsNullOrEmpty()) return;\n\t\t\t\n\t\t\tList&lt;ExtractAlphaTrueBeat&gt; trueBeats = new List&lt;ExtractAlphaTrueBeat&gt;(\n\t\t\t\tpoints.SelectMany(point =&gt; point.Value.Select(x =&gt; (ExtractAlphaTrueBeat)x))\n\t\t\t);\n\t\t\t\n\t\t\tvar sortedByTrueBeat = from trueBeat in trueBeats\n\t\t\t\t\t\t\t\t\twhere (trueBeat.TrueBeat != null)\n\t\t\t\t\t\t\t\t\torderby trueBeat.TrueBeat descending\n\t\t\t\t\t\t\t\t\tselect trueBeat.Symbol.Underlying;\n\n\t\t\tvar longSymbols = sortedByTrueBeat.Take(10).ToList();\n\t\t\tvar shortSymbols = sortedByTrueBeat.TakeLast(10).ToList();\n\t\t\t\n\t\t\tforeach (var kvp in Portfolio)\n\t\t\t{\n\t\t\t\tvar symbol = kvp.Key;\n\t\t\t\tif (kvp.Value.Invested &amp;&amp; \n\t\t\t\t!longSymbols.Contains(symbol) &amp;&amp; \n\t\t\t\t!shortSymbols.Contains(symbol))\n\t\t\t\t{\n\t\t\t\t\tLiquidate(symbol);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar targets = new List&lt;PortfolioTarget&gt;();\n\t\t\ttargets.AddRange(longSymbols.Select(symbol =&gt; new PortfolioTarget(symbol, 0.05m)));\n\t\t\ttargets.AddRange(shortSymbols.Select(symbol =&gt; new PortfolioTarget(symbol, -0.05m)));\n\t\t\t\n\t\t\tSetHoldings(targets);\n\t\t\t\n\t\t\t_time = Expiry.EndOfDay(Time);\n\t\t}\n\t\t\n\t\tpublic override void OnSecuritiesChanged(SecurityChanges changes)\n\t\t{\n\t\t\tforeach(var security in changes.AddedSecurities)\n\t\t\t{\n\t\t\t\t// Requesting data\n\t\t\t\tvar extractAlphaTrueBeatsSymbol = AddData&lt;ExtractAlphaTrueBeats&gt;(security.Symbol).Symbol;\n\t\t\t\t\n\t\t\t\t// Historical Data\n\t            var history = History(new[]{extractAlphaTrueBeatsSymbol}, 10, Resolution.Daily);\n\t            Log($\"We got {history.Count()} items from our history request for {security.Symbol} ExtractAlpha True Beats data\");\n\t\t\t}\n\t\t}\n\t}\n}\n</code>\n</pre></div>",
        "updated": "2022-05-13 13:24:49"
      },
      {
        "id": 684,
        "master_product_id": 45,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>This algorithm demonstrates the use of True Beats for predicting the top 10 best and worst surprising companies on their financials, such that building a daily rebalancing equal-weighting dollar-neutral portfolio.\n</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class ExtractAlphaTrueBeatsDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 1, 1)\n        self.SetCash(100000)\n        \n        self.AddUniverse(self.MyCoarseFilterFunction)\n        self.UniverseSettings.Resolution = Resolution.Minute\n        \n        self.AddAlpha(ExtractAlphaTrueBeatsAlphaModel())\n        \n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n        \n        self.SetExecution(ImmediateExecutionModel())\n        \n    def MyCoarseFilterFunction(self, coarse):\n        sortedByDollarVolume = sorted([x for x in coarse if x.HasFundamentalData], \n                                key=lambda x: x.DollarVolume, reverse=True)\n        selected = [x.Symbol for x in sortedByDollarVolume[:100]]\n        return selected\n        \nclass ExtractAlphaTrueBeatsAlphaModel(AlphaModel):\n    \n    def __init__(self):\n        self.time = datetime.min\n        \n    def Update(self, algorithm, data):\n        if self.time &gt; algorithm.Time: return []\n        \n        # Retrieving data\n        points = data.Get(ExtractAlphaTrueBeats)\n        \n        if not points: return []\n        \n        trueBeats = {point.Key: trueBeat for point in points for trueBeat in point.Value}\n            \n        sortedByTrueBeat = sorted(trueBeats.items(), key=lambda x: x[1].TrueBeat)\n        \n        longSymbols = [x[0].Underlying for x in sortedByTrueBeat[-10:]]\n        shortSymbols = [x[0].Underlying for x in sortedByTrueBeat[:10]]\n        \n        insights = []\n    \n        for symbol in longSymbols:\n            insights.append(Insight.Price(symbol, Expiry.EndOfDay, InsightDirection.Up))\n        \n        for symbol in shortSymbols:\n            insights.append(Insight.Price(symbol, Expiry.EndOfDay, InsightDirection.Down))\n        \n        self.time = Expiry.EndOfDay(algorithm.Time)\n        \n        return insights\n        \n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            # Requesting data\n            extract_alpha_true_beats_symbol = algorithm.AddData(ExtractAlphaTrueBeats, security.Symbol).Symbol\n            \n            # Historical Data\n            history = algorithm.History(extract_alpha_true_beats_symbol, 10, Resolution.Daily)\n            algorithm.Log(f\"We got {len(history)} items from our history request for {security.Symbol} ExtractAlpha True Beats data\")\n</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n\tpublic class ExtractAlphaTrueBeatsFrameworkAlgorithm : QCAlgorithm\n\t{\n\t\tpublic override void Initialize()\n\t\t{\n\t\t\tSetStartDate(2021, 1, 1);\n\t\t\tSetEndDate(2021, 7, 1);\n\t\t\tSetCash(100000);\n\t\t\t\n\t\t\tAddUniverse(MyCoarseFilterFunction);\n\t\t\tUniverseSettings.Resolution = Resolution.Minute;\n\t\t\n\t\t\tAddAlpha(new ExtractAlphaTrueBeatsAlphaModel());\n\t\t\t\n\t\t\tSetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n\t\t\t\n\t\t\tSetExecution(new ImmediateExecutionModel());\n\t\t}\n\t\t\n\t\tprivate IEnumerable&lt;Symbol&gt; MyCoarseFilterFunction(IEnumerable&lt;CoarseFundamental&gt; coarse)\n\t\t{\n\t\t\treturn (from c in coarse\n\t\t\t\t\twhere c.HasFundamentalData\n\t\t\t\t\torderby c.DollarVolume descending\n\t\t\t\t\tselect c.Symbol).Take(100);\n\t\t}\n\t}\n\t\n\tpublic class ExtractAlphaTrueBeatsAlphaModel: AlphaModel\n\t{\n\t\tprivate DateTime _time;\n\t\t\n\t\tpublic ExtractAlphaTrueBeatsAlphaModel()\n\t\t{\n\t\t\t_time = DateTime.MinValue;\n\t\t}\n\t\t\n\t\tpublic override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n\t\t{\n\t\t\tif (_time &gt; algorithm.Time) return new List&lt;Insight&gt;();\n\t\t\t\n\t\t\t// Accessing Data\n\t\t\tvar points = data.Get&lt;ExtractAlphaTrueBeats&gt;();\n\t\t\t\n\t\t\tif (points.IsNullOrEmpty()) return new List&lt;Insight&gt;();\n\t\t\t\n\t\t\tList&lt;ExtractAlphaTrueBeat&gt; trueBeats = new List&lt;ExtractAlphaTrueBeat&gt;(\n\t\t\t\tpoints.SelectMany(point =&gt; point.Value.Select(x =&gt; (ExtractAlphaTrueBeat)x))\n\t\t\t);\n\t\t\t\n\t\t\tvar sortedByTrueBeat = from s in trueBeats\n\t\t\t\t\t\t\twhere (s.TrueBeat != null)\n\t\t\t\t\t\t\torderby s.TrueBeat descending\n\t\t\t\t\t\t\tselect s.Symbol.Underlying;\n\n\t\t\tvar longSymbols = sortedByTrueBeat.Take(10).ToList();\n\t\t\tvar shortSymbols = sortedByTrueBeat.TakeLast(10).ToList();\n\t\t\t\n\t\t\tvar insights = new List&lt;Insight&gt;();\n\t\t\tinsights.AddRange(longSymbols.Select(symbol =&gt; \n\t\t\t\tnew Insight(symbol, Expiry.EndOfDay, InsightType.Price, InsightDirection.Up)));\n\t\t\tinsights.AddRange(shortSymbols.Select(symbol =&gt; \n\t\t\t\tnew Insight(symbol, Expiry.EndOfDay, InsightType.Price, InsightDirection.Down)));\n\t\t\t\n\t\t\t_time = Expiry.EndOfDay(algorithm.Time);\n\t\t\t\n\t\t\treturn insights;\n\t\t}\n\t\t\n\t\tpublic override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n\t\t{\n\t\t\tforeach(var security in changes.AddedSecurities)\n\t\t\t{\n\t\t\t\t// Requesting Data\n\t\t\t\tvar extractAlphaTrueBeatsSymbol = algorithm.AddData&lt;ExtractAlphaTrueBeats&gt;(security.Symbol).Symbol;\n\t\t\t\t\n\t\t\t\t// Historical Data\n\t\t\t\tvar history = algorithm.History(new[]{extractAlphaTrueBeatsSymbol}, 10, Resolution.Daily);\n\t\t\t\talgorithm.Debug($\"We got {history.Count()} items from our history request\");\n\t\t\t}\n\t\t}\n\t}\n}\n</code></pre>\n</div>",
        "updated": "2022-05-13 13:25:07"
      },
      {
        "id": 688,
        "master_product_id": 45,
        "position": 3,
        "section": "examples",
        "title": "",
        "content": "",
        "updated": "2021-09-17 12:33:52"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 45,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>True Beats is allowed to be used in the cloud \r\n            for personal and commercial projects with a subscription. The data is permissioned for use within \r\n            the licensed organization only</p><p>Subscription Required | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div>  \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>True Beats is allowed to be used for free by approved Alpha Stream authors with more than 3 \r\n                    Alpha Streams listed in the marketplace. The ExtractAlpha will add on a charge of 2 Basis Points \r\n                    for the use of the data to the Alpha Stream reserve price.</p>\r\n                    <p>Free for Authors with 3+ Alphas | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 122,
        "name": "True Beats by Extract Alpha",
        "description": "<p>Using ExtractAlpha Tactical data in the QuantConnect Cloud for your backtesting and live trading purposes.</p>\n<ul><li>Curated, clean data</li>\n    <li>Updated nightly at 4am</li>\n    <li>Mapped to US Equity data with full historical SIP feed</li>\n</ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "$75/mo",
          "monthlyPrice": 75,
          "yearlyPrice": 825,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 825
      }
    ],
    "headerColor": "4eff2b"
  },
  {
    "name": "Tactical",
    "vendorName": "ExtractAlpha",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/extractalpha-logo.png",
    "landingFileName": "extractalpha-tactical.html",
    "url": "/datasets/extractalpha-tactical",
    "short_description": "Tactical by Extract Alpha is a likelihood score of short-term price movements drive by technical indicators. ",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The Tactical dataset by ExtractAlpha is a stock scoring algorithm that captures the technical dynamics of individual US Equities over one to ten trading day horizons. It can assist a longer-horizon investor in timing their entry or exit points or be used in combination with existing systematic or qualitative strategies with similar holding periods.</p>\n\n<p>The data covers a dynamic universe of around 4,700 US Equities per day on average, starts in January 2000, and is delivered on a daily frequency. The Tactical dataset expands upon simple reversal, liquidity, and seasonality factors to identify stocks that are likely to trend or reverse.</p>\n\n<p>This dataset depends on the <a href=\"https://www.quantconnect.com/datasets/quantconnect-us-equity-security-master\">US Equity Security Master</a> dataset because the US Equity Security Master dataset contains information on splits, dividends, and symbol changes.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\n<a href=\"https://extractalpha.com/\">ExtractAlpha</a> was founded by Vinesh Jha in 2013 with the goal of providing alternative data for investors. ExtractAlpha's rigorously researched data sets and quantitative stock selection models leverage unique sources and analytical techniques, allowing users to gain an investment edge.\n</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Requesting data:\naapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nextract_alpha_tactical_model_symbol = self.AddData(ExtractAlphaTacticalModel, aapl).Symbol</code></pre>\n<pre><code class=\"language-cs\">// Requesting data:\nvar aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\nvar extractAlphaTacticalModelSymbol = AddData&lt;ExtractAlphaTacticalModel&gt;(aapl).Symbol;</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 2000</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>5,000 US Equities</td>\n        </tr><tr><td>Data Density</td>\n            <td>Sparse</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe Tactical dataset by ExtractAlpha enables researchers to gain insight into short-term stock dynamics for trading. Examples include:\n</p>\n<ul><li>Optimizing entry and exit times in a portfolio construction model.</li>\n<li>Using the raw factor values as technical indicators.</li>\n<li>Inputting the data into machine learning classifier models as trend/reversal labels.</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_982c77dbd530e4f364c11612325a963e.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Tactical dataset provides ExtractAlphaTacticalModel objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.ExtractAlphaTacticalModel\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add Tactical dataset by ExtractAlpha to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass ExtractAlphaTacticalModelDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        aapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        extract_alpha_tactical_model_symbol = self.AddData(ExtractAlphaTacticalModel, aapl).Symbol</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class ExtractAlphaTacticalModelDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n\n            var aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            var extractAlphaTacticalModelSymbol = AddData&lt;ExtractAlphaTacticalModel&gt;(aapl).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(ExtractAlphaTacticalModel)\n    for kvp in points:\n        self.Log(f'Symbol: {kvp.Key} - Reversal: {kvp.Value.Reversal} - Factor Momentum: {kvp.Value.FactorMomentum} - '\n            f'Liquidity Shock: {kvp.Value.LiquidityShock} - Seasonality: {kvp.Value.Seasonality} - Score: {kvp.Value.Score}')\n</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{    \n    public override void OnData(Slice data)\n    {\n        var points = data.Get&lt;ExtractAlphaTacticalModel&gt;();\n        foreach (var point in points.Values)\n        {\n            Log($@\"Symbol: {kvp.Key} - Reversal: {kvp.Value.Reversal} - Factor Momentum: {kvp.Value.FactorMomentum} - \n                Liquidity Shock: {kvp.Value.LiquidityShock} - Seasonality: {kvp.Value.Seasonality} - Score: {kvp.Value.Score}\");\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request the alternative dataset\u2019s historical data by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the alternative dataset\u2019s historical data by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(extract_alpha_tactical_model_symbol, 10, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History(new[]{extractAlphaTacticalModelSymbol}, 10, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Tactical dataset provides ExtractAlphaTacticalModel objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.ExtractAlphaTacticalModel\"></div>"
      }
    ],
    "priceCTA": "$75/mo",
    "vendorWebsite": "https://www.quantconnect.com/market",
    "examples": [
      {
        "id": 698,
        "master_product_id": 46,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>This algorithm demonstrates the use of Tactical Model for predicting the top 10 best and worst likely out-performing companies, such that building a daily rebalancing equal-weighting dollar-neutral portfolio.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass ExtractAlphaTacticalModelAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 1, 1)\n        self.SetCash(100000)\n        \n        self.time = datetime.min\n        \n        self.AddUniverse(self.MyCoarseFilterFunction)\n        self.UniverseSettings.Resolution = Resolution.Minute\n        \n    def MyCoarseFilterFunction(self, coarse):\n        sorted_by_dollar_volume = sorted([x for x in coarse if x.HasFundamentalData and x.Price &gt; 4], \n                                key=lambda x: x.DollarVolume, reverse=True)\n        selected = [x.Symbol for x in sorted_by_dollar_volume[:100]]\n        return selected\n\n    def OnData(self, data):\n        if self.time &gt; self.Time: return\n    \n        # Accessing Data\n        points = data.Get(ExtractAlphaTacticalModel)\n        sorted_by_score = sorted([x for x in points.items() if x[1].Score], key=lambda x: x[1].Score)\n        long_symbols = [x[0].Underlying for x in sorted_by_score[-10:]]\n        short_symbols = [x[0].Underlying for x in sorted_by_score[:10]]\n        \n        for symbol in [x.Symbol for x in self.Portfolio.Values if x.Invested]:\n            if symbol not in long_symbols + short_symbols:\n                self.Liquidate(symbol)\n        \n        long_targets = [PortfolioTarget(symbol, 0.05) for symbol in long_symbols]\n        short_targets = [PortfolioTarget(symbol, -0.05) for symbol in short_symbols]\n        self.SetHoldings(long_targets + short_targets)\n        \n        self.time = Expiry.EndOfDay(self.Time)\n        \n    def OnSecuritiesChanged(self, changes):\n        for security in changes.AddedSecurities:\n            # Requesting Data\n            extract_alpha_tactical_model_symbol = self.AddData(ExtractAlphaTacticalModel, security.Symbol).Symbol\n\n            # Historical Data\n            history = self.History(extract_alpha_tactical_model_symbol, 60, Resolution.Daily)\n            self.Debug(f\"We got {len(history)} items from our history request\")\n        \n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n\tpublic class ExtractAlphaTacticalModelAlgorithm : QCAlgorithm\n\t{\n\t\tprivate DateTime _time = DateTime.MinValue;\n\t\t\n\t\tpublic override void Initialize()\n\t\t{\n\t\t\tSetStartDate(2019, 1, 1);\n\t\t\tSetEndDate(2020, 1, 1);\n\t\t\tSetCash(100000);\n\t\t\t\n\t\t\tAddUniverse(MyCoarseFilterFunction);\n\t\t\tUniverseSettings.Resolution = Resolution.Minute;\n\t\t}\n\t\t\n\t\tprivate IEnumerable&lt;Symbol&gt; MyCoarseFilterFunction(IEnumerable&lt;CoarseFundamental&gt; coarse)\n\t\t{\n\t\t\treturn (from c in coarse\n\t\t\t\t\twhere c.HasFundamentalData &amp;&amp; c.Price &gt; 4\n\t\t\t\t\torderby c.DollarVolume descending\n\t\t\t\t\tselect c.Symbol).Take(100);\n\t\t}\n\t\t\n\t\tpublic override void OnData(Slice data)\n\t\t{\n\t\t\tif (_time &gt; Time) return;\n\t\t\t\n\t\t\t// Accessing Data\n\t\t\tvar points = data.Get&lt;ExtractAlphaTacticalModel&gt;();\n\t\t\tvar sortedByScore = from s in points.Values\n\t\t\t\t\t\t\twhere (s.Score != null)\n\t\t\t\t\t\t\torderby s.Score descending\n\t\t\t\t\t\t\tselect s.Symbol.Underlying;\n\t\t\tvar longSymbols = sortedByScore.Take(10).ToList();\n\t\t\tvar shortSymbols = sortedByScore.TakeLast(10).ToList();\n\t\t\t\n\t\t\tforeach (var kvp in Portfolio)\n\t\t\t{\n\t\t\t\tvar symbol = kvp.Key;\n\t\t\t\tif (kvp.Value.Invested &amp;&amp; \n\t\t\t\t!longSymbols.Contains(symbol) &amp;&amp; \n\t\t\t\t!shortSymbols.Contains(symbol))\n\t\t\t\t{\n\t\t\t\t\tLiquidate(symbol);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar targets = new List&lt;PortfolioTarget&gt;();\n\t\t\ttargets.AddRange(longSymbols.Select(symbol =&gt; new PortfolioTarget(symbol, 0.05m)));\n\t\t\ttargets.AddRange(shortSymbols.Select(symbol =&gt; new PortfolioTarget(symbol, -0.05m)));\n\t\t\t\n\t\t\tSetHoldings(targets);\n\t\t\t\n\t\t\t_time = Expiry.EndOfDay(Time);\n\t\t}\n\t\t\n\t\tpublic override void OnSecuritiesChanged(SecurityChanges changes)\n\t\t{\n\t\t\tforeach(var security in changes.AddedSecurities)\n\t\t\t{\n\t\t\t\t// Requesting Data\n\t\t\t\tvar extractAlphaTacticalModelSymbol = AddData&lt;ExtractAlphaTacticalModel&gt;(security.Symbol).Symbol;\n\t\t\t\t\n\t\t\t\t// Historical Data\n\t\t\t\tvar history = History(new[]{extractAlphaTacticalModelSymbol}, 60, Resolution.Daily);\n\t\t\t\tDebug($\"We got {history.Count()} items from our history request\");\n\t\t\t}\n\t\t}\n\t}\n}\n</code></pre>\n</div>",
        "updated": "2021-10-13 15:03:45"
      },
      {
        "id": 700,
        "master_product_id": 46,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>This algorithm demonstrates the use of Tactical Model for predicting the top 10 best and worst likely out-performing companies, such that building a daily rebalancing equal-weighting dollar-neutral portfolio.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass ExtractAlphaTacticalModelAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 1, 1)\n        self.SetCash(100000)\n        \n        self.AddUniverse(self.MyCoarseFilterFunction)\n        self.UniverseSettings.Resolution = Resolution.Minute\n        \n        self.AddAlpha(ExtractAlphaTacticalModelAlphaModel())\n        \n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n        \n        self.SetExecution(ImmediateExecutionModel())\n        \n    def MyCoarseFilterFunction(self, coarse):\n        sorted_by_dollar_volume = sorted([x for x in coarse if x.HasFundamentalData and x.Price &gt; 4], \n                                key=lambda x: x.DollarVolume, reverse=True)\n        selected = [x.Symbol for x in sorted_by_dollar_volume[:100]]\n        return selected\n        \nclass ExtractAlphaTacticalModelAlphaModel(AlphaModel):\n    \n    def __init__(self):\n        self.time = datetime.min\n        \n    def Update(self, algorithm, data):\n        if self.time &gt; algorithm.Time: return []\n        \n        # Accessing Data\n        points = data.Get(ExtractAlphaTacticalModel)\n        sorted_by_score = sorted([x for x in points.items() if x[1].Score], key=lambda x: x[1].Score)\n        long_symbols = [x[0].Underlying for x in sorted_by_score[-10:]]\n        short_symbols = [x[0].Underlying for x in sorted_by_score[:10]]\n        \n        insights = []\n    \n        for symbol in long_symbols:\n            insights.append(Insight.Price(symbol, Expiry.EndOfDay, InsightDirection.Up))\n        \n        for symbol in short_symbols:\n            insights.append(Insight.Price(symbol, Expiry.EndOfDay, InsightDirection.Down))\n        \n        self.time = Expiry.EndOfDay(algorithm.Time)\n        \n        return insights\n        \n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            # Requesting Data\n            extract_alpha_tactical_model_symbol = algorithm.AddData(ExtractAlphaTacticalModel, security.Symbol).Symbol\n            \n            # Historical Data\n            history = algorithm.History(extract_alpha_tactical_model_symbol, 60, Resolution.Daily)\n            algorithm.Debug(f\"We got {len(history)} items from our history request\")\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n\tpublic class ExtractAlphaTacticalModelAlgorithm : QCAlgorithm\n\t{\n\t\tpublic override void Initialize()\n\t\t{\n\t\t\tSetStartDate(2019, 1, 1);\n\t\t\tSetEndDate(2021, 1, 1);\n\t\t\tSetCash(100000);\n\t\t\t\n\t\t\tAddUniverse(MyCoarseFilterFunction);\n\t\t\tUniverseSettings.Resolution = Resolution.Minute;\n\t\t\t\n\t\t\tAddAlpha(new ExtractAlphaTacticalModelAlphaModel());\n\t\t\t\n\t\t\tSetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n\t\t\t\n\t\t\tSetExecution(new ImmediateExecutionModel());\n\t\t}\n\t\t\n\t\tprivate IEnumerable&lt;Symbol&gt; MyCoarseFilterFunction(IEnumerable&lt;CoarseFundamental&gt; coarse)\n\t\t{\n\t\t\treturn (from c in coarse\n\t\t\t\t\twhere c.HasFundamentalData &amp;&amp; c.Price &gt; 4\n\t\t\t\t\torderby c.DollarVolume descending\n\t\t\t\t\tselect c.Symbol).Take(100);\n\t\t}\n\t}\n\t\n\tpublic class ExtractAlphaTacticalModelAlphaModel: AlphaModel\n\t{\n\t\tpublic DateTime _time;\n\t\t\n\t\tpublic ExtractAlphaTacticalModelAlphaModel()\n\t\t{\n\t\t\t_time = DateTime.MinValue;\n\t\t}\n\t\t\n\t\tpublic override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n\t\t{\n\t\t\tif (_time &gt; algorithm.Time) return new List&lt;Insight&gt;();\n\t\t\t\n\t\t\t// Accessing Data\n\t\t\tvar points = data.Get&lt;ExtractAlphaTacticalModel&gt;();\n\t\t\tvar sortedByScore = from s in points.Values\n\t\t\t\t\t\t\twhere (s.Score != null)\n\t\t\t\t\t\t\torderby s.Score descending\n\t\t\t\t\t\t\tselect s.Symbol.Underlying;\n\t\t\tvar longSymbols = sortedByScore.Take(10).ToList();\n\t\t\tvar shortSymbols = sortedByScore.TakeLast(10).ToList();\n\t\t\t\n\t\t\tvar insights = new List&lt;Insight&gt;();\n\t\t\tinsights.AddRange(longSymbols.Select(symbol =&gt; new Insight(symbol, Expiry.EndOfDay, InsightType.Price, InsightDirection.Up)));\n\t\t\tinsights.AddRange(shortSymbols.Select(symbol =&gt; new Insight(symbol, Expiry.EndOfDay, InsightType.Price, InsightDirection.Down)));\n\t\t\t\n\t\t\t_time = Expiry.EndOfDay(algorithm.Time);\n\t\t\t\n\t\t\treturn insights;\n\t\t}\n\t\t\n\t\tpublic override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n\t\t{\n\t\t\tforeach(var security in changes.AddedSecurities)\n\t\t\t{\n\t\t\t\t// Requesting Data\n\t\t\t\tvar extractAlphaTacticalModelSymbol = algorithm.AddData&lt;ExtractAlphaTacticalModel&gt;(security.Symbol).Symbol;\n\t\t\n\t\t\t\t// Historical Data\n\t\t\t\tvar history = algorithm.History(new[]{extractAlphaTacticalModelSymbol}, 60, Resolution.Daily);\n\t\t\t\talgorithm.Debug($\"We got {history.Count()} items from our history request\");\n\t\t\t}\n\t\t}\n\t}\n}\n</code></pre>\n</div>",
        "updated": "2021-10-13 15:03:55"
      },
      {
        "id": 704,
        "master_product_id": 46,
        "position": 3,
        "section": "examples",
        "title": "",
        "content": "",
        "updated": "2021-09-17 13:22:36"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 46,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>Tactical is allowed to be used in the cloud \r\n            for personal and commercial projects with a subscription. The data is permissioned for use within \r\n            the licensed organization only</p><p>Subscription Required | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>Tactical can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 10 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>Tactical is allowed to be used for free by approved Alpha Stream authors with more than 3 \r\n                    Alpha Streams listed in the marketplace. The ExtractAlpha will add on a charge of 2 Basis Points \r\n                    for the use of the data to the Alpha Stream reserve price.</p>\r\n                    <p>Free for Authors with 3+ Alphas | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 124,
        "name": "Tactical by Extract Alpha",
        "description": "<p>Download Composite Factor Bundle historical records for your LEAN backtesting and live trading on premise with the LEAN CLI.</p>\n<ul><li>Ownership of the data for internal use</li>\n    <li>Data in LEAN format</li>\n    <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Download On Premise",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "10 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 123,
        "name": "Tactical by Extract Alpha",
        "description": "<p>Using ExtractAlpha Tactical data in the QuantConnect Cloud for your backtesting and live trading purposes.</p>\n<ul><li>Curated, clean data</li>\n    <li>Updated nightly at 4am</li>\n    <li>Mapped to US Equity data with full historical SIP feed</li>\n</ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "$75/mo",
          "monthlyPrice": 75,
          "yearlyPrice": 825,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 825
      }
    ],
    "headerColor": "42dffe"
  },
  {
    "name": "Cross Asset Model",
    "vendorName": "ExtractAlpha",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/extractalpha-logo.png",
    "landingFileName": "extractalpha-cross-asset-model.html",
    "url": "/datasets/extractalpha-cross-asset-model",
    "short_description": "Cross Asset Model by ExtractAlpha is a scoring algorithm based on put-call spread of equity options, volatility skewness, and volume.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The Cross Asset Model by ExtractAlpha provides stock scoring values based on the trading activity in the Options market. Since the Options market has a higher proportion of institutional traders than the Equities market, the Options market is composed of investors who are more informed and information-driven on average. The data covers a dynamic universe of over 3,000 US Equities, starts in July 2005, and is delivered on a daily frequency. This dataset is created by feature engineering on the Options market put-call spread, volatility skewness, and volume.</p>\n\n<p>This dataset depends on the <a href=\"https://www.quantconnect.com/datasets/quantconnect-us-equity-security-master\">US Equity Security Master</a> dataset because the US Equity Security Master dataset contains information on splits, dividends, and symbol changes.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\n<a href=\"https://extractalpha.com/\">ExtractAlpha</a> was founded by Vinesh Jha in 2013 with the goal of providing alternative data for investors. ExtractAlpha's rigorously researched data sets and quantitative stock selection models leverage unique sources and analytical techniques, allowing users to gain an investment edge.\n</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Requesting data:\naapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nextract_alpha_cross_asset_model_symbol = self.AddData(ExtractAlphaCrossAssetModel, aapl).Symbol</code></pre>\n<pre><code class=\"language-cs\">// Requesting data:\nvar aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\nvar extractAlphaCrossAssetModelSymbol = AddData&lt;ExtractAlphaCrossAssetModel&gt;(aapl).Symbol;</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>July 2005</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>Over 3,000 US Equities</td>\n        </tr><tr><td>Data Density</td>\n            <td>Sparse</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe Cross Asset Model dataset by ExtractAlpha enables researchers to utilize Options market information for alpha extraction. Examples include:\n</p>\n<ul><li>Predicting price and volatility changes in Equities.</li>\n<li>Signaling arbitrage opportunities between Options and underlying assets.</li>\n<li>Using it as a stock selection indicator.</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_d3a3e680b491ef165ab9e62c43f15224.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Cross Asset Model dataset provides ExtractAlphaCrossAssetModel objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.ExtractAlphaCrossAssetModel\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add the Cross Asset Model dataset by ExtractAlpha to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class ExtractAlphaCrossAssetModelDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        aapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        extract_alpha_cross_asset_model_symbol = self.AddData(ExtractAlphaCrossAssetModel, aapl).Symbol</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class ExtractAlphaCrossAssetModelDataAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n\n            var aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            var extractAlphaCrossAssetModelSymbol = AddData&lt;ExtractAlphaCrossAssetModel&gt;(aapl).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to the slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(ExtractAlphaCrossAssetModel)\n    for kvp in points:\n        self.Log(f\"Symbol: {kvp.Key} - Score: {kvp.Value.Score} - Slow Score: {kvp.Value.ScoreSlow}\")\n</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{    \n    public override void OnData(Slice data)\n    {\n        var points = data.Get&lt;ExtractAlphaCrossAssetModel&gt;();\n        foreach (var point in points.Values)\n        {\n            Log($\"Symbol: {kvp.Key} - Score: {kvp.Value.Score} - Slow Score: {kvp.Value.ScoreSlow}\");\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request the alternative dataset\u2019s historical data by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the alternative dataset\u2019s historical data by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(extract_alpha_cross_asset_model_symbol, 10, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = algorithm.History(new[]{extractAlphaCrossAssetModelSymbol}, 10, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Cross Asset Model dataset provides ExtractAlphaCrossAssetModel objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.ExtractAlphaCrossAssetModel\"></div>"
      }
    ],
    "priceCTA": "$75/mo",
    "vendorWebsite": "https://www.quantconnect.com/market",
    "examples": [
      {
        "id": 714,
        "master_product_id": 47,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>This algorithm demonstrates the use of Cross Asset Model to form an equal-weighted dollar-neutral portfolio of the 10 companies most likely to outperform and the 10 companies most likely to underperform.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass ExtractAlphaCrossAssetModelAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 1, 1)\n        self.SetCash(100000)\n        \n        self.time = datetime.min\n        \n        self.AddUniverse(self.MyCoarseFilterFunction)\n        self.UniverseSettings.Resolution = Resolution.Minute\n        \n    def MyCoarseFilterFunction(self, coarse):\n        sorted_by_dollar_volume = sorted([x for x in coarse if x.HasFundamentalData and x.Price &gt; 4], \n                                key=lambda x: x.DollarVolume, reverse=True)\n        selected = [x.Symbol for x in sorted_by_dollar_volume[:100]]\n        return selected\n\n    def OnData(self, data):\n        if self.time &gt; self.Time: return\n    \n        # Accessing Data\n        points = data.Get(ExtractAlphaCrossAssetModel)\n        sorted_by_score = sorted([x for x in points.items() if x[1].Score], key=lambda x: x[1].Score)\n        long_symbols = [x[0].Underlying for x in sorted_by_score[-10:]]\n        short_symbols = [x[0].Underlying for x in sorted_by_score[:10]]\n        \n        for symbol in [x.Symbol for x in self.Portfolio.Values if x.Invested]:\n            if symbol not in long_symbols + short_symbols:\n                self.Liquidate(symbol)\n        \n        long_targets = [PortfolioTarget(symbol, 0.05) for symbol in long_symbols]\n        short_targets = [PortfolioTarget(symbol, -0.05) for symbol in short_symbols]\n        self.SetHoldings(long_targets + short_targets)\n        \n        self.time = Expiry.EndOfDay(self.Time)\n        \n    def OnSecuritiesChanged(self, changes):\n        for security in changes.AddedSecurities:\n            # Requesting Data\n            extract_alpha_cross_asset_model_symbol = self.AddData(ExtractAlphaCrossAssetModel, security.Symbol).Symbol\n\n            # Historical Data\n            history = self.History(extract_alpha_cross_asset_model_symbol , 60, Resolution.Daily)\n            self.Debug(f\"We got {len(history)} items from our history request\")\n        \n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class ExtractAlphaCrossAssetModelAlgorithm : QCAlgorithm\n    {\n        private DateTime _time = DateTime.MinValue;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 1, 1);\n            SetCash(100000);\n            \n            AddUniverse(MyCoarseFilterFunction);\n            UniverseSettings.Resolution = Resolution.Minute;\n        }\n        \n        private IEnumerable&lt;Symbol&gt; MyCoarseFilterFunction(IEnumerable&lt;CoarseFundamental&gt; coarse)\n        {\n            return (from c in coarse\n                    where c.HasFundamentalData &amp;&amp; c.Price &gt; 4\n                    orderby c.DollarVolume descending\n                    select c.Symbol).Take(100);\n        }\n        \n        public override void OnData(Slice data)\n        {\n            if (_time &gt; Time) return;\n            \n            // Accessing Data\n            var points = data.Get&lt;ExtractAlphaCrossAssetModel&gt;();\n            var sortedByScore = from s in points.Values\n                            where (s.Score != null)\n                            orderby s.Score descending\n                            select s.Symbol.Underlying;\n            var longSymbols = sortedByScore.Take(10).ToList();\n            var shortSymbols = sortedByScore.TakeLast(10).ToList();\n            \n            foreach (var kvp in Portfolio)\n            {\n                var symbol = kvp.Key;\n                if (kvp.Value.Invested &amp;&amp; \n                !longSymbols.Contains(symbol) &amp;&amp; \n                !shortSymbols.Contains(symbol))\n                {\n                    Liquidate(symbol);\n                }\n            }\n            \n            var targets = new List&lt;PortfolioTarget&gt;();\n            targets.AddRange(longSymbols.Select(symbol =&gt; new PortfolioTarget(symbol, 0.05m)));\n            targets.AddRange(shortSymbols.Select(symbol =&gt; new PortfolioTarget(symbol, -0.05m)));\n            \n            SetHoldings(targets);\n            \n            _time = Expiry.EndOfDay(Time);\n        }\n        \n        public override void OnSecuritiesChanged(SecurityChanges changes)\n        {\n            foreach(var security in changes.AddedSecurities)\n            {\n                // Requesting Data\n                var extractAlphaCrossAssetModelSymbol = AddData&lt;ExtractAlphaCrossAssetModel&gt;(security.Symbol).Symbol;\n                \n                // Historical Data\n                var history = History(new[]{extractAlphaCrossAssetModelSymbol}, 60, Resolution.Daily);\n                Debug($\"We got {history.Count()} items from our history request\");\n            }\n        }\n    }\n}\n</code></pre>\n</div>",
        "updated": "2021-11-18 20:49:22"
      },
      {
        "id": 716,
        "master_product_id": 47,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>This algorithm demonstrates the use of Cross Asset Model to form an equal-weighted dollar-neutral portfolio of the 10 companies most likely to outperform and the 10 companies most likely to underperform.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass ExtractAlphaCrossAssetModelAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 1, 1)\n        self.SetCash(100000)\n        \n        self.AddUniverse(self.MyCoarseFilterFunction)\n        self.UniverseSettings.Resolution = Resolution.Minute\n        \n        self.AddAlpha(ExtractAlphaCrossAssetModelAlphaModel())\n        \n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n        \n        self.SetExecution(ImmediateExecutionModel())\n        \n    def MyCoarseFilterFunction(self, coarse):\n        sorted_by_dollar_volume = sorted([x for x in coarse if x.HasFundamentalData and x.Price &gt; 4], \n                                key=lambda x: x.DollarVolume, reverse=True)\n        selected = [x.Symbol for x in sorted_by_dollar_volume[:100]]\n        return selected\n        \nclass ExtractAlphaCrossAssetModelAlphaModel(AlphaModel):\n    \n    def __init__(self):\n        self.time = datetime.min\n        \n    def Update(self, algorithm, data):\n        if self.time &gt; algorithm.Time: return []\n        \n        # Accessing Data\n        points = data.Get(ExtractAlphaCrossAssetModel)\n        sorted_by_score = sorted([x for x in points.items() if x[1].Score], key=lambda x: x[1].Score)\n        long_symbols = [x[0].Underlying for x in sorted_by_score[-10:]]\n        short_symbols = [x[0].Underlying for x in sorted_by_score[:10]]\n        \n        insights = []\n    \n        for symbol in long_symbols:\n            insights.append(Insight.Price(symbol, Expiry.EndOfDay, InsightDirection.Up))\n        \n        for symbol in short_symbols:\n            insights.append(Insight.Price(symbol, Expiry.EndOfDay, InsightDirection.Down))\n        \n        self.time = Expiry.EndOfDay(algorithm.Time)\n        \n        return insights\n        \n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            # Requesting Data\n            extract_alpha_cross_asset_model_symbol = algorithm.AddData(ExtractAlphaCrossAssetModel, security.Symbol).Symbol\n            \n            # Historical Data\n            history = algorithm.History(extract_alpha_cross_asset_model_symbol , 60, Resolution.Daily)\n            algorithm.Debug(f\"We got {len(history)} items from our history request\")\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n\tpublic class ExtractAlphaCrossAssetModelAlgorithm : QCAlgorithm\n\t{\n\t\tpublic override void Initialize()\n\t\t{\n\t\t\tSetStartDate(2019, 1, 1);\n\t\t\tSetEndDate(2021, 1, 1);\n\t\t\tSetCash(100000);\n\t\t\t\n\t\t\tAddUniverse(MyCoarseFilterFunction);\n\t\t\tUniverseSettings.Resolution = Resolution.Minute;\n\t\t\t\n\t\t\tAddAlpha(new ExtractAlphaCrossAssetModelAlphaModel());\n\t\t\t\n\t\t\tSetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n\t\t\t\n\t\t\tSetExecution(new ImmediateExecutionModel());\n\t\t}\n\t\t\n\t\tprivate IEnumerable&lt;Symbol&gt; MyCoarseFilterFunction(IEnumerable&lt;CoarseFundamental&gt; coarse)\n\t\t{\n\t\t\treturn (from c in coarse\n\t\t\t\t\twhere c.HasFundamentalData &amp;&amp; c.Price &gt; 4\n\t\t\t\t\torderby c.DollarVolume descending\n\t\t\t\t\tselect c.Symbol).Take(100);\n\t\t}\n\t}\n\t\n\tpublic class ExtractAlphaCrossAssetModelAlphaModel: AlphaModel\n\t{\n\t\tpublic DateTime _time;\n\t\t\n\t\tpublic ExtractAlphaCrossAssetModelAlphaModel()\n\t\t{\n\t\t\t_time = DateTime.MinValue;\n\t\t}\n\t\t\n\t\tpublic override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n\t\t{\n\t\t\tif (_time &gt; algorithm.Time) return new List&lt;Insight&gt;();\n\t\t\t\n\t\t\t// Accessing Data\n\t\t\tvar points = data.Get&lt;ExtractAlphaCrossAssetModel&gt;();\n\t\t\tvar sortedByScore = from s in points.Values\n\t\t\t\t\t\t\twhere (s.Score != null)\n\t\t\t\t\t\t\torderby s.Score descending\n\t\t\t\t\t\t\tselect s.Symbol.Underlying;\n\t\t\tvar longSymbols = sortedByScore.Take(10).ToList();\n\t\t\tvar shortSymbols = sortedByScore.TakeLast(10).ToList();\n\t\t\t\n\t\t\tvar insights = new List&lt;Insight&gt;();\n\t\t\tinsights.AddRange(longSymbols.Select(symbol =&gt; new Insight(symbol, Expiry.EndOfDay, InsightType.Price, InsightDirection.Up)));\n\t\t\tinsights.AddRange(shortSymbols.Select(symbol =&gt; new Insight(symbol, Expiry.EndOfDay, InsightType.Price, InsightDirection.Down)));\n\t\t\t\n\t\t\t_time = Expiry.EndOfDay(algorithm.Time);\n\t\t\t\n\t\t\treturn insights;\n\t\t}\n\t\t\n\t\tpublic override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n\t\t{\n\t\t\tforeach(var security in changes.AddedSecurities)\n\t\t\t{\n\t\t\t\t// Requesting Data\n\t\t\t\tvar extractAlphaCrossAssetModelSymbol = algorithm.AddData&lt;ExtractAlphaCrossAssetModel&gt;(security.Symbol).Symbol;\n\t\t\n\t\t\t\t// Historical Data\n\t\t\t\tvar history = algorithm.History(new[]{extractAlphaCrossAssetModelSymbol}, 60, Resolution.Daily);\n\t\t\t\talgorithm.Debug($\"We got {history.Count()} items from our history request\");\n\t\t\t}\n\t\t}\n\t}\n}\n</code></pre>\n</div>",
        "updated": "2021-10-13 15:00:11"
      },
      {
        "id": 720,
        "master_product_id": 47,
        "position": 3,
        "section": "examples",
        "title": "",
        "content": "",
        "updated": "2021-09-17 13:21:28"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 47,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>Cross Asset Model is allowed to be used in the cloud \r\n            for personal and commercial projects with a subscription. The data is permissioned for use within \r\n            the licensed organization only</p><p>Subscription Required | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>Cross Asset Model can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 10 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>Cross Asset Model is allowed to be used for free by approved Alpha Stream authors with more than 3 \r\n                    Alpha Streams listed in the marketplace. The ExtractAlpha will add on a charge of 2 Basis Points \r\n                    for the use of the data to the Alpha Stream reserve price.</p>\r\n                    <p>Free for Authors with 3+ Alphas | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 126,
        "name": "Cross Asset Model by Extract Alpha",
        "description": "<p>Download Composite Factor Bundle historical records for your LEAN backtesting and live trading on premise with the LEAN CLI.</p>\n<ul><li>Ownership of the data for internal use</li>\n    <li>Data in LEAN format</li>\n    <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Download On Premise",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "10 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 125,
        "name": "Cross Asset Model by Extract Alpha",
        "description": "<p>Using ExtractAlpha Cross Asset Model data in the QuantConnect Cloud for your backtesting and live trading purposes.</p>\n<ul><li>Curated, clean data</li>\n    <li>Updated nightly at 4am</li>\n    <li>Mapped to US Equity assets</li>\n</ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "$75/mo",
          "monthlyPrice": 75,
          "yearlyPrice": 825,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 825
      }
    ],
    "headerColor": "4eff2b"
  },
  {
    "name": "Composite Factor Bundle",
    "vendorName": "Kavout",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/kavout-logo.png",
    "landingFileName": "kavout-composite-factor-bundle.html",
    "url": "/datasets/kavout-composite-factor-bundle",
    "short_description": "Daily proprietary signals for quality, value, momentum, growth, and low volatility. Used by leading quant funds globally.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The Composite Factor Bundle dataset by Kavout provides ensemble scores for popular market factors. \nKavout signals are machine-learning enhanced scores that capture the returns of systematic factors such as quality, value, momentum, growth, and low volatility. There are many different anomalies discovered by researchers and practitioners across these factor categories and there is no good common definition of each style across the literature. Kavout creates an ensemble score for each style that gauges the different factors considered in the literature and industry practice.\n</p>\n\n<p>\nIn this data set, you will find Kavout's proprietary signals for quality, value, momentum, growth, and low volatility, which have been adopted by some of the multi-billion dollar quant funds in New York and London. Each signal is generated by an ensemble model consisting of inputs from hundreds of anomalies. The data is generated on a daily basis and covers all the stocks traded in US major markets such as NYSE and Nasdaq since 2003. You could leverage this abundant set of signals to construct and backtest your strategies.\n</p>\n\n<p>This dataset depends on the <a href=\"https://www.quantconnect.com/datasets/quantconnect-us-equity-security-master\">US Equity Security Master</a> dataset because the US Equity Security Master dataset contains information on splits, dividends, and symbol changes.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\nKavout was created by ex-Googlers and the founding team used to work at Google, Microsoft, Baidu, and financial firms with a proven track record of building many mission-critical machine learning systems where billions of data points were processed in real-time to predict the best outcome for core search ranking, ads monetization, recommendations, and trading platforms.\n</p>\n<p>\nTheir mission is to build machine investing solutions to find alpha with adaptive learning algorithms and to create an edge by assimilating vast quantities of complex data through the latest AI and Machine Learning methods to generate signals to uncover hidden, dynamic, and nonlinear patterns in the financial markets.\n</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Requesting data:\naapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\nkavout_composite_factor_bundle_symbol = self.AddData(KavoutCompositeFactorBundle, aapl).Symbol</code></pre>\n<pre><code class=\"language-cs\">// Requesting data:\nvar aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\nvar kavoutCompositeFactorBundleSymbol = AddData&lt;KavoutCompositeFactorBundle&gt;(aapl).Symbol;</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 2003</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>8,000 US Equities</td>\n        </tr><tr><td>Data Density</td>\n            <td>Regular</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe Kavout Composite Factor Bundle dataset enables researchers to access the performance of 5 different factors in order to engineer strategies. Examples include: \n</p>\n<ul><li>Performing return-risk optimization based on performance and volatility scoring.</li>\n<li>Weighing stocks based on regression analysis in factor-vector space.</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_4c51a59a986d1195620703ed495625d3.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Composite Factor Bundle dataset provides KavoutCompositeFactorBundle objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.KavoutCompositeFactorBundle\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add the Composite Factor Bundle data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass KavoutCompositeFactorBundleAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        aapl = self.AddEquity(\"AAPL\", Resolution.Daily).Symbol\n        kavout_composite_factor_bundle_symbol = self.AddData(KavoutCompositeFactorBundle, aapl).Symbol</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect.Algorithm.CSharp.AltData\n{\n    public class KavoutCompositeFactorBundleAlgorithm: QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n\n            var aapl = AddEquity(\"AAPL\", Resolution.Daily).Symbol;\n            var kavoutCompositeFactorBundleSymbol = AddData&lt;KavoutCompositeFactorBundle&gt;(aapl).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to the slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(KavoutCompositeFactorBundle)\n    for kvp in points:\n        Log(f'Symbol: {kvp.Key} - Growth: {kvp.Value.Growth} - Low Volatility: {kvp.Value.LowVolatility}'\n            f'Momentum: {kvp.Value.Momentum} - Quality: {kvp.Value.Quality} - Value Factor: {kvp.Value.ValueFactor}')\n</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{    \n    public override void OnData(Slice data)\n    {\n        var points = data.Get&lt;KavoutCompositeFactorBundle&gt;();\n        foreach (var point in points.Values)\n        {\n            Log($@\"Symbol: {kvp.Key} - Growth: {kvp.Value.Growth} - Low Volatility: {kvp.Value.LowVolatility}\n                Momentum: {kvp.Value.Momentum} - Quality: {kvp.Value.Quality} - Value Factor: {kvp.Value.ValueFactor}\");\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request the alternative dataset\u2019s historical data by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the alternative dataset\u2019s historical data by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(kavout_composite_factor_bundle_symbol, 10, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History(new[]{kavoutCompositeFactorBundleSymbol}, 10, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Composite Factor Bundle dataset provides KavoutCompositeFactorBundle objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.KavoutCompositeFactorBundle\"></div>"
      }
    ],
    "priceCTA": "From $39/mo",
    "vendorWebsite": "https://www.quantconnect.com/market",
    "examples": [
      {
        "id": 746,
        "master_product_id": 49,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>This algorithm demonstrates using the Composite Factor Bundle dataset to form a equal-weighted dollar-neutral portfolio of the 10 companies most likely to outperform and the 10 companies most likely to underperform.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass KavoutCompositeFactorBundleAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n        \n        self.time = datetime.min\n        \n        self.AddUniverse(self.MyCoarseFilterFunction)\n        self.UniverseSettings.Resolution = Resolution.Minute\n        \n    def MyCoarseFilterFunction(self, coarse):\n        sorted_by_dollar_volume = sorted([x for x in coarse if x.HasFundamentalData], \n                                key=lambda x: x.DollarVolume, reverse=True)\n        selected = [x.Symbol for x in sorted_by_dollar_volume[:100]]\n        return selected\n\n    def OnData(self, data):\n        if self.time &gt; self.Time: return\n    \n        # Accessing Data\n        points = data.Get(KavoutCompositeFactorBundle)\n        for kvp in points:\n            self.Log(f\"Symbol: {kvp.Key} - Growth:{kvp.Value.Growth} - Low Volatility: {kvp.Value.LowVolatility} - Momentum: {kvp.Value.Momentum}\"\n                     f\" - Quality: {kvp.Value.Quality} - Value Factor: {kvp.Value.ValueFactor}\")\n            \n        sorted_by_score = sorted(points.items(), key=self.TotalScore)\n        long_symbols = [x[0].Underlying for x in sorted_by_score[-10:]]\n        short_symbols = [x[0].Underlying for x in sorted_by_score[:10]]\n        \n        for symbol in [x.Symbol for x in self.Portfolio.Values if x.Invested]:\n            if symbol not in long_symbols + shor_symbols:\n                self.Liquidate(symbol)\n        \n        long_targets = [PortfolioTarget(symbol, 0.05) for symbol in long_symbols]\n        short_targets = [PortfolioTarget(symbol, -0.05) for symbol in short_symbols]\n        self.SetHoldings(long_targets + short_targets)\n        \n        self.time = Expiry.EndOfDay(self.Time)\n        \n    def OnSecuritiesChanged(self, changes):\n        for security in changes.AddedSecurities:\n            # Requesting Data\n            kavout_composite_factor_bundle_symbol= self.AddData(KavoutCompositeFactorBundle, security.Symbol).Symbol\n            \n            # Historical Data\n            history = self.History(kavout_composite_factor_bundle_symbol, 2, Resolution.Daily)\n            self.Debug(f\"We got {len(history)} items from our history request\")\n            \n    def TotalScore(self, value):\n        '''Return the total score to integrate overall likelihood to outcompete, take equal weighting for each factor'''\n        value = value[1]\n        return value.Growth + value.LowVolatility + value.Momentum + value.Quality + value.ValueFactor\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n\tpublic class KavoutCompositeFactorBundleAlgorithm : QCAlgorithm\n\t{\n\t\tprivate DateTime _time = DateTime.MinValue;\n\t\t\n\t\tpublic override void Initialize()\n\t\t{\n\t\t\tSetStartDate(2003, 1, 10);\n\t\t\tSetEndDate(2003, 1, 15);\n\t\t\tSetCash(100000);\n\t\t\t\n\t\t\tAddUniverse(MyCoarseFilterFunction);\n\t\t\tUniverseSettings.Resolution = Resolution.Minute;\n\t\t}\n\t\t\n\t\tprivate IEnumerable&lt;Symbol&gt; MyCoarseFilterFunction(IEnumerable&lt;CoarseFundamental&gt; coarse)\n\t\t{\n\t\t\treturn (from c in coarse\n\t\t\t\t\twhere c.HasFundamentalData\n\t\t\t\t\torderby c.DollarVolume descending\n\t\t\t\t\tselect c.Symbol).Take(100);\n\t\t}\n\t\t\n\t\tpublic override void OnData(Slice data)\n\t\t{\n\t\t\tif (_time &gt; Time) return;\n\t\t\t\n\t\t\t// Accessing Data\n\t\t\tvar points = data.Get&lt;KavoutCompositeFactorBundle&gt;();\n\t\t\tforeach(var kvp in points)\n\t\t\t{\n\t\t\t\tLog(@\"Symbol: {kvp.Key} - Growth:{kvp.Value.Growth} - Low Volatility: {kvp.Value.LowVolatility} - Momentum: {kvp.Value.Momentum}\n\t\t\t\t\t- Quality: {kvp.Value.Quality} - Value Factor: {kvp.Value.ValueFactor}\");\n\t\t\t}\n\t\t\t\n\t\t\tvar sortedByScore = from s in points.Values\n\t\t\t\t\t\t\torderby TotalScore(s) descending\n\t\t\t\t\t\t\tselect s.Symbol.Underlying;\n\t\t\tvar longSymbols = sortedByScore.Take(10).ToList();\n\t\t\tvar shortSymbols = sortedByScore.TakeLast(10).ToList();\n\t\t\t\n\t\t\tforeach (var kvp in Portfolio)\n\t\t\t{\n\t\t\t\tvar symbol = kvp.Key;\n\t\t\t\tif (kvp.Value.Invested &amp;&amp; \n\t\t\t\t!longSymbols.Contains(symbol) &amp;&amp; \n\t\t\t\t!shortSymbols.Contains(symbol))\n\t\t\t\t{\n\t\t\t\t\tLiquidate(symbol);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar targets = new List&lt;PortfolioTarget&gt;();\n\t\t\ttargets.AddRange(longSymbols.Select(symbol =&gt; new PortfolioTarget(symbol, 0.05m)));\n\t\t\ttargets.AddRange(shortSymbols.Select(symbol =&gt; new PortfolioTarget(symbol, -0.05m)));\n\t\t\t\n\t\t\tSetHoldings(targets);\n\t\t\t\n\t\t\t_time = Expiry.EndOfDay(Time);\n\t\t}\n\t\t\n\t\tpublic override void OnSecuritiesChanged(SecurityChanges changes)\n\t\t{\n\t\t\tforeach(var security in changes.AddedSecurities)\n\t\t\t{\n\t\t\t\t// Requesting Data\n\t\t\t\tvar kavoutCompositeFactorBundleSymbol = AddData&lt;KavoutCompositeFactorBundle&gt;(security.Symbol).Symbol;\n\t\t\t\t\n\t\t\t\t// Historical Data\n\t\t\t\tvar history = History(new[]{kavoutCompositeFactorBundleSymbol}, 60, Resolution.Daily);\n\t\t\t\tDebug($\"We got {history.Count()} items from our history request\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tprivate decimal TotalScore(KavoutCompositeFactorBundle value)\n\t\t{\n\t\t\t/// Return the total score to integrate overall likelihood to outcompete, take equal weighting for each factor\n\t\t\treturn value.Growth + value.ValueFactor + value.Quality + value.Momentum + value.LowVolatility;\n\t\t}\n\t}\n}\n</code></pre>\n</div>",
        "updated": "2021-11-10 12:04:17"
      },
      {
        "id": 748,
        "master_product_id": 49,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>This algorithm demonstrates using the Composite Factor Bundle dataset to form a equal-weighted dollar-neutral portfolio of the 10 companies most likely to outperform and the 10 companies most likely to underperform.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass KavoutCompositeFactorBundleAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n        \n        self.AddUniverse(self.MyCoarseFilterFunction)\n        self.UniverseSettings.Resolution = Resolution.Minute\n        \n        self.AddAlpha(KavoutCompositeFactorBundleAlphaModel())\n        \n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n        \n        self.SetExecution(ImmediateExecutionModel())\n        \n    def MyCoarseFilterFunction(self, coarse):\n        sorted_by_dollar_volume = sorted([x for x in coarse if x.HasFundamentalData], \n                                key=lambda x: x.DollarVolume, reverse=True)\n        selected = [x.Symbol for x in sorted_by_dollar_volume[:100]]\n        return selected\n        \nclass KavoutCompositeFactorBundleAlphaModel(AlphaModel):\n    \n    def __init__(self):\n        self.time = datetime.min\n        \n    def Update(self, algorithm, data):\n        if self.time &gt; algorithm.Time: return []\n        \n        # Accessing Data\n        points = data.Get(KavoutCompositeFactorBundle)\n        for kvp in points:\n            algorithm.Log(f\"Symbol: {kvp.Key} - Growth:{kvp.Value.Growth} - Low Volatility: {kvp.Value.LowVolatility} - Momentum: {kvp.Value.Momentum}\"\n                        f\" - Quality: {kvp.Value.Quality} - Value Factor: {kvp.Value.ValueFactor}\")\n        \n        sorted_by_score = sorted(points.items(), key=self.TotalScore)\n        long_symbols = [x[0].Underlying for x in sorted_by_score[-10:]]\n        short_symbols = [x[0].Underlying for x in sorted_by_score[:10]]\n        \n        insights = []\n    \n        for symbol in long_symbols:\n            insights.append(Insight.Price(symbol, Expiry.EndOfDay, InsightDirection.Up))\n        \n        for symbol in short_symbols:\n            insights.append(Insight.Price(symbol, Expiry.EndOfDay, InsightDirection.Down))\n        \n        self.time = Expiry.EndOfDay(algorithm.Time)\n        \n        return insights\n        \n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            # Requesting Data\n            kavout_composite_factor_bundle_symbol = algorithm.AddData(KavoutCompositeFactorBundle, security.Symbol).Symbol\n            \n            # Historical Data\n            history = algorithm.History(kavout_composite_factor_bundle_symbol, 2, Resolution.Daily)\n            algorithm.Debug(f\"We got {len(history)} items from our history request\")\n            \n    def TotalScore(self, value):\n        '''Return the total score to integrate overall likelihood to outcompete, take equal weighting for each factor'''\n        value = value[1]\n        return value.Growth + value.LowVolatility + value.Momentum + value.Quality + value.ValueFactor\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n\tpublic class KavoutCompositeFactorBundleAlgorithm : QCAlgorithm\n\t{\n\t\tpublic override void Initialize()\n\t\t{\n\t\t\tSetStartDate(2003, 1, 10);\n\t\t\tSetEndDate(2003, 1, 15);\n\t\t\tSetCash(100000);\n\t\t\t\n\t\t\tAddUniverse(MyCoarseFilterFunction);\n\t\t\tUniverseSettings.Resolution = Resolution.Minute;\n\t\t\t\n\t\t\tAddAlpha(new KavoutCompositeFactorBundleAlphaModel());\n\t\t\t\n\t\t\tSetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n\t\t\t\n\t\t\tSetExecution(new ImmediateExecutionModel());\n\t\t}\n\t\t\n\t\tprivate IEnumerable&lt;Symbol&gt; MyCoarseFilterFunction(IEnumerable&lt;CoarseFundamental&gt; coarse)\n\t\t{\n\t\t\treturn (from c in coarse\n\t\t\t\t\twhere c.HasFundamentalData\n\t\t\t\t\torderby c.DollarVolume descending\n\t\t\t\t\tselect c.Symbol).Take(100);\n\t\t}\n\t}\n\t\n\tpublic class KavoutCompositeFactorBundleAlphaModel: AlphaModel\n\t{\n\t\tpublic DateTime _time;\n\t\t\n\t\tpublic KavoutCompositeFactorBundleAlphaModel()\n\t\t{\n\t\t\t_time = DateTime.MinValue;\n\t\t}\n\t\t\n\t\tpublic override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n\t\t{\n\t\t\tif (_time &gt; algorithm.Time) return new List&lt;Insight&gt;();\n\t\t\t\n\t\t\t// Accessing Data\n\t\t\tvar points = data.Get&lt;KavoutCompositeFactorBundle&gt;();\n\t\t\tforeach(var kvp in points)\n\t\t\t{\n\t\t\t\talgorithm.Log(@\"Symbol: {kvp.Key} - Growth:{kvp.Value.Growth} - Low Volatility: {kvp.Value.LowVolatility} - Momentum: {kvp.Value.Momentum}\n\t\t\t\t\t- Quality: {kvp.Value.Quality} - Value Factor: {kvp.Value.ValueFactor}\");\n\t\t\t}\n\t\t\t\n\t\t\tvar sortedByScore = from s in points.Values\n\t\t\t\t\t\t\torderby TotalScore(s) descending\n\t\t\t\t\t\t\tselect s.Symbol.Underlying;\n\t\t\tvar longSymbols = sortedByScore.Take(10).ToList();\n\t\t\tvar shortSymbols = sortedByScore.TakeLast(10).ToList();\n\t\t\t\n\t\t\tvar insights = new List&lt;Insight&gt;();\n\t\t\tinsights.AddRange(longSymbols.Select(symbol =&gt; new Insight(symbol, Expiry.EndOfDay, InsightType.Price, InsightDirection.Up)));\n\t\t\tinsights.AddRange(shortSymbols.Select(symbol =&gt; new Insight(symbol, Expiry.EndOfDay, InsightType.Price, InsightDirection.Down)));\n\t\t\t\n\t\t\t_time = Expiry.EndOfDay(algorithm.Time);\n\t\t\t\n\t\t\treturn insights;\n\t\t}\n\t\t\n\t\tpublic override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n\t\t{\n\t\t\tforeach(var security in changes.AddedSecurities)\n\t\t\t{\n\t\t\t\t// Requesting Data\n\t\t\t\tvar kavoutCompositeFactorBundleSymbol = algorithm.AddData&lt;KavoutCompositeFactorBundle&gt;(security.Symbol).Symbol;\n\t\t\t\t\n\t\t\t\t// Historical Data\n\t\t\t\tvar history = algorithm.History(new[]{kavoutCompositeFactorBundleSymbol}, 60, Resolution.Daily);\n\t\t\t\talgorithm.Debug($\"We got {history.Count()} items from our history request\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tprivate decimal TotalScore(KavoutCompositeFactorBundle value)\n\t\t{\n\t\t\t/// Return the total score to integrate overall likelihood to outcompete, take equal weighting for each factor\n\t\t\treturn value.Growth + value.ValueFactor + value.Quality + value.Momentum + value.LowVolatility;\n\t\t}\n\t}\n}\n</code></pre>\n</div>",
        "updated": "2021-11-10 12:04:07"
      },
      {
        "id": 752,
        "master_product_id": 49,
        "position": 3,
        "section": "examples",
        "title": "",
        "content": "",
        "updated": "2021-09-17 14:12:00"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 49,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>Composite Factor Bundle is allowed to be used in the cloud \r\n            for personal and commercial projects with a subscription. The data is permissioned for use within \r\n            the licensed organization only</p><p>Subscription Required | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>Composite Factor Bundle can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 400 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>Composite Factor Bundle is allowed to be used for free by approved Alpha Stream authors with more than 3 \r\n                    Alpha Streams listed in the marketplace. The Kavout will add on a charge of 2 Basis Points \r\n                    for the use of the data to the Alpha Stream reserve price.</p>\r\n                    <p>Free for Authors with 3+ Alphas | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 129,
        "name": "Composite Factor Bundle by Kavout",
        "description": "<p>Download Composite Factor Bundle historical records for your LEAN backtesting and live trading on premise with the LEAN CLI.</p>\n<ul><li>Ownership of the data for internal use</li>\n    <li>Data in LEAN format</li>\n    <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Download On Premise ",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "400 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 128,
        "name": "Composite Factor Bundle by Kavout",
        "description": "<p>Using Kavout Composite Factor Bundle data in the QuantConnect Cloud for your backtesting and live trading purposes.</p>\n<ul><li>Curated, clean data</li>\n    <li>Updated nightly at 4am</li>\n    <li>Mapped to US Equity data with full historical SIP feed</li>\n</ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "$39/mo",
          "monthlyPrice": 39,
          "yearlyPrice": 429,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 429
      }
    ],
    "headerColor": "42dffe"
  },
  {
    "name": "Bitcoin Metadata",
    "vendorName": "Blockchain",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/blockchain.png",
    "landingFileName": "bitcoin-metadata.html",
    "url": "/datasets/bitcoin-metadata",
    "short_description": "Bitcoin processing fundamental data such as hash rate, miner revenue, and number of transactions.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p> The Bitcoin Metadata dataset by Blockchain provides 23 fundamental metadata of Bitcoin directly fetched from the Bitcoin blockchain. The data starts in January 2009 and delivered on a daily frequency. This dataset contains mining statistics like hash rate and miner revenue; transaction metadata like transaction per block, transaction fee, and number of addresses; and blockchain metadata like blockchain size and block size.\n</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\n<a href=\"https://www.blockchain.com\">Blockchain</a> is a website that publishes data related to Bitcoin. It has been online since 2011 and publishes the Bitcoin Metadata history back to 2009.\n</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Requesting data:\nself.btcusd = self.AddCrypto(\"BTCUSD\", Resolution.Daily, Market.Bitfinex).Symbol\nbitcoin_metadata_symbol = self.AddData(BitcoinMetadata, self.btcusd).Symbol </code></pre>\n<pre><code class=\"language-cs\">// Requesting data:\nbtcusd = AddCrypto(\"BTCUSD\", Resolution.Daily, Market.Bitfinex).Symbol;\nbitcoinMetadataSymbol = AddData&lt;BitcoinMetadata&gt;(btcusd).Symbol; </code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 2009</td>\n        </tr><tr><td>Coverage</td>\n            <td>Bitcoin blockchain</td>\n        </tr><tr><td>Data Density</td>\n            <td>Regular</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe Bitcoin Metadata dataset by Blockchain enables researchers to incorporate metadata from the Bitcoin blockchain into their strategies. Examples include:\n</p>\n<ul><li>Comparing mining and transaction statistics to provide insight on the supply-demand relationship of the Bitcoin blockchain service.</li>\n<li>Measuring the activity and popularity of the Bitcoin blockchain to predict the price movements of the Cryptocurrency.</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_6ed5685f4e52917fec89e5d7c7cc2f67.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Bitcoin Metadata dataset provides BitcoinMetadata objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.BitcoinMetadata\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p> To add Bitcoin Metadata dataset to your algorithm, use the AddData() method to request the data. Note that the data has to be accessed by the symbol \u201cBTCUSD\u201d. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\"> class BlockchainBitcoinMetadataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        self.btcusd = self.AddCrypto(\"BTCUSD\", Resolution.Daily, Market.Bitfinex).Symbol\n        bitcoin_metadata_symbol = self.AddData(BitcoinMetadata, self.btcusd).Symbol </code></pre>\n<pre><code class=\"language-cs\"> namespace QuantConnect\n{\n    public class BlockchainBitcoinMetadataAlgorithm: QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n\n            var btcusd = AddCrypto(\"BTCUSD\", Resolution.Daily, Market.Bitfinex).Symbol;\n            var bitcoinMetadataSymbol = AddData&lt;BitcoinMetadata&gt;(btcusd).Symbol;\n        }\n    }\n}\n</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\"> def OnData(self, data):\n    points = data.Get(BlockchainBitcoinData)\n    for kvp in points:\n        Log(f\"\"\"{Symbol} - Difficulty {Difficulty},\n                My Wallet Number of Users {MyWalletNumberofUsers},\n                Average Block Size {AverageBlockSize},\n                Blockchain Size {BlockchainSize},\n                Median Transaction Confirmation Time {MedianTransactionConfirmationTime},\n                Miners Revenue {MinersRevenue},\n                Hash Rate {HashRate},\n                Cost Per Transaction {CostPerTransaction},\n                Cost Percent of Transaction Volume {CostPercentofTransactionVolume},\n                Estimated Transaction Volume USD {EstimatedTransactionVolumeUSD},\n                Estimated Transaction Volume {EstimatedTransactionVolume},\n                Total Output Volume {TotalOutputVolume},\n                Number of Transaction per Block {NumberofTransactionperBlock},\n                Number of Unique Bitcoin Addresses Used {NumberofUniqueBitcoinAddressesUsed},\n                Number of Transactions Excluding Popular Addresses {NumberofTransactionsExcludingPopularAddresses},\n                Total Number of Transactions {TotalNumberofTransactions},\n                Number of Transactions {NumberofTransactions},\n                Total Transaction Fees USD {TotalTransactionFeesUSD},\n                Total Transaction Fees {TotalTransactionFees},\n                Market Capitalization {MarketCapitalization},\n                Total Bitcoins {TotalBitcoins},\n                My Wallet Number of Transaction Per Day {MyWalletNumberofTransactionPerDay},\n                My Wallet Transaction Volume {MyWalletTransactionVolume}\"\"\")\n</code></pre>\n<pre><code class=\"language-cs\"> public override void OnData(Slice data)\n{\n    var points = data.Get&lt;BitcoinMetadata&gt;();\n    foreach (var point in points.Values)\n    {\n        Log($@\"{Symbol} - Difficulty {Difficulty},\n                My Wallet Number of Users {MyWalletNumberofUsers},\n                Average Block Size {AverageBlockSize},\n                Blockchain Size {BlockchainSize},\n                Median Transaction Confirmation Time {MedianTransactionConfirmationTime},\n                Miners Revenue {MinersRevenue},\n                Hash Rate {HashRate},\n                Cost Per Transaction {CostPerTransaction},\n                Cost Percent of Transaction Volume {CostPercentofTransactionVolume},\n                Estimated Transaction Volume USD {EstimatedTransactionVolumeUSD},\n                Estimated Transaction Volume {EstimatedTransactionVolume},\n                Total Output Volume {TotalOutputVolume},\n                Number of Transaction per Block {NumberofTransactionperBlock},\n                Number of Unique Bitcoin Addresses Used {NumberofUniqueBitcoinAddressesUsed},\n                Number of Transactions Excluding Popular Addresses {NumberofTransactionsExcludingPopularAddresses},\n                Total Number of Transactions {TotalNumberofTransactions},\n                Number of Transactions {NumberofTransactions},\n                Total Transaction Fees USD {TotalTransactionFeesUSD},\n                Total Transaction Fees {TotalTransactionFees},\n                Market Capitalization {MarketCapitalization},\n                Total Bitcoins {TotalBitcoins},\n                My Wallet Number of Transaction Per Day {MyWalletNumberofTransactionPerDay},\n                My Wallet Transaction Volume {MyWalletTransactionVolume}\");\n    }\n}\n</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical Options data by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for US Options by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(bitcoin_metadata_symbol, 10, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History(new[]{bitcoinMetadataSymbol}, 10, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Bitcoin Metadata dataset provides BitcoinMetadata objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.BitcoinMetadata\"></div>"
      }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "https://www.quantconnect.com/market",
    "examples": [
      {
        "id": 794,
        "master_product_id": 52,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>This algorithm demonstrates the use of the Bitcoin Metadata dataset as a source of alpha. We would invest BTCUSD if the transaction-to-hash-rate ratio of yesterday in the Bitcoin blockchain was higher than that of the previous day.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class BlockchainBitcoinMetadataAlgorithm(QCAlgorithm):\n    \n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)   # Set Start Date\n        self.SetEndDate(2020, 12, 31)    # Set End Date\n        self.SetCash(100000)\n\n        self.btcusd = self.AddCrypto(\"BTCUSD\", Resolution.Minute).Symbol\n        ### Requesting data\n        self.bitcoin_metadata_symbol = self.AddData(BitcoinMetadata, self.btcusd).Symbol\n\n        ### Historical data\n        history = self.History(BitcoinMetadata, self.bitcoin_metadata_symbol, 60, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request for {self.btcusd} Blockchain Bitcoin Metadata\")\n\n        self.last_demand_supply = None\n\n    def OnData(self, slice):\n        ### Retrieving data\n        data = slice.Get(BitcoinMetadata)\n        \n        if self.bitcoin_metadata_symbol in data and data[self.bitcoin_metadata_symbol] != None:\n            current_demand_supply = data[self.bitcoin_metadata_symbol].NumberofTransactions / data[self.bitcoin_metadata_symbol].HashRate\n\n            # comparing the average transaction-to-hash-rate ratio changes, we will buy bitcoin or hold cash\n            if self.last_demand_supply != None and current_demand_supply &gt; self.last_demand_supply:\n                self.SetHoldings(self.btcusd, 1)\n            else:\n                self.SetHoldings(self.btcusd, 0)\n\n            self.last_demand_supply = current_demand_supply\n</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect.Algorithm.CSharp\n{\n    public class BlockchainBitcoinMetadataAlgorithm : QCAlgorithm\n    {\n        private Symbol _bitcoinMetadataSymbol;\n        private Symbol _btcSymbol;\n        private decimal? _lastDemandSupply = null;\n\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);  //Set Start Date\n            SetEndDate(2020, 12, 31);    //Set End Date\n            SetCash(100000);\n\n            _btcSymbol = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.Bitfinex).Symbol; \n            // Requesting data\n            _bitcoinMetadataSymbol = AddData&lt;BitcoinMetadata&gt;(_btcSymbol).Symbol;\n\n            // Historical data\n            var history = History(new[]{_bitcoinMetadataSymbol}, 60, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request for {_btcSymbol} Blockchain Bitcoin Metadata\");\n        }\n\n        public override void OnData(Slice slice)\n        {\n            // Get data\n            var data = slice.Get&lt;BitcoinMetadata&gt;();\n            if (!data.IsNullOrEmpty())\n            {\n                var currentDemandSupply = data[_bitcoinMetadataSymbol].NumberofTransactions / data[_bitcoinMetadataSymbol].HashRate;\n\n                // comparing the average transaction-to-hash-rate ratio changes, we will buy bitcoin or hold cash\n                if (_lastDemandSupply != null &amp;&amp; currentDemandSupply &gt; _lastDemandSupply)\n                {\n                    SetHoldings(_btcSymbol, 1);\n                }\n                else\n                {\n                    SetHoldings(_btcSymbol, 0);\n                }\n\n                _lastDemandSupply = currentDemandSupply;\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-11-12 12:25:23"
      },
      {
        "id": 796,
        "master_product_id": 52,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>This algorithm demonstrates the use of the Bitcoin Metadata dataset as a source of alpha in Framework. We would hold BTCUSD for 1 day if the transaction-to-hash-rate ratio of yesterday in the Bitcoin blockchain was higher than that of the previous day.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\"> \nclass BlockchainBitcoinMetadataFrameworkAlgorithm(QCAlgorithm):\n    \n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)   # Set Start Date\n        self.SetEndDate(2020, 12, 31)    # Set End Date\n        self.SetCash(100000)\n\n        self.AddUniverseSelection(\n            ManualUniverseSelectionModel(\n            Symbol.Create(\"BTCUSD\", SecurityType.Crypto, Market.Bitfinex)\n        ))\n\n        self.AddAlpha(BlockchainBitcoinMetadataAlphaModel())\n        \n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n        \n        self.AddRiskManagement(NullRiskManagementModel())\n        \n        self.SetExecution(ImmediateExecutionModel())\n        \nclass BlockchainBitcoinMetadataAlphaModel(AlphaModel):\n    \n    def __init__(self):\n        self.bitcoin_metadata_symbol_by_symbol = {}\n        self.last_demand_supply = {}\n\n    def Update(self, algorithm, slice):\n        insights = []\n        \n        ### Retrieving data\n        data = slice.Get(BitcoinMetadata)\n        \n        for symbol, bitcoin_metadata_symbol in self.bitcoin_metadata_symbol_by_symbol.items():\n            if data.ContainsKey(bitcoin_metadata_symbol) and data[bitcoin_metadata_symbol] != None:\n                current_demand_supply = data[bitcoin_metadata_symbol].NumberofTransactions / data[bitcoin_metadata_symbol].HashRate\n\n                # comparing the transaction-to-hash-rate ratio changes, we will buy bitcoin or hold cash\n                if symbol in self.last_demand_supply and current_demand_supply &gt; self.last_demand_supply[symbol]:\n                    insights.append(Insight.Price(symbol, timedelta(1), InsightDirection.Up))\n\n                self.last_demand_supply[symbol] = current_demand_supply\n                \n        return insights\n\n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            symbol = security.Symbol\n            \n            ### Requesting data\n            bitcoin_metadata_symbol = algorithm.AddData(BitcoinMetadata, symbol).Symbol\n\n            self.bitcoin_metadata_symbol_by_symbol[symbol] = bitcoin_metadata_symbol\n\n            ### Historical data\n            history = algorithm.History(BitcoinMetadata, bitcoin_metadata_symbol, 60, Resolution.Daily)\n            algorithm.Debug(f\"We got {len(history)} items from our history request for {symbol} Blockchain Bitcoin Metadata\")</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect.Algorithm.CSharp\n{\n    public class BlockchainBitcoinMetadataFrameworkAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);  //Set Start Date\n            SetEndDate(2020, 12, 31);    //Set End Date\n            SetCash(100000);\n\n            AddUniverseSelection(\n                new ManualUniverseSelectionModel(\n                QuantConnect.Symbol.Create(\"BTCUSD\", SecurityType.Crypto, Market.Bitfinex)\n            ));\n\n            AddAlpha(new BlockchainBitcoinMetadataAlphaModel());\n            \n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n            \n            AddRiskManagement(new NullRiskManagementModel());\n            \n            SetExecution(new ImmediateExecutionModel());\n        }\n    }\n\n    public class BlockchainBitcoinMetadataAlphaModel: AlphaModel\n    {\n        private Dictionary&lt;Symbol, Symbol&gt; _bitcoinMetadataSymbolBySymbol = new Dictionary&lt;Symbol, Symbol&gt;();\n        private Dictionary&lt;Symbol, decimal&gt; _lastDemandSupply = new Dictionary&lt;Symbol, decimal&gt;();\n\n        public BlockchainBitcoinMetadataAlphaModel(){}\n\n        public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice slice)\n        {\n            var insights = new List&lt;Insight&gt;();\n            \n            // Get data\n            var data = slice.Get&lt;BitcoinMetadata&gt;();\n            if (!data.IsNullOrEmpty())\n            {\n                foreach(var kvp in _bitcoinMetadataSymbolBySymbol)\n                {\n                    var symbol = kvp.Key;\n                    var bitcoinMetadataSymbol = kvp.Value;\n\n                    var currentDemandSupply = data[bitcoinMetadataSymbol].NumberofTransactions / data[bitcoinMetadataSymbol].HashRate;\n\n                    // comparing the transaction-to-hash-rate ratio changes, we will buy bitcoin or hold cash\n                    if (_lastDemandSupply.ContainsKey(symbol) &amp;&amp; currentDemandSupply &gt; _lastDemandSupply[symbol])\n                    {\n                        insights.Add(Insight.Price(symbol, TimeSpan.FromDays(1), InsightDirection.Up));\n                    }\n\n                    _lastDemandSupply[symbol] = currentDemandSupply;\n                }\n            }\n            \n            return insights;\n        }\n\n        public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n        {\n            foreach (var security in changes.AddedSecurities)\n            {\n                var symbol = security.Symbol;\n                // Requesting data\n                var bitcoinMetadataSymbol = algorithm.AddData&lt;BitcoinMetadata&gt;(symbol).Symbol;\n\n                _bitcoinMetadataSymbolBySymbol.Add(symbol, bitcoinMetadataSymbol);\n\n                // Historical data\n                var history = algorithm.History(new[]{bitcoinMetadataSymbol}, 60, Resolution.Daily);\n                algorithm.Debug($\"We got {history.Count()} items from our history request for {symbol} Blockchain Bitcoin Metadata\");\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2021-11-12 12:25:44"
      }
    ],
    "pricingText": "",
    "pricing": [
      {
        "id": null,
        "master_product_id": 52,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>Bitcoin Metadata is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>Bitcoin Metadata can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 5 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>Bitcoin Metadata is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 135,
        "name": "Bitcoin Metadata",
        "description": "<p>Using Bitcoin Metadata dataset in the QuantConnect Cloud for your backtesting and live trading purposes.</p>\n<ul><li>Curated, clean data</li>\n    <li>Updated nightly at 1am (UTC 5am)</li>\n    <li>Mapped to Cryptos data</li>\n</ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 136,
        "name": "Bitcoin Metadata",
        "description": "<p>Bitcoin Metadata archived in LEAN format for on premise backtesting and research.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Download On Premise",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "5 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      }
    ],
    "headerColor": "4eff2b"
  },
  {
    "name": "NFT Sales",
    "vendorName": "CryptoSlam!",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/cryptoslamv2black-logo.png",
    "landingFileName": "cryptoslam-nft-sales.html",
    "url": "/datasets/cryptoslam-nft-sales",
    "short_description": "NFT sales data from 5 blockchains, provided by CryptoSlam! and cached by QuantConnect.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p> The NFT Sales dataset by CryptoSlam! provides Non-Fungible Tokens (NFT) sales volume data in various blockchain marketplaces. This dataset covers 11 blockchains that have their own native Cryptocurrencies. The data starts in June 2017 and is delivered on a daily frequency. This dataset fetches the number of transactions, unique buyers, unique sellers, and the dollar volume of NFT transactions on all secondary marketplaces tracked by CryptoSlam, which includes owner-to-owner sales only (not initial sales from the product directly to the owners).\n</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\n<a href=\"http://cryptoslam.io/\">CryptoSlam!</a> is an NFT industry data aggregator backed by Mark Cuban. Features project analytics, NFT values, rarity, scarcity, most popular collections, activity history &amp; more.\n</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Requesting data:\nself.ethusd = self.AddCrypto(\"ETHUSD\", Resolution.Daily, Market.Bitfinex).Symbol\ncryptoSlam_nft_sales_symbol = self.AddData(CryptoSlamNFTSales, \"ETH\").Symbol</code></pre>\n<pre><code class=\"language-cs\">// Requesting data:\nethusd = AddCrypto(\"ETHUSD\", Resolution.Daily, Market.Bitfinex).Symbol;\ncryptoSlamNFTSalesSymbol = AddData&lt;CryptoSlamNFTSales&gt;(\"ETH\").Symbol;</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>June 2017</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>11 blockchains</td>\n        </tr><tr><td>Data Density</td>\n            <td>Sparse</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Supported Blockchains and Symbols",
        "content": "<p>The following table shows the blockchains tracked in the NFT Sales dataset:</p>\n<table class=\"table qc-table table-dense\"><thead><tr><td>Symbol</td><td>Blockchain Represented</td><td>Start Date</td></tr></thead><tbody><tr><td>AVAX</td><td>Avalanche</td><td>1st Sept 2021</td></tr><tr><td>CRO</td><td>Cronos</td><td>18th Dec 2021</td></tr><tr><td>ETH</td><td>Ethereum</td><td>23rd Jun 2017</td></tr><tr><td>FLOW</td><td>Flow</td><td>28th Jul 2020</td></tr><tr><td>FTM</td><td>Fantom</td><td>15th Sept 2021</td></tr><tr><td>MATIC</td><td>Polygon</td><td>Mar 2021</td></tr><tr><td>SOL</td><td>Solana</td><td>5th Aug 2021</td></tr><tr><td>THETA</td><td>Theta</td><td>24th Jun 2021</td></tr><tr><td>WAVE</td><td>Waves</td><td>3rd Jun 2021</td></tr><tr><td>WAX</td><td>Wax</td><td>16th Mar 2020</td></tr><tr><td>XTZ</td><td>Tezos</td><td>1st Mar 2021</td></tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>The NFT Sales dataset by CryptoSlam! enables researchers to incorporate NFT sales information into their strategies. Examples include:</p>\n<ul><li>Studying the correlation between the supply-demand trend of NFTs and the price changes of the underlying cryptocurrencies.</li>\n<li>Measuring the activity/popularity blockchains to provide insight on the future price movements of the underlying cryptocurrencies.</li></ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_f5ede868a29b4177bb572ad3f2ffafea.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The NFT Sales dataset provides CryptoSlamNFTSales objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.CryptoSlamNFTSales\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add NFT Sales dataset by CryptoSlam! to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class CryptoSlamNFTSalesAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        self.ethusd = self.AddCrypto(\"ETHUSD\", Resolution.Daily, Market.Bitfinex).Symbol\n        self.cryptoSlam_nft_sales_symbol = self.AddData(CryptoSlamNFTSales, \"ETH\").Symbol</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class CryptoSlamNFTSalesAlgorithm: QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n\n            var ethusd = AddCrypto(\"ETHUSD\", Resolution.Daily, Market.Bitfinex).Symbol;\n            var cryptoSlamNFTSalesSymbol = AddData&lt;CryptoSlamNFTSales&gt;(\"ETH\").Symbol;\n        }\n    }\n}\n</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    points = data.Get(CryptoSlamNFTSales)\n    for kvp in points:\n        Log(f\"\"\"Symbol: {kvp.Key} - Number of Transactions: {TotalTransactions} - Number of Unique Buyers: {UniqueBuyers}\n             - Number of Unique Sellers: {UniqueSellers} - Total Transaction Value (in USD): {TotalPriceUSD}\"\"\")\n</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var points = data.Get&lt;CryptoSlamNFTSales&gt;();\n    foreach (var point in points.Values)\n    {\n        Log($@\"Symbol: {kvp.Key} - Number of Transactions: {TotalTransactions} - Number of Unique Buyers: {UniqueBuyers}\n             - Number of Unique Sellers: {UniqueSellers} - Total Transaction Value (in USD): {TotalPriceUSD}\");\n    }\n}\n</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request NFT Sales dataset by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(cryptoSlam_nft_sales_symbol, 10, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History(new[]{cryptoSlamNFTSalesSymbol}, 10, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The NFT Sales dataset provides CryptoSlamNFTSales objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.CryptoSlamNFTSales\"></div>"
      }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "https://www.quantconnect.com/market",
    "examples": [
      {
        "id": 810,
        "master_product_id": 53,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>This algorithm demonstrates the use of NFT Sales data as a source of alpha. We would invest ETHUSD if the average price per transaction of yesterday in the Ethereum blockchain was higher than that of the previous day.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class CryptoSlamNFTSalesAlgorithm(QCAlgorithm):\n    \n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)   # Set Start Date\n        self.SetEndDate(2020, 12, 31)    # Set End Date\n        self.SetCash(100000)\n\n        self.ethusd = self.AddCrypto(\"ETHUSD\", Resolution.Minute).Symbol\n        ### Requesting data\n        self.eth_nft_sales_symbol = self.AddData(CryptoSlamNFTSales, \"ETH\").Symbol\n\n        ### Historical data\n        history = self.History(self.eth_nft_sales_symbol, 60, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request for ETH CryptoSlam NFT Sales data\")\n\n        self.last_avg_sales = None\n\n    def OnData(self, slice):\n        ### Retrieving data\n        data = slice.Get(CryptoSlamNFTSales)\n        \n        if self.eth_nft_sales_symbol in data and data[self.eth_nft_sales_symbol] != None:\n            current_avg_sales = data[self.eth_nft_sales_symbol].TotalPriceUSD / data[self.eth_nft_sales_symbol].TotalTransactions\n\n            # comparing the average sales changes, we will buy ethereum or hold cash\n            if self.last_avg_sales != None and current_avg_sales &gt; self.last_avg_sales:\n                self.SetHoldings(self.ethusd, 1)\n            else:\n                self.SetHoldings(self.ethusd, 0)\n\n            self.last_avg_sales = current_avg_sales\n</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect.Algorithm.CSharp\n{\n    public class CryptoSlamNFTSalesAlgorithm : QCAlgorithm\n    {\n        private Symbol _nftSalesSymbol;\n        private Symbol _ethSymbol;\n        private decimal? _lastAvgSales = null;\n\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 12, 31);\n            SetCash(100000);\n\n            _ethSymbol = AddCrypto(\"ETHUSD\", Resolution.Minute).Symbol; \n            // Requesting data\n            _nftSalesSymbol = AddData&lt;CryptoSlamNFTSales&gt;(\"ETH\").Symbol;\n\n            // Historical data\n            var history = History(new[]{_nftSalesSymbol}, 60, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request for ETH CryptoSlam NFT Sales data\");\n        }\n\n        public override void OnData(Slice slice)\n        {\n            // Retrieving data\n            var data = slice.Get&lt;CryptoSlamNFTSales&gt;();\n            if (!data.IsNullOrEmpty())\n            {\n                var currentAvgSales = data[_nftSalesSymbol].TotalPriceUSD / data[_nftSalesSymbol].TotalTransactions;\n\n                // comparing the average sales changes, we will buy ethereum or hold cash\n                if (_lastAvgSales != null &amp;&amp; currentAvgSales &gt; _lastAvgSales)\n                {\n                    SetHoldings(_ethSymbol, 1);\n                }\n                else\n                {\n                    SetHoldings(_ethSymbol, 0);\n                }\n\n                _lastAvgSales = currentAvgSales;\n            }\n        }\n    }\n}\n</code></pre>\n</div>",
        "updated": "2022-03-25 14:13:32"
      },
      {
        "id": 812,
        "master_product_id": 53,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>This algorithm demonstrates the use of NFT Sales data as a source of alpha in Framework. We would hold ETHUSD for 1 day if the average price per transaction of yesterday in the Ethereum blockchain was higher than that of the previous day.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\"> \nclass CryptoSlamNFTSalesFramework(QCAlgorithm):\n    \n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)   # Set Start Date\n        self.SetEndDate(2020, 12, 31)    # Set End Date\n        self.SetCash(100000)\n\n        self.AddUniverseSelection(\n            ManualUniverseSelectionModel(\n            Symbol.Create(\"ETHUSD\", SecurityType.Crypto, Market.Bitfinex)\n        ))\n\n        self.AddAlpha(CryptoSlamNFTSalesAlphaModel())\n        \n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n        \n        self.AddRiskManagement(NullRiskManagementModel())\n        \n        self.SetExecution(ImmediateExecutionModel())\n        \nclass CryptoSlamNFTSalesAlphaModel(AlphaModel):\n    \n    def __init__(self):\n        self.nft_sales_symbol_by_symbol = {}\n        self.last_avg_sales = {}\n\n    def Update(self, algorithm, slice):\n        insights = []\n        \n        ### Retrieving data\n        data = slice.Get(CryptoSlamNFTSales)\n        \n        for symbol, nft_sales_symbol in self.nft_sales_symbol_by_symbol.items():\n            if data.ContainsKey(nft_sales_symbol) and data[nft_sales_symbol] != None:\n                current_avg_sales = data[nft_sales_symbol].TotalPriceUSD / data[nft_sales_symbol].TotalTransactions\n\n                # comparing the average sales changes, we will buy ethereum or hold cash\n                if symbol in self.last_avg_sales and current_avg_sales &gt; self.last_avg_sales[symbol]:\n                    insights.append(Insight.Price(symbol, timedelta(1), InsightDirection.Up))\n\n                self.last_avg_sales[symbol] = current_avg_sales\n                \n        return insights\n\n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            symbol = security.Symbol\n            \n            ### Requesting data\n            nft_ticker = symbol.Value.replace(\"USD\", \"\")\n            nft_sales_symbol = algorithm.AddData(CryptoSlamNFTSales, nft_ticker).Symbol\n\n            self.nft_sales_symbol_by_symbol[symbol] = nft_sales_symbol\n\n            ### Historical data\n            history = algorithm.History(nft_sales_symbol, 60, Resolution.Daily)\n            algorithm.Debug(f\"We got {len(history)} items from our history request for {nft_ticker} CryptoSlam NFT Sales data\")\n</code></pre>\n<pre><code class=\"language-cs\"> \nnamespace QuantConnect.Algorithm.CSharp\n{\n    public class CryptoSlamNFTSalesFrameworkAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);  //Set Start Date\n            SetEndDate(2020, 12, 31);    //Set End Date\n            SetCash(100000);\n\n            AddUniverseSelection(\n                new ManualUniverseSelectionModel(\n                QuantConnect.Symbol.Create(\"ETHUSD\", SecurityType.Crypto, Market.Bitfinex)\n            ));\n\n            AddAlpha(new CryptoSlamNFTSalesAlphaModel());\n            \n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n            \n            AddRiskManagement(new NullRiskManagementModel());\n            \n            SetExecution(new ImmediateExecutionModel());\n        }\n    }\n\n    public class CryptoSlamNFTSalesAlphaModel: AlphaModel\n    {\n        private Dictionary&lt;Symbol, Symbol&gt; _nftSalesSymbolBySymbol = new Dictionary&lt;Symbol, Symbol&gt;();\n        private Dictionary&lt;Symbol, decimal&gt; _lastAvgSales = new Dictionary&lt;Symbol, decimal&gt;();\n\n        public CryptoSlamNFTSalesAlphaModel(){}\n\n        public override IEnumerable&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice slice)\n        {\n            var insights = new List&lt;Insight&gt;();\n            \n            // Get data\n            var data = slice.Get&lt;CryptoSlamNFTSales&gt;();\n            if (!data.IsNullOrEmpty())\n            {\n                foreach(var kvp in _nftSalesSymbolBySymbol)\n                {\n                    var symbol = kvp.Key;\n                    var nftSalesSymbol = kvp.Value;\n\n                    var currentAvgSales = data[nftSalesSymbol].TotalPriceUSD / data[nftSalesSymbol].TotalTransactions;\n\n                    // comparing the average sales changes, we will buy ethereum or hold cash\n                    if (_lastAvgSales.ContainsKey(symbol) &amp;&amp; currentAvgSales &gt; _lastAvgSales[symbol])\n                    {\n                        insights.Add(Insight.Price(symbol, TimeSpan.FromDays(1), InsightDirection.Up));\n                    }\n\n                    _lastAvgSales[symbol] = currentAvgSales;\n                }\n            }\n            \n            return insights;\n        }\n\n        public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n        {\n            foreach (var security in changes.AddedSecurities)\n            {\n                var symbol = security.Symbol;\n\n                // Requesting data\n                var nftTicker = symbol.Value.Replace(\"USD\", \"\");\n                var nftSalesSymbol = algorithm.AddData&lt;CryptoSlamNFTSales&gt;(nftTicker).Symbol;\n\n                _nftSalesSymbolBySymbol.Add(symbol, nftSalesSymbol);\n\n                // Historical data\n                var history = algorithm.History(new[]{nftSalesSymbol}, 60, Resolution.Daily);\n                algorithm.Debug($\"We got {history.Count()} items from our history request for {nftTicker} CryptoSlam NFT Sales data\");\n            }\n        }\n    }\n}\n</code></pre>\n</div>",
        "updated": "2022-03-25 14:16:05"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 53,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>NFT Sales is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>NFT Sales can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 10 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>NFT Sales is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 133,
        "name": "NFT Sales by CryptoSlam",
        "description": "<p>Using CryptoSlam NFT Sales data in the QuantConnect Cloud for your backtesting and live trading purposes.</p>\n<ul><li>Curated, clean data</li>\n    <li>Updated nightly at 9pm (UTC 1am)</li>\n    <li>Mapped to Cryptos data</li>\n</ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 134,
        "name": "CryptoSlam - On Premise Download",
        "description": "<p>CryptoSlam NFT Sales archived in LEAN format for on premise backtesting and research.</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Download On Premise",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "10 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      }
    ],
    "headerColor": "42dffe"
  },
  {
    "name": "US Futures Security Master",
    "vendorName": "QuantConnect",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/qc-logo.svg",
    "landingFileName": "quantconnect-us-futures-security-master.html",
    "url": "/datasets/quantconnect-us-futures-security-master",
    "short_description": "Rolling reference data for 75 popular CME futures contracts. Data is provided on a daily frequency since 2012.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The US Futures Security Master dataset by QuantConnect provides mapping reference data for the most liquid contracts of the CME Group exchanges, calculated with popular rolling techniques. The data covers 75 root Future contracts, starts in 2012, and is delivered on a daily frequency with a zip file with all the contract mappings. This dataset is created by daily processing of the US historical Future chains.</p>\n\n<p>This dataset, paired the US Futures dataset, supports the following rolling techniques: ForwardPanamaCanal, BackwardsPanamaCanal, and Backwards Ratio. You can set the specific date of rolling to occur on the LastTradingDay, FirstDayMonth, or on the day where the contract with the greatest OpenInterest changes.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\nQuantConnect was founded in 2012 to serve quants everywhere with the best possible algorithmic trading technology. Seeking to disrupt a notoriously closed-source industry, QuantConnect takes a radically open-source approach to algorithmic trading. Through the QuantConnect web platform, more than 50,000 quants are served every month.\n</p>"
      },
      {
        "title": "Getting Started",
        "content": "<p>No special code is required to utilize the QuantConnect US Futures Security Master. It is automatically loaded on requesting US Futures data.</p>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 2012</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>75 Liquid Futures</td>\n        </tr><tr><td>Data Density</td>\n            <td>Regular</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe QuantConnect US Futures Security Master enables researchers to design strategies harnessing continuous Futures contracts. Examples include: \n</p>\n<ul><li>Trading cyclical patterns in commodity Futures.</li>\n<li>Buying gold Futures as an inflation hedge with automatic contract roll overs.</li>\n<li>Detecting arbitrage opportunities between index Futures and Equities.</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_01e510ce25934c5b91370a8fb6a8cb81.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The US Futures Security Master dataset provides SymbolChangedEvent objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.SymbolChangedEvent\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Introduction",
        "content": "<p>This dataset allows users to construct continuous futures, allowing the access of normalized historical data of the underlying assets, as well as trading the \u201clead\u201d future contracts for those assets.\n<br /><br />\nContinuous futures refer to sets of rolling lead future contracts during their actively trading periods. Since future contracts will expire at their maturities, to retrieve the historical price movement of the underlying assets, continuous futures are needed for their time series analysis.\n<br /><br />\nIn LEAN, a continuous future can be accessed by a canonical symbol object:</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nself.continuous_contract = self.AddFuture(Futures.Energies.CrudeOilWTI,\n                                          dataNormalizationMode = DataNormalizationMode.BackwardsRatio,\n                                          dataMappingMode = DataMappingMode.OpenInterest,\n                                          contractDepthOffset = 0)\nself.symbol = self.continuous_contract.Symbol\n</code></pre>\n<pre><code class=\"language-cs\">var _continuousContract = AddFuture(Futures.Energies.CrudeOilWTI,\n    dataNormalizationMode: DataNormalizationMode.BackwardsRatio,\n    dataMappingMode: DataMappingMode.OpenInterest,\n    contractDepthOffset: 0\n);\nvar _symbol = _continuousContract.Symbol;</code></pre>\n</div>\n<p>Note that in order to have a seamless transition of the underlying contracts, it is necessary to have the <i>dataNormalizationMode</i> and <i>dataMappingMode</i> inputs. For technical details, please refer to the later part of this doc.\n<br /><br />\nHowever, a canonical symbol is only mapped to the security added by <i>AddFuture</i> as a reference but not any underlying future contract. It works fine to trade within the backtest, but could be subjected to friction costs during live trading, as the order price used could be a normalized price. Please refer to \u201cLive Trading Considerations\u201d part of this docs for details.</p>"
      },
      {
        "title": "Data Normalization Modes",
        "content": "<p>This is the price scaling mode to use. For continuous futures, the following data normalization modes could be accepted:</p>\n<table class=\"table qc-table table-dense\"><tr><td><b>Data Normalization Mode</b></td><td><b>Definition</b></td></tr><tr><td>DataNormalizationMode.Raw</td><td>The raw price.</td></tr><tr><td>DataNormalizationMode.ForwardPanamaCanal</td><td>Eliminates price jumps between two consecutive contracts, adding a factor based on the difference of their prices.\n<br /><br />The first contract has the true price.</td></tr><tr><td>DataNormalizationMode.BackwardsPanamaCanal</td><td>Eliminates price jumps between two consecutive contracts, adding a factor based on the difference of their prices.<br /><br />The last contract has the true price.</td></tr><tr><td>DataNormalizationMode.BackwardsRatio</td><td>Eliminates price jumps between two consecutive contracts, multiplying the prices by their ratio.<br /><br />The last contract has the true price.</td></tr></table><p>If any other data normalization mode is used, it will be converted to <i>DataNormalizationMode.BackwardsRatio</i> automatically.</p>\n<br /><p>Example on how to use:</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nself.continuous_contract = self.AddFuture(Futures.Energies.CrudeOilWTI,\n                                          dataNormalizationMode = DataNormalizationMode.BackwardsRatio,\n                                          dataMappingMode = DataMappingMode.OpenInterest,\n                                          contractDepthOffset = 0)\n</code></pre>\n<pre><code class=\"language-cs\">_continuousContract = AddFuture(Futures.Energies.CrudeOilWTI,\n    dataNormalizationMode: DataNormalizationMode.BackwardsRatio,\n    dataMappingMode: DataMappingMode.OpenInterest,\n    contractDepthOffset: 0\n);</code></pre>\n</div>"
      },
      {
        "title": "Data Mapping Modes",
        "content": "<p>The below are the continuous contracts mapping modes accepted by continuous futures. It will decide when should the underlying contract changes. It must be selected from the below, otherwise, an Exception will be thrown.</p>\n<table class=\"table qc-table table-dense\"><tr><td><b>Data Mapping Mode</b></td><td><b>Definition</b></td></tr><tr><td>DataMappingMode.LastTradingDay</td><td>The contract maps on the previous day of expiration of the front month.</td></tr><tr><td>DataMappingMode.FirstDayMonth</td><td>The contract maps on the first date of the delivery month of the front month. If the contract expires prior to this date, then it rolls on the contract's last trading date instead.</td></tr><tr><td>DataMappingMode.OpenInterest</td><td>The contract maps when the back month contract has a higher volume that the current front month.</td></tr></table><br /><p>Example on how to use:</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nself.continuous_contract = self.AddFuture(Futures.Energies.CrudeOilWTI,\n                                          dataNormalizationMode = DataNormalizationMode.BackwardsRatio,\n                                          dataMappingMode = DataMappingMode.OpenInterest,\n                                          contractDepthOffset = 0)\n</code></pre>\n<pre><code class=\"language-cs\">_continuousContract = AddFuture(Futures.Energies.CrudeOilWTI,\n    dataNormalizationMode: DataNormalizationMode.BackwardsRatio,\n    dataMappingMode: DataMappingMode.OpenInterest,\n    contractDepthOffset: 0\n);</code></pre>\n</div>"
      },
      {
        "title": "Tracking Contract Changes ",
        "content": "<p>Symbol change events can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the Symbol object when you add the data for easy access to the slice later. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    symbolChangedEvent = data.SymbolChangedEvents.get(self.symbol)\n    if symbolChangedEvent:\n        self.Log(f\"Symbol changed: {symbolChangedEvent.OldSymbol} -&gt; {symbolChangedEvent.NewSymbol}\")\n</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    if (data.SymbolChangedEvents.ContainsKey(_symbol))\n    {\n        var symbolChangedEvent = data.SymbolChangedEvents[_symbol];\n        Log($\"Symbol changed: {symbolChangedEvent.OldSymbol} -&gt; {symbolChangedEvent.NewSymbol}\");\n    }\n}</code></pre>\n</div>\n\n<p>SymbolChangedEvent objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.SymbolChangedEvent\"></div>"
      },
      {
        "title": "Live Trading Considerations",
        "content": "<p>\nIt is possible to trade the continuous futures. However, the canonical symbol created by the <i>AddFuture</i> method is not mapped to a single underlying future contract but represents a set of rolling contracts. Thus, the prices could be frictional during a symbol-changing event. This could be catastrophic in live trading! For live trading, the orders should be placed directly on the underlying contracts. The underlying contract is available with the <b><i>Mapped</i></b> property.\n</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nself.current_contract = self.continuous_contract.Mapped\nself.Buy(self.current_contract, 1)\n</code></pre>\n<pre><code class=\"language-cs\">\n_currentContract = _continuousContract.Mapped;\nBuy(_currentContract, 1);\n</code></pre>\n</div>"
      },
      {
        "title": "Data Format",
        "content": "<p>\nA factor file and a map file will be included in the downloaded local files for each of the exchanges with supported continuous futures. They could be found in <i>\\data\\future\\exchange_name</i> under the LEAN CLI base directory.\n<br /><br />\nFor the factor file, it is a .zip collection of REST API styled .csv files for each future symbol, including the date, scaling factors for each type of data normalization and the data mapping mode that indicates the symbol-changing event is on that day for that mapping mode. Example of how a line in the .csv file looks like:\n</p>\n<code>{\"Date\":\"2009-10-31T00:00:00\",\"BackwardsRatioScale\":[0.9914163090128755364806866953,1.0,1.0],\"BackwardsPanamaCanalScale\":[-2.0,0.0,0.0],\"ForwardPanamaCanalScale\":[0.0,0.0,0.0],\"DataMappingMode\":1}\n</code>\n<br /><br /><p>For the map file, it is a .zip collection of .csv files for each future symbol, including the date, new underlying contract symbol, the exchange code and the data mapping mode that indicates the symbol-changing event is on that day for that mapping mode. Example of how a line in the .csv file looks like:</p>\n<code>20091130,aw uii3j0m6zbj9,CBOT,1\n</code>"
      }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "https://www.quantconnect.com/data",
    "examples": [
      {
        "id": 826,
        "master_product_id": 54,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "In this example, we buy the continuous future when its price rises above its simple moving average and sell when its prices drops below its simple moving average. We also log each time the continuous future contract rolls over.\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass USFuturesSecurityMasterDataClassicAlgorithm (QCAlgorithm):\n    \n    threshold = 0.01 # 1%\n    \n    def Initialize(self):\n        self.SetCash(1000000)\n        self.SetStartDate(2019, 2, 1)\n        self.SetEndDate(2021, 6, 1)\n\n        # Requesting data\n        self.continuous_contract = self.AddFuture(Futures.Energies.CrudeOilWTI,\n                                                  dataNormalizationMode = DataNormalizationMode.BackwardsRatio,\n                                                  dataMappingMode = DataMappingMode.OpenInterest,\n                                                  contractDepthOffset = 0)\n        self.symbol = self.continuous_contract.Symbol\n                      \n        # Historical data\n        history = self.History(self.symbol, 500, Resolution.Minute)\n        self.Debug(f\"We got {len(history)} items from our history request\")\n        \n        self.sma = self.SMA(self.symbol, 10, Resolution.Daily)\n        if not history.empty:\n            for time, row in history.droplevel(0).loc[self.symbol].iterrows():\n                self.sma.Update(IndicatorDataPoint(time, row.close))\n        \n\n    def OnData(self, data):\n        # Accessing data\n        for changed_event in data.SymbolChangedEvents.Values:\n            if changed_event.Symbol == self.symbol:\n                self.Log(f\"SymbolChanged event at {self.Time}: {changed_event}\")\n                \n        mapped_symbol = self.continuous_contract.Mapped\n\n        if not (data.Bars.ContainsKey(self.symbol) and self.sma.IsReady and mapped_symbol):\n            return\n        \n        if data.Bars[self.symbol].Price &gt; self.sma.Current.Value * (1+self.threshold) and not self.Portfolio[mapped_symbol].IsLong:\n            self.MarketOrder(mapped_symbol, 1)\n        elif data.Bars[self.symbol].Price &lt; self.sma.Current.Value * (1-self.threshold) and not self.Portfolio[mapped_symbol].IsShort:\n            self.MarketOrder(mapped_symbol, -1)</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect.Algorithm.CSharp\n{\n    public class USFuturesSecurityMasterDataClassicAlgorithm  : QCAlgorithm\n    {\n        private Future _continuousContract;\n        private Symbol _symbol;\n        private decimal _threshold = 0.01m; // 1%\n        private SimpleMovingAverage _sma;\n        \n        public override void Initialize()\n        {\n            SetCash(1000000);\n            SetStartDate(2019, 2, 1);\n            SetEndDate(2021, 6, 1);\n\n            // Requesting data\n            _continuousContract = AddFuture(Futures.Energies.CrudeOilWTI,\n                dataNormalizationMode: DataNormalizationMode.BackwardsRatio,\n                dataMappingMode: DataMappingMode.OpenInterest,\n                contractDepthOffset: 0\n            );\n            _symbol = _continuousContract.Symbol;\n            \n            // Historical data\n            var history = History(_symbol, 60*24*10, Resolution.Minute);\n            Debug($\"We got {history.Count()} items from our history request\");\n            \n            _sma = SMA(_symbol, 10, Resolution.Daily);\n            foreach (var bar in history)\n            {\n                _sma.Update(new IndicatorDataPoint(bar.Time, bar.Close));\n            }\n        }\n        \n        public override void OnData(Slice data)\n        {\n            // Accessing data\n            foreach (var changedEvent in data.SymbolChangedEvents.Values)\n            {\n                if (changedEvent.Symbol == _continuousContract.Symbol)\n                {\n                    Log($\"SymbolChanged event at {Time}: {changedEvent}\");\n                }\n            }\n            \n            var mappedSymbol = _continuousContract.Mapped;\n\n            if (!(data.Bars.ContainsKey(_symbol) &amp;&amp; _sma.IsReady &amp;&amp; mappedSymbol != null))\n            {\n                return;\n            }\n            \n            if (data.Bars[_symbol].Price &gt; _sma.Current.Value * (1+_threshold) &amp;&amp; !Portfolio[mappedSymbol].IsLong)\n            {\n                MarketOrder(mappedSymbol, 1);\n            }\n            else if (data.Bars[_symbol].Price &lt; _sma.Current.Value * (1-_threshold) &amp;&amp; !Portfolio[mappedSymbol].IsShort)\n            {\n                MarketOrder(mappedSymbol, -1);\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-03-30 04:49:17"
      },
      {
        "id": 828,
        "master_product_id": 54,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "In this example, we buy the continuous future when its price rises above its simple moving average and sell when its prices drops below its simple moving average. We also log each time the continuous future contract rolls over.\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass USFuturesSecurityMasterDataFrameworkAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetCash(1000000)\n        self.SetStartDate(2019, 2, 1)\n        self.SetEndDate(2021, 6, 1)\n\n        # Requesting data\n        self.AddFuture(Futures.Energies.CrudeOilWTI,\n                       dataNormalizationMode = DataNormalizationMode.BackwardsRatio,\n                       dataMappingMode = DataMappingMode.OpenInterest,\n                       contractDepthOffset = 0)\n        self.AddAlpha(ContinuousFuturesAlphaModel())\n        self.SetPortfolioConstruction(SingleSharePortfolioConstructionModel())\n\nclass ContinuousFuturesAlphaModel(AlphaModel):\n    \n    threshold = 0.01 # 1%\n    symbol = None\n    continuous_contract = None\n    \n    def Update(self, algorithm, data):\n        if self.symbol is None or self.continuous_contract is None:\n            return []\n        \n        # Accessing data\n        for changed_event in data.SymbolChangedEvents.Values:\n            if changed_event.Symbol == self.symbol:\n                algorithm.Log(f\"SymbolChanged event at {data.Time}: {changed_event}\")\n                \n        mapped_symbol = self.continuous_contract.Mapped\n        \n        if not data.Bars.ContainsKey(self.symbol) or not self.sma.IsReady or not mapped_symbol:\n            return []\n        \n        insights = []\n        direction = None\n        if data.Bars[self.symbol].Price &gt; self.sma.Current.Value * (1+self.threshold) and not algorithm.Portfolio[mapped_symbol].IsLong:\n            direction = InsightDirection.Up\n        elif data.Bars[self.symbol].Price &lt; self.sma.Current.Value * (1-self.threshold) and not algorithm.Portfolio[mapped_symbol].IsShort:\n            direction = InsightDirection.Down\n        \n        if direction:\n            insights.append(Insight.Price(mapped_symbol, timedelta(days=14), direction))\n        \n        return insights\n        \n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            symbol = security.Symbol\n            if symbol.IsCanonical():\n                self.continuous_contract = security\n                self.symbol = symbol\n                self.sma = algorithm.SMA(self.symbol, 10, Resolution.Daily)\n            \n                # Historical data\n                history = algorithm.History(symbol, 60*24*10, Resolution.Minute)\n                algorithm.Debug(f\"We got {len(history)} from our history request for {symbol}\")\n                \n                if history.empty:\n                    continue\n                for time, row in history.droplevel(0).loc[self.symbol].iterrows():\n                    self.sma.Update(IndicatorDataPoint(time, row.close))\n\nclass SingleSharePortfolioConstructionModel(PortfolioConstructionModel):\n    def CreateTargets(self, algorithm, insights):\n        targets = []\n        for insight in insights:\n            if algorithm.Securities[insight.Symbol].IsTradable:\n                targets.append(PortfolioTarget(insight.Symbol, insight.Direction))\n        return targets</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect.Algorithm.CSharp\n{\n    public class USFuturesSecurityMasterDataFrameworkAlgorithm : QCAlgorithm\n    {\n        public override void Initialize()\n        {\n            SetCash(1000000);\n            SetStartDate(2019, 2, 1);\n            SetEndDate(2021, 6, 1);\n\n            // Requesting data\n            AddFuture(Futures.Energies.CrudeOilWTI,\n                dataNormalizationMode: DataNormalizationMode.BackwardsRatio,\n                dataMappingMode: DataMappingMode.OpenInterest,\n                contractDepthOffset: 0\n            );\n            AddAlpha(new ContinuousFuturesAlphaModel());\n            SetPortfolioConstruction(new SingleSharePortfolioConstructionModel());\n        }\n        \n        class ContinuousFuturesAlphaModel : AlphaModel\n        {\n            private Future _continuousContract;\n            private Symbol _symbol;\n            private decimal _threshold = 0.01m; // 1%\n            private SimpleMovingAverage _sma;\n        \n            public override IEnumerable Update(QCAlgorithm algorithm, Slice data)\n            {\n                var insights = new List();\n                \n                if (_symbol == null || _continuousContract == null)\n                {\n                    return insights;\n                }\n                \n                // Accessing data\n                foreach (var changedEvent in data.SymbolChangedEvents.Values)\n                {\n                    if (changedEvent.Symbol == _symbol)\n                    {\n                        algorithm.Log($\"SymbolChanged event at {data.Time}: {changedEvent}\");\n                    }\n                }\n                \n                var mappedSymbol = _continuousContract.Mapped;\n                \n                if (!data.Bars.ContainsKey(_symbol) || !_sma.IsReady || mappedSymbol == null)\n                {\n                    return insights;\n                }\n                \n                if (data.Bars[_symbol].Price &gt; _sma.Current.Value * (1+_threshold) &amp;&amp; !algorithm.Portfolio[mappedSymbol].IsLong)\n                {\n                    insights.Add(Insight.Price(mappedSymbol, TimeSpan.FromDays(14), InsightDirection.Up));\n                }\n                else if (data.Bars[_symbol].Price &lt; _sma.Current.Value * (1-_threshold) &amp;&amp; !algorithm.Portfolio[mappedSymbol].IsShort)\n                {\n                    insights.Add(Insight.Price(mappedSymbol, TimeSpan.FromDays(14), InsightDirection.Down));\n                }\n                \n                return insights;\n            }\n        \n            public override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n            {\n                foreach (var security in changes.AddedSecurities)\n                {\n                    var symbol = security.Symbol;\n                    if (symbol.IsCanonical())\n                    {\n                        _continuousContract = (Future)security;\n                        _symbol = symbol;\n                        _sma = algorithm.SMA(_symbol, 10, Resolution.Daily);\n                        \n                        // Historical data \n                        var history = algorithm.History(symbol, 60*24*10, Resolution.Minute);\n                        algorithm.Debug($\"We got {history.Count()} from our history request for {symbol}\");\n                        \n                        foreach (var bar in history)\n                        {\n                            _sma.Update(new IndicatorDataPoint(bar.Time, bar.Close));\n                        }\n                    }\n                }\n            }\n        }\n        \n        class SingleSharePortfolioConstructionModel : PortfolioConstructionModel\n        {\n            public override IEnumerable CreateTargets(QCAlgorithm algorithm, Insight[] insights)\n            {\n                var targets = new List();\n                foreach (var insight in insights)\n                {\n                    if (algorithm.Securities[insight.Symbol].IsTradable)\n                    {\n                        targets.Add(new PortfolioTarget(insight.Symbol, (int) insight.Direction));\n                    }\n                }\n                return targets;\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-03-30 04:52:33"
      }
    ],
    "pricingText": "QuantConnect Futures Security Master is freely accessible in our cloud environment, and can be downloaded for on premise backtesting and research for an annual subscription of $600. Subsequent downloads within the subscription period <b>will not</b> be subjected to additional charge.",
    "pricing": [
      {
        "id": null,
        "master_product_id": 54,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>US Futures Security Master is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>US Futures Security Master can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Free with Subscription | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>US Futures Security Master is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 139,
        "name": "US Futures Security Master by QuantConnect",
        "description": "<p>Use QuantConnect US Futures Security reference data in the QuantConnect Cloud for your backtesting and live trading purposes.</p> <ul><li>Curated, clean data</li>     <li>Updated nightly at 4am</li>     <li>No maintenance required</li> </ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 137,
        "name": "US Futures Security Master by QuantConnect",
        "description": "<p>Download US Futures Security Master reference data your LEAN backtesting and live trading on premise with the LEAN CLI. <b>Must supply your own compatible LEAN futures market data.</b></p> <ul><li>Ownership of the data for internal use</li>     <li>Data in LEAN format ready for ingestion</li>     <li>Local compute resources</li> </ul>",
        "shortDescription": "Download On Premise",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "$600/yr",
          "monthlyPrice": 50,
          "yearlyPrice": 600,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": false,
        "sortPrice": 600
      },
      {
        "id": 179,
        "name": "US Futures Security Master by QuantConnect - Bulk Download",
        "description": "<p>Download US Futures Security Master reference data your LEAN backtesting and live trading on premise with the LEAN CLI. <b>Must supply your own compatible LEAN futures market data.</b></p> <ul><li>Ownership of the data for internal use</li>     <li>Data in LEAN format ready for ingestion</li>     <li>Local compute resources</li> </ul>",
        "shortDescription": "Bulk Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Request a quote",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 99999
      }
    ],
    "headerColor": "04a3db"
  },
  {
    "name": "Data Link",
    "vendorName": "Nasdaq",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/nasdaq-data-link.svg",
    "landingFileName": "nasdaq-data-link.html",
    "url": "/datasets/nasdaq-data-link",
    "short_description": "Nasdaq Data Link, previously known as Quandl, is a premier marketplace for financial, economic, and alternative data sets.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The Data Link dataset by Nasdaq, previously known as Quandl, is a collection of alternative data sets. It has indexed millions of time-series datasets from over 400 sources, which start in different years. This dataset is delivered on several frequencies, but the free data sets have often a daily frequency.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\n\"<a href=\"https://www.nasdaq.com/\">Nasdaq</a>\" was initially an acronym for the National Association of Securities Dealers Automated Quotations. It was founded in 1971 by the National Association of Securities Dealers (NASD), now known as the Financial Industry Regulatory Authority (<a href=\"https://www.finra.org/\">FINRA</a>), with the goal to provide financial services and operate stock exchanges.\n</p>\n\n<p>\nOn Dec. 4th, 2018, Nasdaq announced it had acquired <a href=\"https://www.quandl.com\">Quandl, Inc.</a>, a leading provider of alternative and core financial data. Quandl was founded by Tammer Kamel in 2012, with goal of making it easy for anyone to find and use high-quality data effectively in their professional decision-making. In 2021, Quandl was replaced by <a href=\"https://data.nasdaq.com/\">Nasdaq Data Link</a>. \n</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\n# For premium datasets, you need to provide your API Key\n# NasdaqDataLink.SetAuthCode(\"your-api-key\")\n\n### Requesting Data in Initialize method\n# The default column will be used is \"close\".\nself.nasdaq_ibm = self.AddData(NasdaqDataLink, 'WIKI/IBM', Resolution.Daily).Symbol\n\n# We can create a custom sub-class to select a column in the dataset.\nself.nasdaq_fb = self.AddData(NasdaqCustomColumns, 'WIKI/FB', Resolution.Daily).Symbol\n\nclass NasdaqCustomColumns(NasdaqDataLink):\n    def __init__(self):\n        # Select the column \"adj. close\".\n        self.ValueColumnName = \"adj. close\"</code></pre>\n<pre><code class=\"language-cs\">\n// For premium datasets, you need to provide your API Key\n// NasdaqDataLink.SetAuthCode(\"your-api-key\");\n\n/// Requesting Data in Initialize method\n// The default column will be used is \"close\".\nvar nasdaqIbm = AddData&lt;NasdaqDataLink&gt;('WIKI/IBM', Resolution.Daily).Symbol;\n\n// We can create a custom sub-class to select a column in the dataset.\nvar nasdaqFb = AddData&lt;NasdaqCustomColumns&gt;('WIKI/FB', Resolution.Daily).Symbol;\n\npublic class NasdaqCustomColumns : NasdaqDataLink\n{\n    // Select the column \"adj. close\".\n    public NasdaqCustomColumns() : base(valueColumnName: \"adj. close\") { }\n}</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>Nasdaq Data Link provides several data sets that cannot be summarized in one table. For more information, see the <a href=\"https://data.nasdaq.com/search\">catalog</a> on the Nasdaq website.</p>"
      },
      {
        "title": "Backward Compatibility",
        "content": "<p>QuantConnect/Lean has supported Quandl since 2015. It has been moved from <a href=\"https://github.com/QuantConnect/Lean\">Lean</a> to a new GitHub repository with the <a href=\"https://github.com/QuantConnect/Lean.DataSource.NasdaqDataLink\">Nasdaq Data Link</a> implementation on Jan 12th, 2022. QuantConnect has ensured full backward compatibility.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Requesting data using the obsolete Quandl class will yield the same data:\nself.quandl_ibm = self.AddData(Quandl, 'WIKI/IBM', Resolution.Daily).Symbol\n</code></pre>\n<pre><code class=\"language-cs\">// Requesting data using the obsolete Quandl class will yield the same data:\nvar quandlIbm = AddData&lt;Quandl&gt;('WIKI/IBM', Resolution.Daily).Symbol;</code></pre>\n</div>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe Nasdaq Data Link sources allow users to explore different kinds of data in their database to develop trading strategies.\n</p>\n<ul><li>Using alternative data to regress market regime/asset price.</li>\n<li>Get access to different markets' products.</li>\n<li>Backtesting exotic derivatives or private equities investment.</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_1c6db3570c6191641a90699579854084.html\" scrolling=\"no\"></iframe></div></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add Nasdaq Data Link data to your algorithm, use the AddData() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on using custom data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/importing-custom-data\">Importing Custom Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class NasdaqDataLinkDataAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2019, 1, 1)\n        self.SetEndDate(2020, 6, 1)\n        self.SetCash(100000)\n\n        # For premium datasets, you need to provide your API Key\n        # NasdaqDataLink.SetAuthCode(\"your-api-key\")\n        \n        # The default column will be used is \"close\".\n        self.nasdaq_ibm = self.AddData(NasdaqDataLink, 'WIKI/IBM', Resolution.Daily).Symbol\n\n        # We can create a custom sub-class to select a column in the dataset.\n        self.nasdaq_fb = self.AddData(NasdaqCustomColumns, 'WIKI/FB', Resolution.Daily).Symbol\n\nclass NasdaqCustomColumns(NasdaqDataLink):\n    def __init__(self):\n        # Select the column \"adj. close\".\n        self.ValueColumnName = \"adj. close\"</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect.Algorithm.CSharp.AltData\n{\n    public class NasdaqDataLinkDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _nasdaqIbm;\n        private Symbol _nasdaqFb;\n\n        public override void Initialize()\n        {\n            SetStartDate(2019, 1, 1);\n            SetEndDate(2020, 6, 1);\n            SetCash(100000);\n\n            // For premium datasets, you need to provide your API Key\n            // NasdaqDataLink.SetAuthCode(\"your-api-key\")\n\n            // The default column will be used is \"close\".\n            _nasdaqIbm = AddData&lt;NasdaqDataLink&gt;('WIKI/IBM', Resolution.Daily).Symbol;\n\n            // We can create a custom sub-class to select a column in the dataset.\n            _nasdaqFb = AddData&lt;NasdaqCustomColumns&gt;('WIKI/FB', Resolution.Daily).Symbol;\n        }\n    }\n\n    public class NasdaqCustomColumns : NasdaqDataLink\n    {\n        // Select the column \"adj. close\".\n        public NasdaqCustomColumns() : base(valueColumnName: \"adj. close\") { }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    if data.ContainsKey(self.nasdaq_ibm):\n        Log(f'Symbol: {self.nasdaq_ibm} - Close: {data[self.nasdaq_ibm]}')\n</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    if (data.ContainsKey(_nasdaqIbm))\n    {\n        Log($\"Symbol: {_nasdaqIbm} - Close: {data[_nasdaqIbm]}\");\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical data by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for Nasdaq Data Link by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(NasdaqDataLink, self.nasdaq_ibm, 60, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History(new[] {_nasdaqIbm}, 60, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Backward Compatibility",
        "content": "<p>QuantConnect/Lean has supported Quandl since 2015. It has been moved from <a href=\"https://github.com/QuantConnect/Lean\">Lean</a> to a new GitHub repository with the <a href=\"https://github.com/QuantConnect/Lean.DataSource.NasdaqDataLink\">Nasdaq Data Link</a> implementation on Jan 12th, 2022. QuantConnect has ensured full backward compatibility.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Requesting data using the obsolete Quandl class will yield the same data:\nself.quandl_ibm = self.AddData(Quandl, 'WIKI/IBM', Resolution.Daily).Symbol\n</code></pre>\n<pre><code class=\"language-cs\">// Requesting data using the obsolete Quandl class will yield the same data:\nvar quandlIbm = AddData&lt;Quandl&gt;('WIKI/IBM', Resolution.Daily).Symbol;</code></pre>\n</div>"
      }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "https://www.quantconnect.com/market",
    "examples": [
      {
        "id": 862,
        "master_product_id": 56,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class NasdaqDataLinkAlgorithm (QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2021, 12, 1)\n        self.SetEndDate(2021, 12, 31)\n        self.SetCash(1000000)\n        \n        ### Requesting Data\n        self.nasdaq_sh_stannum_fut = self.AddData(NasdaqDataLink, 'SHFE/SNQ2022', Resolution.Daily).Symbol\n        # We can create a custom sub-class NasdaqCustomColumns to select a column in the dataset.\n        self.nasdaq_short_interest_TAOFF = self.AddData(NasdaqCustomColumns, 'FINRA/FORF_TAOFF', Resolution.Daily).Symbol\n        \n        ### Historical Data\n        history = self.History(NasdaqDataLink, self.nasdaq_sh_stannum_fut, 60, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request for {self.nasdaq_sh_stannum_fut} Nasdaq Data Link\")\n        history = self.History(NasdaqCustomColumns, self.nasdaq_short_interest_TAOFF, 60, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request for {self.nasdaq_short_interest_TAOFF} Nasdaq Data Link\")\n\n    def OnData(self, data):\n        ### Accessing Data\n        if data.ContainsKey(self.nasdaq_sh_stannum_fut):\n            self.SetHoldings(self.nasdaq_sh_stannum_fut, 1)\n            self.Debug(f'{self.nasdaq_sh_stannum_fut}: {data[self.nasdaq_sh_stannum_fut]}')\n            \n        if data.ContainsKey(self.nasdaq_short_interest_TAOFF):\n            self.Debug(f'{self.nasdaq_short_interest_TAOFF}: {data[self.nasdaq_short_interest_TAOFF]}')\n            \n\nclass NasdaqCustomColumns(NasdaqDataLink):\n    def __init__(self):\n        super().__init__()\n        # Select the column \"totalvolume\".\n        self.ValueColumnName = \"totalvolume\"</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n\tpublic class ExtractAlphaCrossAssetModelAlgorithm : QCAlgorithm\n\t{\n\t\tprivate Symbol _nasdaqShStannumFut;\n\t\tprivate Symbol _nasdaqShortInterestTaoff;\n\t\t\n\t\tpublic override void Initialize()\n\t\t{\n\t\t\tSetStartDate(2021, 12, 1);\n\t\t\tSetEndDate(2021, 12, 31);\n\t\t\tSetCash(1000000);\n\t\t\t\n\t\t\t/// Requesting Data\n\t\t\t_nasdaqShStannumFut = AddData&lt;NasdaqDataLink&gt;(\"SHFE/SNQ2022\", Resolution.Daily).Symbol;\n\t\t\t// We can create a custom sub-class NasdaqCustomColumns to select a column in the dataset.\n\t\t\t_nasdaqShortInterestTaoff = AddData&lt;NasdaqCustomColumns&gt;(\"FINRA/FORF_TAOFF\", Resolution.Daily).Symbol;\n\t\t\t\n\t\t\t/// Historical Data\n\t\t\tvar history = History(new[] {_nasdaqShStannumFut}, 60, Resolution.Daily);\n\t\t\tDebug($\"We got {history.Count()} items from our history request for {_nasdaqShStannumFut} Nasdaq Data Link\");\n\t\t\tvar history2 = History(new[] {_nasdaqShortInterestTaoff}, 60, Resolution.Daily);\n\t\t\tDebug($\"We got {history2.Count()} items from our history request for {_nasdaqShortInterestTaoff} Nasdaq Data Link\");\n\t\t}\n\t\t\n\t\tpublic override void OnData(Slice data)\n\t\t{\n\t\t\t/// # Accessing Data\n\t\t\tif (data.ContainsKey(_nasdaqShStannumFut))\n\t\t\t{\n\t\t\t\tSetHoldings(_nasdaqShStannumFut, 1m);\n\t\t\t\tLog($\"Symbol: {_nasdaqShStannumFut} - Close: {data[_nasdaqShStannumFut]}\");\n\t\t\t}\n\t\t\tif (data.ContainsKey(_nasdaqShortInterestTaoff))\n\t\t\t{\n\t\t\t\tLog($\"Symbol: {_nasdaqShortInterestTaoff} - Close: {data[_nasdaqShortInterestTaoff]}\");\n\t\t\t}\n\t\t}\n\t}\n\t\n    public class NasdaqCustomColumns : NasdaqDataLink\n    {\n        // Select the column \"totalvolume\".\n        public NasdaqCustomColumns() : base(valueColumnName: \"totalvolume\") { }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-05-10 16:05:31"
      },
      {
        "id": 864,
        "master_product_id": 56,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\"> \nclass NasdaqDataLinkFramework (QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2021, 12, 1)\n        self.SetEndDate(2021, 12, 31)\n        self.SetCash(1000000)\n        \n        ### Requesting Data\n        self.AddData(NasdaqDataLink, 'SHFE/SNQ2022', Resolution.Daily)\n        # We can create a custom sub-class NasdaqDataLink to select a column in the dataset.\n        self.AddData(NasdaqCustomColumns, 'FINRA/FORF_TAOFF', Resolution.Daily)\n        \n        self.AddAlpha(NasdaqDataLinkAlphaModel())\n        \n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel(lambda time: None))\n        \n        self.AddRiskManagement(NullRiskManagementModel())\n        \n        self.SetExecution(ImmediateExecutionModel())\n        \n        \nclass NasdaqDataLinkAlphaModel (AlphaModel):\n    def Update(self, algorithm, data):\n        insights = []\n        \n        ### Accessing Data\n        points = data.Get(NasdaqDataLink)\n        for point in points:\n            symbol = point.Key\n            \n            insight = Insight.Price(symbol, Expiry.EndOfDay, InsightDirection.Up)\n            insights.append(insight)\n            \n            algorithm.Debug(f'{symbol}: {point.Value}')\n            \n        points = data.Get(NasdaqCustomColumns)\n        for point in points:\n            algorithm.Debug(f'{point.Key}: {point.Value}')\n            \n        return insights\n            \n    def OnSecuritiesChanged(self, algorithm, changes):\n        for security in changes.AddedSecurities:\n            ### Historical Data\n            history = algorithm.History(security.Symbol, 60, Resolution.Daily)\n            algorithm.Debug(f\"We got {len(history)} items from our history request for {security.Symbol} Nasdaq Data Link\")\n\n\nclass NasdaqCustomColumns(NasdaqDataLink):\n    def __init__(self):\n        # Select the column \"totalvolume\".\n        self.ValueColumnName = \"totalvolume\"</code></pre>\n<pre><code class=\"language-cs\"> \nnamespace QuantConnect\n{\n\tpublic class NasdaqDataLinkFramework : QCAlgorithm\n\t{\n\t\tpublic override void Initialize()\n\t\t{\n\t\t\tSetStartDate(2021, 12, 1);\n\t\t\tSetEndDate(2021, 12, 31);\n\t\t\tSetCash(1000000);\n\t\t\t\n\t\t\t/// Requesting Data\n\t\t\tAddData&lt;NasdaqDataLink&gt;(\"SHFE/SNQ2022\", Resolution.Daily);\n\t\t\t// We can create a custom sub-class NasdaqCustomColumns to select a column in the dataset.\n\t\t\tAddData&lt;NasdaqCustomColumns&gt;(\"FINRA/FORF_TAOFF\", Resolution.Daily);\n\t\t\t\n\t\t\tAddAlpha(new NasdaqDataLinkAlphaModel());\n\t\t\t\n\t\t\tSetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel(time =&gt; null));\n\t\t\t\n\t\t\tAddRiskManagement(new NullRiskManagementModel());\n\t\t\t\n\t\t\tSetExecution(new ImmediateExecutionModel());\n\t\t}\n\t}\n\t\n\tpublic class NasdaqDataLinkAlphaModel : AlphaModel\n\t{\n\t\tpublic override List&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n\t\t{\n\t\t\tList&lt;Insight&gt; insights = new List&lt;Insight&gt;();\n\t\t\t\n\t\t\t/// Accessing Data\n\t\t\tvar points = data.Get&lt;NasdaqDataLink&gt;();\n\t\t\tforeach(var point in points)\n\t\t\t{\n\t\t\t\tvar symbol = point.Key;\n\t\t\t\t\n\t\t\t\tvar insight = new Insight(symbol, Expiry.EndOfDay, InsightType.Price, InsightDirection.Up);\n\t\t\t\tinsights.Add(insight);\n\t\t\t\t\n\t\t\t\talgorithm.Log($\"Symbol: {symbol} - Close: {point.Value}\");\n\t\t\t}\n\t\t\t\n\t\t\tvar points2 = data.Get&lt;NasdaqCustomColumns&gt;();\n\t\t\tforeach(var point in points2)\n\t\t\t{\n\t\t\t\talgorithm.Log($\"Symbol: {point.Key} - Close: {point.Value}\");\n\t\t\t}\n\t\t\t\n\t\t\treturn insights;\n\t\t}\n\t\t\n\t\tpublic override void OnSecuritiesChanged(QCAlgorithm algorithm, SecurityChanges changes)\n\t\t{\n\t\t\tforeach (var security in changes.AddedSecurities)\n\t\t\t{\n\t\t\t\t/// Historical Data\n\t\t\t\tvar history = algorithm.History(new[] {security.Symbol}, 60, Resolution.Daily);\n\t\t\t\talgorithm.Debug($\"We got {history.Count()} items from our history request for {security.Symbol} Nasdaq Data Link\");\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic class NasdaqCustomColumns : NasdaqDataLink\n\t{\n\t\t// Select the column \"totalvolume\".\n\t\tpublic NasdaqCustomColumns() : base(valueColumnName: \"totalvolume\") { }\n\t}\n}</code></pre>\n</div>",
        "updated": "2022-01-14 16:27:57"
      }
    ],
    "pricingText": null,
    "pricing": [
      {
        "id": null,
        "master_product_id": 56,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>Data Link is allowed to be used in the cloud \r\n            for personal and commercial projects with a subscription. The data is permissioned for use within \r\n            the licensed organization only</p><p>Subscription Required | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [],
    "headerColor": "ff1841"
  },
  {
    "name": "Bitfinex Crypto Price Data",
    "vendorName": "CoinAPI",
    "datasetImageLight": "https://cdn.quantconnect.com/i/tu/bitfinex-ds-logo.svg",
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/coinapi-logo.png",
    "landingFileName": "bitfinex-crypto-price-data.html",
    "url": "/datasets/bitfinex-crypto-price-data",
    "short_description": "Bitfinex price data for this crypto exchange supported by QuantConnect collected by CoinAPI and hosted on the QuantConnect Cloud.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The Bitfinex Crypto Price Data by CoinAPI is for Cryptocurrency price and volume data points. The data covers 309 Cryptocurrency pairs, starts in January 2013, and is delivered on any frequency from tick to daily. This dataset is created by monitoring the trading activity on Bitfinex.\n</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p><a href=\"https://www.cryptotick.com/\">CoinAPI</a> was founded by Artur Pietrzyk in 2016 with the goal of providing real-time and historical cryptocurrency market data, collected from hundreds of exchanges. CoinAPI provides access to Cryptocurrencies for traders, market makers, and developers building third-party applications.</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Bitfinex accepts both Cash and Margin type account.\nself.SetBrokerageModel(BrokerageName.Bitfinex, AccountType.Cash)\nself.SetBrokerageModel(BrokerageName.Bitfinex, AccountType.Margin)\n\nself.btcusd = self.AddCrypto(\"BTCUSD\", Resolution.Minute, Market.Bitfinex).Symbol\n\nself.AddUniverse(CryptoCoarseFundamentalUniverse(Market.Bitfinex, self.UniverseSettings, self.UniverseSelectionFilter))</code></pre>\n<pre><code class=\"language-cs\">// Bitfinex accepts both Cash and Margin type account.\nSetBrokerageModel(BrokerageName.Bitfinex, AccountType.Cash);\nSetBrokerageModel(BrokerageName.Bitfinex, AccountType.Margin);\n\n_btcusd = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.Bitfinex).Symbol;\n\nAddUniverse(new CryptoCoarseFundamentalUniverse(Market.Bitfinex, UniverseSettings, UniverseSelectionFilter));</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 2013</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>309 Currency Pairs</td>\n        </tr><tr><td>Data Density</td>\n            <td>Dense</td>\n        </tr><tr><td>Resolution</td>\n            <td>Tick, Second, Minute, Hourly, &amp; Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Supported Assets",
        "content": "<p>The following table shows the available Cryptocurrency pairs:</p>\n<table class=\"table qc-table table-reflow ticker-table hidden-xs\"><thead><tr><th colspan=\"6\">\nCryptocurrency Pairs\n</th></tr></thead><tbody><tr><td>1INCHUSD</td><td>1INCHUSDT</td><td>AAVEUSD</td><td>AAVEUSDT</td><td>ADABTC</td><td>ADAUSD</td></tr><tr><td>ADAUSDT</td><td>ALBTUSD</td><td>ALBTUSDT</td><td>ALGOBTC</td><td>ALGOUSD</td><td>ALGOUSDT</td></tr><tr><td>AMPLBTC</td><td>AMPLUSD</td><td>AMPLUSDT</td><td>ANTBTC</td><td>ANTETH</td><td>ANTUSD</td></tr><tr><td>ATOMBTC</td><td>ATOMETH</td><td>ATOMUSD</td><td>AVAXUSD</td><td>AVAXUSDT</td><td>B21USD</td></tr><tr><td>B21USDT</td><td>BALUSD</td><td>BALUSDT</td><td>BANDUSD</td><td>BANDUSDT</td><td>BATBTC</td></tr><tr><td>BATETH</td><td>BATUSD</td><td>BCHABCUSD</td><td>BCHNUSD</td><td>BESTUSD</td><td>BFTUSD</td></tr><tr><td>BMIUSD</td><td>BMIUSDT</td><td>BNTUSD</td><td>BOSONUSD</td><td>BOSONUSDT</td><td>BSVBTC</td></tr><tr><td>BSVUSD</td><td>BTCCNHT</td><td>BTCEUR</td><td>BTCGBP</td><td>BTCJPY</td><td>BTCUSD</td></tr><tr><td>BTCUSDT</td><td>BTCXCHF</td><td>BTGBTC</td><td>BTGUSD</td><td>BTSEUSD</td><td>BTTUSD</td></tr><tr><td>CELUSD</td><td>CELUSDT</td><td>CHEXUSD</td><td>CHZUSD</td><td>CHZUSDT</td><td>CLOUSD</td></tr><tr><td>CNHCNHT</td><td>COMPUSD</td><td>COMPUSDT</td><td>CTKUSD</td><td>CTKUSDT</td><td>DAIBTC</td></tr><tr><td>DAIETH</td><td>DAIUSD</td><td>DATABTC</td><td>DATAUSD</td><td>DGBUSD</td><td>MDOGEBTC</td></tr><tr><td>DOGEUSD</td><td>DOGEUSDT</td><td>MDOGEUSD</td><td>MDOGEUSDT</td><td>DOTBTC</td><td>DOTUSD</td></tr><tr><td>DOTUSDT</td><td>DASHBTC</td><td>DASHUSD</td><td>DUSKBTC</td><td>DUSKUSD</td><td>PNTBTC</td></tr><tr><td>PNTETH</td><td>PNTUSD</td><td>EGLDUSD</td><td>EGLDUSDT</td><td>ENJUSD</td><td>EOSBTC</td></tr><tr><td>EOSDTUSD</td><td>EOSDTUSDT</td><td>EOSETH</td><td>EOSEUR</td><td>EOSGBP</td><td>EOSJPY</td></tr><tr><td>EOSUSD</td><td>EOSUSDT</td><td>ESSUSD</td><td>ETCBTC</td><td>ETCUSD</td><td>ETH2ETH</td></tr><tr><td>ETH2USD</td><td>ETH2USDT</td><td>ETHBTC</td><td>ETHEUR</td><td>ETHGBP</td><td>ETHJPY</td></tr><tr><td>ETHUSD</td><td>ETHUSDT</td><td>ETPBTC</td><td>ETPETH</td><td>ETPUSD</td><td>EURSUSD</td></tr><tr><td>EURTEUR</td><td>EURTUSD</td><td>EURTUSDT</td><td>EXRDBTC</td><td>EXRDUSD</td><td>FCLUSD</td></tr><tr><td>FCLUSDT</td><td>FETUSD</td><td>FETUSDT</td><td>FILUSD</td><td>FILUSDT</td><td>FORTHUSD</td></tr><tr><td>FORTHUSDT</td><td>FTMUSD</td><td>FTMUSDT</td><td>FTTUSD</td><td>FTTUSDT</td><td>FUNUSD</td></tr><tr><td>GNOUSD</td><td>GLMUSD</td><td>GOTEUR</td><td>GOTUSD</td><td>GRTUSD</td><td>GRTUSDT</td></tr><tr><td>GTXUSD</td><td>GTXUSDT</td><td>HEZUSD</td><td>HEZUSDT</td><td>ICEUSD</td><td>ICPBTC</td></tr><tr><td>ICPUSD</td><td>ICPUSDT</td><td>IDUSD</td><td>IDUSDT</td><td>IOTABTC</td><td>IOTAETH</td></tr><tr><td>IOTAEUR</td><td>IOTAGBP</td><td>IOTAJPY</td><td>IOTAUSD</td><td>IQXUSD</td><td>IQXUSDT</td></tr><tr><td>JSTBTC</td><td>JSTUSD</td><td>JSTUSDT</td><td>KANUSD</td><td>KANUSDT</td><td>KNCBTC</td></tr><tr><td>KNCUSD</td><td>KSMUSD</td><td>KSMUSDT</td><td>LEOBTC</td><td>LEOEOS</td><td>LEOETH</td></tr><tr><td>LEOUSD</td><td>LEOUSDT</td><td>LINKUSD</td><td>LINKUSDT</td><td>LRCUSD</td><td>LTCBTC</td></tr><tr><td>LTCUSD</td><td>LTCUSDT</td><td>LUNAUSD</td><td>LUNAUSDT</td><td>LYMUSD</td><td>MIRUSD</td></tr><tr><td>MIRUSDT</td><td>MKRUSD</td><td>MLNUSD</td><td>MANABTC</td><td>MANAUSD</td><td>MOBUSD</td></tr><tr><td>MOBUSDT</td><td>NEARUSD</td><td>NEARUSDT</td><td>NECUSD</td><td>NEOBTC</td><td>NEOETH</td></tr><tr><td>NEOEUR</td><td>NEOGBP</td><td>NEOJPY</td><td>NEOUSD</td><td>NEXOBTC</td><td>NEXOUSD</td></tr><tr><td>NEXOUSDT</td><td>OCEANUSD</td><td>OCEANUSDT</td><td>ODEUSD</td><td>OMGBTC</td><td>OMGETH</td></tr><tr><td>OMGUSD</td><td>OMNIUSD</td><td>ORSUSD</td><td>OXYUSD</td><td>OXYUSDT</td><td>PASSUSD</td></tr><tr><td>PAXUSD</td><td>PAXUSDT</td><td>PLANETSUSD</td><td>PLANETSUSDT</td><td>PLUUSD</td><td>PNKETH</td></tr><tr><td>PNKUSD</td><td>QASHUSD</td><td>QTFBTC</td><td>QTFUSD</td><td>QTUMBTC</td><td>QTUMUSD</td></tr><tr><td>RBTCBTC</td><td>RBTCUSD</td><td>REP2BTC</td><td>REP2USD</td><td>REQUSD</td><td>RINGXUSD</td></tr><tr><td>RRBUSD</td><td>RRBUSDT</td><td>RRTUSD</td><td>SANBTC</td><td>SANETH</td><td>SANUSD</td></tr><tr><td>SNGLSUSD</td><td>SNTUSD</td><td>SNXUSD</td><td>SNXUSDT</td><td>SOLUSD</td><td>SOLUSDT</td></tr><tr><td>STORJUSD</td><td>SUKUUSD</td><td>SUKUUSDT</td><td>SUNUSD</td><td>SUNUSDT</td><td>SUSHIUSD</td></tr><tr><td>SUSHIUSDT</td><td>TERRAUSTUSD</td><td>TERRAUSTUSDT</td><td>TESTBTCTESTUSD</td><td>TESTBTCTESTUSDT</td><td>TRXBTC</td></tr><tr><td>TRXETH</td><td>TRXEUR</td><td>TRXUSD</td><td>TUSDUSD</td><td>TUSDUSDT</td><td>USDCUSD</td></tr><tr><td>USDCUSDT</td><td>UNIUSD</td><td>UNIUSDT</td><td>UOPUSD</td><td>UOPUSDT</td><td>UOSBTC</td></tr><tr><td>UOSUSD</td><td>USDTCNHT</td><td>USDTUSD</td><td>UTKUSD</td><td>VEEUSD</td><td>VELOUSD</td></tr><tr><td>VELOUSDT</td><td>VETBTC</td><td>VETUSD</td><td>VSYSBTC</td><td>VSYSUSD</td><td>WAXUSD</td></tr><tr><td>WBTCUSD</td><td>XAUTBTC</td><td>XAUTUSD</td><td>XAUTUSDT</td><td>XCHFUSD</td><td>XDCUSD</td></tr><tr><td>XDCUSDT</td><td>XLMBTC</td><td>XLMETH</td><td>XLMUSD</td><td>XLMUSDT</td><td>XMRBTC</td></tr><tr><td>XMRUSD</td><td>XMRUSDT</td><td>XRAUSD</td><td>XRPBTC</td><td>XRPUSD</td><td>XRPUSDT</td></tr><tr><td>XSNUSD</td><td>XTZBTC</td><td>XTZUSD</td><td>XVGUSD</td><td>YFIUSD</td><td>YFIUSDT</td></tr><tr><td>MCSUSD</td><td>ZCNUSD</td><td>ZECBTC</td><td>ZECUSD</td><td>ZILBTC</td><td>ZILUSD</td></tr><tr><td>ZRXBTC</td><td>ZRXETH</td><td>ZRXUSD</td></tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe Bitfinex Crypto Price Data by CoinAPI enables researchers to accurately design strategies for Cryptocurrencies. Examples include: \n</p>\n<ul><li>Buy and hold</li>\n<li>Trading Cryptocurrency volatility and price action</li>\n<li>Allocating a small portion of your portfolio to Cryptocurrencies to hedge against inflation</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_e860877e3eee5826350dfbdfd833d4ca.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Bitfinex Crypto Price dataset provides TradeBar, QuoteBar, Tick, and CryptoCoarseFundamental objects.</p>\n\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>Tick Attributes</h4>\n<p>Tick objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"></div>\n\n<h4>CryptoCoarseFundamental Attributes</h4>\n<p>CryptoCoarseFundamental objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.CryptoCoarseFundamental\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add Bitfinex data from CoinAPI to your algorithm, use the AddCrypto() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. When requesting data, you have the option to use several crypto markets. For detailed documentation on requesting market data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class CoinAPIDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        # Bitfinex accepts both Cash and Margin type account.\n        self.SetBrokerageModel(BrokerageName.Bitfinex, AccountType.Margin)\n        \n        self.btcusd = self.AddCrypto(\"BTCUSD\", Resolution.Minute, Market.Bitfinex).Symbol</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class CoinAPIDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _btcusd;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n\n            // Bitfinex accepts both Cash and Margin type account.\n            SetBrokerageModel(BrokerageName.Bitfinex, AccountType.Margin);\n            \n            _btcusd = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.Bitfinex).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in every resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    btc_price = data[self.btcusd].Price\n    self.Log(f\u201dTime: {self.Time}; Price: {btc_price};\u201d)</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var btcPrice = data[_btcusd].Price;\n    Log($\u201dTime: {Time}; Price: {btcPrice}\u201d);\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical data in your algorithm using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for Bitfinex by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.btcusd, 30, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History(_btcusd, 30, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Universe Selection",
        "content": "<p>You can perform an universe selection by adding a CryptoCoarseFundamentalUniverse, which filters cryptocurrency pairs by their previous day OHLCV, dollar volume in quote currency and USD if available (as of UTC 00:00).</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def Initialize(self):\n    self.UniverseSettings.Resolution = Resolution.Daily\n    self.SetBrokerageModel(BrokerageName.Bitfinex, AccountType.Margin)\n\n    # Add universe selection of cryptos based on coarse fundamentals\n    self.AddUniverse(CryptoCoarseFundamentalUniverse(Market.Kraken, self.UniverseSettings, self.UniverseSelectionFilter))\n\ndef UniverseSelectionFilter(self, crypto_coarse):\n    for datum in crypto_coarse:\n        self.Log(f\"{datum.Symbol},{datum.Price},{datum.Volume},{datum.VolumeInQuoteCurrency},{datum.VolumeInUsd},{datum.Open},{datum.High},{datum.Low},{datum.Close}\")\n            \n        # define our selection criteria\n        if datum.Volume &gt;= 100 and datum.VolumeInUsd &gt; 10000:\n            universe.append(datum.Symbol)\n        \n    return universe</code></pre>\n<pre><code class=\"language-cs\">public override void Initialize()\n{\n    UniverseSettings.Resolution = Resolution.Daily;\n    SetBrokerageModel(BrokerageName.Bitfinex, AccountType.Margin);\n\n    // Add universe selection of cryptos based on coarse fundamentals\n    AddUniverse(new CryptoCoarseFundamentalUniverse(Market.Kraken, UniverseSettings, UniverseSelectionFilter));\n}\n\nprivate IEnumerable&lt;Symbol&gt; UniverseSelectionFilter(IEnumerable&lt;CryptoCoarseFundamental&gt; cryptoCoarse)\n{\n    var universe = new List&lt;Symbol&gt;();\n\n    foreach (var datum in cryptoCoarse)\n    {\n        Log($\"{datum.Symbol},{datum.Price},{datum.Volume},{datum.VolumeInQuoteCurrency},{datum.VolumeInUsd},{datum.Open},{datum.High},{datum.Low},{datum.Close}\");\n\n         // define our selection criteria\n         if (datum.Volume &gt;= 100m &amp;&amp; datum.VolumeInUsd &gt; 10000m)\n         {\n             universe.Add(datum.Symbol);\n         }\n     }\n\n     return universe;\n}</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Bitfinex Crypto Price dataset provides TradeBar, QuoteBar, Tick, and CryptoCoarseFundamental objects.</p>\n\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>Tick Attributes</h4>\n<p>Tick objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"></div>\n\n<h4>CryptoCoarseFundamental Attributes</h4>\n<p>CryptoCoarseFundamental objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.CryptoCoarseFundamental\"></div>"
      }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "",
    "examples": [
      {
        "id": 878,
        "master_product_id": 57,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we buy and hold Bitcoin through the Bitfinex exchange.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass CoinAPIDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        self.SetBrokerageModel(BrokerageName.Bitfinex, AccountType.Margin)\n\n        # Warm up the security with the last known price to avoid conversion error\n        self.SetSecurityInitializer(lambda security: security.SetMarketPrice(self.GetLastKnownPrice(security)))\n        \n        # Requesting data\n        crypto = self.AddCrypto(\"BTCUSD\", Resolution.Minute, Market.Bitfinex)\n        self.btcusd = crypto.Symbol\n        self.minimum_order_size = crypto.SymbolProperties.MinimumOrderSize\n        \n        # Historical data\n        history = self.History(self.btcusd, 30, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request\")\n\n        # Add Crypto Coarse Fundamental Universe Selection\n        self.AddUniverse(CryptoCoarseFundamentalUniverse(Market.Bitfinex, self.UniverseSettings, self.UniverseSelectionFilter))\n\n    def UniverseSelectionFilter(self, crypto_coarse):\n        return [datum.Symbol for datum in crypto_coarse\n                if datum.Volume &gt;= 100 \n                and datum.VolumeInUsd &gt; 10000]\n\n    def OnData(self, data):\n        if self.Portfolio.CashBook['BTC'].Amount == 0:\n            free_cash = self.Portfolio.CashBook['USD'].Amount * (1-self.Settings.FreePortfolioValuePercentage)\n            quantity = free_cash / data[self.btcusd].Price\n            quantity -= quantity % self.minimum_order_size\n            if quantity &gt; 0:\n                self.MarketOrder(self.btcusd, quantity)</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class CoinAPIDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _btcusd;\n        private decimal? _minimumOrderSize;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n\n            SetBrokerageModel(BrokerageName.Bitfinex, AccountType.Margin);\n\n            // Warm up the security with the last known price to avoid conversion error\n            SetSecurityInitializer(security =&gt; security.SetMarketPrice(GetLastKnownPrice(security)));\n            \n            // Requesting data\n            var crypto = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.Bitfinex);\n            _btcusd = crypto.Symbol;\n            _minimumOrderSize = crypto.SymbolProperties.MinimumOrderSize;\n\n             // Historical data\n            var history = History(_btcusd, 30, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request\");\n\n            // Add Crypto Coarse Fundamental Universe Selection\n            AddUniverse(new CryptoCoarseFundamentalUniverse(Market.Bitfinex, UniverseSettings, UniverseSelectionFilter));\n        }\n\n        private IEnumerable&lt;Symbol&gt; UniverseSelectionFilter(IEnumerable&lt;CryptoCoarseFundamental&gt; cryptoCoarse)\n        {\n            return from datum in cryptoCoarse\n                   where datum.Volume &gt;= 100m \n                   &amp;&amp; datum.VolumeInUsd &gt; 10000m\n                   select datum.Symbol;\n        }\n\n        public override void OnData(Slice data)\n        {\n            if (Portfolio.CashBook[\"BTC\"].Amount == 0)\n            {\n                var freeCash = Portfolio.CashBook[\"USD\"].Amount * (1-Settings.FreePortfolioValuePercentage);\n                var quantity = freeCash / data[_btcusd].Price;\n                quantity -= quantity % _minimumOrderSize;\n                if (quantity &gt; 0m)\n                {\n                    MarketOrder(_btcusd, quantity);\n                }\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-04-27 16:12:09"
      },
      {
        "id": 880,
        "master_product_id": 57,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this example, we hold an equal-sized basket of filtered crypto pairs through the Bitfinex exchange.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass CoinAPIDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        self.SetBrokerageModel(BrokerageName.Bitfinex, AccountType.Margin)\n\n        # Warm up the security with the last known price to avoid conversion error\n        self.SetSecurityInitializer(lambda security: security.SetMarketPrice(self.GetLastKnownPrice(security)))\n        \n        self.UniverseSettings.Resolution = Resolution.Minute\n        # Add universe selection of cryptos based on coarse fundamentals\n        self.AddUniverse(CryptoCoarseFundamentalUniverse(Market.Bitfinex, self.UniverseSettings, self.UniverseSelectionFilter))\n        \n        self.AddAlpha(ConstantAlphaModel(InsightType.Price, InsightDirection.Up, timedelta(minutes = 20), 0.025, None))\n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n\n    def UniverseSelectionFilter(self, crypto_coarse):\n        return [datum.Symbol for datum in crypto_coarse\n                if datum.VolumeInUsd &gt; 50000000]\n\n    def OnSecuritiesChanged(self, changes):\n        for security in changes.AddedSecurities:\n            # Historical data\n            history = self.History(security.Symbol, 30, Resolution.Daily)\n            self.Debug(f\"We got {len(history)} items from our history request\")</code></pre>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing QuantConnect.Algorithm.Framework.Alphas;\nusing QuantConnect.Algorithm.Framework.Portfolio;\nusing QuantConnect.Data;\nusing QuantConnect.Data.UniverseSelection;\nusing QuantConnect.DataSource;\n\nnamespace QuantConnect\n{\n    public class CoinAPIDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _btcusd;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n\n            SetBrokerageModel(BrokerageName.Bitfinex, AccountType.Margin);\n\n            // Warm up the security with the last known price to avoid conversion error\n            SetSecurityInitializer(security =&gt; security.SetMarketPrice(GetLastKnownPrice(security)));\n            \n            UniverseSettings.Resolution = Resolution.Minute;\n            // Add universe selection of cryptos based on coarse fundamentals\n            AddUniverse(new CryptoCoarseFundamentalUniverse(Market.Bitfinex, UniverseSettings, UniverseSelectionFilter));\n        \n            AddAlpha( new ConstantAlphaModel(InsightType.Price, InsightDirection.Up, TimeSpan.FromMinutes(20), 0.025, null) );\n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n        }\n\n        private IEnumerable&lt;Symbol&gt; UniverseSelectionFilter(IEnumerable&lt;CryptoCoarseFundamental&gt; cryptoCoarse)\n        {\n            return from datum in cryptoCoarse\n                   where datum.VolumeInUsd &gt; 50000000m\n                   select datum.Symbol;\n        }\n\n        public override void OnSecuritiesChanged(SecurityChanges changes)\n        {\n            foreach(var security in changes.AddedSecurities)\n            {\n                // Historical data\n                var history = History(security.Symbol, 30, Resolution.Daily);\n                Debug($\"We got {history.Count()} items from our history request\");\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-04-27 16:12:26"
      }
    ],
    "pricingText": "The QuantConnect-CoinAPI partnership provides free access to Cryptocurrency market data in QuantConnect Cloud and paid access for downloads. Downloads are distributed in LEAN format and priced according to file resolution as below.",
    "pricing": [
      {
        "id": null,
        "master_product_id": 57,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>Bitfinex Crypto Price Data is allowed to be used in the cloud \r\n            for personal and commercial projects with a subscription. The data is permissioned for use within \r\n            the licensed organization only</p><p>Subscription Required | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [],
    "headerColor": "8b000a"
  },
  {
    "name": "Binance Crypto Price Data",
    "vendorName": "CoinAPI",
    "datasetImageLight": "https://cdn.quantconnect.com/i/tu/binance-ds-logo.svg",
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/coinapi-logo.png",
    "landingFileName": "binance-crypto-price-data.html",
    "url": "/datasets/binance-crypto-price-data",
    "short_description": "Binance price data for this crypto exchange supported by QuantConnect collected by CoinAPI and hosted on the QuantConnect Cloud.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The Binance Crypto Price Data by CoinAPI is for Cryptocurrency price and volume data points. The data covers 1,651 Cryptocurrency pairs, starts in July 2017, and is delivered on any frequency from tick to daily. This dataset is created by monitoring the trading activity on Binance.\n</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p><a href=\"https://www.cryptotick.com/\">CoinAPI</a> was founded by Artur Pietrzyk in 2016 with the goal of providing real-time and historical cryptocurrency market data, collected from hundreds of exchanges. CoinAPI provides access to Cryptocurrencies for traders, market makers, and developers building third-party applications.</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Binance accepts both Cash and Margin account types only.\nself.SetBrokerageModel(BrokerageName.Binance, AccountType.Cash)\nself.SetBrokerageModel(BrokerageName.Binance, AccountType.Margin)\n\nself.btcbusd = self.AddCrypto(\"BTCBUSD\", Resolution.Minute, Market.Binance).Symbol\n\nself.AddUniverse(CryptoCoarseFundamentalUniverse(Market.Binance, self.UniverseSettings, self.UniverseSelectionFilter))\n</code></pre>\n<pre><code class=\"language-cs\">// Binance accepts both Cash and Margin account types only.\nSetBrokerageModel(BrokerageName.Binance, AccountType.Cash);\nSetBrokerageModel(BrokerageName.Binance, AccountType.Margin);\n\n_btcbusd = AddCrypto(\"BTCBUSD\", Resolution.Minute, Market.Binance).Symbol;\n\nAddUniverse(new CryptoCoarseFundamentalUniverse(Market.Binance, UniverseSettings, UniverseSelectionFilter));</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>July 2017</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>1,651 Currency Pairs</td>\n        </tr><tr><td>Data Density</td>\n            <td>Dense</td>\n        </tr><tr><td>Resolution</td>\n            <td>Tick, Second, Minute, Hourly, &amp; Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Supported Assets",
        "content": "<p>The following table shows the available Cryptocurrency pairs:</p>\n\n<table class=\"table qc-table table-reflow ticker-table hidden-xs\"><thead><tr><th colspan=\"6\">\nCryptocurrency Pairs\n</th></tr></thead><tbody><tr><td>1INCHBTC</td><td>1INCHBUSD</td><td>1INCHUSDT</td><td>AAVEBKRW</td><td>AAVEBNB</td><td>AAVEBRL</td></tr><tr><td>AAVEBTC</td><td>AAVEBUSD</td><td>AAVEETH</td><td>AAVEUSDT</td><td>ACMBTC</td><td>ACMBUSD</td></tr><tr><td>ACMUSDT</td><td>ADAAUD</td><td>ADABIDR</td><td>ADABKRW</td><td>ADABNB</td><td>ADABRL</td></tr><tr><td>ADABTC</td><td>ADABUSD</td><td>ADAETH</td><td>ADAEUR</td><td>ADAGBP</td><td>ADAPAX</td></tr><tr><td>ADARUB</td><td>ADATRY</td><td>ADATUSD</td><td>ADAUSDC</td><td>ADAUSDT</td><td>ADXBNB</td></tr><tr><td>ADXBTC</td><td>ADXBUSD</td><td>ADXETH</td><td>AEBNB</td><td>AEBTC</td><td>AEETH</td></tr><tr><td>AERGOBTC</td><td>AERGOBUSD</td><td>AGIBNB</td><td>AGIBTC</td><td>AGIETH</td><td>AGIXBTC</td></tr><tr><td>AGLDBNB</td><td>AGLDBTC</td><td>AGLDBUSD</td><td>AGLDUSDT</td><td>AIONBNB</td><td>AIONBTC</td></tr><tr><td>AIONBUSD</td><td>AIONETH</td><td>AIONUSDT</td><td>AKROBTC</td><td>AKROUSDT</td><td>ALGOBIDR</td></tr><tr><td>ALGOBNB</td><td>ALGOBTC</td><td>ALGOBUSD</td><td>ALGOPAX</td><td>ALGOTUSD</td><td>ALGOUSDC</td></tr><tr><td>ALGOUSDT</td><td>ALICEBIDR</td><td>ALICEBTC</td><td>ALICEBUSD</td><td>ALICEUSDT</td><td>ALPACABNB</td></tr><tr><td>ALPACABTC</td><td>ALPACABUSD</td><td>ALPACAUSDT</td><td>ALPHABNB</td><td>ALPHABTC</td><td>ALPHABUSD</td></tr><tr><td>ALPHAUSDT</td><td>AMBBNB</td><td>AMBBTC</td><td>AMBETH</td><td>ANKRBNB</td><td>ANKRBTC</td></tr><tr><td>ANKRPAX</td><td>ANKRTUSD</td><td>ANKRUSDC</td><td>ANKRUSDT</td><td>ANTBNB</td><td>ANTBTC</td></tr><tr><td>ANTBUSD</td><td>ANTUSDT</td><td>APPCBNB</td><td>APPCBTC</td><td>APPCETH</td><td>ARBNB</td></tr><tr><td>ARBTC</td><td>ARBUSD</td><td>ARDRBNB</td><td>ARDRBTC</td><td>ARDRETH</td><td>ARDRUSDT</td></tr><tr><td>ARKBTC</td><td>ARKETH</td><td>ARNBTC</td><td>ARNETH</td><td>ARPABNB</td><td>ARPABTC</td></tr><tr><td>ARPABUSD</td><td>ARPARUB</td><td>ARPATRY</td><td>ARPAUSDT</td><td>ARUSDT</td><td>ASRBTC</td></tr><tr><td>ASRUSDT</td><td>ASTBTC</td><td>ASTETH</td><td>ATABNB</td><td>ATABTC</td><td>ATABUSD</td></tr><tr><td>ATAUSDT</td><td>ATMBTC</td><td>ATMBUSD</td><td>ATMUSDT</td><td>ATOMBNB</td><td>ATOMBTC</td></tr><tr><td>ATOMBUSD</td><td>ATOMPAX</td><td>ATOMTUSD</td><td>ATOMUSDC</td><td>ATOMUSDT</td><td>AUCTIONBTC</td></tr><tr><td>AUCTIONBUSD</td><td>AUDBUSD</td><td>AUDIOBTC</td><td>AUDIOBUSD</td><td>AUDIOUSDT</td><td>AUDUSDT</td></tr><tr><td>AUTOBTC</td><td>AUTOBUSD</td><td>AUTOUSDT</td><td>AVABNB</td><td>AVABTC</td><td>AVABUSD</td></tr><tr><td>AVAUSDT</td><td>AVAXBIDR</td><td>AVAXBNB</td><td>AVAXBTC</td><td>AVAXBUSD</td><td>AVAXEUR</td></tr><tr><td>AVAXTRY</td><td>AVAXUSDT</td><td>AXSAUD</td><td>AXSBIDR</td><td>AXSBNB</td><td>AXSBRL</td></tr><tr><td>AXSBTC</td><td>AXSBUSD</td><td>AXSUSDT</td><td>BADGERBTC</td><td>BADGERBUSD</td><td>BADGERUSDT</td></tr><tr><td>BAKEBNB</td><td>BAKEBTC</td><td>BAKEBUSD</td><td>BAKEUSDT</td><td>BALBNB</td><td>BALBTC</td></tr><tr><td>BALBUSD</td><td>BALUSDT</td><td>BANDBNB</td><td>BANDBTC</td><td>BANDBUSD</td><td>BANDUSDT</td></tr><tr><td>BARBTC</td><td>BARBUSD</td><td>BARUSDT</td><td>BATBNB</td><td>BATBTC</td><td>BATBUSD</td></tr><tr><td>BATETH</td><td>BATPAX</td><td>BATTUSD</td><td>BATUSDC</td><td>BATUSDT</td><td>BCCBNB</td></tr><tr><td>BCCBTC</td><td>BCCETH</td><td>BCCUSDT</td><td>BCDBTC</td><td>BCDETH</td><td>BCHABCBTC</td></tr><tr><td>BCHABCBUSD</td><td>BCHABCPAX</td><td>BCHABCTUSD</td><td>BCHABCUSDC</td><td>BCHABCUSDT</td><td>BCHABUSD</td></tr><tr><td>BCHBNB</td><td>BCHBTC</td><td>BCHBUSD</td><td>BCHEUR</td><td>BCHPAX</td><td>BCHSVBTC</td></tr><tr><td>BCHSVPAX</td><td>BCHSVTUSD</td><td>BCHSVUSDC</td><td>BCHSVUSDT</td><td>BCHTUSD</td><td>BCHUSDC</td></tr><tr><td>BCHUSDT</td><td>BCNBNB</td><td>BCNBTC</td><td>BCNETH</td><td>BCPTBNB</td><td>BCPTBTC</td></tr><tr><td>BCPTETH</td><td>BCPTPAX</td><td>BCPTTUSD</td><td>BCPTUSDC</td><td>BEAMBNB</td><td>BEAMBTC</td></tr><tr><td>BEAMUSDT</td><td>BEARBUSD</td><td>BEARUSDT</td><td>BELBNB</td><td>BELBTC</td><td>BELBUSD</td></tr><tr><td>BELUSDT</td><td>BETABNB</td><td>BETABTC</td><td>BETABUSD</td><td>BETAUSDT</td><td>BETHETH</td></tr><tr><td>BGBPUSDC</td><td>BIFIBNB</td><td>BIFIBUSD</td><td>BKRWBUSD</td><td>BKRWUSDT</td><td>BLZBNB</td></tr><tr><td>BLZBTC</td><td>BLZBUSD</td><td>BLZETH</td><td>BLZUSDT</td><td>BNBAUD</td><td>BNBBEARBUSD</td></tr><tr><td>BNBBEARUSDT</td><td>BNBBIDR</td><td>BNBBKRW</td><td>BNBBRL</td><td>BNBBTC</td><td>BNBBULLBUSD</td></tr><tr><td>BNBBULLUSDT</td><td>BNBBUSD</td><td>BNBDAI</td><td>BNBETH</td><td>BNBEUR</td><td>BNBGBP</td></tr><tr><td>BNBIDRT</td><td>BNBNGN</td><td>BNBPAX</td><td>BNBRUB</td><td>BNBTRY</td><td>BNBTUSD</td></tr><tr><td>BNBUAH</td><td>BNBUSDC</td><td>BNBUSDP</td><td>BNBUSDS</td><td>BNBUSDT</td><td>BNBZAR</td></tr><tr><td>BNTBTC</td><td>BNTBUSD</td><td>BNTETH</td><td>BNTUSDT</td><td>BONDBNB</td><td>BONDBTC</td></tr><tr><td>BONDBUSD</td><td>BONDUSDT</td><td>BOTBTC</td><td>BOTBUSD</td><td>BQXBTC</td><td>BQXETH</td></tr><tr><td>BRDBNB</td><td>BRDBTC</td><td>BRDETH</td><td>BTCAUD</td><td>BTCBBTC</td><td>BTCBIDR</td></tr><tr><td>BTCBKRW</td><td>BTCBRL</td><td>BTCBUSD</td><td>BTCDAI</td><td>BTCEUR</td><td>BTCGBP</td></tr><tr><td>BTCGYEN</td><td>BTCIDRT</td><td>BTCNGN</td><td>BTCPAX</td><td>BTCRUB</td><td>BTCSTBTC</td></tr><tr><td>BTCSTBUSD</td><td>BTCSTUSDT</td><td>BTCTRY</td><td>BTCTUSD</td><td>BTCUAH</td><td>BTCUSDC</td></tr><tr><td>BTCUSDP</td><td>BTCUSDS</td><td>BTCUSDT</td><td>BTCVAI</td><td>BTCZAR</td><td>BTGBTC</td></tr><tr><td>BTGBUSD</td><td>BTGETH</td><td>BTGUSDT</td><td>BTSBNB</td><td>BTSBTC</td><td>BTSBUSD</td></tr><tr><td>BTSETH</td><td>BTSUSDT</td><td>BTTBNB</td><td>BTTBRL</td><td>BTTBTC</td><td>BTTBUSD</td></tr><tr><td>BTTEUR</td><td>BTTPAX</td><td>BTTTRX</td><td>BTTTRY</td><td>BTTTUSD</td><td>BTTUSDC</td></tr><tr><td>BTTUSDT</td><td>BULLBUSD</td><td>BULLUSDT</td><td>BURGERBNB</td><td>BURGERBUSD</td><td>BURGERUSDT</td></tr><tr><td>BUSDBIDR</td><td>BUSDBKRW</td><td>BUSDBRL</td><td>BUSDBVND</td><td>BUSDDAI</td><td>BUSDIDRT</td></tr><tr><td>BUSDNGN</td><td>BUSDRUB</td><td>BUSDTRY</td><td>BUSDUAH</td><td>BUSDUSDT</td><td>BUSDVAI</td></tr><tr><td>BUSDZAR</td><td>BZRXBNB</td><td>BZRXBTC</td><td>BZRXBUSD</td><td>BZRXUSDT</td><td>C98BNB</td></tr><tr><td>C98BRL</td><td>C98BTC</td><td>C98BUSD</td><td>C98USDT</td><td>CAKEAUD</td><td>CAKEBNB</td></tr><tr><td>CAKEBRL</td><td>CAKEBTC</td><td>CAKEBUSD</td><td>CAKEGBP</td><td>CAKEUSDT</td><td>CDTBTC</td></tr><tr><td>CDTETH</td><td>CELOBTC</td><td>CELOUSDT</td><td>CELRBNB</td><td>CELRBTC</td><td>CELRBUSD</td></tr><tr><td>CELRUSDT</td><td>CFXBTC</td><td>CFXBUSD</td><td>CFXUSDT</td><td>CHATBTC</td><td>CHATETH</td></tr><tr><td>CHRBNB</td><td>CHRBTC</td><td>CHRBUSD</td><td>CHRUSDT</td><td>CHZBNB</td><td>CHZBRL</td></tr><tr><td>CHZBTC</td><td>CHZBUSD</td><td>CHZEUR</td><td>CHZGBP</td><td>CHZTRY</td><td>CHZUSDT</td></tr><tr><td>CKBBTC</td><td>CKBBUSD</td><td>CKBUSDT</td><td>CLOAKBTC</td><td>CLOAKETH</td><td>CLVBNB</td></tr><tr><td>CLVBTC</td><td>CLVBUSD</td><td>CLVUSDT</td><td>CMTBNB</td><td>CMTBTC</td><td>CMTETH</td></tr><tr><td>CNDBNB</td><td>CNDBTC</td><td>CNDETH</td><td>COCOSBNB</td><td>COCOSBTC</td><td>COCOSUSDT</td></tr><tr><td>COMPBNB</td><td>COMPBTC</td><td>COMPBUSD</td><td>COMPUSDT</td><td>COSBNB</td><td>COSBTC</td></tr><tr><td>COSUSDT</td><td>COTIBNB</td><td>COTIBTC</td><td>COTIBUSD</td><td>COTIUSDT</td><td>COVERBUSD</td></tr><tr><td>COVERETH</td><td>CREAMBNB</td><td>CREAMBUSD</td><td>CRVBNB</td><td>CRVBTC</td><td>CRVBUSD</td></tr><tr><td>CRVUSDT</td><td>CTKBNB</td><td>CTKBTC</td><td>CTKBUSD</td><td>CTKUSDT</td><td>CTSIBNB</td></tr><tr><td>CTSIBTC</td><td>CTSIBUSD</td><td>CTSIUSDT</td><td>CTXCBNB</td><td>CTXCBTC</td><td>CTXCUSDT</td></tr><tr><td>CVCBNB</td><td>CVCBTC</td><td>CVCETH</td><td>CVCUSDT</td><td>CVPBUSD</td><td>CVPETH</td></tr><tr><td>CVPUSDT</td><td>DAIBNB</td><td>DAIBTC</td><td>DAIBUSD</td><td>DAIUSDT</td><td>DASHBNB</td></tr><tr><td>DASHBTC</td><td>DASHBUSD</td><td>DASHETH</td><td>DASHUSDT</td><td>DATABTC</td><td>DATABUSD</td></tr><tr><td>DATAETH</td><td>DATAUSDT</td><td>DCRBNB</td><td>DCRBTC</td><td>DCRBUSD</td><td>DCRUSDT</td></tr><tr><td>DEGOBTC</td><td>DEGOBUSD</td><td>DEGOUSDT</td><td>DENTBTC</td><td>DENTBUSD</td><td>DENTETH</td></tr><tr><td>DENTUSDT</td><td>DEXEBUSD</td><td>DEXEETH</td><td>DEXEUSDT</td><td>DFBUSD</td><td>DFETH</td></tr><tr><td>DFUSDT</td><td>DGBBNB</td><td>DGBBTC</td><td>DGBBUSD</td><td>DGBUSDT</td><td>DGDBTC</td></tr><tr><td>DGDETH</td><td>DIABNB</td><td>DIABTC</td><td>DIABUSD</td><td>DIAUSDT</td><td>DLTBNB</td></tr><tr><td>DLTBTC</td><td>DLTETH</td><td>DNTBTC</td><td>DNTBUSD</td><td>DNTETH</td><td>DNTUSDT</td></tr><tr><td>DOCKBTC</td><td>DOCKBUSD</td><td>DOCKETH</td><td>DOCKUSDT</td><td>DODOBTC</td><td>DODOBUSD</td></tr><tr><td>DODOUSDT</td><td>DOGEAUD</td><td>DOGEBIDR</td><td>DOGEBNB</td><td>DOGEBRL</td><td>DOGEBTC</td></tr><tr><td>DOGEBUSD</td><td>DOGEEUR</td><td>DOGEGBP</td><td>DOGEPAX</td><td>DOGERUB</td><td>DOGETRY</td></tr><tr><td>DOGEUSDC</td><td>DOGEUSDT</td><td>DOTAUD</td><td>DOTBIDR</td><td>DOTBKRW</td><td>DOTBNB</td></tr><tr><td>DOTBRL</td><td>DOTBTC</td><td>DOTBUSD</td><td>DOTEUR</td><td>DOTGBP</td><td>DOTNGN</td></tr><tr><td>DOTRUB</td><td>DOTTRY</td><td>DOTUSDT</td><td>DREPBNB</td><td>DREPBTC</td><td>DREPUSDT</td></tr><tr><td>DUSKBNB</td><td>DUSKBTC</td><td>DUSKPAX</td><td>DUSKUSDC</td><td>DUSKUSDT</td><td>DYDXBNB</td></tr><tr><td>DYDXBTC</td><td>DYDXBUSD</td><td>DYDXUSDT</td><td>EASYBTC</td><td>EASYETH</td><td>EDOBTC</td></tr><tr><td>EDOETH</td><td>EGLDBNB</td><td>EGLDBTC</td><td>EGLDBUSD</td><td>EGLDEUR</td><td>EGLDUSDT</td></tr><tr><td>ELFBTC</td><td>ELFBUSD</td><td>ELFETH</td><td>ELFUSDT</td><td>ENGBTC</td><td>ENGETH</td></tr><tr><td>ENJBNB</td><td>ENJBRL</td><td>ENJBTC</td><td>ENJBUSD</td><td>ENJETH</td><td>ENJEUR</td></tr><tr><td>ENJGBP</td><td>ENJUSDT</td><td>EOSAUD</td><td>EOSBEARBUSD</td><td>EOSBEARUSDT</td><td>EOSBNB</td></tr><tr><td>EOSBTC</td><td>EOSBULLBUSD</td><td>EOSBULLUSDT</td><td>EOSBUSD</td><td>EOSETH</td><td>EOSEUR</td></tr><tr><td>EOSPAX</td><td>EOSTRY</td><td>EOSTUSD</td><td>EOSUSDC</td><td>EOSUSDT</td><td>EPSBTC</td></tr><tr><td>EPSBUSD</td><td>EPSUSDT</td><td>ERDBNB</td><td>ERDBTC</td><td>ERDBUSD</td><td>ERDPAX</td></tr><tr><td>ERDUSDC</td><td>ERDUSDT</td><td>ERNBNB</td><td>ERNBUSD</td><td>ERNUSDT</td><td>ETCBNB</td></tr><tr><td>ETCBRL</td><td>ETCBTC</td><td>ETCBUSD</td><td>ETCETH</td><td>ETCEUR</td><td>ETCGBP</td></tr><tr><td>ETCPAX</td><td>ETCTUSD</td><td>ETCUSDC</td><td>ETCUSDT</td><td>ETHAUD</td><td>ETHBEARBUSD</td></tr><tr><td>ETHBEARUSDT</td><td>ETHBIDR</td><td>ETHBKRW</td><td>ETHBRL</td><td>ETHBTC</td><td>ETHBULLBUSD</td></tr><tr><td>ETHBULLUSDT</td><td>ETHBUSD</td><td>ETHDAI</td><td>ETHEUR</td><td>ETHGBP</td><td>ETHNGN</td></tr><tr><td>ETHPAX</td><td>ETHRUB</td><td>ETHTRY</td><td>ETHTUSD</td><td>ETHUAH</td><td>ETHUSDC</td></tr><tr><td>ETHUSDP</td><td>ETHUSDT</td><td>ETHZAR</td><td>EURBUSD</td><td>EURUSDT</td><td>EVXBTC</td></tr><tr><td>EVXETH</td><td>EZBTC</td><td>EZETH</td><td>FARMBNB</td><td>FARMBTC</td><td>FARMBUSD</td></tr><tr><td>FARMUSDT</td><td>FETBNB</td><td>FETBTC</td><td>FETBUSD</td><td>FETUSDT</td><td>FIDABNB</td></tr><tr><td>FIDABTC</td><td>FIDABUSD</td><td>FIDAUSDT</td><td>FILBNB</td><td>FILBTC</td><td>FILBUSD</td></tr><tr><td>FILUSDT</td><td>FIOBNB</td><td>FIOBTC</td><td>FIOBUSD</td><td>FIOUSDT</td><td>FIROBTC</td></tr><tr><td>FIROETH</td><td>FIROUSDT</td><td>FISBRL</td><td>FISBTC</td><td>FISBUSD</td><td>FISUSDT</td></tr><tr><td>FLMBNB</td><td>FLMBTC</td><td>FLMBUSD</td><td>FLMUSDT</td><td>FLOWBNB</td><td>FLOWBTC</td></tr><tr><td>FLOWBUSD</td><td>FLOWUSDT</td><td>FORBTC</td><td>FORBUSD</td><td>FORTHBTC</td><td>FORTHBUSD</td></tr><tr><td>FORTHUSDT</td><td>FORUSDT</td><td>FRONTBTC</td><td>FRONTBUSD</td><td>FRONTETH</td><td>FRONTUSDT</td></tr><tr><td>FTMBIDR</td><td>FTMBNB</td><td>FTMBTC</td><td>FTMBUSD</td><td>FTMPAX</td><td>FTMTUSD</td></tr><tr><td>FTMUSDC</td><td>FTMUSDT</td><td>FTTBNB</td><td>FTTBTC</td><td>FTTBUSD</td><td>FTTUSDT</td></tr><tr><td>FUELBTC</td><td>FUELETH</td><td>FUNBTC</td><td>FUNETH</td><td>FUNUSDT</td><td>FXSBTC</td></tr><tr><td>FXSBUSD</td><td>GALABNB</td><td>GALABTC</td><td>GALABUSD</td><td>GALAUSDT</td><td>GASBTC</td></tr><tr><td>GBPBUSD</td><td>GBPUSDT</td><td>GHSTBUSD</td><td>GHSTETH</td><td>GHSTUSDT</td><td>GLMBTC</td></tr><tr><td>GLMETH</td><td>GNOBNB</td><td>GNOBTC</td><td>GNOBUSD</td><td>GNOUSDT</td><td>GNTBNB</td></tr><tr><td>GNTBTC</td><td>GNTETH</td><td>GOBNB</td><td>GOBTC</td><td>GRSBTC</td><td>GRSETH</td></tr><tr><td>GRTBTC</td><td>GRTBUSD</td><td>GRTETH</td><td>GRTEUR</td><td>GRTTRY</td><td>GRTUSDT</td></tr><tr><td>GTCBNB</td><td>GTCBTC</td><td>GTCBUSD</td><td>GTCUSDT</td><td>GTOBNB</td><td>GTOBTC</td></tr><tr><td>GTOETH</td><td>GTOPAX</td><td>GTOTUSD</td><td>GTOUSDC</td><td>GTOUSDT</td><td>GVTBTC</td></tr><tr><td>GVTETH</td><td>GXSBTC</td><td>GXSETH</td><td>GXSUSDT</td><td>HARDBNB</td><td>HARDBTC</td></tr><tr><td>HARDBUSD</td><td>HARDUSDT</td><td>HBARBNB</td><td>HBARBTC</td><td>HBARBUSD</td><td>HBARUSDT</td></tr><tr><td>HCBTC</td><td>HCETH</td><td>HCUSDT</td><td>HEGICBUSD</td><td>HEGICETH</td><td>HIVEBNB</td></tr><tr><td>HIVEBTC</td><td>HIVEBUSD</td><td>HIVEUSDT</td><td>HNTBTC</td><td>HNTBUSD</td><td>HNTUSDT</td></tr><tr><td>HOTBNB</td><td>HOTBRL</td><td>HOTBTC</td><td>HOTBUSD</td><td>HOTETH</td><td>HOTEUR</td></tr><tr><td>HOTTRY</td><td>HOTUSDT</td><td>HSRBTC</td><td>HSRETH</td><td>ICNBTC</td><td>ICNETH</td></tr><tr><td>ICPBNB</td><td>ICPBTC</td><td>ICPBUSD</td><td>ICPEUR</td><td>ICPRUB</td><td>ICPUSDT</td></tr><tr><td>ICXBNB</td><td>ICXBTC</td><td>ICXBUSD</td><td>ICXETH</td><td>ICXUSDT</td><td>IDEXBTC</td></tr><tr><td>IDEXBUSD</td><td>IDEXUSDT</td><td>ILVBNB</td><td>ILVBTC</td><td>ILVBUSD</td><td>ILVUSDT</td></tr><tr><td>INJBNB</td><td>INJBTC</td><td>INJBUSD</td><td>INJUSDT</td><td>INSBTC</td><td>INSETH</td></tr><tr><td>IOSTBNB</td><td>IOSTBTC</td><td>IOSTBUSD</td><td>IOSTETH</td><td>IOSTUSDT</td><td>IOTABNB</td></tr><tr><td>IOTABTC</td><td>IOTABUSD</td><td>IOTAETH</td><td>IOTAUSDT</td><td>IOTXBTC</td><td>IOTXBUSD</td></tr><tr><td>IOTXETH</td><td>IOTXUSDT</td><td>IQBNB</td><td>IQBUSD</td><td>IRISBNB</td><td>IRISBTC</td></tr><tr><td>IRISBUSD</td><td>IRISUSDT</td><td>JSTBNB</td><td>JSTBTC</td><td>JSTBUSD</td><td>JSTUSDT</td></tr><tr><td>JUVBTC</td><td>JUVBUSD</td><td>JUVUSDT</td><td>KAVABNB</td><td>KAVABTC</td><td>KAVABUSD</td></tr><tr><td>KAVAUSDT</td><td>KEEPBNB</td><td>KEEPBTC</td><td>KEEPBUSD</td><td>KEEPUSDT</td><td>KEYBTC</td></tr><tr><td>KEYETH</td><td>KEYUSDT</td><td>KLAYBNB</td><td>KLAYBTC</td><td>KLAYBUSD</td><td>KLAYUSDT</td></tr><tr><td>KMDBTC</td><td>KMDBUSD</td><td>KMDETH</td><td>KMDUSDT</td><td>KNCBTC</td><td>KNCBUSD</td></tr><tr><td>KNCETH</td><td>KNCUSDT</td><td>KP3RBNB</td><td>KP3RBUSD</td><td>KSMAUD</td><td>KSMBNB</td></tr><tr><td>KSMBTC</td><td>KSMBUSD</td><td>KSMUSDT</td><td>LENDBKRW</td><td>LENDBTC</td><td>LENDBUSD</td></tr><tr><td>LENDETH</td><td>LENDUSDT</td><td>LINABTC</td><td>LINABUSD</td><td>LINAUSDT</td><td>LINKAUD</td></tr><tr><td>LINKBKRW</td><td>LINKBRL</td><td>LINKBTC</td><td>LINKBUSD</td><td>LINKETH</td><td>LINKEUR</td></tr><tr><td>LINKGBP</td><td>LINKNGN</td><td>LINKPAX</td><td>LINKTRY</td><td>LINKTUSD</td><td>LINKUSDC</td></tr><tr><td>LINKUSDT</td><td>LITBTC</td><td>LITBUSD</td><td>LITUSDT</td><td>LOOMBNB</td><td>LOOMBTC</td></tr><tr><td>LOOMETH</td><td>LPTBNB</td><td>LPTBTC</td><td>LPTBUSD</td><td>LPTUSDT</td><td>LRCBTC</td></tr><tr><td>LRCBUSD</td><td>LRCETH</td><td>LRCUSDT</td><td>LSKBNB</td><td>LSKBTC</td><td>LSKBUSD</td></tr><tr><td>LSKETH</td><td>LSKUSDT</td><td>LTCBNB</td><td>LTCBRL</td><td>LTCBTC</td><td>LTCBUSD</td></tr><tr><td>LTCETH</td><td>LTCEUR</td><td>LTCGBP</td><td>LTCNGN</td><td>LTCPAX</td><td>LTCRUB</td></tr><tr><td>LTCTUSD</td><td>LTCUAH</td><td>LTCUSDC</td><td>LTCUSDT</td><td>LTOBNB</td><td>LTOBTC</td></tr><tr><td>LTOBUSD</td><td>LTOUSDT</td><td>LUNABNB</td><td>LUNABTC</td><td>LUNABUSD</td><td>LUNAEUR</td></tr><tr><td>LUNAUSDT</td><td>LUNBTC</td><td>LUNETH</td><td>MANABTC</td><td>MANABUSD</td><td>MANAETH</td></tr><tr><td>MANAUSDT</td><td>MASKBNB</td><td>MASKBUSD</td><td>MASKUSDT</td><td>MATICAUD</td><td>MATICBIDR</td></tr><tr><td>MATICBNB</td><td>MATICBRL</td><td>MATICBTC</td><td>MATICBUSD</td><td>MATICEUR</td><td>MATICGBP</td></tr><tr><td>MATICRUB</td><td>MATICTRY</td><td>MATICUSDT</td><td>MBLBNB</td><td>MBLBTC</td><td>MBLUSDT</td></tr><tr><td>MBOXBNB</td><td>MBOXBTC</td><td>MBOXBUSD</td><td>MBOXUSDT</td><td>MCOBNB</td><td>MCOBTC</td></tr><tr><td>MCOETH</td><td>MCOUSDT</td><td>MDABTC</td><td>MDAETH</td><td>MDTBNB</td><td>MDTBTC</td></tr><tr><td>MDTUSDT</td><td>MDXBNB</td><td>MDXBTC</td><td>MDXBUSD</td><td>MDXUSDT</td><td>MFTBNB</td></tr><tr><td>MFTBTC</td><td>MFTETH</td><td>MFTUSDT</td><td>MINABNB</td><td>MINABTC</td><td>MINABUSD</td></tr><tr><td>MINAUSDT</td><td>MIRBTC</td><td>MIRBUSD</td><td>MIRUSDT</td><td>MITHBNB</td><td>MITHBTC</td></tr><tr><td>MITHUSDT</td><td>MKRBNB</td><td>MKRBTC</td><td>MKRBUSD</td><td>MKRUSDT</td><td>MLNBNB</td></tr><tr><td>MLNBTC</td><td>MLNBUSD</td><td>MLNUSDT</td><td>MODBTC</td><td>MODETH</td><td>MTHBTC</td></tr><tr><td>MTHETH</td><td>MTLBTC</td><td>MTLBUSD</td><td>MTLETH</td><td>MTLUSDT</td><td>NANOBNB</td></tr><tr><td>NANOBTC</td><td>NANOBUSD</td><td>NANOETH</td><td>NANOUSDT</td><td>NASBNB</td><td>NASBTC</td></tr><tr><td>NASETH</td><td>NAVBNB</td><td>NAVBTC</td><td>NAVETH</td><td>NBSBTC</td><td>NBSUSDT</td></tr><tr><td>NCASHBNB</td><td>NCASHBTC</td><td>NCASHETH</td><td>NEARBNB</td><td>NEARBTC</td><td>NEARBUSD</td></tr><tr><td>NEARUSDT</td><td>NEBLBNB</td><td>NEBLBTC</td><td>NEBLETH</td><td>NEOBNB</td><td>NEOBTC</td></tr><tr><td>NEOBUSD</td><td>NEOETH</td><td>NEOPAX</td><td>NEOTRY</td><td>NEOTUSD</td><td>NEOUSDC</td></tr><tr><td>NEOUSDT</td><td>NKNBNB</td><td>NKNBTC</td><td>NKNUSDT</td><td>NMRBNB</td><td>NMRBTC</td></tr><tr><td>NMRBUSD</td><td>NMRUSDT</td><td>NPXSBTC</td><td>NPXSETH</td><td>NPXSUSDC</td><td>NPXSUSDT</td></tr><tr><td>NUBNB</td><td>NUBTC</td><td>NUBUSD</td><td>NULSBNB</td><td>NULSBTC</td><td>NULSETH</td></tr><tr><td>NULSUSDT</td><td>NUUSDT</td><td>NXSBNB</td><td>NXSBTC</td><td>NXSETH</td><td>OAXBTC</td></tr><tr><td>OAXETH</td><td>OCEANBNB</td><td>OCEANBTC</td><td>OCEANBUSD</td><td>OCEANUSDT</td><td>OGBTC</td></tr><tr><td>OGNBNB</td><td>OGNBTC</td><td>OGNBUSD</td><td>OGNUSDT</td><td>OGUSDT</td><td>OMBTC</td></tr><tr><td>OMBUSD</td><td>OMGBNB</td><td>OMGBTC</td><td>OMGBUSD</td><td>OMGETH</td><td>OMGUSDT</td></tr><tr><td>OMUSDT</td><td>ONEBIDR</td><td>ONEBNB</td><td>ONEBTC</td><td>ONEBUSD</td><td>ONEPAX</td></tr><tr><td>ONETUSD</td><td>ONEUSDC</td><td>ONEUSDT</td><td>ONGBNB</td><td>ONGBTC</td><td>ONGUSDT</td></tr><tr><td>ONTBNB</td><td>ONTBTC</td><td>ONTBUSD</td><td>ONTETH</td><td>ONTPAX</td><td>ONTTRY</td></tr><tr><td>ONTUSDC</td><td>ONTUSDT</td><td>ORNBTC</td><td>ORNBUSD</td><td>ORNUSDT</td><td>OSTBNB</td></tr><tr><td>OSTBTC</td><td>OSTETH</td><td>OXTBTC</td><td>OXTUSDT</td><td>PAXBNB</td><td>PAXBTC</td></tr><tr><td>PAXBUSD</td><td>PAXETH</td><td>PAXGBNB</td><td>PAXGBTC</td><td>PAXGBUSD</td><td>PAXGUSDT</td></tr><tr><td>PAXTUSD</td><td>PAXUSDT</td><td>PERLBNB</td><td>PERLBTC</td><td>PERLUSDC</td><td>PERLUSDT</td></tr><tr><td>PERPBTC</td><td>PERPBUSD</td><td>PERPUSDT</td><td>PHABTC</td><td>PHABUSD</td><td>PHAUSDT</td></tr><tr><td>PHBBNB</td><td>PHBBTC</td><td>PHBPAX</td><td>PHBTUSD</td><td>PHBUSDC</td><td>PHXBNB</td></tr><tr><td>PHXBTC</td><td>PHXETH</td><td>PIVXBNB</td><td>PIVXBTC</td><td>PIVXETH</td><td>PNTBTC</td></tr><tr><td>PNTUSDT</td><td>POABNB</td><td>POABTC</td><td>POAETH</td><td>POEBTC</td><td>POEETH</td></tr><tr><td>POLSBNB</td><td>POLSBTC</td><td>POLSBUSD</td><td>POLSUSDT</td><td>POLYBNB</td><td>POLYBTC</td></tr><tr><td>POLYBUSD</td><td>POLYUSDT</td><td>PONDBTC</td><td>PONDBUSD</td><td>PONDUSDT</td><td>POWRBNB</td></tr><tr><td>POWRBTC</td><td>POWRETH</td><td>PPTBTC</td><td>PPTETH</td><td>PROMBNB</td><td>PROMBTC</td></tr><tr><td>PROMBUSD</td><td>PROSETH</td><td>PSGBTC</td><td>PSGBUSD</td><td>PSGUSDT</td><td>PUNDIXETH</td></tr><tr><td>PUNDIXUSDT</td><td>QKCBTC</td><td>QKCETH</td><td>QLCBNB</td><td>QLCBTC</td><td>QLCETH</td></tr><tr><td>QNTBNB</td><td>QNTBTC</td><td>QNTBUSD</td><td>QNTUSDT</td><td>QSPBNB</td><td>QSPBTC</td></tr><tr><td>QSPETH</td><td>QTUMBNB</td><td>QTUMBTC</td><td>QTUMBUSD</td><td>QTUMETH</td><td>QTUMUSDT</td></tr><tr><td>QUICKBNB</td><td>QUICKBTC</td><td>QUICKBUSD</td><td>QUICKUSDT</td><td>RADBNB</td><td>RADBTC</td></tr><tr><td>RADBUSD</td><td>RADUSDT</td><td>RAMPBTC</td><td>RAMPBUSD</td><td>RAMPUSDT</td><td>RAYBNB</td></tr><tr><td>RAYBUSD</td><td>RAYUSDT</td><td>RCNBNB</td><td>RCNBTC</td><td>RCNETH</td><td>RDNBNB</td></tr><tr><td>RDNBTC</td><td>RDNETH</td><td>REEFBTC</td><td>REEFBUSD</td><td>REEFUSDT</td><td>RENBNB</td></tr><tr><td>RENBTC</td><td>RENBTCBTC</td><td>RENBTCETH</td><td>RENBUSD</td><td>RENUSDT</td><td>REPBNB</td></tr><tr><td>REPBTC</td><td>REPBUSD</td><td>REPETH</td><td>REPUSDT</td><td>REQBTC</td><td>REQETH</td></tr><tr><td>REQUSDT</td><td>RIFBTC</td><td>RIFUSDT</td><td>RLCBNB</td><td>RLCBTC</td><td>RLCBUSD</td></tr><tr><td>RLCETH</td><td>RLCUSDT</td><td>ROSEBTC</td><td>ROSEBUSD</td><td>ROSEUSDT</td><td>RPXBNB</td></tr><tr><td>RPXBTC</td><td>RPXETH</td><td>RSRBNB</td><td>RSRBTC</td><td>RSRBUSD</td><td>RSRUSDT</td></tr><tr><td>RUNEAUD</td><td>RUNEBNB</td><td>RUNEBTC</td><td>RUNEBUSD</td><td>RUNEEUR</td><td>RUNEGBP</td></tr><tr><td>RUNEUSDT</td><td>RVNBNB</td><td>RVNBTC</td><td>RVNBUSD</td><td>RVNTRY</td><td>RVNUSDT</td></tr><tr><td>SALTBTC</td><td>SALTETH</td><td>SANDBNB</td><td>SANDBTC</td><td>SANDBUSD</td><td>SANDUSDT</td></tr><tr><td>SCBNB</td><td>SCBTC</td><td>SCBUSD</td><td>SCETH</td><td>SCRTBTC</td><td>SCRTETH</td></tr><tr><td>SCUSDT</td><td>SFPBTC</td><td>SFPBUSD</td><td>SFPUSDT</td><td>SHIBAUD</td><td>SHIBBRL</td></tr><tr><td>SHIBBUSD</td><td>SHIBEUR</td><td>SHIBRUB</td><td>SHIBTRY</td><td>SHIBUSDT</td><td>SKLBTC</td></tr><tr><td>SKLBUSD</td><td>SKLUSDT</td><td>SKYBNB</td><td>SKYBTC</td><td>SKYETH</td><td>SLPBUSD</td></tr><tr><td>SLPETH</td><td>SLPUSDT</td><td>SNGLSBTC</td><td>SNGLSETH</td><td>SNMBTC</td><td>SNMETH</td></tr><tr><td>SNTBTC</td><td>SNTETH</td><td>SNXBNB</td><td>SNXBTC</td><td>SNXBUSD</td><td>SNXUSDT</td></tr><tr><td>SOLAUD</td><td>SOLBIDR</td><td>SOLBNB</td><td>SOLBRL</td><td>SOLBTC</td><td>SOLBUSD</td></tr><tr><td>SOLEUR</td><td>SOLGBP</td><td>SOLRUB</td><td>SOLTRY</td><td>SOLUSDC</td><td>SOLUSDT</td></tr><tr><td>SPARTABNB</td><td>SRMBIDR</td><td>SRMBNB</td><td>SRMBTC</td><td>SRMBUSD</td><td>SRMUSDT</td></tr><tr><td>STEEMBNB</td><td>STEEMBTC</td><td>STEEMETH</td><td>STMXBNB</td><td>STMXBTC</td><td>STMXBUSD</td></tr><tr><td>STMXETH</td><td>STMXUSDT</td><td>STORJBTC</td><td>STORJBUSD</td><td>STORJETH</td><td>STORJUSDT</td></tr><tr><td>STORMBNB</td><td>STORMBTC</td><td>STORMETH</td><td>STORMUSDT</td><td>STPTBNB</td><td>STPTBTC</td></tr><tr><td>STPTBUSD</td><td>STPTUSDT</td><td>STRATBNB</td><td>STRATBTC</td><td>STRATBUSD</td><td>STRATETH</td></tr><tr><td>STRATUSDT</td><td>STRAXBTC</td><td>STRAXBUSD</td><td>STRAXETH</td><td>STRAXUSDT</td><td>STXBNB</td></tr><tr><td>STXBTC</td><td>STXBUSD</td><td>STXUSDT</td><td>SUBBTC</td><td>SUBETH</td><td>SUNBTC</td></tr><tr><td>SUNBUSD</td><td>SUNUSDT</td><td>SUPERBTC</td><td>SUPERBUSD</td><td>SUPERUSDT</td><td>SUSDBTC</td></tr><tr><td>SUSDETH</td><td>SUSDUSDT</td><td>SUSHIBIDR</td><td>SUSHIBNB</td><td>SUSHIBTC</td><td>SUSHIBUSD</td></tr><tr><td>SUSHIUSDT</td><td>SWRVBNB</td><td>SWRVBUSD</td><td>SXPAUD</td><td>SXPBIDR</td><td>SXPBNB</td></tr><tr><td>SXPBTC</td><td>SXPBUSD</td><td>SXPEUR</td><td>SXPGBP</td><td>SXPTRY</td><td>SXPUSDT</td></tr><tr><td>SYSBNB</td><td>SYSBTC</td><td>SYSBUSD</td><td>SYSETH</td><td>SYSUSDT</td><td>TCTBNB</td></tr><tr><td>TCTBTC</td><td>TCTUSDT</td><td>TFUELBNB</td><td>TFUELBTC</td><td>TFUELPAX</td><td>TFUELTUSD</td></tr><tr><td>TFUELUSDC</td><td>TFUELUSDT</td><td>THETABNB</td><td>THETABTC</td><td>THETABUSD</td><td>THETAETH</td></tr><tr><td>THETAEUR</td><td>THETAUSDT</td><td>TKOBIDR</td><td>TKOBTC</td><td>TKOBUSD</td><td>TKOUSDT</td></tr><tr><td>TLMBTC</td><td>TLMBUSD</td><td>TLMTRY</td><td>TLMUSDT</td><td>TNBBTC</td><td>TNBETH</td></tr><tr><td>TNTBTC</td><td>TNTETH</td><td>TOMOBNB</td><td>TOMOBTC</td><td>TOMOBUSD</td><td>TOMOUSDC</td></tr><tr><td>TOMOUSDT</td><td>TORNBNB</td><td>TORNBTC</td><td>TORNBUSD</td><td>TORNUSDT</td><td>TRBBNB</td></tr><tr><td>TRBBTC</td><td>TRBBUSD</td><td>TRBUSDT</td><td>TRIBEBNB</td><td>TRIBEBTC</td><td>TRIBEBUSD</td></tr><tr><td>TRIBEUSDT</td><td>TRIGBNB</td><td>TRIGBTC</td><td>TRIGETH</td><td>TROYBNB</td><td>TROYBTC</td></tr><tr><td>TROYUSDT</td><td>TRUBTC</td><td>TRUBUSD</td><td>TRURUB</td><td>TRUUSDT</td><td>TRXAUD</td></tr><tr><td>TRXBNB</td><td>TRXBTC</td><td>TRXBUSD</td><td>TRXETH</td><td>TRXEUR</td><td>TRXNGN</td></tr><tr><td>TRXPAX</td><td>TRXTRY</td><td>TRXTUSD</td><td>TRXUSDC</td><td>TRXUSDT</td><td>TRXXRP</td></tr><tr><td>TUSDBNB</td><td>TUSDBTC</td><td>TUSDBTUSD</td><td>TUSDBUSD</td><td>TUSDETH</td><td>TUSDUSDT</td></tr><tr><td>TVKBTC</td><td>TVKBUSD</td><td>TVKUSDT</td><td>TWTBTC</td><td>TWTBUSD</td><td>TWTUSDT</td></tr><tr><td>UFTBUSD</td><td>UFTETH</td><td>UMABTC</td><td>UMAUSDT</td><td>UNFIBNB</td><td>UNFIBTC</td></tr><tr><td>UNFIBUSD</td><td>UNFIUSDT</td><td>UNIAUD</td><td>UNIBNB</td><td>UNIBTC</td><td>UNIBUSD</td></tr><tr><td>UNIEUR</td><td>UNIUSDT</td><td>USDCBNB</td><td>USDCBUSD</td><td>USDCPAX</td><td>USDCTUSD</td></tr><tr><td>USDCUSDT</td><td>USDPBUSD</td><td>USDPUSDT</td><td>USDSBUSDS</td><td>USDSBUSDT</td><td>USDSPAX</td></tr><tr><td>USDSTUSD</td><td>USDSUSDC</td><td>USDSUSDT</td><td>USDTBIDR</td><td>USDTBKRW</td><td>USDTBRL</td></tr><tr><td>USDTBVND</td><td>USDTDAI</td><td>USDTGYEN</td><td>USDTIDRT</td><td>USDTNGN</td><td>USDTRUB</td></tr><tr><td>USDTTRY</td><td>USDTUAH</td><td>USDTZAR</td><td>UTKBTC</td><td>UTKBUSD</td><td>UTKUSDT</td></tr><tr><td>VENBNB</td><td>VENBTC</td><td>VENETH</td><td>VENUSDT</td><td>VETBNB</td><td>VETBTC</td></tr><tr><td>VETBUSD</td><td>VETETH</td><td>VETEUR</td><td>VETGBP</td><td>VETTRY</td><td>VETUSDT</td></tr><tr><td>VGXBTC</td><td>VGXETH</td><td>VIABNB</td><td>VIABTC</td><td>VIAETH</td><td>VIBBTC</td></tr><tr><td>VIBEBTC</td><td>VIBEETH</td><td>VIBETH</td><td>VIDTBTC</td><td>VIDTBUSD</td><td>VIDTUSDT</td></tr><tr><td>VITEBNB</td><td>VITEBTC</td><td>VITEUSDT</td><td>VTHOBNB</td><td>VTHOBUSD</td><td>VTHOUSDT</td></tr><tr><td>WABIBNB</td><td>WABIBTC</td><td>WABIETH</td><td>WANBNB</td><td>WANBTC</td><td>WANETH</td></tr><tr><td>WANUSDT</td><td>WAVESBNB</td><td>WAVESBTC</td><td>WAVESBUSD</td><td>WAVESETH</td><td>WAVESPAX</td></tr><tr><td>WAVESRUB</td><td>WAVESTUSD</td><td>WAVESUSDC</td><td>WAVESUSDT</td><td>WAXPBNB</td><td>WAXPBTC</td></tr><tr><td>WAXPBUSD</td><td>WAXPUSDT</td><td>WBTCBTC</td><td>WBTCETH</td><td>WINBNB</td><td>WINBRL</td></tr><tr><td>WINBTC</td><td>WINBUSD</td><td>WINEUR</td><td>WINGBNB</td><td>WINGBTC</td><td>WINGBUSD</td></tr><tr><td>WINGSBTC</td><td>WINGSETH</td><td>WINGUSDT</td><td>WINTRX</td><td>WINUSDC</td><td>WINUSDT</td></tr><tr><td>WNXMBNB</td><td>WNXMBTC</td><td>WNXMBUSD</td><td>WNXMUSDT</td><td>WPRBTC</td><td>WPRETH</td></tr><tr><td>WRXBNB</td><td>WRXBTC</td><td>WRXBUSD</td><td>WRXEUR</td><td>WRXUSDT</td><td>WTCBNB</td></tr><tr><td>WTCBTC</td><td>WTCETH</td><td>WTCUSDT</td><td>XECBUSD</td><td>XECUSDT</td><td>XEMBNB</td></tr><tr><td>XEMBTC</td><td>XEMBUSD</td><td>XEMETH</td><td>XEMUSDT</td><td>XLMBNB</td><td>XLMBTC</td></tr><tr><td>XLMBUSD</td><td>XLMETH</td><td>XLMEUR</td><td>XLMPAX</td><td>XLMTRY</td><td>XLMTUSD</td></tr><tr><td>XLMUSDC</td><td>XLMUSDT</td><td>XMRBNB</td><td>XMRBTC</td><td>XMRBUSD</td><td>XMRETH</td></tr><tr><td>XMRUSDT</td><td>XRPAUD</td><td>XRPBEARBUSD</td><td>XRPBEARUSDT</td><td>XRPBIDR</td><td>XRPBKRW</td></tr><tr><td>XRPBNB</td><td>XRPBRL</td><td>XRPBTC</td><td>XRPBULLBUSD</td><td>XRPBULLUSDT</td><td>XRPBUSD</td></tr><tr><td>XRPETH</td><td>XRPEUR</td><td>XRPGBP</td><td>XRPNGN</td><td>XRPPAX</td><td>XRPRUB</td></tr><tr><td>XRPTRY</td><td>XRPTUSD</td><td>XRPUSDC</td><td>XRPUSDT</td><td>XTZBNB</td><td>XTZBTC</td></tr><tr><td>XTZBUSD</td><td>XTZUSDT</td><td>XVGBTC</td><td>XVGBUSD</td><td>XVGETH</td><td>XVGUSDT</td></tr><tr><td>XVSBNB</td><td>XVSBTC</td><td>XVSBUSD</td><td>XVSUSDT</td><td>XZCBNB</td><td>XZCBTC</td></tr><tr><td>XZCETH</td><td>XZCUSDT</td><td>XZCXRP</td><td>YFIBNB</td><td>YFIBTC</td><td>YFIBUSD</td></tr><tr><td>YFIEUR</td><td>YFIIBNB</td><td>YFIIBTC</td><td>YFIIBUSD</td><td>YFIIUSDT</td><td>YFIUSDT</td></tr><tr><td>YGGBNB</td><td>YGGBTC</td><td>YGGBUSD</td><td>YGGUSDT</td><td>YOYOBNB</td><td>YOYOBTC</td></tr><tr><td>YOYOETH</td><td>ZECBNB</td><td>ZECBTC</td><td>ZECBUSD</td><td>ZECETH</td><td>ZECPAX</td></tr><tr><td>ZECTUSD</td><td>ZECUSDC</td><td>ZECUSDT</td><td>ZENBNB</td><td>ZENBTC</td><td>ZENBUSD</td></tr><tr><td>ZENETH</td><td>ZENUSDT</td><td>ZILBIDR</td><td>ZILBNB</td><td>ZILBTC</td><td>ZILBUSD</td></tr><tr><td>ZILETH</td><td>ZILUSDT</td><td>ZRXBNB</td><td>ZRXBTC</td><td>ZRXBUSD</td><td>ZRXETH</td></tr><tr><td>ZRXUSDT</td></tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe Binance Crypto Price Data by CoinAPI enables researchers to accurately design strategies for Cryptocurrencies. Examples include: \n</p>\n<ul><li>Buy and hold</li>\n<li>Trading Cryptocurrency volatility and price action</li>\n<li>Allocating a small portion of your portfolio to Cryptocurrencies to hedge against inflation</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_f9b69f4e1877b7e71a9e924ac3662219.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Binance Crypto Price dataset provides TradeBar, QuoteBar, Tick, and CryptoCoarseFundamental objects.</p>\n\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>Tick Attributes</h4>\n<p>Tick objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"></div>\n\n<h4>CryptoCoarseFundamental Attributes</h4>\n<p>CryptoCoarseFundamental objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.CryptoCoarseFundamental\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add Binance data from CoinAPI to your algorithm, use the AddCrypto() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. When requesting data, you have the option to use several crypto markets. For detailed documentation on requesting market data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class CoinAPIDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n\n        # Set Account Currency to Binance Stable Coin for USD\n        self.SetAccountCurrency(\"BUSD\")\n        self.SetCash(100000)\n\n        # Binance accepts both Cash and Margin account types.\n        self.SetBrokerageModel(BrokerageName.Binance, AccountType.Margin)\n        \n        self.btcbusd = self.AddCrypto(\"BTCBUSD\", Resolution.Minute, Market.Binance).Symbol</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class CoinAPIDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _btcbusd;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n\n            // Set Account Currency to Binance Stable Coin for USD\n            SetAccountCurrency(\"BUSD\");\n            SetCash(100000);\n\n            // Binance accepts both Cash and Margin account types.\n            SetBrokerageModel(BrokerageName.Binance, AccountType.Margin);\n            \n            _btcbusd = AddCrypto(\"BTCBUSD\", Resolution.Minute, Market.Binance).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in every resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    btc_price = data[self.btcbusd].Price\n    self.Log(f\"Time: {self.Time}; Price: {btc_price};\")</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var btcPrice = data[_btcbusd].Price;\n    Log($\"Time: {Time}; Price: {btcPrice}\");\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical data in your algorithm using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for Binance by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.btcbusd, 30, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History(_btcbusd, 30, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Universe Selection",
        "content": "<p>You can perform an universe selection by adding a CryptoCoarseFundamentalUniverse, which filters cryptocurrency pairs by their previous day OHLCV, dollar volume in quote currency and USD if available (as of UTC 00:00).</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def Initialize(self):\n    self.UniverseSettings.Resolution = Resolution.Daily\n\n    # Add universe selection of cryptos based on coarse fundamentals\n    self.AddUniverse(CryptoCoarseFundamentalUniverse(Market.Binance, self.UniverseSettings, self.UniverseSelectionFilter))\n\ndef UniverseSelectionFilter(self, crypto_coarse):\n    for datum in crypto_coarse:\n        self.Log(f\"{datum.Symbol},{datum.Price},{datum.Volume},{datum.VolumeInQuoteCurrency},{datum.VolumeInUsd},{datum.Open},{datum.High},{datum.Low},{datum.Close}\")\n            \n        # define our selection criteria\n        if datum.Volume &gt;= 100 and datum.VolumeInUsd &gt; 10000:\n            universe.append(datum.Symbol)\n        \n    return universe</code></pre>\n<pre><code class=\"language-cs\">public override void Initialize()\n{\n    UniverseSettings.Resolution = Resolution.Daily;\n\n    // Add universe selection of cryptos based on coarse fundamentals\n    AddUniverse(new CryptoCoarseFundamentalUniverse(Market.Binance, UniverseSettings, UniverseSelectionFilter));\n}\n\nprivate IEnumerable&lt;Symbol&gt; UniverseSelectionFilter(IEnumerable&lt;CryptoCoarseFundamental&gt; cryptoCoarseta)\n{\n    var universe = new List&lt;Symbol&gt;();\n\n    foreach (var datum in cryptoCoarse)\n    {\n        Log($\"{datum.Symbol},{datum.Price},{datum.Volume},{datum.VolumeInQuoteCurrency},{datum.VolumeInUsd},{datum.Open},{datum.High},{datum.Low},{datum.Close}\");\n\n         // define our selection criteria\n         if (datum.Volume &gt;= 100m &amp;&amp; datum.VolumeInUsd &gt; 10000m)\n         {\n             universe.Add(datum.Symbol);\n         }\n     }\n\n     return universe;\n}</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Binance Crypto Price dataset provides TradeBar, QuoteBar, Tick, and CryptoCoarseFundamental objects.</p>\n\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>Tick Attributes</h4>\n<p>Tick objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"></div>\n\n<h4>CryptoCoarseFundamental Attributes</h4>\n<p>CryptoCoarseFundamental objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.CryptoCoarseFundamental\"></div>"
      }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "",
    "examples": [
      {
        "id": 894,
        "master_product_id": 58,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we buy and hold Bitcoin through the Binance exchange.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass CoinAPIDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(\"BUSD\", 100000)\n\n        # Binance accepts both Cash and Margin account types.\n        self.SetBrokerageModel(BrokerageName.Binance, AccountType.Margin)\n\n        # Warm up the security with the last known price to avoid conversion error\n        self.SetSecurityInitializer(lambda security: security.SetMarketPrice(self.GetLastKnownPrice(security)))\n        \n        # Requesting data\n        crypto = self.AddCrypto(\"BTCBUSD\", Resolution.Minute, Market.Binance)\n        self.btcbusd = crypto.Symbol\n        self.minimum_order_size = crypto.SymbolProperties.MinimumOrderSize\n        \n        # Historical data\n        history = self.History(self.btcbusd, 30, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request\")\n\n        # Add Crypto Coarse Fundamental Universe Selection\n        self.AddUniverse(CryptoCoarseFundamentalUniverse(Market.Binance, self.UniverseSettings, self.UniverseSelectionFilter))\n\n    def UniverseSelectionFilter(self, crypto_coarse):\n        return [datum.Symbol for datum in crypto_coarse\n                if datum.Volume &gt;= 100 \n                and datum.VolumeInUsd &gt; 10000]\n\n    def OnData(self, data):\n        if self.Portfolio.CashBook['BTC'].Amount == 0:\n            free_cash = self.Portfolio.CashBook['BUSD'].Amount * (1-self.Settings.FreePortfolioValuePercentage)\n            quantity = free_cash / data[self.btcbusd].Price\n            quantity -= quantity % self.minimum_order_size\n            if quantity &gt; 0:\n                self.MarketOrder(self.btcbusd, quantity)</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class CoinAPIDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _btcbusd;\n        private decimal? _minimumOrderSize;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(\"BUSD\", 100000);\n\n            // Binance accepts both Cash and Margin account types.\n            SetBrokerageModel(BrokerageName.Binance, AccountType.Margin);\n\n            // Warm up the security with the last known price to avoid conversion error\n            SetSecurityInitializer(security =&gt; security.SetMarketPrice(GetLastKnownPrice(security)));\n            \n            // Requesting data\n            var crypto = AddCrypto(\"BTCBUSD\", Resolution.Minute, Market.Binance);\n            _btcbusd = crypto.Symbol;\n            _minimumOrderSize = crypto.SymbolProperties.MinimumOrderSize;\n        \n             // Historical data\n            var history = History(_btcbusd, 30, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request\");\n\n            // Add Crypto Coarse Fundamental Universe Selection\n            AddUniverse(new CryptoCoarseFundamentalUniverse(Market.Binance, UniverseSettings, UniverseSelectionFilter));\n        }\n\n        private IEnumerable&lt;Symbol&gt; UniverseSelectionFilter(IEnumerable&lt;CryptoCoarseFundamental&gt; cryptoCoarse)\n        {\n            return from datum in cryptoCoarse\n                   where datum.Volume &gt;= 100m \n                   &amp;&amp; datum.VolumeInUsd &gt; 10000m\n                   select datum.Symbol;\n        }\n\n        public override void OnData(Slice data)\n        {\n            if (Portfolio.CashBook[\"BTC\"].Amount == 0)\n            {\n                var freeCash = Portfolio.CashBook[\"USD\"].Amount * (1-Settings.FreePortfolioValuePercentage);\n                var quantity = freeCash / data[_btcbusd].Price;\n                quantity -= quantity % _minimumOrderSize;\n                if (quantity &gt; 0m)\n                {\n                    MarketOrder(_btcbusd, quantity);\n                }\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-04-27 16:07:11"
      },
      {
        "id": 896,
        "master_product_id": 58,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this example, we hold an equal-sized basket of filtered crypto pairs through the Binance exchange.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass CoinAPIDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n\n        # Set Account Currency to Binance Stable Coin for USD\n        self.SetCash(\"BUSD\", 100000)\n\n        self.SetBrokerageModel(BrokerageName.Binance, AccountType.Margin)\n\n        # Warm up the security with the last known price to avoid conversion error\n        self.SetSecurityInitializer(lambda security: security.SetMarketPrice(self.GetLastKnownPrice(security)))\n\n        self.UniverseSettings.Resolution = Resolution.Minute\n        # Add universe selection of cryptos based on coarse fundamentals\n        self.AddUniverse(CryptoCoarseFundamentalUniverse(Market.Binance, self.UniverseSettings, self.UniverseSelectionFilter))\n        \n        self.AddAlpha(ConstantAlphaModel(InsightType.Price, InsightDirection.Up, timedelta(minutes = 20), 0.025, None))\n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n\n    def UniverseSelectionFilter(self, crypto_coarse):\n        return [datum.Symbol for datum in crypto_coarse\n                if datum.Volume &gt;= 100 \n                and datum.VolumeInUsd &gt; 10000]\n\n    def OnSecuritiesChanged(self, changes):\n        for security in changes.AddedSecurities:\n            # Historical data\n            history = self.History(security.Symbol, 30, Resolution.Daily)\n            self.Debug(f\"We got {len(history)} items from our history request\")</code></pre>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing QuantConnect;\nusing QuantConnect.Algorithm.Framework.Alphas;\nusing QuantConnect.Algorithm.Framework.Portfolio;\nusing QuantConnect.Algorithm;\nusing QuantConnect.Data.Market;\nusing QuantConnect.Data.UniverseSelection;\nusing QuantConnect.DataSource;\n\nnamespace QuantConnect\n{\n    public class CoinAPIDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _btcbusd;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n\n            // Set Account Currency to Binance Stable Coin for USD\n            SetCash(\"BUSD\", 100000);\n\n            SetBrokerageModel(BrokerageName.Binance, AccountType.Margin);\n \n            // Warm up the security with the last known price to avoid conversion error\n            SetSecurityInitializer(security =&gt; security.SetMarketPrice(GetLastKnownPrice(security)));\n\n            UniverseSettings.Resolution = Resolution.Minute;\n            // Add universe selection of cryptos based on coarse fundamentals\n            AddUniverse(new CryptoCoarseFundamentalUniverse(Market.Binance, UniverseSettings, UniverseSelectionFilter));\n        \n            AddAlpha(new ConstantAlphaModel(InsightType.Price, InsightDirection.Up, TimeSpan.FromMinutes(20), 0.025, null));\n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n        }\n\n        private IEnumerable&lt;Symbol&gt; UniverseSelectionFilter(IEnumerable&lt;CryptoCoarseFundamental&gt; cryptoCoarse)\n        {\n            return from datum in cryptoCoarse\n                   where datum.Volume &gt;= 100m \n                   &amp;&amp; datum.VolumeInUsd &gt; 10000m\n                   select datum.Symbol;\n        }\n\n        public override void OnSecuritiesChanged(SecurityChanges changes)\n        {\n            foreach(var security in changes.AddedSecurities)\n            {\n                // Historical data\n                var history = History(security.Symbol, 30, Resolution.Daily);\n                Debug($\"We got {history.Count()} items from our history request\");\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-04-27 16:07:32"
      }
    ],
    "pricingText": "The QuantConnect-CoinAPI partnership provides free access to Cryptocurrency market data in QuantConnect Cloud and paid access for downloads. Downloads are distributed in LEAN format and priced according to file resolution as below.",
    "pricing": [
      {
        "id": null,
        "master_product_id": 58,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>Binance Crypto Price Data is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>Binance Crypto Price Data can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 5 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n            </div>"
      }
    ],
    "products": [
      {
        "id": 148,
        "name": "Binance - Cloud Access",
        "description": "<p>Free access to FTX Crypto price data from CoinBase via the QuantConnect Cloud platform for your backtesting and research.</p>\n<ul><li>Daily updates at 4am ET</li>\n    <li>No data maintenance</li> \n</ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 149,
        "name": "Binance - Tick Download",
        "description": "<p>Crypto-currencies Tick resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day/brokerage</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Tick Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "100 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 150,
        "name": "Binance - Second Download",
        "description": "<p>Crypto-currencies Second resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Second Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "25 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 151,
        "name": "Binance - Minute Download",
        "description": "<p>Crypto-currencies Minute resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Minute Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "5 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 152,
        "name": "Binance - Hour Download",
        "description": "<p>Crypto-currencies Hour resolution archives in LEAN format for on premise backtesting and research. One file per ticker/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Hour Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "400 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 153,
        "name": "Binance - Daily Download",
        "description": "<p>Crypto-currencies Daily resolution archives in LEAN format for on premise backtesting and research. One file per ticker/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Daily Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "100 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      }
    ],
    "headerColor": "04a3db"
  },
  {
    "name": "FTX Crypto Price Data",
    "vendorName": "CoinAPI",
    "datasetImageLight": "https://cdn.quantconnect.com/i/tu/ftx-ds-logo.svg",
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/coinapi-logo.png",
    "landingFileName": "ftx-crypto-price-data.html",
    "url": "/datasets/ftx-crypto-price-data",
    "short_description": "FTX price data for this crypto exchange supported by QuantConnect collected by CoinAPI and hosted on the QuantConnect Cloud.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The FTX Crypto Price Data by CoinAPI is for Cryptocurrency price and volume data points. The data covers 573 Cryptocurrency pairs, starts in February 2020, and is delivered on any frequency from tick to daily. This dataset is created by monitoring the trading activity on FTX.\n</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p><a href=\"https://www.cryptotick.com/\">CoinAPI</a> was founded by Artur Pietrzyk in 2016 with the goal of providing real-time and historical cryptocurrency market data, collected from hundreds of exchanges. CoinAPI provides access to Cryptocurrencies for traders, market makers, and developers building third-party applications.</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># FTX accepts both Cash and Margin type account.\nself.SetBrokerageModel(BrokerageName.FTX, AccountType.Cash)\nself.SetBrokerageModel(BrokerageName.FTX, AccountType.Margin)\n\nself.btcusd = self.AddCrypto(\"BTCUSD\", Resolution.Minute, Market.FTX)\n\nself.AddUniverse(CryptoCoarseFundamentalUniverse(Market.FTX, self.UniverseSettings, self.UniverseSelectionFilter))</code></pre>\n<pre><code class=\"language-cs\">// FTX accepts both Cash and Margin type account.\nSetBrokerageModel(BrokerageName.FTX, AccountType.Cash);\nSetBrokerageModel(BrokerageName.FTX, AccountType.Margin);\n\n_btcusd = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.FTX).Symbol;\n\nAddUniverse(new CryptoCoarseFundamentalUniverse(Market.FTX, UniverseSettings, UniverseSelectionFilter));</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>February 2020</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>573 Currency Pairs</td>\n        </tr><tr><td>Data Density</td>\n            <td>Dense</td>\n        </tr><tr><td>Resolution</td>\n            <td>Tick, Second, Minute, Hourly, &amp; Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Supported Assets",
        "content": "<p>The following table shows the available Cryptocurrency pairs:</p>\n\n<table class=\"table qc-table table-reflow ticker-table hidden-xs\"><thead><tr><th colspan=\"6\">\nCryptocurrency Pairs\n</th></tr></thead><tbody><tr><td>1INCHUSD</td><td>AAPLUSD</td><td>AAVEUSD</td><td>AAVEUSDT</td><td>ABNBUSD</td><td>ACBUSD</td></tr><tr><td>ADABEARUSD</td><td>ADABULLUSD</td><td>ADAHALFUSD</td><td>ADAHEDGEUSD</td><td>AGLDUSD</td><td>AKROUSD</td></tr><tr><td>AKROUSDT</td><td>ALCXUSD</td><td>ALEPHUSD</td><td>ALGOBEARUSD</td><td>ALGOBULLUSD</td><td>ALGOHALFUSD</td></tr><tr><td>ALGOHEDGEUSD</td><td>ALICEUSD</td><td>ALPHAUSD</td><td>ALTBEARUSD</td><td>ALTBULLUSD</td><td>ALTHALFUSD</td></tr><tr><td>ALTHEDGEUSD</td><td>AMCUSD</td><td>AMDUSD</td><td>AMPLUSD</td><td>AMPLUSDT</td><td>AMZNUSD</td></tr><tr><td>APHAUSD</td><td>ARKKUSD</td><td>ASDUSD</td><td>ASDBEARUSD</td><td>ASDBEARUSDT</td><td>ASDBULLUSD</td></tr><tr><td>ASDBULLUSDT</td><td>ASDHALFUSD</td><td>ASDHEDGEUSD</td><td>ATLASUSD</td><td>ATOMBEARUSD</td><td>ATOMBULLUSD</td></tr><tr><td>ATOMHALFUSD</td><td>ATOMHEDGEUSD</td><td>AUDIOUSD</td><td>AUDIOUSDT</td><td>AURYUSD</td><td>AVAXBTC</td></tr><tr><td>AVAXUSD</td><td>AVAXUSDT</td><td>AXSUSD</td><td>BABAUSD</td><td>BADGERUSD</td><td>BALUSD</td></tr><tr><td>BALUSDT</td><td>BALBEARUSD</td><td>BALBEARUSDT</td><td>BALBULLUSD</td><td>BALBULLUSDT</td><td>BALHALFUSD</td></tr><tr><td>BALHEDGEUSD</td><td>BANDUSD</td><td>BAOUSD</td><td>BARUSD</td><td>BATUSD</td><td>BBUSD</td></tr><tr><td>BCHBTC</td><td>BCHUSD</td><td>BCHUSDT</td><td>BCHBEARUSD</td><td>BCHBEARUSDT</td><td>BCHBULLUSD</td></tr><tr><td>BCHBULLUSDT</td><td>BCHHALFUSD</td><td>BCHHEDGEUSD</td><td>BEARUSD</td><td>BEARUSDT</td><td>BEARSHITUSD</td></tr><tr><td>BICOUSD</td><td>BILIUSD</td><td>BITUSD</td><td>BITOUSD</td><td>BITWUSD</td><td>BLTUSD</td></tr><tr><td>BNBBTC</td><td>BNBUSD</td><td>BNBUSDT</td><td>BNBBEARUSD</td><td>BNBBEARUSDT</td><td>BNBBULLUSD</td></tr><tr><td>BNBBULLUSDT</td><td>BNBHALFUSD</td><td>BNBHEDGEUSD</td><td>BNTUSD</td><td>BNTXUSD</td><td>BOBAUSD</td></tr><tr><td>BRZUSD</td><td>BRZUSDT</td><td>BSVBEARUSD</td><td>BSVBEARUSDT</td><td>BSVBULLUSD</td><td>BSVBULLUSDT</td></tr><tr><td>BSVHALFUSD</td><td>BSVHEDGEUSD</td><td>BTCBRZ</td><td>BTCEUR</td><td>BTCTRYB</td><td>BTCUSD</td></tr><tr><td>BTCUSDT</td><td>BULLUSD</td><td>BULLUSDT</td><td>BULLSHITUSD</td><td>BVOLBTC</td><td>BVOLUSD</td></tr><tr><td>BVOLUSDT</td><td>BYNDUSD</td><td>C98USD</td><td>CADUSD</td><td>CELBTC</td><td>CELUSD</td></tr><tr><td>CGCUSD</td><td>CHRUSD</td><td>CHZUSD</td><td>CHZUSDT</td><td>CITYUSD</td><td>CLVUSD</td></tr><tr><td>COINUSD</td><td>COMPUSD</td><td>COMPUSDT</td><td>COMPBEARUSD</td><td>COMPBEARUSDT</td><td>COMPBULLUSD</td></tr><tr><td>COMPBULLUSDT</td><td>COMPHALFUSD</td><td>COMPHEDGEUSD</td><td>CONVUSD</td><td>COPEUSD</td><td>CQTUSD</td></tr><tr><td>CREAMUSD</td><td>CREAMUSDT</td><td>CROUSD</td><td>CRONUSD</td><td>CRVUSD</td><td>CUSDTUSD</td></tr><tr><td>CUSDTUSDT</td><td>CUSDTBEARUSD</td><td>CUSDTBEARUSDT</td><td>CUSDTBULLUSD</td><td>CUSDTBULLUSDT</td><td>CUSDTHALFUSD</td></tr><tr><td>CUSDTHEDGEUSD</td><td>CVCUSD</td><td>DAIUSD</td><td>DAIUSDT</td><td>DAWNUSD</td><td>DEFIBEARUSD</td></tr><tr><td>DEFIBEARUSDT</td><td>DEFIBULLUSD</td><td>DEFIBULLUSDT</td><td>DEFIHALFUSD</td><td>DEFIHEDGEUSD</td><td>DENTUSD</td></tr><tr><td>DFLUSD</td><td>DKNGUSD</td><td>DMGUSD</td><td>DMGUSDT</td><td>DODOUSD</td><td>DOGEBTC</td></tr><tr><td>DOGEUSD</td><td>DOGEUSDT</td><td>DOGEBEAR2021USD</td><td>DOGEBULLUSD</td><td>DOGEHALFUSD</td><td>DOGEHEDGEUSD</td></tr><tr><td>DOTBTC</td><td>DOTUSD</td><td>DOTUSDT</td><td>DRGNBEARUSD</td><td>DRGNBULLUSD</td><td>DRGNHALFUSD</td></tr><tr><td>DRGNHEDGEUSD</td><td>DYDXUSD</td><td>EDENUSD</td><td>EMBUSD</td><td>ENJUSD</td><td>ENSUSD</td></tr><tr><td>EOSBEARUSD</td><td>EOSBEARUSDT</td><td>EOSBULLUSD</td><td>EOSBULLUSDT</td><td>EOSHALFUSD</td><td>EOSHEDGEUSD</td></tr><tr><td>ETCBEARUSD</td><td>ETCBULLUSD</td><td>ETCHALFUSD</td><td>ETCHEDGEUSD</td><td>ETHBRZ</td><td>ETHBTC</td></tr><tr><td>ETHEUR</td><td>ETHUSD</td><td>ETHUSDT</td><td>ETHBEARUSD</td><td>ETHBEARUSDT</td><td>ETHBULLUSD</td></tr><tr><td>ETHBULLUSDT</td><td>ETHEUSD</td><td>ETHHALFUSD</td><td>ETHHEDGEUSD</td><td>EURUSD</td><td>EXCHBEARUSD</td></tr><tr><td>EXCHBULLUSD</td><td>EXCHHALFUSD</td><td>EXCHHEDGEUSD</td><td>FBUSD</td><td>FIDAUSD</td><td>FIDAUSDT</td></tr><tr><td>FRONTUSD</td><td>FRONTUSDT</td><td>FTMUSD</td><td>FTTBTC</td><td>FTTUSD</td><td>FTTUSDT</td></tr><tr><td>GALUSD</td><td>GALAUSD</td><td>GBPUSD</td><td>GBTCUSD</td><td>GDXUSD</td><td>GDXJUSD</td></tr><tr><td>GENEUSD</td><td>GLDUSD</td><td>GLXYUSD</td><td>GMEUSD</td><td>GODSUSD</td><td>GOGUSD</td></tr><tr><td>GOOGLUSD</td><td>GRTUSD</td><td>GRTBEARUSD</td><td>GRTBULLUSD</td><td>GTUSD</td><td>HALFUSD</td></tr><tr><td>HALFSHITUSD</td><td>HEDGEUSD</td><td>HEDGESHITUSD</td><td>HGETUSD</td><td>HGETUSDT</td><td>HMTUSD</td></tr><tr><td>HNTUSD</td><td>HNTUSDT</td><td>HOLYUSD</td><td>HOODUSD</td><td>HTUSD</td><td>HTBEARUSD</td></tr><tr><td>HTBULLUSD</td><td>HTHALFUSD</td><td>HTHEDGEUSD</td><td>HUMUSD</td><td>HXROUSD</td><td>HXROUSDT</td></tr><tr><td>IBVOLBTC</td><td>IBVOLUSD</td><td>IBVOLUSDT</td><td>IMXUSD</td><td>INTERUSD</td><td>JETUSD</td></tr><tr><td>JOEUSD</td><td>JSTUSD</td><td>KINUSD</td><td>KNCUSD</td><td>KNCUSDT</td><td>KNCBEARUSD</td></tr><tr><td>KNCBEARUSDT</td><td>KNCBULLUSD</td><td>KNCBULLUSDT</td><td>KNCHALFUSD</td><td>KNCHEDGEUSD</td><td>KSHIBUSD</td></tr><tr><td>KSOSUSD</td><td>LEOUSD</td><td>LEOBEARUSD</td><td>LEOBULLUSD</td><td>LEOHALFUSD</td><td>LEOHEDGEUSD</td></tr><tr><td>LINAUSD</td><td>LINKBTC</td><td>LINKUSD</td><td>LINKUSDT</td><td>LINKBEARUSD</td><td>LINKBEARUSDT</td></tr><tr><td>LINKBULLUSD</td><td>LINKBULLUSDT</td><td>LINKHALFUSD</td><td>LINKHEDGEUSD</td><td>LOOKSUSD</td><td>LRCUSD</td></tr><tr><td>LTCBTC</td><td>LTCUSD</td><td>LTCUSDT</td><td>LTCBEARUSD</td><td>LTCBEARUSDT</td><td>LTCBULLUSD</td></tr><tr><td>LTCBULLUSDT</td><td>LTCHALFUSD</td><td>LTCHEDGEUSD</td><td>LUAUSD</td><td>LUAUSDT</td><td>MANAUSD</td></tr><tr><td>MAPSUSD</td><td>MAPSUSDT</td><td>MATHUSD</td><td>MATHUSDT</td><td>MATICBTC</td><td>MATICUSD</td></tr><tr><td>MATICBEAR2021USD</td><td>MATICBULLUSD</td><td>MATICHALFUSD</td><td>MATICHEDGEUSD</td><td>MBSUSD</td><td>MCBUSD</td></tr><tr><td>MEDIAUSD</td><td>MERUSD</td><td>MIDBEARUSD</td><td>MIDBULLUSD</td><td>MIDHALFUSD</td><td>MIDHEDGEUSD</td></tr><tr><td>MKRUSD</td><td>MKRUSDT</td><td>MKRBEARUSD</td><td>MKRBULLUSD</td><td>MNGOUSD</td><td>MOBUSD</td></tr><tr><td>MOBUSDT</td><td>MRNAUSD</td><td>MSOLUSD</td><td>MSTRUSD</td><td>MTAUSD</td><td>MTAUSDT</td></tr><tr><td>MTLUSD</td><td>NEXOUSD</td><td>NFLXUSD</td><td>NIOUSD</td><td>NOKUSD</td><td>NVDAUSD</td></tr><tr><td>OKBUSD</td><td>OKBBEARUSD</td><td>OKBBULLUSD</td><td>OKBHALFUSD</td><td>OKBHEDGEUSD</td><td>OMGUSD</td></tr><tr><td>ORBSUSD</td><td>OXYUSD</td><td>OXYUSDT</td><td>PAXGUSD</td><td>PAXGUSDT</td><td>PAXGBEARUSD</td></tr><tr><td>PAXGBULLUSD</td><td>PAXGHALFUSD</td><td>PAXGHEDGEUSD</td><td>PENNUSD</td><td>PEOPLEUSD</td><td>PERPUSD</td></tr><tr><td>PFEUSD</td><td>POLISUSD</td><td>PORTUSD</td><td>PRISMUSD</td><td>PRIVBEARUSD</td><td>PRIVBULLUSD</td></tr><tr><td>PRIVHALFUSD</td><td>PRIVHEDGEUSD</td><td>PROMUSD</td><td>PSGUSD</td><td>PTUUSD</td><td>PUNDIXUSD</td></tr><tr><td>PYPLUSD</td><td>QIUSD</td><td>RAMPUSD</td><td>RAYUSD</td><td>REALUSD</td><td>REEFUSD</td></tr><tr><td>RENUSD</td><td>RNDRUSD</td><td>ROOKUSD</td><td>ROOKUSDT</td><td>RSRUSD</td><td>RUNEUSD</td></tr><tr><td>RUNEUSDT</td><td>SANDUSD</td><td>SECOUSD</td><td>SHIBUSD</td><td>SKLUSD</td><td>SLNDUSD</td></tr><tr><td>SLPUSD</td><td>SLRSUSD</td><td>SLVUSD</td><td>SNXUSD</td><td>SNYUSD</td><td>SOLBTC</td></tr><tr><td>SOLUSD</td><td>SOLUSDT</td><td>SOSUSD</td><td>SPELLUSD</td><td>SPYUSD</td><td>SQUSD</td></tr><tr><td>SRMUSD</td><td>SRMUSDT</td><td>STARSUSD</td><td>STEPUSD</td><td>STETHUSD</td><td>STMXUSD</td></tr><tr><td>STORJUSD</td><td>STSOLUSD</td><td>SUNUSD</td><td>SUSHIBTC</td><td>SUSHIUSD</td><td>SUSHIUSDT</td></tr><tr><td>SUSHIBEARUSD</td><td>SUSHIBULLUSD</td><td>SXPBTC</td><td>SXPUSD</td><td>SXPUSDT</td><td>SXPBEARUSD</td></tr><tr><td>SXPBULLUSD</td><td>SXPHALFUSD</td><td>SXPHALFUSDT</td><td>SXPHEDGEUSD</td><td>THETABEARUSD</td><td>THETABULLUSD</td></tr><tr><td>THETAHALFUSD</td><td>THETAHEDGEUSD</td><td>TLMUSD</td><td>TLRYUSD</td><td>TOMOUSD</td><td>TOMOUSDT</td></tr><tr><td>TOMOBEAR2021USD</td><td>TOMOBULLUSD</td><td>TOMOHALFUSD</td><td>TOMOHEDGEUSD</td><td>TONCOINUSD</td><td>TRUUSD</td></tr><tr><td>TRUUSDT</td><td>TRXBTC</td><td>TRXUSD</td><td>TRXUSDT</td><td>TRXBEARUSD</td><td>TRXBULLUSD</td></tr><tr><td>TRXHALFUSD</td><td>TRXHEDGEUSD</td><td>TRYBUSD</td><td>TRYBBEARUSD</td><td>TRYBBULLUSD</td><td>TRYBHALFUSD</td></tr><tr><td>TRYBHEDGEUSD</td><td>TSLABTC</td><td>TSLADOGE</td><td>TSLAUSD</td><td>TSMUSD</td><td>TULIPUSD</td></tr><tr><td>TWTRUSD</td><td>UBERUSD</td><td>UBXTUSD</td><td>UBXTUSDT</td><td>UNIBTC</td><td>UNIUSD</td></tr><tr><td>UNIUSDT</td><td>UNISWAPBEARUSD</td><td>UNISWAPBULLUSD</td><td>USDTUSD</td><td>USDTBEARUSD</td><td>USDTBULLUSD</td></tr><tr><td>USDTHALFUSD</td><td>USDTHEDGEUSD</td><td>USOUSD</td><td>VETBEARUSD</td><td>VETBEARUSDT</td><td>VETBULLUSD</td></tr><tr><td>VETBULLUSDT</td><td>VETHEDGEUSD</td><td>VGXUSD</td><td>WAVESUSD</td><td>WBTCBTC</td><td>WBTCUSD</td></tr><tr><td>WNDRUSD</td><td>WRXUSD</td><td>WRXUSDT</td><td>XAUTUSD</td><td>XAUTUSDT</td><td>XAUTBEARUSD</td></tr><tr><td>XAUTBULLUSD</td><td>XAUTHALFUSD</td><td>XAUTHEDGEUSD</td><td>XLMBEARUSD</td><td>XLMBULLUSD</td><td>XRPBTC</td></tr><tr><td>XRPUSD</td><td>XRPUSDT</td><td>XRPBEARUSD</td><td>XRPBEARUSDT</td><td>XRPBULLUSD</td><td>XRPBULLUSDT</td></tr><tr><td>XRPHALFUSD</td><td>XRPHEDGEUSD</td><td>XTZBEARUSD</td><td>XTZBEARUSDT</td><td>XTZBULLUSD</td><td>XTZBULLUSDT</td></tr><tr><td>XTZHALFUSD</td><td>XTZHEDGEUSD</td><td>YFIBTC</td><td>YFIUSD</td><td>YFIUSDT</td><td>YFIIUSD</td></tr><tr><td>ZECBEARUSD</td><td>ZECBULLUSD</td><td>ZMUSD</td><td>ZRXUSD</td></tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe FTX Crypto Price Data by CoinAPI enables researchers to accurately design strategies for Cryptocurrencies. Examples include: \n</p>\n<ul><li>Buy and hold</li>\n<li>Trading Cryptocurrency volatility and price action</li>\n<li>Allocating a small portion of your portfolio to Cryptocurrencies to hedge against inflation</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_89e50fd6313c633a3382134141f58ad4.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The FTX Crypto Price dataset provides TradeBar, QuoteBar, Tick, and CryptoCoarseFundamental objects.</p>\n\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>Tick Attributes</h4>\n<p>Tick objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"></div>\n\n<h4>CryptoCoarseFundamental Attributes</h4>\n<p>CryptoCoarseFundamental objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.CryptoCoarseFundamental\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add FTX data from CoinAPI to your algorithm, use the AddCrypto() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. When requesting data, you have the option to use several crypto markets. For detailed documentation on requesting market data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class CoinAPIDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        # FTX accepts both Cash and Margin type account.\n        self.SetBrokerageModel(BrokerageName.FTX, AccountType.Margin)\n        \n        self.btcusd = self.AddCrypto(\"BTCUSD\", Resolution.Minute, Market.FTX).Symbol</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class CoinAPIDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _coinbaseBtcusd;\n        private Symbol _bitfinexBtcusd;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n\n            // FTX accepts both Cash and Margin type account.\n            SetBrokerageModel(BrokerageName.FTX, AccountType.Margin);\n            \n            _btcusd = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.FTX).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in every resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    btc_price = data[self.btcusd].Price\n    self.Log(f\"Time: {self.Time}; Price: {btc_price};\")</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var btcPrice = data[_btcusd].Price;\n    Log($\"Time: {Time}; Price: {btcPrice}\");\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical data in your algorithm using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for FTX by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.btcusd, 30, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History(_btcusd, 30, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Universe Selection",
        "content": "<p>You can perform an universe selection by adding a CryptoCoarseFundamentalUniverse, which filters cryptocurrency pairs by their previous day OHLCV, dollar volume in quote currency and USD if available (as of UTC 00:00).</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def Initialize(self):\n    self.UniverseSettings.Resolution = Resolution.Daily\n    self.SetBrokerageModel(BrokerageName.FTX, AccountType.Margin)\n\n    # Add universe selection of cryptos based on coarse fundamentals\n    self.AddUniverse(CryptoCoarseFundamentalUniverse(Market.FTX, self.UniverseSettings, self.UniverseSelectionFilter))\n\ndef UniverseSelectionFilter(self, crypto_coarse):\n    for datum in crypto_coarse:\n        self.Log(f\"{datum.Symbol},{datum.Price},{datum.Volume},{datum.VolumeInQuoteCurrency},{datum.VolumeInUsd},{datum.Open},{datum.High},{datum.Low},{datum.Close}\")\n            \n        # define our selection criteria\n        if datum.Volume &gt;= 100 and datum.VolumeInUsd &gt; 10000:\n            universe.append(datum.Symbol)\n        \n    return universe</code></pre>\n<pre><code class=\"language-cs\">public override void Initialize()\n{\n    UniverseSettings.Resolution = Resolution.Daily;\n    SetBrokerageModel(BrokerageName.FTX, AccountType.Margin);\n\n    // Add universe selection of cryptos based on coarse fundamentals\n    AddUniverse(new CryptoCoarseFundamentalUniverse(Market.FTX, UniverseSettings, UniverseSelectionFilter));\n}\n\nprivate IEnumerable&lt;Symbol&gt; UniverseSelectionFilter(IEnumerable&lt;CryptoCoarseFundamental&gt; cryptoCoarse)\n{\n    var universe = new List&lt;Symbol&gt;();\n\n    foreach (var datum in cryptoCoarse)\n    {\n        Log($\"{datum.Symbol},{datum.Price},{datum.Volume},{datum.VolumeInQuoteCurrency},{datum.VolumeInUsd},{datum.Open},{datum.High},{datum.Low},{datum.Close}\");\n\n         // define our selection criteria\n         if (datum.Volume &gt;= 100m &amp;&amp; datum.VolumeInUsd &gt; 10000m)\n         {\n             universe.Add(datum.Symbol);\n         }\n     }\n\n     return universe;\n}</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The FTX Crypto Price dataset provides TradeBar, QuoteBar, Tick, and CryptoCoarseFundamental objects.</p>\n\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>Tick Attributes</h4>\n<p>Tick objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"></div>\n\n<h4>CryptoCoarseFundamental Attributes</h4>\n<p>CryptoCoarseFundamental objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.CryptoCoarseFundamental\"></div>"
      }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "",
    "examples": [
      {
        "id": 910,
        "master_product_id": 59,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we buy and hold Bitcoin through the FTX exchange.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass CoinAPIDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        # FTX accepts both Cash and Margin type account.\n        self.SetBrokerageModel(BrokerageName.FTX, AccountType.Margin)\n\n        # Warm up the security with the last known price to avoid conversion error\n        self.SetSecurityInitializer(lambda security: security.SetMarketPrice(self.GetLastKnownPrice(security)))\n        \n        # Requesting data\n        crypto = self.AddCrypto(\"BTCUSD\", Resolution.Minute, Market.FTX)\n        self.btcusd = crypto.Symbol\n        self.minimum_order_size = crypto.SymbolProperties.MinimumOrderSize\n        \n        # Historical data\n        history = self.History(self.btcusd, 30, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request\")\n\n        # Add Crypto Coarse Fundamental Universe Selection\n        self.AddUniverse(CryptoCoarseFundamentalUniverse(Market.FTX, self.UniverseSettings, self.UniverseSelectionFilter))\n\n    def UniverseSelectionFilter(self, crypto_coarse):\n        return [datum.Symbol for datum in crypto_coarse\n                if datum.Volume &gt;= 100 \n                and datum.VolumeInUsd &gt; 10000]\n\n    def OnData(self, data):\n        if self.Portfolio.CashBook['BTC'].Amount == 0:\n            free_cash = self.Portfolio.CashBook['USD'].Amount * (1-self.Settings.FreePortfolioValuePercentage)\n            quantity = free_cash / data[self.btcusd].Price\n            quantity -= quantity % self.minimum_order_size\n            if quantity &gt; 0:\n                self.MarketOrder(self.btcusd, quantity)</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class CoinAPIDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _btcusd;\n        private decimal? _minimumOrderSize;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n\n            // FTX accepts both Cash and Margin type account.\n            SetBrokerageModel(BrokerageName.FTX, AccountType.Margin);\n\n            // Warm up the security with the last known price to avoid conversion error\n            SetSecurityInitializer(security =&gt; security.SetMarketPrice(GetLastKnownPrice(security)));\n            \n            // Requesting data\n            var crypto = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.FTX);\n            _btcusd = crypto.Symbol;\n            _minimumOrderSize = crypto.SymbolProperties.MinimumOrderSize;\n        \n             // Historical data\n            var history = History(_btcusd, 30, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request\");\n\n            // Add Crypto Coarse Fundamental Universe Selection\n            AddUniverse(new CryptoCoarseFundamentalUniverse(Market.FTX, UniverseSettings, UniverseSelectionFilter));\n        }\n\n        private IEnumerable&lt;Symbol&gt; UniverseSelectionFilter(IEnumerable&lt;CryptoCoarseFundamental&gt; cryptoCoarse)\n        {\n            return from datum in cryptoCoarse\n                   where datum.Volume &gt;= 100m \n                   &amp;&amp; datum.VolumeInUsd &gt; 10000m\n                   select datum.Symbol;\n        }\n\n        public override void OnData(Slice data)\n        {\n            if (Portfolio.CashBook[\"BTC\"].Amount == 0)\n            {\n                var freeCash = Portfolio.CashBook[\"USD\"].Amount * (1-Settings.FreePortfolioValuePercentage);\n                var quantity = freeCash / data[_btcusd].Price;\n                quantity -= quantity % _minimumOrderSize;\n                if (quantity &gt; 0m)\n                {\n                    MarketOrder(_btcusd, quantity);\n                }\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-04-27 15:58:16"
      },
      {
        "id": 912,
        "master_product_id": 59,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this example, we hold a equal-sized basket of filtered crypto pairs through the FTX exchange.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass CoinAPIDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        # FTX accepts both Cash and Margin type account.\n        self.SetBrokerageModel(BrokerageName.FTX, AccountType.Margin)\n\n        # Warm up the security with the last known price to avoid conversion error\n        self.SetSecurityInitializer(lambda security: security.SetMarketPrice(self.GetLastKnownPrice(security)))\n        \n        self.UniverseSettings.Resolution = Resolution.Minute\n        # Add universe selection of cryptos based on coarse fundamentals\n        self.AddUniverse(CryptoCoarseFundamentalUniverse(Market.FTX, self.UniverseSettings, self.UniverseSelectionFilter))\n        \n        self.AddAlpha(ConstantAlphaModel(InsightType.Price, InsightDirection.Up, timedelta(minutes = 20), 0.025, None))\n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n\n    def UniverseSelectionFilter(self, crypto_coarse):\n        return [datum.Symbol for datum in crypto_coarse\n                if datum.Volume &gt;= 100 \n                and datum.VolumeInUsd &gt; 10000]\n\n    def OnSecuritiesChanged(self, changes):\n        for security in changes.AddedSecurities:\n            # Historical data\n            history = self.History(security.Symbol, 30, Resolution.Daily)\n            self.Debug(f\"We got {len(history)} items from our history request\")</code></pre>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing QuantConnect.Algorithm.Framework.Alphas;\nusing QuantConnect.Algorithm.Framework.Portfolio;\nusing QuantConnect.Data;\nusing QuantConnect.Data.UniverseSelection;\n\nnamespace QuantConnect\n{\n    public class CoinAPIDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _btcusd;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n\n            // FTX accepts both Cash and Margin type account.\n            SetBrokerageModel(BrokerageName.FTX, AccountType.Margin);\n\n            // Warm up the security with the last known price to avoid conversion error\n            SetSecurityInitializer(security =&gt; security.SetMarketPrice(GetLastKnownPrice(security)));\n \n            UniverseSettings.Resolution = Resolution.Minute;\n            // Add universe selection of cryptos based on coarse fundamentals\n            AddUniverse(new CryptoCoarseFundamentalUniverse(Market.FTX, UniverseSettings, UniverseSelectionFilter));\n        \n            AddAlpha( new ConstantAlphaModel(InsightType.Price, InsightDirection.Up, TimeSpan.FromMinutes(20), 0.025, null) );\n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n        }\n\n        private IEnumerable&lt;Symbol&gt; UniverseSelectionFilter(IEnumerable&lt;CryptoCoarseFundamental&gt; cryptoCoarse)\n        {\n            return from datum in cryptoCoarse\n                   where datum.Volume &gt;= 100m \n                   &amp;&amp; datum.VolumeInUsd &gt; 10000m\n                   select datum.Symbol;\n        }\n\n        public override void OnSecuritiesChanged(SecurityChanges changes)\n        {\n            foreach(var security in changes.AddedSecurities)\n            {\n                // Historical data\n                var history = History(security.Symbol, 30, Resolution.Daily);\n                Debug($\"We got {history.Count()} items from our history request\");\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-04-27 15:58:35"
      }
    ],
    "pricingText": "The QuantConnect-CoinAPI partnership provides free access to Cryptocurrency market data in QuantConnect Cloud and paid access for downloads. Downloads are distributed in LEAN format and priced according to file resolution as below.",
    "pricing": [
      {
        "id": null,
        "master_product_id": 59,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>FTX Crypto Price Data is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>FTX Crypto Price Data can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 5 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n            </div>"
      }
    ],
    "products": [
      {
        "id": 154,
        "name": "FTX - Cloud Access",
        "description": "<p>Free access to FTX Crypto price data from CoinBase via the QuantConnect Cloud platform for your backtesting and research.</p>\n<ul><li>Daily updates at 4am ET</li>\n    <li>No data maintenance</li> \n</ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 155,
        "name": "FTX - Tick Download",
        "description": "<p>Crypto-currencies Tick resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day/brokerage</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Tick Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "100 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 156,
        "name": "FTX - Second Download",
        "description": "<p>Crypto-currencies Second resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Second Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "25 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 157,
        "name": "FTX - Minute Download",
        "description": "<p>Crypto-currencies Minute resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "MInute Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "5 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 158,
        "name": "FTX - Hour Download",
        "description": "<p>Crypto-currencies Hour resolution archives in LEAN format for on premise backtesting and research. One file per ticker/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Hour Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "400 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 159,
        "name": "FTX - Daily Download",
        "description": "<p>Crypto-currencies Daily resolution archives in LEAN format for on premise backtesting and research. One file per ticker/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Daily Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "100 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      }
    ],
    "headerColor": "8b000a"
  },
  {
    "name": "Kraken Crypto Price Data",
    "vendorName": "CoinAPI",
    "datasetImageLight": "https://cdn.quantconnect.com/i/tu/kraken-ds-logo.svg",
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/coinapi-logo.png",
    "landingFileName": "kraken-crypto-price-data.html",
    "url": "/datasets/kraken-crypto-price-data",
    "short_description": "Kraken price data for this crypto exchange supported by QuantConnect collected by CoinAPI and hosted on the QuantConnect Cloud.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The Kraken Crypto Price Data by CoinAPI provides Cryptocurrency price and volume data points. The data covers 384 Cryptocurrency pairs, starts in October 2013, and is delivered on any frequency from tick to daily. This dataset is created by monitoring the trading activity on the Cryptocurrency markets/exchanges supported by QuantConnect.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p><a href=\"https://www.cryptotick.com/\">CoinAPI</a> was founded by Artur Pietrzyk in 2016 with the goal of providing real-time and historical cryptocurrency market data, collected from hundreds of exchanges. CoinAPI provides access to Cryptocurrencies for traders, market makers, and developers building third-party applications.</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Kraken accepts both Cash and Margin type account.\nself.SetBrokerageModel(BrokerageName.Kraken, AccountType.Cash)\nself.SetBrokerageModel(BrokerageName.Kraken, AccountType.Margin)\n\nself.btcusd = self.AddCrypto(\"BTCUSD\", Resolution.Minute, Market.Kraken).Symbol\n\nself.AddUniverse(CryptoCoarseFundamentalUniverse(Market.Kraken, self.UniverseSettings, self.UniverseSelectionFilter))</code></pre>\n<pre><code class=\"language-cs\">// Kraken accepts both Cash and Margin type account.\nSetBrokerageModel(BrokerageName.Kraken, AccountType.Cash);\nSetBrokerageModel(BrokerageName.Kraken, AccountType.Margin);\n\n_btcusd = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.Kraken).Symbol;\n\nAddUniverse(new CryptoCoarseFundamentalUniverse(Market.Kraken, UniverseSettings, UniverseSelectionFilter));</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>October 2013</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>384 Currency Pairs</td>\n        </tr><tr><td>Data Density</td>\n            <td>Dense</td>\n        </tr><tr><td>Resolution</td>\n            <td>Tick, Second, Minute, Hourly, &amp; Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Supported Assets",
        "content": "<p>The following table shows the available Cryptocurrency pairs:</p>\n\n<table class=\"table qc-table table-reflow ticker-table hidden-xs\"><thead><tr><th colspan=\"6\">\nCryptocurrency Pairs\n</th></tr></thead><tbody><tr><td>1INCHEUR</td><td>1INCHUSD</td><td>AAVEAUD</td><td>AAVEETH</td><td>AAVEEUR</td><td>AAVEGBP</td></tr><tr><td>AAVEUSD</td><td>AAVEBTC</td><td>ADAAUD</td><td>ADAETH</td><td>ADAEUR</td><td>ADAGBP</td></tr><tr><td>ADAUSD</td><td>ADAUSDT</td><td>ADABTC</td><td>ALGOETH</td><td>ALGOEUR</td><td>ALGOGBP</td></tr><tr><td>ALGOUSD</td><td>ALGOBTC</td><td>ANKREUR</td><td>ANKRGBP</td><td>ANKRUSD</td><td>ANKRBTC</td></tr><tr><td>ANTETH</td><td>ANTEUR</td><td>ANTUSD</td><td>ANTBTC</td><td>ATOMAUD</td><td>ATOMETH</td></tr><tr><td>ATOMEUR</td><td>ATOMGBP</td><td>ATOMUSD</td><td>ATOMBTC</td><td>AUDJPY</td><td>AUDUSD</td></tr><tr><td>AXSEUR</td><td>AXSUSD</td><td>BADGEREUR</td><td>BADGERUSD</td><td>BALETH</td><td>BALEUR</td></tr><tr><td>BALUSD</td><td>BALBTC</td><td>BANDEUR</td><td>BANDUSD</td><td>BATETH</td><td>BATEUR</td></tr><tr><td>BATUSD</td><td>BATBTC</td><td>BCHAUD</td><td>BCHETH</td><td>BCHEUR</td><td>BCHGBP</td></tr><tr><td>BCHJPY</td><td>BCHUSD</td><td>BCHUSDT</td><td>BCHBTC</td><td>BNTEUR</td><td>BNTGBP</td></tr><tr><td>BNTUSD</td><td>BNTBTC</td><td>CHZEUR</td><td>CHZUSD</td><td>COMPETH</td><td>COMPEUR</td></tr><tr><td>COMPUSD</td><td>COMPBTC</td><td>CQTEUR</td><td>CQTUSD</td><td>CRVETH</td><td>CRVEUR</td></tr><tr><td>CRVUSD</td><td>CRVBTC</td><td>CTSIEUR</td><td>CTSIUSD</td><td>DAIEUR</td><td>DAIUSD</td></tr><tr><td>DAIUSDT</td><td>DASHEUR</td><td>DASHUSD</td><td>DASHBTC</td><td>DOTAUD</td><td>DOTETH</td></tr><tr><td>DOTEUR</td><td>DOTGBP</td><td>DOTUSD</td><td>DOTUSDT</td><td>DOTBTC</td><td>ENJEUR</td></tr><tr><td>ENJGBP</td><td>ENJUSD</td><td>ENJBTC</td><td>EOSETH</td><td>EOSEUR</td><td>EOSUSD</td></tr><tr><td>EOSUSDT</td><td>EOSBTC</td><td>ETH2.SETH</td><td>ETHAUD</td><td>ETHCHF</td><td>ETHDAI</td></tr><tr><td>ETHUSDC</td><td>ETHUSDT</td><td>EURAUD</td><td>EURCAD</td><td>EURCHF</td><td>EURGBP</td></tr><tr><td>EURJPY</td><td>EWTEUR</td><td>EWTGBP</td><td>EWTUSD</td><td>EWTBTC</td><td>FILAUD</td></tr><tr><td>FILETH</td><td>FILEUR</td><td>FILGBP</td><td>FILUSD</td><td>FILBTC</td><td>FLOWETH</td></tr><tr><td>FLOWEUR</td><td>FLOWGBP</td><td>FLOWUSD</td><td>FLOWBTC</td><td>GHSTEUR</td><td>GHSTGBP</td></tr><tr><td>GHSTUSD</td><td>GHSTBTC</td><td>GNOETH</td><td>GNOEUR</td><td>GNOUSD</td><td>GNOBTC</td></tr><tr><td>GRTAUD</td><td>GRTETH</td><td>GRTEUR</td><td>GRTGBP</td><td>GRTUSD</td><td>GRTBTC</td></tr><tr><td>ICXETH</td><td>ICXEUR</td><td>ICXUSD</td><td>ICXBTC</td><td>INJEUR</td><td>INJUSD</td></tr><tr><td>KAREUR</td><td>KARUSD</td><td>KAVAETH</td><td>KAVAEUR</td><td>KAVAUSD</td><td>KAVABTC</td></tr><tr><td>KEEPETH</td><td>KEEPEUR</td><td>KEEPUSD</td><td>KEEPBTC</td><td>KNCETH</td><td>KNCEUR</td></tr><tr><td>KNCUSD</td><td>KNCBTC</td><td>KSMAUD</td><td>KSMDOT</td><td>KSMETH</td><td>KSMEUR</td></tr><tr><td>KSMGBP</td><td>KSMUSD</td><td>KSMBTC</td><td>LINKAUD</td><td>LINKETH</td><td>LINKEUR</td></tr><tr><td>LINKGBP</td><td>LINKUSD</td><td>LINKUSDT</td><td>LINKBTC</td><td>LPTEUR</td><td>LPTGBP</td></tr><tr><td>LPTUSD</td><td>LPTBTC</td><td>LRCEUR</td><td>LRCUSD</td><td>LSKETH</td><td>LSKEUR</td></tr><tr><td>LSKUSD</td><td>LSKBTC</td><td>LTCAUD</td><td>LTCETH</td><td>LTCGBP</td><td>LTCUSDT</td></tr><tr><td>MANAETH</td><td>MANAEUR</td><td>MANAUSD</td><td>MANABTC</td><td>MATICEUR</td><td>MATICGBP</td></tr><tr><td>MATICUSD</td><td>MATICBTC</td><td>MINAEUR</td><td>MINAGBP</td><td>MINAUSD</td><td>MINABTC</td></tr><tr><td>MIREUR</td><td>MIRUSD</td><td>MKREUR</td><td>MKRGBP</td><td>MKRUSD</td><td>MKRBTC</td></tr><tr><td>MOVREUR</td><td>MOVRUSD</td><td>NANOETH</td><td>NANOEUR</td><td>NANOUSD</td><td>NANOBTC</td></tr><tr><td>OCEANEUR</td><td>OCEANGBP</td><td>OCEANUSD</td><td>OCEANBTC</td><td>OGNEUR</td><td>OGNUSD</td></tr><tr><td>OMGETH</td><td>OMGEUR</td><td>OMGUSD</td><td>OMGBTC</td><td>OXTETH</td><td>OXTEUR</td></tr><tr><td>OXTUSD</td><td>OXTBTC</td><td>PAXGETH</td><td>PAXGEUR</td><td>PAXGUSD</td><td>PAXGBTC</td></tr><tr><td>PERPEUR</td><td>PERPUSD</td><td>QTUMETH</td><td>QTUMEUR</td><td>QTUMUSD</td><td>QTUMBTC</td></tr><tr><td>RARIEUR</td><td>RARIGBP</td><td>RARIUSD</td><td>RARIBTC</td><td>RENEUR</td><td>RENGBP</td></tr><tr><td>RENUSD</td><td>RENBTC</td><td>REPV2ETH</td><td>REPV2EUR</td><td>REPV2USD</td><td>REPV2BTC</td></tr><tr><td>SANDEUR</td><td>SANDGBP</td><td>SANDUSD</td><td>SANDBTC</td><td>SCETH</td><td>SCEUR</td></tr><tr><td>SCUSD</td><td>SCBTC</td><td>SNXAUD</td><td>SNXETH</td><td>SNXEUR</td><td>SNXGBP</td></tr><tr><td>SNXUSD</td><td>SNXBTC</td><td>SOLEUR</td><td>SOLGBP</td><td>SOLUSD</td><td>SOLBTC</td></tr><tr><td>SRMEUR</td><td>SRMGBP</td><td>SRMUSD</td><td>SRMBTC</td><td>STORJETH</td><td>STORJEUR</td></tr><tr><td>STORJUSD</td><td>STORJBTC</td><td>SUSHIEUR</td><td>SUSHIGBP</td><td>SUSHIUSD</td><td>SUSHIBTC</td></tr><tr><td>TBTCETH</td><td>TBTCEUR</td><td>TBTCUSD</td><td>TBTCBTC</td><td>TRXETH</td><td>TRXEUR</td></tr><tr><td>TRXUSD</td><td>TRXBTC</td><td>UNIETH</td><td>UNIEUR</td><td>UNIUSD</td><td>UNIBTC</td></tr><tr><td>USDCAUD</td><td>USDCEUR</td><td>USDCGBP</td><td>USDCHF</td><td>USDCUSD</td><td>USDCUSDT</td></tr><tr><td>USDTAUD</td><td>USDTCAD</td><td>USDTCHF</td><td>USDTEUR</td><td>USDTGBP</td><td>USDTJPY</td></tr><tr><td>USDTUSD</td><td>WAVESETH</td><td>WAVESEUR</td><td>WAVESUSD</td><td>WAVESBTC</td><td>WBTCEUR</td></tr><tr><td>WBTCUSD</td><td>WBTCBTC</td><td>BTCAUD</td><td>BTCCHF</td><td>BTCDAI</td><td>BTCUSDC</td></tr><tr><td>BTCUSDT</td><td>XDGEUR</td><td>XDGUSD</td><td>XDGUSDT</td><td>ETCETH</td><td>ETCBTC</td></tr><tr><td>ETCEUR</td><td>ETCUSD</td><td>ETHBTC</td><td>ETHCAD</td><td>ETHEUR</td><td>ETHGBP</td></tr><tr><td>ETHJPY</td><td>ETHUSD</td><td>LTCBTC</td><td>LTCEUR</td><td>LTCJPY</td><td>LTCUSD</td></tr><tr><td>MLNETH</td><td>MLNBTC</td><td>MLNEUR</td><td>MLNUSD</td><td>REPETH</td><td>REPBTC</td></tr><tr><td>REPEUR</td><td>REPUSD</td><td>XRPAUD</td><td>XRPETH</td><td>XRPGBP</td><td>XRPUSDT</td></tr><tr><td>XTZAUD</td><td>XTZETH</td><td>XTZEUR</td><td>XTZGBP</td><td>XTZUSD</td><td>XTZBTC</td></tr><tr><td>BTCCAD</td><td>BTCEUR</td><td>BTCGBP</td><td>BTCJPY</td><td>BTCUSD</td><td>XDGBTC</td></tr><tr><td>XLMBTC</td><td>XLMAUD</td><td>XLMEUR</td><td>XLMGBP</td><td>XLMUSD</td><td>XMRBTC</td></tr><tr><td>XMREUR</td><td>XMRUSD</td><td>XRPBTC</td><td>XRPCAD</td><td>XRPEUR</td><td>XRPJPY</td></tr><tr><td>XRPUSD</td><td>ZECBTC</td><td>ZECEUR</td><td>ZECUSD</td><td>YFIAUD</td><td>YFIETH</td></tr><tr><td>YFIEUR</td><td>YFIGBP</td><td>YFIUSD</td><td>YFIBTC</td><td>EURUSD</td><td>GBPUSD</td></tr><tr><td>ZRXEUR</td><td>ZRXGBP</td><td>ZRXUSD</td><td>ZRXBTC</td><td>USDCAD</td><td>USDJPY</td></tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe Kraken Crypto Price Data by CoinAPI enables researchers to accurately design strategies for Cryptocurrencies. Examples include: \n</p>\n<ul><li>Buy and hold</li>\n<li>Trading Cryptocurrency volatility and price action</li>\n<li>Allocating a small portion of your portfolio to Cryptocurrencies to hedge against inflation</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_4dc70d47747bb533e488e250448b7877.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Kraken Crypto Price dataset provides TradeBar, QuoteBar, Tick, and CryptoCoarseFundamental objects.</p>\n\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>Tick Attributes</h4>\n<p>Tick objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"></div>\n\n<h4>CryptoCoarseFundamental Attributes</h4>\n<p>CryptoCoarseFundamental objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.CryptoCoarseFundamental\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add Kraken data from CoinAPI to your algorithm, use the AddCrypto() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. When requesting data, you have the option to use several crypto markets. For detailed documentation on requesting market data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class CoinAPIDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        # Kraken accepts both Cash and Margin type account.\n        self.SetBrokerageModel(BrokerageName.Kraken, AccountType.Margin)\n        \n        self.btcusd = self.AddCrypto(\"BTCUSD\", Resolution.Minute, Market.Kraken).Symbol</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class CoinAPIDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _coinbaseBtcusd;\n        private Symbol _bitfinexBtcusd;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n\n            // Kraken accepts both Cash and Margin type account.\n            SetBrokerageModel(BrokerageName.Kraken, AccountType.Margin);\n            \n            _btcusd = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.Kraken).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in every resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    btc_price = data[self.btcusd].Price\n    self.Log(f\"Time: {self.Time}; Price: {btc_price};\")</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var btcPrice = data[_btcusd].Price;\n    Log($\"Time: {Time}; Price: {btcPrice}\");\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical data in your algorithm using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for Kraken by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.btcusd, 30, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History(_btcusd, 30, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Universe Selection",
        "content": "<p>You can perform an universe selection by adding a CryptoCoarseFundamentalUniverse, which filters cryptocurrency pairs by their previous day OHLCV, dollar volume in quote currency and USD if available (as of UTC 00:00).</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def Initialize(self):\n    self.UniverseSettings.Resolution = Resolution.Daily\n    self.SetBrokerageModel(BrokerageName.Kraken, AccountType.Margin)\n\n    # Add universe selection of cryptos based on coarse fundamentals\n    self.AddUniverse(CryptoCoarseFundamentalUniverse(Market.Kraken, self.UniverseSettings, self.UniverseSelectionFilter))\n\ndef UniverseSelectionFilter(self, crypto_coarse):\n    for datum in crypto_coarse:\n        self.Log(f\"{datum.Symbol},{datum.Price},{datum.Volume},{datum.VolumeInQuoteCurrency},{datum.VolumeInUsd},{datum.Open},{datum.High},{datum.Low},{datum.Close}\")\n            \n        # define our selection criteria\n        if datum.Volume &gt;= 100 and datum.VolumeInUsd &gt; 10000:\n            universe.append(datum.Symbol)\n        \n    return universe</code></pre>\n<pre><code class=\"language-cs\">public override void Initialize()\n{\n    UniverseSettings.Resolution = Resolution.Daily;\n    SetBrokerageModel(BrokerageName.Kraken, AccountType.Margin);\n\n    // Add universe selection of cryptos based on coarse fundamentals\n    AddUniverse(new CryptoCoarseFundamentalUniverse(Market.Kraken, UniverseSettings, UniverseSelectionFilter));\n}\n\nprivate IEnumerable&lt;Symbol&gt; UniverseSelectionFilter(IEnumerable&lt;CryptoCoarseFundamental&gt; cryptoCoarse)\n{\n    var universe = new List&lt;Symbol&gt;();\n\n    foreach (var datum in cryptoCoarse)\n    {\n        Log($\"{datum.Symbol},{datum.Price},{datum.Volume},{datum.VolumeInQuoteCurrency},{datum.VolumeInUsd},{datum.Open},{datum.High},{datum.Low},{datum.Close}\");\n\n         // define our selection criteria\n         if (datum.Volume &gt;= 100m &amp;&amp; datum.VolumeInUsd &gt; 10000m)\n         {\n             universe.Add(datum.Symbol);\n         }\n     }\n\n     return universe;\n}</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Kraken Crypto Price dataset provides TradeBar, QuoteBar, Tick, and CryptoCoarseFundamental objects.</p>\n\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>Tick Attributes</h4>\n<p>Tick objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"></div>\n\n<h4>CryptoCoarseFundamental Attributes</h4>\n<p>CryptoCoarseFundamental objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.CryptoCoarseFundamental\"></div>"
      }
    ],
    "priceCTA": "Free in Cloud",
    "vendorWebsite": "",
    "examples": [
      {
        "id": 926,
        "master_product_id": 60,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we buy and hold Bitcoin through the Kraken exchange.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass CoinAPIDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        # Kraken accepts both Cash and Margin type account.\n        self.SetBrokerageModel(BrokerageName.Kraken, AccountType.Margin)\n\n        # Warm up the security with the last known price to avoid conversion error\n        self.SetSecurityInitializer(lambda security: security.SetMarketPrice(self.GetLastKnownPrice(security)))\n        \n        # Requesting data\n        crypto = self.AddCrypto(\"BTCUSD\", Resolution.Minute, Market.Kraken)\n        self.btcusd = crypto.Symbol\n        self.minimum_order_size = crypto.SymbolProperties.MinimumOrderSize\n        \n        # Historical data\n        history = self.History(self.btcusd, 30, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request\")\n\n        # Add Crypto Coarse Fundamental Universe Selection\n        self.AddUniverse(CryptoCoarseFundamentalUniverse(Market.Kraken, self.UniverseSettings, self.UniverseSelectionFilter))\n\n    def UniverseSelectionFilter(self, crypto_coarse):\n        return [datum.Symbol for datum in crypto_coarse\n                if datum.Volume &gt;= 100 \n                and datum.VolumeInUsd &gt; 10000]\n\n    def OnData(self, data):\n        if self.Portfolio.CashBook['BTC'].Amount == 0:\n            free_cash = self.Portfolio.CashBook['USD'].Amount * (1-self.Settings.FreePortfolioValuePercentage)\n            quantity = free_cash / data[self.btcusd].Price\n            quantity -= quantity % self.minimum_order_size\n            if quantity &gt; 0:\n                self.MarketOrder(self.btcusd, quantity)</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class CoinAPIDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _btcusd;\n        private decimal? _minimumOrderSize;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n\n            // Kraken accepts both Cash and Margin type account.\n            SetBrokerageModel(BrokerageName.Kraken, AccountType.Margin);\n\n            // Warm up the security with the last known price to avoid conversion error\n            SetSecurityInitializer(security =&gt; security.SetMarketPrice(GetLastKnownPrice(security)));\n            \n            // Requesting data\n            var crypto = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.Kraken);\n            _btcusd = crypto.Symbol;\n            _minimumOrderSize = crypto.SymbolProperties.MinimumOrderSize;\n        \n             // Historical data\n            var history = History(_btcusd, 30, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request\");\n\n            // Add Crypto Coarse Fundamental Universe Selection\n            AddUniverse(new CryptoCoarseFundamentalUniverse(Market.Kraken, UniverseSettings, UniverseSelectionFilter));\n        }\n\n        private IEnumerable&lt;Symbol&gt; UniverseSelectionFilter(IEnumerable&lt;CryptoCoarseFundamental&gt; cryptoCoarse)\n        {\n            return from datum in cryptoCoarse\n                   where datum.Volume &gt;= 100m \n                   &amp;&amp; datum.VolumeInUsd &gt; 10000m\n                   select datum.Symbol;\n        }\n\n        public override void OnData(Slice data)\n        {\n            if (Portfolio.CashBook[\"BTC\"].Amount == 0)\n            {\n                var freeCash = Portfolio.CashBook[\"USD\"].Amount * (1-Settings.FreePortfolioValuePercentage);\n                var quantity = freeCash / data[_btcusd].Price;\n                quantity -= quantity % _minimumOrderSize;\n                if (quantity &gt; 0m)\n                {\n                    MarketOrder(_btcusd, quantity);\n                }\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-04-27 15:59:51"
      },
      {
        "id": 928,
        "master_product_id": 60,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this example, we hold a equal-sized basket of filtered crypto pairs through the Kraken exchange.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass CoinAPIDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        # Kraken accepts both Cash and Margin type account.\n        self.SetBrokerageModel(BrokerageName.Kraken, AccountType.Margin)\n\n        # Warm up the security with the last known price to avoid conversion error\n        self.SetSecurityInitializer(lambda security: security.SetMarketPrice(self.GetLastKnownPrice(security)))\n        \n        self.UniverseSettings.Resolution = Resolution.Minute\n        # Add universe selection of cryptos based on coarse fundamentals\n        self.AddUniverse(CryptoCoarseFundamentalUniverse(Market.Kraken, self.UniverseSettings, self.UniverseSelectionFilter))\n        \n        self.AddAlpha(ConstantAlphaModel(InsightType.Price, InsightDirection.Up, timedelta(minutes = 20), 0.025, None))\n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n\n    def UniverseSelectionFilter(self, crypto_coarse):\n        return [datum.Symbol for datum in crypto_coarse\n                if datum.Volume &gt;= 100 \n                and datum.VolumeInUsd &gt; 10000]\n\n    def OnSecuritiesChanged(self, changes):\n        for security in changes.AddedSecurities:\n            # Historical data\n            history = self.History(security.Symbol, 30, Resolution.Daily)\n            self.Debug(f\"We got {len(history)} items from our history request\")</code></pre>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing QuantConnect.Algorithm.Framework.Alphas;\nusing QuantConnect.Algorithm.Framework.Portfolio;\nusing QuantConnect.Data;\nusing QuantConnect.Data.UniverseSelection;\nusing QuantConnect.DataSource;\n\nnamespace QuantConnect\n{\n    public class CoinAPIDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _btcusd;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n\n            // Kraken accepts both Cash and Margin type account.\n            SetBrokerageModel(BrokerageName.Kraken, AccountType.Margin);\n\n            // Warm up the security with the last known price to avoid conversion error\n            SetSecurityInitializer(security =&gt; security.SetMarketPrice(GetLastKnownPrice(security)));\n            \n            UniverseSettings.Resolution = Resolution.Minute;\n            // Add universe selection of cryptos based on coarse fundamentals\n            AddUniverse(new CryptoCoarseFundamentalUniverse(Market.Kraken, UniverseSettings, UniverseSelectionFilter));\n        \n            AddAlpha( new ConstantAlphaModel(InsightType.Price, InsightDirection.Up, TimeSpan.FromMinutes(20), 0.025, null) );\n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n        }\n\n        private IEnumerable&lt;Symbol&gt; UniverseSelectionFilter(IEnumerable&lt;CryptoCoarseFundamental&gt; cryptoCoarse)\n        {\n            return from datum in cryptoCoarse\n                   where datum.Volume &gt;= 100m \n                   &amp;&amp; datum.VolumeInUsd &gt; 10000m\n                   select datum.Symbol;\n        }\n\n        public override void OnSecuritiesChanged(SecurityChanges changes)\n        {\n            foreach(var security in changes.AddedSecurities)\n            {\n                // Historical data\n                var history = History(security.Symbol, 30, Resolution.Daily);\n                Debug($\"We got {history.Count()} items from our history request\");\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-04-27 16:00:13"
      }
    ],
    "pricingText": "The QuantConnect-CoinAPI partnership provides free access to Cryptocurrency market data in QuantConnect Cloud and paid access for downloads. Downloads are distributed in LEAN format and priced according to file resolution as below.",
    "pricing": [
      {
        "id": null,
        "master_product_id": 60,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>Kraken Crypto Price Data is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>Kraken Crypto Price Data can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 5 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n            </div>"
      }
    ],
    "products": [
      {
        "id": 160,
        "name": "Kraken - Cloud Access",
        "description": "<p>Free access to Kraken Crypto price data from CoinApi via the QuantConnect Cloud platform for your backtesting and research.</p>\n<ul><li>Daily updates at 4am ET</li>\n    <li>No data maintenance</li> \n</ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 161,
        "name": "Kraken - Tick Download",
        "description": "<p>Crypto-currencies Tick resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day/brokerage</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Tick Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "100 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 162,
        "name": "Kraken - Second Download",
        "description": "<p>Crypto-currencies Second resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Second Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "25 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 163,
        "name": "Kraken - Minute Download",
        "description": "<p>Crypto-currencies Minute resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Minute Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "5 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 164,
        "name": "Kraken - Hour Download",
        "description": "<p>Crypto-currencies Hour resolution archives in LEAN format for on premise backtesting and research. One file per ticker/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Hour Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "400 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 165,
        "name": "Kraken - Daily Download",
        "description": "<p>Crypto-currencies Daily resolution archives in LEAN format for on premise backtesting and research. One file per ticker/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Daily Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "100 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      }
    ],
    "headerColor": "340064"
  },
  {
    "name": "India Equities",
    "vendorName": "TrueData",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/truedata-logo.webp",
    "landingFileName": "truedata-india-equities.html",
    "url": "/datasets/truedata-india-equities",
    "short_description": "Level 1 trade bar data for all India Equities listed in NSE from January 2010 to present in Minute/Hour/Daily resolution.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The India Equities dataset by TrueData tracks the Equities listed on the NSE exchange in India. The data covers 2,053 Indian Equities, starts in January 2010, and is delivered on any frequency from minute to daily.</p>\n\n<p>This dataset depends on the <a href=\"https://www.quantconnect.com/datasets/truedata-india-equity-security-master\">India Equity Security Master</a> dataset because the India Equity Security Master dataset contains information on splits, dividends, and symbol changes.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\n<a href=\"https://www.truedata.in/\">TrueData</a> is an authorized NSE and MCX data vendor founded by Kapil Marwaha in 2007, with the goal of providing users with a multitude of solutions for the financial services sector, including making market data feeds available in all its forms, to as many applications as possible, including a wide range of technical analysis applications, trading solutions, automated &amp; algorithmic traders/platforms and a lot more.\n</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Indian Rupee must be in the Cashbook to trade Indian Equities.\nself.SetAccountCurrency(\"INR\")  # or\nself.SetCash(\"INR\", 100000)\n\nself.equity = AddEquity(\"YESBANK\", Resolution.Daily, Market.India).Symbol;</code></pre>\n<pre><code class=\"language-cs\">// Indian Rupee must be in the Cashbook to trade Indian Equities.\nSetAccountCurrency(\"INR\"); // or\nSetCash(\"INR\", 100000);\n\n_equity = AddEquity(\"YESBANK\", Resolution.Daily, Market.India).Symbol;</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 2010</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>2,053 India Equities</td>\n        </tr><tr><td>Data Density</td>\n            <td>Regular</td>\n        </tr><tr><td>Resolution</td>\n            <td>Minute, Hour, &amp; Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>Indian Standard time</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Supported Assets",
        "content": "<p>To view the supported assets in the India Equities dataset, see the <a href=\"/data/tree/equity/india/daily\">Data Explorer</a>.</p>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe TrueData India Equities enables researchers to accurately design Equity trading strategies. Examples include:\n</p>\n<ul><li>Trade based on technical indicators.</li>\n<li>Inter-geographical-market statistical arbitrages.</li>\n<li>Hedge US securities positions during US market closed.</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_0cf9986ca4ad65e72efbab8a11142d86.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The India Equities dataset provides TradeBar objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add India Equities data to your algorithm, use the AddEquity() method to request the data from Market.India. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. For detailed documentation on requesting market data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class TrueDataIndiaEquitiesAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        # Set the Brokerage Model to Samco or Zerodha\n        self.SetBrokerageModel(BrokerageName.Samco)\n\n        # Indian Rupee must be in the Cashbook to trade Indian Equities.\n        self.SetAccountCurrency(\"INR\")\n\t\t\n        self.SetStartDate(2021, 12, 1)\n        self.SetEndDate(2021, 12, 31)\n        self.SetCash(1000000)\n        \n        # Requesting Data\n        self.equity = AddEquity(\"YESBANK\", Resolution.Daily, Market.India).Symbol</code></pre>\n<pre><code class=\"language-cs\">public class TrueDataIndiaEquitiesAlgorithm : QCAlgorithm\n{\n\tprivate Symbol _equity;\n\t\n\tpublic override void Initialize()\n\t{\n\t\t// Set the Brokerage Model to Samco or Zerodha\n\t\tSetBrokerageModel(BrokerageName.Samco);\n\n\t\t// Indian Rupee must be in the Cashbook to trade Indian Equities.\n\t\tSetAccountCurrency(\"INR\");\n\t\t\n\t\tSetStartDate(2021, 12, 1);\n\t\tSetEndDate(2021, 12, 31);\n\t\tSetCash(1000000);\n\t\t\n\t\t// Requesting Data\n\t\t_equity = AddEquity(\"YESBANK\", Resolution.Daily, Market.India).Symbol;\n\t}\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in daily resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    # Accessing Data\n    if data.ContainsKey(self.equity):\n        Log(f\"{data[self.equity].EndTime} - {data[self.equity]}\")\n</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n\t// Accessing Data\n\tif (data.ContainsKey(_equity))\n\t{\n\t\tLog($\"{data[_equity].EndTime} - {data[_equity]}\");\n\t}\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical data by using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for India Equities by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.equity, 10, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History(new[] {_equity}, 10, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The India Equities dataset provides TradeBar objects, which have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>"
      }
    ],
    "priceCTA": "$20 Per Month",
    "vendorWebsite": "https://www.quantconnect.com/market",
    "examples": [
      {
        "id": 974,
        "master_product_id": 63,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class TrueDataIndiaEquitiesAlgorithm (QCAlgorithm):\n\n    def Initialize(self):\n        # Set the Brokerage Model to Samco or Zerodha\n        self.SetBrokerageModel(BrokerageName.Samco)\n\n        # Indian Rupee must be in the Cashbook to trade Indian Equities.\n        self.SetAccountCurrency(\"INR\")\n        \n        self.SetStartDate(2021, 12, 1)\n        self.SetEndDate(2021, 12, 31)\n        self.SetCash(1000000)\n        \n        # Requesting Data\n        self.equity = self.AddEquity(\"YESBANK\", Resolution.Daily, Market.India).Symbol\n        \n        # Historical Data\n        history = self.History(self.equity, 60, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request for {self.equity} from TrueData Indian Equities\")\n\n    def OnData(self, data):\n        # Accessing Data\n        if data.ContainsKey(self.equity):\n            self.SetHoldings(self.equity, 1)\n            self.Debug(f'{data[self.equity].EndTime} - {data[self.equity]}')</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class TrueDataIndiaEquitiesAlgorithm : QCAlgorithm\n    {\n        private Symbol _equity;\n        \n        public override void Initialize()\n        {\n            // Set the Brokerage Model to Samco or Zerodha\n            SetBrokerageModel(BrokerageName.Samco);\n\n            // Indian Rupee must be in the Cashbook to trade Indian Equities.\n            SetAccountCurrency(\"INR\");\n            \n            SetStartDate(2021, 12, 1);\n            SetEndDate(2021, 12, 31);\n            SetCash(1000000);\n            \n            // Requesting Data\n            _equity = AddEquity(\"YESBANK\", Resolution.Daily, Market.India).Symbol;\n            \n            // Historical Data\n            var history = History(new[] {_equity}, 60, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request for {_equity} from TrueData Indian Equities\");\n        }\n        \n        public override void OnData(Slice data)\n        {\n            // Accessing Data\n            if (data.ContainsKey(_equity))\n            {\n                SetHoldings(_equity, 1m);\n                Log($\"{data[_equity].EndTime} - {data[_equity]}\");\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-01-25 00:15:31"
      },
      {
        "id": 976,
        "master_product_id": 63,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\"> \nclass TrueDataIndiaEquitiesFramework (QCAlgorithm):\n\n    def Initialize(self):\n        # Set the Brokerage Model to Samco or Zerodha\n        self.SetBrokerageModel(BrokerageName.Samco)\n\n        # Indian Rupee must be in the Cashbook to trade Indian Equities.\n        self.SetAccountCurrency(\"INR\")\n        \n        self.SetStartDate(2021, 12, 1)\n        self.SetEndDate(2021, 12, 31)\n        self.SetCash(1000000)\n        \n        # Requesting Data\n        self.equity = self.AddEquity(\"YESBANK\", Resolution.Daily, Market.India).Symbol\n        \n        # Historical Data\n        history = self.History(self.equity, 60, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request\")\n        \n        self.AddAlpha( ConstantAlphaModel(InsightType.Price, InsightDirection.Up, timedelta(days=7), 0.025, None) )\n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())</code></pre>\n<pre><code class=\"language-cs\"> \nnamespace QuantConnect\n{\n    public class TrueDataIndiaEquitiesFramework : QCAlgorithm\n    {\n        private Symbol _equity;\n        \n        public override void Initialize()\n        {\n            // Set the Brokerage Model to Samco or Zerodha\n            SetBrokerageModel(BrokerageName.Samco);\n\n            // Indian Rupee must be in the Cashbook to trade Indian Equities.\n            SetAccountCurrency(\"INR\");\n\t\t\t\n            SetStartDate(2021, 12, 1);\n            SetEndDate(2021, 12, 31);\n            SetCash(1000000);\n            \n            // Requesting data\n            _equity = AddEquity(\"YESBANK\", Resolution.Daily, Market.India).Symbol;\n        \n            // Historical data\n            var history = History(_equity, 60, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request\");\n            \n            AddAlpha( new ConstantAlphaModel(InsightType.Price, InsightDirection.Up, TimeSpan.FromDays(7), 0.025, null) );\n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-01-25 00:16:06"
      }
    ],
    "pricingText": "This dataset depends on the India Equities Security Master dataset because the Security Master dataset contains information on splits, dividends, and symbol changes.",
    "pricing": [
      {
        "id": null,
        "master_product_id": 63,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>India Equities is allowed to be used in the cloud \r\n            for personal and commercial projects with a subscription. The data is permissioned for use within \r\n            the licensed organization only</p><p>Subscription Required | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [],
    "headerColor": "4eff2b"
  },
  {
    "name": "India Equity Security Master",
    "vendorName": "TrueData",
    "datasetImageLight": null,
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/truedata-logo.webp",
    "landingFileName": "truedata-india-equity-security-master.html",
    "url": "/datasets/truedata-india-equity-security-master",
    "short_description": "Corporate action data source for splits, dividends, mergers, acquisitions, IPOs, and delistings since January 2010 for running a India Equities backtest.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The India Equity Security Master dataset by TrueData tracks India Equities corporate actions. The data covers 2,053 India Equities, starts in January 2010, and is delivered on a daily update frequency. With the map and factor files installed in LEAN, all corporate actions are automatically handled and passed into your algorithm as events.\n</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p>\n<a href=\"https://www.truedata.in/\">TrueData</a> is an authorized NSE and MCX data vendor founded by Kapil Marwaha in 2007, with the goal of providing users with a multitude of solutions for the financial services sector, including making market data feeds available in all its forms, to as many applications as possible, including a wide range of technical analysis applications, trading solutions, automated &amp; algorithmic traders/platforms and a lot more.\n</p>"
      },
      {
        "title": "Getting Started",
        "content": "<p>No special code is required to utilize the TrueData India Equity Security Master. It is automatically loaded on requesting India Equities data.</p>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>January 2010</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>2,053 India Equities</td>\n        </tr><tr><td>Data Density</td>\n            <td>Sparse</td>\n        </tr><tr><td>Resolution</td>\n            <td>Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>Indian Standard Time</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Supported Assets",
        "content": "<p>To view the supported assets in the India Equity Security Master dataset, see the <a href=\"/data/tree/equity/india/daily\">Data Explorer</a>.</p>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe TrueData India Equity Security Master enables researchers to accurately design strategies harnessing any core corporate actions. Examples include: \n</p>\n<ul><li>Post-dividend announcement trading strategies.</li>\n<li>Trading on new equities by monitoring for IPOs.</li>\n<li>Harnessing split announcements for reverse-split announcement momentum.</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_dfec34cd6095f298f137b2719be65166.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The India Equity Security Master dataset provides Split, Dividend, Delisting, and SymbolChangedEvent objects.</p>\n\n<h4>Split Attributes</h4>\n<p>Split objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Split\"></div>\n\n<h4>Dividend Attributes</h4>\n<p>Dividend objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Dividend\"></div>\n\n<h4>Delisting Attributes</h4>\n<p>Delisting objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Delisting\"></div>\n\n<h4>SymbolChangedEvent Attributes</h4>\n<p>SymbolChangedEvent objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.SymbolChangedEvent\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Accessing Split Data",
        "content": "<p>Split data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. You can see an example of the slice accessor in the code below.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\ndef OnData(self, data):\n    split = data.Splits.get(self.symbol)\n    if split:\n        splitType = {0: \"Warning\", 1: \"SplitOccurred\"}.get(split.Type)\n        self.Log(f'Split: {split.Symbol}\\t{split.SplitFactor}\\t{split.ReferencePrice}\\t{splitType}')\n</code></pre>\n<pre><code class=\"language-cs\">\npublic override void OnData(Slice data)\n{\n    if (data.Splits.ContainsKey(_symbol))\n    {\n        var split = data.Splits[_symbol];\n        Log($\"Split: {split.Symbol}\\t{split.SplitFactor}\\t{split.ReferencePrice}\\t{split.Type}\");\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Dividend Data",
        "content": "<p>Dividend data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. You can see an example of the slice accessor in the code below.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\ndef OnData(self, data):\n    dividend = data.Dividends.get(self.symbol)\n    if dividend:\n        self.Log(f'Dividend: {dividend.Symbol}\\t{dividend.Distribution}\\t{dividend.ReferencePrice}')\n</code></pre>\n<pre><code class=\"language-cs\">\npublic override void OnData(Slice data)\n{\n    if (data.Dividends.ContainsKey(_symbol))\n    {\n        var dividend = data.Dividends[_symbol];\n        Log($\"Dividend: {dividend.Symbol}\\t{dividend.Distribution}\\t{dividend.ReferencePrice}\");\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Delistings",
        "content": "<p>Delistings data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. You can see an example of the slice accessor in the code below.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\ndef OnData(self, data):\n    delisting = data.Delistings.get(self.symbol)\n    if delisting:\n        delistingType = {0: \"Warning\", 1: \"Delisted\"}.get(delisting.Type)\n        self.Log(f'Delistings: {delistingType}')\n</code></pre>\n<pre><code class=\"language-cs\">\npublic override void OnData(Slice data)\n{\n    if (data.Delistings.ContainsKey(_symbol))\n    {\n        var delisting = data.Delistings[_symbol];\n        Log($\"Delistings: {delisting.Type}\");\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Symbol Change Events",
        "content": "<p>Symbol change events can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. You can see an example of the slice accessor in the code below.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\ndef OnData(self, data):\n    symbolChangedEvent = data.SymbolChangedEvents.get(self.symbol)\n    if symbolChangedEvent:\n        self.Log(f\"Symbol changed: {symbolChangedEvent.OldSymbol} -&gt; {symbolChangedEvent.NewSymbol}\")\n</code></pre>\n<pre><code class=\"language-cs\">\npublic override void OnData(Slice data)\n{\n    if (data.SymbolChangedEvents.ContainsKey(_symbol))\n    {\n        var symbolChangedEvent = data.SymbolChangedEvents[_symbol];\n        Log($\"Symbol changed: {symbolChangedEvent.OldSymbol} -&gt; {symbolChangedEvent.NewSymbol}\");\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The India Equity Security Master dataset provides Split, Dividend, Delisting, and SymbolChangedEvent objects.</p>\n\n<h4>Split Attributes</h4>\n<p>Split objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Split\"></div>\n\n<h4>Dividend Attributes</h4>\n<p>Dividend objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Dividend\"></div>\n\n<h4>Delisting Attributes</h4>\n<p>Delisting objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Delisting\"></div>\n\n<h4>SymbolChangedEvent Attributes</h4>\n<p>SymbolChangedEvent objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.SymbolChangedEvent\"></div>"
      }
    ],
    "priceCTA": "$20 Per Month",
    "vendorWebsite": "https://www.quantconnect.com/market",
    "examples": [
      {
        "id": 990,
        "master_product_id": 64,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\">\nclass TrueDataIndiaEquitySecurityMasterAlgorithm (QCAlgorithm):\n\n    def Initialize(self):\n        # Set the Brokerage Model to Samco or Zerodha\n        self.SetBrokerageModel(BrokerageName.Samco)\n\n        # Indian Rupee must be in the Cashbook to trade Indian Equities.\n        self.SetAccountCurrency(\"INR\")\n        \n        self.SetStartDate(2010, 1, 1)\n        self.SetEndDate(2021, 12, 31)\n        self.SetCash(1000000)\n        \n        self.equity = self.AddEquity(\"YESBANK\", Resolution.Daily, Market.India).Symbol\n        \n    def OnData(self, data):\n        # Accessing Data - Splits\n        split = data.Splits.get(self.equity)\n        if split:\n            self.Log(f\"{self.Time} &gt;&gt; SPLIT &gt;&gt; {split.Symbol} - {split.SplitFactor} - {self.Portfolio.Cash} - {self.Portfolio[self.equity].Price}\")\n        \n        # Accessing Data - Dividends\n        dividend = data.Dividends.get(self.equity)\n        if dividend:\n            self.Log(f\"{self.Time} &gt;&gt; DIVIDEND &gt;&gt; {dividend.Symbol} - {dividend.Distribution} - {self.Portfolio.Cash} - {self.Portfolio[self.equity].Price}\")\n            \n        # Accessing Data - Delisting\n        delisting = data.Delistings.get(self.equity)\n        if delisting:\n            delistingType = {0: \"Warning\", 1: \"Delisted\"}.get(delisting.Type)\n            self.Log(f\"{self.Time} &gt;&gt; DELISTING &gt;&gt; {delisting.Symbol} - {delistingType}\")\n            \n        # Accessing Data - Symbol Changed Event\n        symbolChangedEvent = data.SymbolChangedEvents.get(self.equity)\n        if symbolChangedEvent:\n            self.Log(f\"{self.Time} &gt;&gt; SYMBOL CHANGED &gt;&gt; {symbolChangedEvent.OldSymbol} -&gt; {symbolChangedEvent.NewSymbol}\")\n</code></pre>\n<pre><code class=\"language-cs\">\nnamespace QuantConnect\n{\n    public class TrueDataIndiaEquitySecurityMasterAlgorithm : QCAlgorithm\n    {\n        private Symbol _equity;\n        \n        public override void Initialize()\n        {\n            // Set the Brokerage Model to Samco or Zerodha\n            SetBrokerageModel(BrokerageName.Samco)\n\n            // Indian Rupee must be in the Cashbook to trade Indian Equities.\n            SetAccountCurrency(\"INR\");\n            \n            SetStartDate(2010, 1, 1);\n            SetEndDate(2021, 12, 31);\n            SetCash(1000000);\n            \n            _equity = AddEquity(\"YESBANK\", Resolution.Daily, Market.India).Symbol;\n        }\n        \n        public override void OnData(Slice data)\n        {\n            // Accessing Data - Splits\n            if (data.Splits.ContainsKey(_equity))\n            {\n                var split = data.Splits[_equity];\n                Log($\"Split: {split.Symbol}\\t{split.SplitFactor}\\t{split.ReferencePrice}\\t{split.Type}\");\n            }\n            \n            // Accessing Data - Dividends\n            if (data.Dividends.ContainsKey(_equity))\n            {\n                var dividend = data.Dividends[_equity];\n                Log($\"Dividend: {dividend.Symbol}\\t{dividend.Distribution}\\t{dividend.ReferencePrice}\");\n            }\n            \n            // Accessing Data - Delisting\n            if (data.Delistings.ContainsKey(_equity))\n            {\n                var delisting = data.Delistings[_equity];\n                Log($\"Delistings: {delisting.Type}\");\n            }\n            \n            // Accessing Data - Symbol Changed Event\n            if (data.SymbolChangedEvents.ContainsKey(_equity))\n            {\n                var symbolChangedEvent = data.SymbolChangedEvents[_equity];\n                Log($\"Symbol changed: {symbolChangedEvent.OldSymbol} -&gt; {symbolChangedEvent.NewSymbol}\");\n            }\n        }\n    }\n}\n</code></pre>\n</div>",
        "updated": "2022-01-25 00:14:04"
      },
      {
        "id": 992,
        "master_product_id": 64,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\"> \nclass TrueDataIndiaEquitySecurityMasterFramework (QCAlgorithm):\n\n    def Initialize(self):\n        # Indian Rupee must be in the Cashbook to trade Indian Equities.\n        self.SetAccountCurrency(\"INR\")\n        \n        self.SetStartDate(2010, 1, 1)\n        self.SetEndDate(2021, 12, 31)\n        self.SetCash(1000000)\n        \n        self.equity = self.AddEquity(\"YESBANK\", Resolution.Daily, Market.India).Symbol\n            \n        self.AddAlpha( TrueDataIndiaEquitySecurityMasterAlpha(self.equity) )\n        self.SetPortfolioConstruction( EqualWeightingPortfolioConstructionModel() )\n        self.SetExecution( ImmediateExecutionModel() )\n        \nclass TrueDataIndiaEquitySecurityMasterAlpha (AlphaModel):\n    def __init__(self, equity):\n        self.equity = equity\n        \n    def Update(self, algorithm, data):\n        # Accessing Data - Splits\n        split = data.Splits.get(self.equity)\n        if split:\n            algorithm.Log(f\"{algorithm.Time} &gt;&gt; SPLIT &gt;&gt; {split.Symbol} - {split.SplitFactor} - {algorithm.Portfolio.Cash} - {algorithm.Portfolio[self.equity].Price}\")\n        \n        # Accessing Data - Dividends\n        dividend = data.Dividends.get(self.equity)\n        if dividend:\n            algorithm.Log(f\"{algorithm.Time} &gt;&gt; DIVIDEND &gt;&gt; {dividend.Symbol} - {dividend.Distribution} - {algorithm.Portfolio.Cash} - {algorithm.Portfolio[self.equity].Price}\")\n            \n        # Accessing Data - Delisting\n        delisting = data.Delistings.get(self.equity)\n        if delisting:\n            delistingType = {0: \"Warning\", 1: \"Delisted\"}.get(delisting.Type)\n            algorithm.Log(f\"{algorithm.Time} &gt;&gt; DELISTING &gt;&gt; {delisting.Symbol} - {delistingType}\")\n            \n        # Accessing Data - Symbol Changed Event\n        symbolChangedEvent = data.SymbolChangedEvents.get(self.equity)\n        if symbolChangedEvent:\n            algorithm.Log(f\"{algorithm.Time} &gt;&gt; SYMBOL CHANGED &gt;&gt; {symbolChangedEvent.OldSymbol} -&gt; {symbolChangedEvent.NewSymbol}\")\n            \n        return [ Insight.Price(self.equity, Expiry.EndOfDay, InsightDirection.Up) ]</code></pre>\n<pre><code class=\"language-cs\"> \nnamespace QuantConnect\n{\n    public class TrueDataIndiaEquitySecurityMasterFramework : QCAlgorithm\n    {\n        private Symbol _equity;\n        \n        public override void Initialize()\n        {\n            // Indian Rupee must be in the Cashbook to trade Indian Equities.\n            SetAccountCurrency(\"INR\");\n            \n            SetStartDate(2010, 1, 1);\n            SetEndDate(2021, 12, 31);\n            SetCash(1000000);\n            \n            _equity = AddEquity(\"YESBANK\", Resolution.Daily, Market.India).Symbol;\n            \n            AddAlpha(new TrueDataIndiaEquitySecurityMasterAlpha(_equity));\n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n            SetExecution(new ImmediateExecutionModel());\n        }\n    }\n    \n    public class TrueDataIndiaEquitySecurityMasterAlpha : AlphaModel\n    {\n        private Symbol _equity;\n        \n        public TrueDataIndiaEquitySecurityMasterAlpha(Symbol equity)\n        {\n            _equity = equity;\n        }\n        \n        public override List&lt;Insight&gt; Update(QCAlgorithm algorithm, Slice data)\n        {\n            // Accessing Data - Splits\n            if (data.Splits.ContainsKey(_equity))\n            {\n                var split = data.Splits[_equity];\n                algorithm.Log($\"Split: {split.Symbol}\\t{split.SplitFactor}\\t{split.ReferencePrice}\\t{split.Type}\");\n            }\n            \n            // Accessing Data - Dividends\n            if (data.Dividends.ContainsKey(_equity))\n            {\n                var dividend = data.Dividends[_equity];\n                algorithm.Log($\"Dividend: {dividend.Symbol}\\t{dividend.Distribution}\\t{dividend.ReferencePrice}\");\n            }\n            \n            // Accessing Data - Delisting\n            if (data.Delistings.ContainsKey(_equity))\n            {\n                var delisting = data.Delistings[_equity];\n                algorithm.Log($\"Delistings: {delisting.Type}\");\n            }\n            \n            // Accessing Data - Symbol Changed Event\n            if (data.SymbolChangedEvents.ContainsKey(_equity))\n            {\n                var symbolChangedEvent = data.SymbolChangedEvents[_equity];\n                algorithm.Log($\"Symbol changed: {symbolChangedEvent.OldSymbol} -&gt; {symbolChangedEvent.NewSymbol}\");\n            }\n            \n            return new List&lt;Insight&gt;\n            {\n            \tnew Insight(_equity, Expiry.EndOfDay, InsightType.Price, InsightDirection.Up)\n            };\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-01-21 17:42:46"
      }
    ],
    "pricingText": "TrueData India Equity Security Master is freely accessible in our cloud environment, and can be downloaded for on premise backtesting and research for an annual subscription fee based on tier.",
    "pricing": [
      {
        "id": null,
        "master_product_id": 64,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>India Equity Security Master is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>India Equity Security Master can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 15000 QCC/file with Subscription | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourcePricing();\" >License Now</a></p>\r\n                </div>\r\n            </div>\r\n            </div>"
      }
    ],
    "products": [
      {
        "id": 171,
        "name": "India Equity Security Master by TrueData",
        "description": "<p>Split, dividend, and survivorship bias free India Equities backtesting is enabled by the TrueData India Equity Security Master.</p>\n<ul><li>Historical mapping/delisting</li>\n    <li>Full price adjustment from tick</li>\n    <li>Immediately digestible LEAN format</li>\n</ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 172,
        "name": "India Equity Security Master by TrueData",
        "description": "<p>Split, dividend, and survivorship bias free India Equities backtesting is enabled by the TrueData India Equity Security Master.</p>\n<ul><li>Ownership of the data for internal use</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Download On Premise",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free with Subscription",
          "monthlyPrice": 50,
          "yearlyPrice": 600,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 600
      }
    ],
    "headerColor": "340064"
  },
  {
    "name": "FTX US Crypto Price Data",
    "vendorName": "CoinAPI",
    "datasetImageLight": "https://cdn.quantconnect.com/i/tu/ftx-us-ds-logo.svg",
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/coinapi-logo.png",
    "landingFileName": "ftx-us-crypto-price-data.html",
    "url": "/datasets/ftx-us-crypto-price-data",
    "short_description": "FTX US price data for this crypto exchange supported by QuantConnect collected by CoinAPI and hosted on the QuantConnect Cloud.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The FTX US Crypto Price dataset by CoinAPI is for Cryptocurrency price and volume data points. The data covers 59 Cryptocurrency pairs, starts on 27th August 2021, and is delivered on any frequency from tick to daily. This dataset is created by monitoring the trading activity on FTX US.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p><a href=\"https://www.cryptotick.com/\">CoinAPI</a> was founded by Artur Pietrzyk in 2016 with the goal of providing real-time and historical Cryptocurrency market data, collected from hundreds of exchanges. CoinAPI provides access to Cryptocurrencies for traders, market makers, and developers building third-party applications.</p>"
      },
      {
        "title": "Getting Started",
        "content": "<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Setting the brokerage\nself.SetBrokerageModel(BrokerageName.FTXUS, AccountType.Cash)\nself.SetBrokerageModel(BrokerageName.FTXUS, AccountType.Margin)\n\n# Adding a security subscription\nself.btcusd = self.AddCrypto(\"BTCUSD\", Resolution.Minute, Market.FTXUS).Symbol\n\n# Adding universe selection \nself.AddUniverse(CryptoCoarseFundamentalUniverse(Market.FTXUS, self.UniverseSettings, self.UniverseSelectionFilter))</code></pre>\n<pre><code class=\"language-cs\">// FTX US accepts both cash and margin account types\nSetBrokerageModel(BrokerageName.FTXUS, AccountType.Cash);\nSetBrokerageModel(BrokerageName.FTXUS, AccountType.Margin);\n\n_btcusd = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.FTXUS).Symbol;\n\nAddUniverse(new CryptoCoarseFundamentalUniverse(Market.FTXUS, UniverseSettings, UniverseSelectionFilter));</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>August 27, 2021</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>59 Cryptocurrency Pairs</td>\n        </tr><tr><td>Data Density</td>\n            <td>Dense</td>\n        </tr><tr><td>Resolution</td>\n            <td>Tick, Second, Minute, Hourly, &amp; Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Supported Assets",
        "content": "<p>The following table shows the available Cryptocurrency  pairs:</p>\n\n<table class=\"table qc-table table-reflow ticker-table hidden-xs\"><thead><tr><th colspan=\"6\">Cryptocurrency Pairs</th></tr></thead><tbody><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/AAVEUSD\">AAVEUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/AAVEUSDT\">AAVEUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/AUDUSD\">AUDUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/BATUSD\">BATUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/BCHBTC\">BCHBTC</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/BCHUSD\">BCHUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/BCHUSDT\">BCHUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/BRZUSD\">BRZUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/BRZUSDT\">BRZUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/BTCAUD\">BTCAUD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/BTCBRZ\">BTCBRZ</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/BTCEUR\">BTCEUR</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/BTCUSD\">BTCUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/BTCUSDT\">BTCUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/CADUSD\">CADUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/CUSDTUSD\">CUSDTUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/CUSDTUSDT\">CUSDTUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/DAIUSD\">DAIUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/DAIUSDT\">DAIUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/DOGEBTC\">DOGEBTC</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/DOGEUSD\">DOGEUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/DOGEUSDT\">DOGEUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/ETHAUD\">ETHAUD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/ETHBTC\">ETHBTC</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/ETHEUR\">ETHEUR</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/ETHUSD\">ETHUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/ETHUSDT\">ETHUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/EURUSD\">EURUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/GBPUSD\">GBPUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/GRTUSD\">GRTUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/KSHIBUSD\">KSHIBUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/LINKBTC\">LINKBTC</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/LINKUSD\">LINKUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/LINKUSDT\">LINKUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/LTCBTC\">LTCBTC</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/LTCUSD\">LTCUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/LTCUSDT\">LTCUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/MATICBTC\">MATICBTC</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/MATICUSD\">MATICUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/MKRUSD\">MKRUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/PAXGUSD\">PAXGUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/PAXGUSDT\">PAXGUSDT</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/SHIBUSD\">SHIBUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/SOLBTC\">SOLBTC</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/SOLUSD\">SOLUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/SOLUSDT\">SOLUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/SUSHIBTC\">SUSHIBTC</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/SUSHIUSD\">SUSHIUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/SUSHIUSDT\">SUSHIUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/TRXUSD\">TRXUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/TRXUSDT\">TRXUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/UNIBTC\">UNIBTC</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/UNIUSD\">UNIUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/UNIUSDT\">UNIUSDT</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/USDTUSD\">USDTUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/WBTCUSD\">WBTCUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/YFIBTC\">YFIBTC</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/YFIUSD\">YFIUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/ftxus/minute/YFIUSDT\">YFIUSDT</a></td></tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe FTX US Crypto Price Data by CoinAPI enables researchers to accurately design strategies for Cryptocurrencies. Examples include: \n</p>\n<ul><li>Buy and hold with dollar-cost averaging</li>\n<li>Trading Cryptocurrency volatility and price action</li>\n<li>Allocating a small portion of your portfolio to Cryptocurrencies to hedge against inflation</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_ae62fd40989829ce7e81ae7ff7e31d97.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The FTX US Crypto Price dataset provides TradeBar, QuoteBar, Tick, and CryptoCoarseFundamental objects.</p>\n\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>Tick Attributes</h4>\n<p>Tick objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"></div>\n\n<h4>CryptoCoarseFundamental Attributes</h4>\n<p>CryptoCoarseFundamental objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.CryptoCoarseFundamental\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add FTX US data from CoinAPI to your algorithm, use the AddCrypto() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. When requesting data, you have the option to use several Crypto markets. For detailed documentation on requesting market data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class FTXUSAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        # FTX US accepts both cash and margin account types\n        self.SetBrokerageModel(BrokerageName.FTXUS, AccountType.Margin)\n        \n        self.btcusd = self.AddCrypto(\"BTCUSD\", Resolution.Minute, Market.FTXUS).Symbol</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class FTXUSAlgorithm : QCAlgorithm\n    {\n        private Symbol _btcusd;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n\n            // FTX US accepts both cash and margin account types\n            SetBrokerageModel(BrokerageName.FTXUS, AccountType.Margin);\n            \n            _btcusd = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.FTXUS).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    btc_price = data[self.btcusd].Price\n    self.Log(f\"Time: {self.Time}; Price: {btc_price};\")</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var btcPrice = data[_btcusd].Price;\n    Log($\"Time: {Time}; Price: {btcPrice}\");\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical data in your algorithm using the data Symbol object. To learn more about historical data requests, see the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for Bitcoin on FTX US by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.btcusd, 30, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History(_btcusd, 30, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Universe Selection",
        "content": "<p>You can perform universe selection by adding a CryptoCoarseFundamentalUniverse, which filters Cryptocurrency pairs by the following metrics:</p>\n\n<ul><li>OHLCV values from the previous day</li>\n    <li>Dollar volume (as of UTC 00:00), denominated in the base or quote currency</li>\n</ul><div class=\"section-example-container\">\n<pre><code class=\"language-python\">def Initialize(self):\n    self.UniverseSettings.Resolution = Resolution.Daily\n    self.SetBrokerageModel(BrokerageName.FTXUS, AccountType.Margin)\n\n    # Add universe selection for Crypto based on coarse fundamentals\n    self.AddUniverse(CryptoCoarseFundamentalUniverse(Market.FTXUS, self.UniverseSettings, self.UniverseSelectionFilter))\n\ndef UniverseSelectionFilter(self, crypto_coarse):\n    universe = []\n    for datum in crypto_coarse:\n        self.Log(f\"{datum.Symbol},{datum.Price},{datum.Volume},{datum.VolumeInQuoteCurrency},{datum.VolumeInUsd},{datum.Open},{datum.High},{datum.Low},{datum.Close}\")\n            \n        # define our selection criteria\n        if datum.Volume &gt;= 100 and datum.VolumeInUsd &gt; 10000:\n            universe.append(datum.Symbol)\n        \n    return universe</code></pre>\n<pre><code class=\"language-cs\">public override void Initialize()\n{\n    UniverseSettings.Resolution = Resolution.Daily;\n    SetBrokerageModel(BrokerageName.FTXUS, AccountType.Margin);\n\n    // Add universe selection for Crypto based on coarse fundamentals\n    AddUniverse(new CryptoCoarseFundamentalUniverse(Market.FTXUS, UniverseSettings, UniverseSelectionFilter));\n}\n\nprivate IEnumerable&lt;Symbol&gt; UniverseSelectionFilter(IEnumerable&lt;CryptoCoarseFundamental&gt; cryptoCoarse)\n{\n    var universe = new List&lt;Symbol&gt;();\n\n    foreach (var datum in cryptoCoarse)\n    {\n        Log($\"{datum.Symbol},{datum.Price},{datum.Volume},{datum.VolumeInQuoteCurrency},{datum.VolumeInUsd},{datum.Open},{datum.High},{datum.Low},{datum.Close}\");\n\n         // define our selection criteria\n         if (datum.Volume &gt;= 100m &amp;&amp; datum.VolumeInUsd &gt; 10000m)\n         {\n             universe.Add(datum.Symbol);\n         }\n     }\n\n     return universe;\n}</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The FTX US Crypto Price dataset provides TradeBar, QuoteBar, Tick, and CryptoCoarseFundamental objects.</p>\n\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>Tick Attributes</h4>\n<p>Tick objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"></div>\n\n<h4>CryptoCoarseFundamental Attributes</h4>\n<p>CryptoCoarseFundamental objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.CryptoCoarseFundamental\"></div>"
      }
    ],
    "priceCTA": "Price CTA",
    "vendorWebsite": "",
    "examples": [
      {
        "id": 1022,
        "master_product_id": 74,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we buy and hold Bitcoin through the FTX US exchange.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass FTXUSAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2022, 1, 1)\n        self.SetEndDate(2022, 2, 1)\n        self.SetCash(100000)\n\n        # FTX US accepts both cash and margin account types\n        self.SetBrokerageModel(BrokerageName.FTXUS, AccountType.Margin)\n\n        # Warm up the security with the last known price to avoid conversion error\n        self.SetSecurityInitializer(lambda security: security.SetMarketPrice(self.GetLastKnownPrice(security)))\n        \n        # Requesting data\n        crypto = self.AddCrypto(\"BTCUSD\", Resolution.Minute, Market.FTXUS)\n        self.btcusd = crypto.Symbol\n        self.minimum_order_size = crypto.SymbolProperties.MinimumOrderSize\n        \n        # Historical data\n        history = self.History(self.btcusd, 30, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request\")\n\n        # Add Crypto Coarse Fundamental Universe Selection\n        self.AddUniverse(CryptoCoarseFundamentalUniverse(Market.FTXUS, self.UniverseSettings, self.UniverseSelectionFilter))\n\n    def UniverseSelectionFilter(self, crypto_coarse):\n        return [datum.Symbol for datum in crypto_coarse\n                if datum.Volume &gt;= 100 \n                and datum.VolumeInUsd &gt; 10000]\n\n    def OnData(self, data):\n        if self.Portfolio.CashBook['BTC'].Amount == 0:\n            free_cash = self.Portfolio.CashBook['USD'].Amount * (1-self.Settings.FreePortfolioValuePercentage)\n            quantity = free_cash / data[self.btcusd].Price\n            quantity -= quantity % self.minimum_order_size\n            if quantity &gt; 0:\n                self.MarketOrder(self.btcusd, quantity)</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class FTXUSAlgorithm : QCAlgorithm\n    {\n        private Symbol _btcusd;\n        private decimal? _minimumOrderSize;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2022, 1, 1);\n            SetEndDate(2022, 2, 1);\n            SetCash(100000);\n\n            // FTX US accepts both cash and margin account types\n            SetBrokerageModel(BrokerageName.FTXUS, AccountType.Margin);\n\n            // Warm up the security with the last known price to avoid conversion error\n            SetSecurityInitializer(security =&gt; security.SetMarketPrice(GetLastKnownPrice(security)));\n            \n            // Requesting data\n            var crypto = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.FTXUS);\n            _btcusd = crypto.Symbol;\n            _minimumOrderSize = crypto.SymbolProperties.MinimumOrderSize;\n        \n             // Historical data\n            var history = History(_btcusd, 30, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request\");\n\n            // Add Crypto Coarse Fundamental Universe Selection\n            AddUniverse(new CryptoCoarseFundamentalUniverse(Market.FTXUS, UniverseSettings, UniverseSelectionFilter));\n        }\n\n        private IEnumerable&lt;Symbol&gt; UniverseSelectionFilter(IEnumerable&lt;CryptoCoarseFundamental&gt; cryptoCoarse)\n        {\n            return from datum in cryptoCoarse\n                   where datum.Volume &gt;= 100m \n                   &amp;&amp; datum.VolumeInUsd &gt; 10000m\n                   select datum.Symbol;\n        }\n\n        public override void OnData(Slice data)\n        {\n            if (Portfolio.CashBook[\"BTC\"].Amount == 0)\n            {\n                var freeCash = Portfolio.CashBook[\"USD\"].Amount * (1-Settings.FreePortfolioValuePercentage);\n                var quantity = freeCash / data[_btcusd].Price;\n                quantity -= quantity % _minimumOrderSize;\n                if (quantity &gt; 0m)\n                {\n                    MarketOrder(_btcusd, quantity);\n                }\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-04-27 16:03:18"
      },
      {
        "id": 1024,
        "master_product_id": 74,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>In this example, we select a dynamic universe of Cryptocurrencies from the FTX US exchange and then hold a equal-weighted portfolio of the universe constituents.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass FTXUSAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2022, 1, 1)\n        self.SetEndDate(2022, 2, 1)\n        self.SetCash(100000)\n\n        # FTX US accepts both cash and margin account types\n        self.SetBrokerageModel(BrokerageName.FTXUS, AccountType.Margin)\n\n        # Warm up the security with the last known price to avoid conversion error\n        self.SetSecurityInitializer(lambda security: security.SetMarketPrice(self.GetLastKnownPrice(security)))\n        \n        self.UniverseSettings.Resolution = Resolution.Minute\n        # Add universe selection for Crypto assets based on coarse fundamentals\n        self.AddUniverse(CryptoCoarseFundamentalUniverse(Market.FTXUS, self.UniverseSettings, self.UniverseSelectionFilter))\n        \n        self.AddAlpha(ConstantAlphaModel(InsightType.Price, InsightDirection.Up, timedelta(minutes = 20), 0.025, None))\n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n\n    def UniverseSelectionFilter(self, crypto_coarse):\n        return [datum.Symbol for datum in crypto_coarse\n                if datum.Volume &gt;= 100 \n                and datum.VolumeInUsd &gt; 10000]\n\n    def OnSecuritiesChanged(self, changes):\n        for security in changes.AddedSecurities:\n            # Historical data\n            history = self.History(security.Symbol, 30, Resolution.Daily)\n            self.Debug(f\"We got {len(history)} items from our history request\")</code></pre>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing QuantConnect.Algorithm.Framework.Alphas;\nusing QuantConnect.Algorithm.Framework.Portfolio;\nusing QuantConnect.Data;\nusing QuantConnect.Data.UniverseSelection;\n\nnamespace QuantConnect\n{\n    public class FTXUSAlgorithm : QCAlgorithm\n    {\n        private Symbol _btcusd;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2022, 1, 1);\n            SetEndDate(2022, 2, 1);\n            SetCash(100000);\n\n            // FTX US accepts both cash and margin account types\n            SetBrokerageModel(BrokerageName.FTXUS, AccountType.Margin);\n\n            // Warm up the security with the last known price to avoid conversion error\n            SetSecurityInitializer(security =&gt; security.SetMarketPrice(GetLastKnownPrice(security)));\n \n            UniverseSettings.Resolution = Resolution.Minute;\n            // Add universe selection for Crypto assets based on coarse fundamentals\n            AddUniverse(new CryptoCoarseFundamentalUniverse(Market.FTXUS, UniverseSettings, UniverseSelectionFilter));\n        \n            AddAlpha( new ConstantAlphaModel(InsightType.Price, InsightDirection.Up, TimeSpan.FromMinutes(20), 0.025, null) );\n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n        }\n\n        private IEnumerable&lt;Symbol&gt; UniverseSelectionFilter(IEnumerable&lt;CryptoCoarseFundamental&gt; cryptoCoarse)\n        {\n            return from datum in cryptoCoarse\n                   where datum.Volume &gt;= 100m \n                   &amp;&amp; datum.VolumeInUsd &gt; 10000m\n                   select datum.Symbol;\n        }\n\n        public override void OnSecuritiesChanged(SecurityChanges changes)\n        {\n            foreach(var security in changes.AddedSecurities)\n            {\n                // Historical data\n                var history = History(security.Symbol, 30, Resolution.Daily);\n                Debug($\"We got {history.Count()} items from our history request\");\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-04-27 16:05:36"
      }
    ],
    "pricingText": "The QuantConnect-CoinAPI partnership provides free access to Cryptocurrency market data in QuantConnect Cloud and paid access for downloads. Downloads are distributed in LEAN format and priced according to file resolution as below.",
    "pricing": [
      {
        "id": null,
        "master_product_id": 74,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>FTX US Crypto Price Data is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>FTX US Crypto Price Data can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 25 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>FTX US Crypto Price Data is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 186,
        "name": "FTXUS - Cloud Access",
        "description": "<p>Free access to FTX US Crypto price data from CoinBase via the QuantConnect Cloud platform for your backtesting and research.</p>\n<ul><li>Daily updates at 4am ET</li>\n    <li>No data maintenance</li> \n</ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 187,
        "name": "FTXUS - Tick Download",
        "description": "<p>Crypto-currencies Tick resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day/brokerage</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Tick Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "100 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 188,
        "name": "FTXUS - Second Download",
        "description": "<p>Crypto-currencies Second resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Second Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "25 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 189,
        "name": "FTXUS - Minute Download",
        "description": "<p>Crypto-currencies Minute resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Minute Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "50 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 190,
        "name": "FTXUS - Hour Download",
        "description": "<p>Crypto-currencies Hour resolution archives in LEAN format for on premise backtesting and research. One file per ticker/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Hour Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "400 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 191,
        "name": "FTXUS - Daily Download",
        "description": "<p>Crypto-currencies Daily resolution archives in LEAN format for on premise backtesting and research. One file per ticker/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Daily Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "100 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      }
    ],
    "headerColor": "4eff2b"
  },
  {
    "name": "Binance US Crypto Price Data",
    "vendorName": "CoinAPI",
    "datasetImageLight": "https://cdn.quantconnect.com/i/tu/binance-us-ds-logo.svg",
    "vendorImageLight": "https://cdn.quantconnect.com/i/tu/coinapi-logo.png",
    "landingFileName": "binance-us-crypto-price-data.html",
    "url": "/datasets/binance-us-crypto-price-data",
    "short_description": "Binance US price data for this crypto exchange supported by QuantConnect collected by CoinAPI and hosted on the QuantConnect Cloud.",
    "about": [
      {
        "title": "Introduction",
        "content": "<p>The Binance US Crypto Price Data by CoinAPI is for Cryptocurrency price and volume data points. The data covers 174 Cryptocurrency pairs, starts in October 2019, and is delivered on any frequency from tick to daily. This dataset is created by monitoring the trading activity on Binance US.</p>"
      },
      {
        "title": "About the Provider",
        "content": "<p><a href=\"https://www.cryptotick.com/\">CoinAPI</a> was founded by Artur Pietrzyk in 2016 with the goal of providing real-time and historical cryptocurrency market data, collected from hundreds of exchanges. CoinAPI provides access to Cryptocurrencies for traders, market makers, and developers building third-party applications.</p>"
      },
      {
        "title": "Getting Started",
        "content": "<p>The following snippets demonstrates how to set the brokerage model, request data, and perform universe selection with the Binance US dataset:</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\"># Binance US only accepts cash accounts\nself.SetBrokerageModel(BrokerageName.BinanceUS, AccountType.Cash)\n\nself.btcusd = self.AddCrypto(\"BTCUSD\", Resolution.Minute, Market.BinanceUS).Symbol\n\nself.AddUniverse(CryptoCoarseFundamentalUniverse(Market.BinanceUS, self.UniverseSettings, self.UniverseSelectionFilter))\n</code></pre>\n<pre><code class=\"language-cs\">// Binance US only accepts cash accounts\nSetBrokerageModel(BrokerageName.BinanceUS, AccountType.Cash);\n\n_btcusd = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.BinanceUS).Symbol;\n\nAddUniverse(new CryptoCoarseFundamentalUniverse(Market.BinanceUS, UniverseSettings, UniverseSelectionFilter));</code></pre>\n</div>"
      },
      {
        "title": "Data Summary",
        "content": "<p>The following table describes the dataset properties:</p>\n<table class=\"table qc-table\"><thead><tr><th>Property</th>\n            <th>Value</th>\n        </tr></thead><tbody><tr><td>Start Date</td>\n            <td>October 2019</td>\n        </tr><tr><td>Asset Coverage</td>\n            <td>174 Cryptocurrency Pairs</td>\n        </tr><tr><td>Data Density</td><td>Dense</td></tr><tr><td>Resolution</td>\n            <td>Tick, Second, Minute, Hourly, &amp; Daily</td>\n        </tr><tr><td>Timezone</td>\n            <td>UTC</td>\n        </tr></tbody></table>"
      },
      {
        "title": "Supported Assets",
        "content": "<p>The following tables shows the available Cryptocurrency pairs:</p>\n<table class=\"table qc-table table-reflow ticker-table hidden-xs\"><thead><tr><th colspan=\"6\">Cryptocurrency Pairs</th></tr></thead><tbody><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/1INCHUSD\">1INCHUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/1INCHUSDT\">1INCHUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/AAVEUSD\">AAVEUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/AAVEUSDT\">AAVEUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ADABTC\">ADABTC</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ADABUSD\">ADABUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ADAUSD\">ADAUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ADAUSDT\">ADAUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ALGOBUSD\">ALGOBUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ALGOUSD\">ALGOUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ALGOUSDT\">ALGOUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/AMPUSD\">AMPUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ANKRUSD\">ANKRUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ANTUSD\">ANTUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ANTUSDT\">ANTUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ATOMUSD\">ATOMUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ATOMUSDT\">ATOMUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/AVAXUSD\">AVAXUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/AVAXUSDT\">AVAXUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/AXSUSD\">AXSUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/AXSUSDT\">AXSUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/BANDUSD\">BANDUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/BANDUSDT\">BANDUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/BATUSD\">BATUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/BATUSDT\">BATUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/BCHBTC\">BCHBTC</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/BCHUSD\">BCHUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/BCHUSDT\">BCHUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/BNBBTC\">BNBBTC</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/BNBBUSD\">BNBBUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/BNBUSD\">BNBUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/BNBUSDT\">BNBUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/BTCBUSD\">BTCBUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/BTCUSD\">BTCUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/BTCUSDC\">BTCUSDC</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/BTCUSDT\">BTCUSDT</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/BUSDUSD\">BUSDUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/BUSDUSDT\">BUSDUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/COMPUSD\">COMPUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/COMPUSDT\">COMPUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/CRVUSD\">CRVUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/CRVUSDT\">CRVUSDT</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/CTSIUSD\">CTSIUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/CTSIUSDT\">CTSIUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/DAIUSD\">DAIUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/DASHUSD\">DASHUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/DOGEUSD\">DOGEUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/DOGEUSDT\">DOGEUSDT</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/DOTBTC\">DOTBTC</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/DOTUSD\">DOTUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/DOTUSDT\">DOTUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/EGLDUSD\">EGLDUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/EGLDUSDT\">EGLDUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ENJUSD\">ENJUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ENJUSDT\">ENJUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/EOSBUSD\">EOSBUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/EOSUSD\">EOSUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/EOSUSDT\">EOSUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ETCUSD\">ETCUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ETCUSDT\">ETCUSDT</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ETHBTC\">ETHBTC</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ETHBUSD\">ETHBUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ETHUSD\">ETHUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ETHUSDC\">ETHUSDC</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ETHUSDT\">ETHUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/FILUSD\">FILUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/FILUSDT\">FILUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/FTMUSD\">FTMUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/FTMUSDT\">FTMUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/GRTUSD\">GRTUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/GRTUSDT\">GRTUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/HBARBUSD\">HBARBUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/HBARUSD\">HBARUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/HNTUSD\">HNTUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/HNTUSDT\">HNTUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ICXUSD\">ICXUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/IOTAUSD\">IOTAUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/KNCUSD\">KNCUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/KNCUSDT\">KNCUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/KSHIBUSD\">KSHIBUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/LINKBTC\">LINKBTC</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/LINKUSD\">LINKUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/LINKUSDT\">LINKUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/LPTBUSD\">LPTBUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/LPTUSD\">LPTUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/LPTUSDT\">LPTUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/LRCBTC\">LRCBTC</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/LRCUSD\">LRCUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/LRCUSDT\">LRCUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/LTCBTC\">LTCBTC</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/LTCUSD\">LTCUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/LTCUSDT\">LTCUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/MANABUSD\">MANABUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/MANAUSD\">MANAUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/MANAUSDT\">MANAUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/MATICBTC\">MATICBTC</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/MATICBUSD\">MATICBUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/MATICUSD\">MATICUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/MATICUSDT\">MATICUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/MKRUSD\">MKRUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/MKRUSDT\">MKRUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/NANOUSD\">NANOUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/NEARBUSD\">NEARBUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/NEARUSD\">NEARUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/NEARUSDT\">NEARUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/NEOUSD\">NEOUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/NEOUSDT\">NEOUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/NMRUSD\">NMRUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/NMRUSDT\">NMRUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/OMGBUSD\">OMGBUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/OMGUSD\">OMGUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/OMGUSDT\">OMGUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ONEBUSD\">ONEBUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ONEUSD\">ONEUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ONEUSDT\">ONEUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ONTUSD\">ONTUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ONTUSDT\">ONTUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/OXTUSD\">OXTUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/OXTUSDT\">OXTUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/PAXGUSD\">PAXGUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/PAXGUSDT\">PAXGUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/POLYBTC\">POLYBTC</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/POLYBUSD\">POLYBUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/POLYUSD\">POLYUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/POLYUSDT\">POLYUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/QTUMUSD\">QTUMUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/QTUMUSDT\">QTUMUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/REPBUSD\">REPBUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/REPUSD\">REPUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/RVNUSD\">RVNUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/SHIBBUSD\">SHIBBUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/SHIBUSDT\">SHIBUSDT</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/SLPUSD\">SLPUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/SLPUSDT\">SLPUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/SOLBTC\">SOLBTC</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/SOLBUSD\">SOLBUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/SOLUSD\">SOLUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/SOLUSDT\">SOLUSDT</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/STORJUSD\">STORJUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/STORJUSDT\">STORJUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/SUSHIUSD\">SUSHIUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/SUSHIUSDT\">SUSHIUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/UNIBTC\">UNIBTC</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/UNIUSD\">UNIUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/UNIUSDT\">UNIUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/USDCBUSD\">USDCBUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/USDCUSD\">USDCUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/USDCUSDT\">USDCUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/USDTUSD\">USDTUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/VETBTC\">VETBTC</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/VETUSD\">VETUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/VETUSDT\">VETUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/VTHOUSD\">VTHOUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/VTHOUSDT\">VTHOUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/WAVESUSD\">WAVESUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/XLMUSD\">XLMUSD</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/XLMUSDT\">XLMUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/XRPBTC\">XRPBTC</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/XRPBUSD\">XRPBUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/XRPUSD\">XRPUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/XRPUSDT\">XRPUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/XTZBTC\">XTZBTC</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/XTZBUSD\">XTZBUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/XTZUSD\">XTZUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/YFIUSD\">YFIUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/YFIUSDT\">YFIUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ZECUSD\">ZECUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ZECUSDT\">ZECUSDT</a></td></tr><tr><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ZENUSD\">ZENUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ZENUSDT\">ZENUSDT</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ZILBUSD\">ZILBUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ZILUSD\">ZILUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ZRXUSD\">ZRXUSD</a></td><td><a href=\"https://www.quantconnect.com/data/tree/crypto/binanceus/minute/ZRXUSDT\">ZRXUSDT</a></td></tr></tbody></table>"
      },
      {
        "title": "Example Applications",
        "content": "<p>\nThe Binance US Crypto Price Data by CoinAPI enables researchers to accurately design strategies for Cryptocurrencies. Examples include: \n</p>\n<ul><li>Buy and hold</li>\n<li>Trading Cryptocurrency volatility and price action</li>\n<li>Allocating a small portion of your portfolio to Cryptocurrencies to hedge against inflation</li>\n</ul><div class=\"qc-embed-frame\"><div class=\"qc-embed-dummy\"></div><div class=\"qc-embed-element\"><iframe class=\"qc-embed-backtest\" src=\"https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_ca9ad742c43e9d05f09dc85bb70c0b0d.html\" scrolling=\"no\"></iframe></div></div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Binance US Crypto Price dataset provides TradeBar, QuoteBar, Tick, and CryptoCoarseFundamental objects.</p>\n\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>Tick Attributes</h4>\n<p>Tick objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"></div>\n\n<h4>CryptoCoarseFundamental Attributes</h4>\n<p>CryptoCoarseFundamental objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.CryptoCoarseFundamental\"></div>"
      }
    ],
    "documentation": [
      {
        "title": "Requesting Data",
        "content": "<p>To add Binance US data from CoinAPI to your algorithm, use the AddCrypto() method to request the data. As with all datasets, you should save a reference to your symbol for easy use later in your algorithm. When requesting data, you have the option to use several crypto markets. For detailed documentation on requesting market data, see <a href=\"https://www.quantconnect.com/docs/algorithm-reference/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data\">Selecting Asset Data</a>.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">class CoinAPIDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        # BinanceUS accepts Cash account type only, AccountType.Margin will result in an exception.\n        self.SetBrokerageModel(BrokerageName.BinanceUS, AccountType.Cash)\n        \n        self.btcusd = self.AddCrypto(\"BTCUSD\", Resolution.Minute, Market.BinanceUS).Symbol</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class CoinAPIDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _btcusd;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n        \n            // BinanceUS accepts Cash account type only, AccountType.Margin will result in an exception.\n            SetBrokerageModel(BrokerageName.BinanceUS, AccountType.Cash);\n            \n            _btcusd = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.BinanceUS).Symbol;\n        }\n    }\n}</code></pre>\n</div>"
      },
      {
        "title": "Accessing Data",
        "content": "<p>Data can be accessed via Slice events. Slice delivers unique events to your algorithm as they happen. We recommend saving the symbol object when you add the data for easy access to slice later. Data is available in every resolution. You can see an example of the slice accessor in the code below.</p>\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def OnData(self, data):\n    btc_price = data[self.btcusd].Price\n    self.Log(f\"Time: {self.Time}; Price: {btc_price};\")</code></pre>\n<pre><code class=\"language-cs\">public override void OnData(Slice data)\n{\n    var btcPrice = data[_btcusd].Price;\n    Log($\"Time: {Time}; Price: {btcPrice}\");\n}</code></pre>\n</div>"
      },
      {
        "title": "Historical Data",
        "content": "<p>You can request historical data in your algorithm using the data Symbol object. To learn more about historical data requests, please visit the <a href=\"https://www.quantconnect.com/docs/algorithm-reference/historical-data\">Historical Data</a> documentation. If there is no data in the period you request, the history result will be empty. The following example gets the historical data for Coinbase Pro by using the History API.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">history = self.History(self.btcusd, 30, Resolution.Daily)</code></pre>\n<pre><code class=\"language-cs\">var history = History(_btcusd, 30, Resolution.Daily);</code></pre>\n</div>"
      },
      {
        "title": "Universe Selection",
        "content": "<p>You can perform an universe selection by adding a CryptoCoarseFundamentalUniverse, which filters cryptocurrency pairs by their previous day OHLCV, dollar volume in quote currency and USD if available (as of UTC 00:00).</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">def Initialize(self):\n    self.UniverseSettings.Resolution = Resolution.Daily\n    self.SetBrokerageModel(BrokerageName.BinanceUS, AccountType.Cash)\n\n    # Add universe selection of cryptos based on coarse fundamentals\n    self.AddUniverse(CryptoCoarseFundamentalUniverse(Market.BinanceUS, self.UniverseSettings, self.UniverseSelectionFilter))\n\ndef UniverseSelectionFilter(self, crypto_coarse):\n    for datum in crypto_coarse:\n        self.Log(f\"{datum.Symbol},{datum.Price},{datum.Volume},{datum.VolumeInQuoteCurrency},{datum.VolumeInUsd},{datum.Open},{datum.High},{datum.Low},{datum.Close}\")\n            \n        # define our selection criteria\n        if datum.Volume &gt;= 100 and datum.VolumeInUsd &gt; 10000:\n            universe.append(datum.Symbol)\n        \n    return universe</code></pre>\n<pre><code class=\"language-cs\">public override void Initialize()\n{\n    UniverseSettings.Resolution = Resolution.Daily;\n    SetBrokerageModel(BrokerageName.BinanceUS, AccountType.Cash);\n\n    // Add universe selection of cryptos based on coarse fundamentals\n    AddUniverse(new CryptoCoarseFundamentalUniverse(Market.BinanceUS, UniverseSettings, UniverseSelectionFilter));\n}\n\nprivate IEnumerable&lt;Symol&gt; UniverseSelectionFilter(IEnumerable&lt;CryptoCoarseFundamental&gt; cryptoCoarse)\n{\n    var universe = new List&lt;Symbol&gt;();\n\n    foreach (var datum in cryptoCoarse)\n    {\n        Log($\"{datum.Symbol},{datum.Price},{datum.Volume},{datum.VolumeInQuoteCurrency},{datum.VolumeInUsd},{datum.Open},{datum.High},{datum.Low},{datum.Close}\");\n\n         // define our selection criteria\n         if (datum.Volume &gt;= 100m &amp;&amp; datum.VolumeInUsd &gt; 10000m)\n         {\n             universe.Add(datum.Symbol);\n         }\n     }\n\n     return universe;\n}</code></pre>\n</div>"
      },
      {
        "title": "Data Point Attributes",
        "content": "<p>The Binance US Crypto Price dataset provides TradeBar, QuoteBar, Tick, and CryptoCoarseFundamental objects.</p>\n\n<h4>TradeBar Attributes</h4>\n<p>TradeBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.TradeBar\"></div>\n\n<h4>QuoteBar Attributes</h4>\n<p>QuoteBar objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.QuoteBar\"></div>\n\n<h4>Tick Attributes</h4>\n<p>Tick objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.Data.Market.Tick\"></div>\n\n<h4>CryptoCoarseFundamental Attributes</h4>\n<p>CryptoCoarseFundamental objects have the following attributes:</p>\n<div data-tree=\"QuantConnect.DataSource.CryptoCoarseFundamental\"></div>"
      }
    ],
    "priceCTA": "Price CTA",
    "vendorWebsite": "",
    "examples": [
      {
        "id": 1054,
        "master_product_id": 76,
        "position": 1,
        "section": "examples",
        "title": "Classic Algorithm Example ",
        "content": "<p>In this example, we buy and hold Bitcoin through the Binance US exchange.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass CoinAPIDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n        \n        # BinanceUS accepts Cash account type only, AccountType.Margin will result in an exception.\n        self.SetBrokerageModel(BrokerageName.BinanceUS, AccountType.Cash)\n\n        # Warm up the security with the last known price to avoid conversion error\n        self.SetSecurityInitializer(lambda security: security.SetMarketPrice(self.GetLastKnownPrice(security)))\n\n        # Requesting data\n        crypto = self.AddCrypto(\"BTCUSD\", Resolution.Minute, Market.BinanceUS)\n        self.btcusd = crypto.Symbol\n        self.minimum_order_size = crypto.SymbolProperties.MinimumOrderSize\n        \n        # Historical data\n        history = self.History(self.btcusd, 30, Resolution.Daily)\n        self.Debug(f\"We got {len(history)} items from our history request\")\n\n        # Add Crypto Coarse Fundamental Universe Selection\n        self.AddUniverse(CryptoCoarseFundamentalUniverse(Market.BinanceUS, self.UniverseSettings, self.UniverseSelectionFilter))\n\n    def UniverseSelectionFilter(self, crypto_coarse):\n        return [datum.Symbol for datum in crypto_coarse\n                if datum.Volume &gt;= 100 \n                and datum.VolumeInUsd &gt; 10000]\n\n    def OnData(self, data):\n        if self.Portfolio.CashBook['BTC'].Amount == 0:\n            free_cash = self.Portfolio.CashBook['USD'].Amount * (1-self.Settings.FreePortfolioValuePercentage)\n            quantity = free_cash / data[self.btcusd].Price\n            quantity -= quantity % self.minimum_order_size\n            if quantity &gt; 0:\n                self.MarketOrder(self.btcusd, quantity)</code></pre>\n<pre><code class=\"language-cs\">namespace QuantConnect\n{\n    public class CoinAPIDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _btcusd;\n        private decimal? _minimumOrderSize;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n        \n            // BinanceUS accepts Cash account type only, AccountType.Margin will result in an exception.\n            SetBrokerageModel(BrokerageName.BinanceUS, AccountType.Cash);\n\n            // Warm up the security with the last known price to avoid conversion error\n            SetSecurityInitializer(security =&gt; security.SetMarketPrice(GetLastKnownPrice(security)));\n            \n            // Requesting data\n            var crypto = AddCrypto(\"BTCUSD\", Resolution.Minute, Market.BinanceUS);\n            _btcusd = crypto.Symbol;\n            _minimumOrderSize = crypto.SymbolProperties.MinimumOrderSize;\n                \n             // Historical data\n            var history = History(_btcusd, 30, Resolution.Daily);\n            Debug($\"We got {history.Count()} items from our history request\");\n\n            // Add Crypto Coarse Fundamental Universe Selection\n            AddUniverse(new CryptoCoarseFundamentalUniverse(Market.BinanceUS, UniverseSettings, UniverseSelectionFilter));\n        }\n\n        private IEnumerable&lt;Symbol&gt; UniverseSelectionFilter(IEnumerable&lt;CryptoCoarseFundamental&gt; cryptoCoarse)\n        {\n            return from datum in cryptoCoarse\n                   where datum.Volume &gt;= 100m \n                   &amp;&amp; datum.VolumeInUsd &gt; 10000m\n                   select datum.Symbol;\n        }\n\n        public override void OnData(Slice data)\n        {\n            if (Portfolio.CashBook[\"BTC\"].Amount == 0)\n            {\n                var freeCash = Portfolio.CashBook[\"USD\"].Amount * (1-Settings.FreePortfolioValuePercentage);\n                var quantity = freeCash / data[_btcusd].Price;\n                quantity -= quantity % _minimumOrderSize;\n                if (quantity &gt; 0m)\n                {\n                    MarketOrder(_btcusd, quantity);\n                }\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-04-27 15:50:33"
      },
      {
        "id": 1056,
        "master_product_id": 76,
        "position": 2,
        "section": "examples",
        "title": "Framework Algorithm Example ",
        "content": "<p>Framework Algorithm is not available for Cash AccountType right now, but we can still use the price data from Binance US with the Default Brokerage Model in Framework Algorithm.</p>\n\n<div class=\"section-example-container\">\n<pre><code class=\"language-python\">from AlgorithmImports import *\n\nclass CoinAPIDataAlgorithm(QCAlgorithm):\n\n    def Initialize(self):\n        self.SetStartDate(2020, 6, 1)\n        self.SetEndDate(2021, 6, 1)\n        self.SetCash(100000)\n\n        # Warm up the security with the last known price to avoid conversion error\n        self.SetSecurityInitializer(lambda security: security.SetMarketPrice(self.GetLastKnownPrice(security)))\n\n        self.UniverseSettings.Resolution = Resolution.Minute\n        # Add universe selection of cryptos based on coarse fundamentals\n        self.AddUniverse(CryptoCoarseFundamentalUniverse(Market.BinanceUS, self.UniverseSettings, self.UniverseSelectionFilter))\n        \n        self.AddAlpha(ConstantAlphaModel(InsightType.Price, InsightDirection.Up, timedelta(minutes = 20), 0.025, None))\n        self.SetPortfolioConstruction(EqualWeightingPortfolioConstructionModel())\n\n    def UniverseSelectionFilter(self, crypto_coarse):\n        return [datum.Symbol for datum in crypto_coarse\n                if datum.Volume &gt;= 100 \n                and datum.VolumeInUsd &gt; 10000]\n\n    def OnSecuritiesChanged(self, changes):\n        for security in changes.AddedSecurities:\n            # Historical data\n            history = self.History(security.Symbol, 30, Resolution.Daily)\n            self.Debug(f\"We got {len(history)} items from our history request\")</code></pre>\n<pre><code class=\"language-cs\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing QuantConnect.Algorithm.Framework.Alphas;\nusing QuantConnect.Algorithm.Framework.Portfolio;\nusing QuantConnect.Data;\nusing QuantConnect.Data.UniverseSelection;\nusing QuantConnect.DataSource;\n\nnamespace QuantConnect\n{\n    public class CoinAPIDataAlgorithm : QCAlgorithm\n    {\n        private Symbol _btcusd;\n        \n        public override void Initialize()\n        {\n            SetStartDate(2020, 6, 1);\n            SetEndDate(2021, 6, 1);\n            SetCash(100000);\n\n            // Warm up the security with the last known price to avoid conversion error\n            SetSecurityInitializer(security =&gt; security.SetMarketPrice(GetLastKnownPrice(security)));\n \n            UniverseSettings.Resolution = Resolution.Minute;\n            // Add universe selection of cryptos based on coarse fundamentals\n            AddUniverse(new CryptoCoarseFundamentalUniverse(Market.BinanceUS, UniverseSettings, UniverseSelectionFilter));\n        \n            AddAlpha( new ConstantAlphaModel(InsightType.Price, InsightDirection.Up, TimeSpan.FromMinutes(20), 0.025, null) );\n            SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel());\n        }\n\n        private IEnumerable&lt;Symbol&gt; UniverseSelectionFilter(IEnumerable&lt;CryptoCoarseFundamental&gt; cryptoCoarse)\n        {\n            return from datum in cryptoCoarse\n                   where datum.Volume &gt;= 100m \n                   &amp;&amp; datum.VolumeInUsd &gt; 10000m\n                   select datum.Symbol;\n        }\n\n        public override void OnSecuritiesChanged(SecurityChanges changes)\n        {\n            foreach(var security in changes.AddedSecurities)\n            {\n                // Historical data\n                var history = History(security.Symbol, 30, Resolution.Daily);\n                Debug($\"We got {history.Count()} items from our history request\");\n            }\n        }\n    }\n}</code></pre>\n</div>",
        "updated": "2022-04-27 15:51:01"
      },
      {
        "id": 1060,
        "master_product_id": 76,
        "position": 3,
        "section": "examples",
        "title": "DELETE",
        "content": "DELETE",
        "updated": "2022-04-04 02:04:53"
      }
    ],
    "pricingText": "The QuantConnect-CoinAPI partnership provides free access to Cryptocurrency market data in QuantConnect Cloud and paid access for downloads. Downloads are distributed in LEAN format and priced according to file resolution as below.",
    "pricing": [
      {
        "id": null,
        "master_product_id": 76,
        "position": 1,
        "section": "pricing",
        "title": "Licensing Available",
        "updated": null,
        "content": "<div class=\"pricing-box\">\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/cloud-usage.svg\" alt=\"Cloud Usage\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Cloud Usage</h4>\r\n                    <p>Binance US Crypto Price Data is allowed to be used in the cloud \r\n            for personal and commercial projects for free. The data is permissioned for use within \r\n            the licensed organization only</p><p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/lean-cli-downloads-usage.svg\" alt=\"Live trading license available\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">LEAN CLI Downloads Usage</h4>\r\n                    <p>Binance US Crypto Price Data can be downloaded on premise with the \r\n            LEAN CLI, for a charge per file downloaded. This download is for the licensed organization's internal LEAN \r\n            use only and cannot be redistributed or converted in any format.</p><p>Starting at 25 QCC/file | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenSourceCLI();\" >Learn More</a></p>\r\n                </div>\r\n            </div>\r\n              \r\n            <div class=\"intro-box\">\r\n                <img src=\"https://cdn.quantconnect.com/i/tu/data-source-alpha-stream.svg\" alt=\"Alpha Streams use permitted\" />\r\n                <div class=\"info\">\r\n                    <h4 class=\"bold-text\">Alpha Stream Usage</h4>\r\n                    <p>Binance US Crypto Price Data is allowed to be used for free in all Alpha Streams with no royalty.</p>\r\n                    <p>Free | <a href=\"javascript:void(0)\" onclick=\"ViewsDatasets.OpenDocumentation();\" >Documentation</a></p>\r\n                </div>\r\n            </div></div>"
      }
    ],
    "products": [
      {
        "id": 192,
        "name": "BinanceUS - Cloud Access",
        "description": "<p>Free access to Binance US Crypto price data from CoinBase via the QuantConnect Cloud platform for your backtesting and research.</p>\n<ul><li>Daily updates at 4am ET</li>\n    <li>No data maintenance</li> \n</ul>",
        "shortDescription": "Cloud Access",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "Free",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": false,
        "cloudProduct": true,
        "cliProduct": false,
        "sortPrice": 0
      },
      {
        "id": 193,
        "name": "BinanceUS - Tick Download",
        "description": "<p>Crypto-currencies Tick resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day/brokerage</p>\n    <ul><li>Ownership of the data</li>\n        <li>Data in LEAN format</li>\n        <li>Local compute resources</li>\n    </ul>",
        "shortDescription": "Tick Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "100 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 194,
        "name": "BinanceUS - Second Download",
        "description": "<p>Crypto-currencies Second resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Second Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "25 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 195,
        "name": "BinanceUS - Minute Download",
        "description": "<p>Crypto-currencies Minute resolution archives in LEAN format for on premise backtesting and research. One file per ticker/day/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Minute Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "50 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 196,
        "name": "BinanceUS - Hour Download",
        "description": "<p>Crypto-currencies Hour resolution archives in LEAN format for on premise backtesting and research. One file per ticker/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Hour Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "400 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      },
      {
        "id": 197,
        "name": "BinanceUS - Daily Download",
        "description": "<p>Crypto-currencies Daily resolution archives in LEAN format for on premise backtesting and research. One file per ticker/brokerage.</p>\n<ul><li>Ownership of the data</li>\n  <li>Data in LEAN format</li>\n  <li>Local compute resources</li>\n</ul>",
        "shortDescription": "Daily Download",
        "public": 1,
        "price": {
          "frequency": "none",
          "priceCTA": "100 QCC/file",
          "monthlyPrice": 0,
          "yearlyPrice": 0,
          "priceError": null,
          "dashboard": null
        },
        "purchasable": true,
        "cloudProduct": false,
        "cliProduct": true,
        "sortPrice": 0
      }
    ],
    "headerColor": "4eff2b"
  }
]
