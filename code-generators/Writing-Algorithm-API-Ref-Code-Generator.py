import os
from re import findall
from pathlib import Path
from _code_generation_helpers import *

CODE_GEN_TAG = '<!-- Code generated by Writing-Algorithm-API-Code-Generator.py -->'

def parse_description(description: str) -> str:
    
    start = description.find('<see')
    while start > 0:
        end = description.find('/>', start) + 2
        original = description[start:end]
        old = original
        end = old.find('(')
        if end > 0:
            old = old[:end] + old[-4:]
        code = f"<code>{old.split('.')[-1].strip()[:-4]}</code>"
        description = description.replace(original, code)
        start = description.find('<see')
    
    start = description.find('<paramref')
    while start > 0:
        end = description.find('/>', start) + 2
        original = description[start:end]
        code = f"<code>{original.split('=')[-1].strip()[1:-4]}</code>"
        description = description.replace(original, code)
        start = description.find('<see')

    return description

def Box(input_, doc_attr, type_map, i, imax):
    if not doc_attr:
        return f"<-- Missing documentation attribute for {input_['Name']} --> "

    args = {}

    if "Parameters" in input_:
        params = input_["Parameters"]
        for item in params:
            args[item["Name"]] = {"Description": "/", "Type": "/"}

            if "Description" in item:
                args[item["Name"]]["Description"] = item["Description"]

                if args[item["Name"]]["Description"][-1] != ".":
                    args[item["Name"]]["Description"] = args[item["Name"]]["Description"] + "."

            if "EnumValues" in item:
                args[item["Name"]]["Description"] = args[item["Name"]]["Description"] + '<br/><i>\n' + f'Options: {item["EnumValues"]}</i>'

            args[item["Name"]]["Type"] = type_map[str(item["typeId"])]

            if "IsOptional" in item:
                args[item["Name"]]["Description"] = "(Optional) " + args[item["Name"]]["Description"]
                args[item["Name"]]["Type"] = "*" + args[item["Name"]]["Type"]

    call = input_["Name"] + "(" + ", ".join([str(value["Type"]) + " " + str(key) for key, value in args.items()]).replace("/", "_") + ")"

    params = ""
    if args:
        params += """        <div class="parameter-list">
            <table class="parameter-table">
                <th><strong>Parameters</strong></th>"""

        for name, prop in args.items():
            description = prop["Description"]

            start = description.find("<")
            while start != -1:
                end = description.find(">", start) + 1
                substring = description[start:end]
                new_substring = ""
                start2 = substring.find('"')

                if start2 != -1:
                    new_substring = substring[start2:substring.find('"', start2 + 1)]
                    new_substring = '<code>' + new_substring.split('(')[0].split(".")[-1].split('"')[0] + '</code>'

                if "seealso" in substring:
                    new_substring = "\nSee also: " + new_substring + ".\n"

                description = description.replace(substring, new_substring)
                start = description.find("<", end)

            description = description.replace("</value>", "").replace("``1", "&lt;T&gt;")
            params += f'''                
                <tr><td><code>{prop["Type"]}</code></td>
                <td>{name}</td>
                <td>{description.replace("(Optional)", "<i>(Optional)</i>")}</td></tr>'''

        params += """
            </table>
        </div>"""

    else:
        params += "<p>This method requires no argument input.</p>"

    ret = """        <div class="method-return">
            <h4>Return</h4>\n"""

    if "ReturnValue" in input_:
        if "Name" in input_["ReturnValue"]:
            ret_ = input_["ReturnValue"]["Name"]

        else:
            ret_ = type_map[str(input_["ReturnValue"]["typeId"])]

        if ret_ == "Void":
            ret += f"            <p>{ret_} - This method provides no return.</p>\n"

        elif ret_ == "Security":
            ret += f"            <p>{ret_} - The new Security"

        else:
            ret += f'            <p>{ret_}'

            if "Description" in input_["ReturnValue"]:
                ret += f' - {input_["ReturnValue"]["Description"]}</p>\n'

            else:
                ret += '</p>\n'

    else:
        ret += "            <p>This method provides no return.</p>\n"

    ret += "        </div>"

    description = input_.get('Description','')
    if description:
        description = description.replace(r"\'", '')

        start = description.find("<")
        while start != -1:
            end = description.find(">", start) + 1
            substring = description[start:end]
            new_substring = ""
            start2 = substring.find('"')

            if start2 != -1:
                new_substring = substring[start2:substring.find('"', start2 + 1)]
                new_substring = '<code>' + new_substring.split('(')[0].split(".")[-1].split('"')[0] + '</code>'

            description = description.replace(substring, new_substring)
            start = description.find("<", end)

        description = description.replace("</value>", "")

    this_ = " (\n&emsp;"
    head_ = '<font color="#8F9CA3">' + ret_ + "</font> QuantConnect.Algorithm.QCAlgorithm." + input_["Name"] + this_
    next_ = ",\n" + "&emsp;"

    max_ = 0
    for value in args.values():
        type_ = str(value["Type"])

        if len(type_) > max_:
            max_ = len(type_)

    call_ = head_ + \
        next_.join(["<code>" + str(value["Type"]) + "</code>" + " " * (max_ + 2 - len(str(value["Type"]))) + str(key) for key, value in args.items()]) + \
        "\n" + ")"
    call_ = call_.replace("\n", "\n" + " " * 3)

    filename, line = doc_attr[0]["fileName"], doc_attr[0]["line"]

    buttons = "\n".join([f'''<button class="method-tag" onclick="openTopTab(event, '{attr_}')">{attr_}</button>''' for attr_ in doc_attr])

    name = input_["Name"] if "Name" in input_ else input_["ShortType"]

    write_up = f"""
    <div class="method-header">
        {buttons}
        <h3>{input_["Name"]}()<span class="method-order">{i+1}/{imax}</span></h3>
        <pre>
            {call_}
        </pre>
    </div>

    <div class="method-description">
        <p>{description}</p>
    </div>

    <div class="details-btn">
        <button class="show-hide-detail" onclick="ShowHide(event, '{call.replace(" ", "-")}-details')"><span>Show Details <img src='https://cdn.quantconnect.com/i/tu/api-chevron-show.svg' alt='arrow-show'></span></button>
    </div>

    <div class="method-details" id="{call.replace(" ", "-")}-details" style="display: none;" >
 
{params}

{ret}

        <div class="method-def">
            <p>Definition at <a rel="nofollow" target="_blank" href="https://github.com/QuantConnect/Lean/blob/master/{filename}#L{line}">line {line} of file {filename}.</a></p>
        </div>        
    </div>
"""
    return write_up

if __name__ == '__main__':

    methods = {}
    methods_by_tag = {}
    type_map = {}

    doc = get_json_content('http://cdn.quantconnect.com.s3.us-east-1.amazonaws.com/terminal/cache/api/csharp_tree.json')

    def to_key(name: str) -> str:
        key = name
        if not key.isupper():
            key = '-'.join(findall('[a-zA-Z][^A-Z]*', name))
        return key.lower()

    for method in doc['tree']['core']['data'][0]['children']:
        if '( )' not in method['text']: continue
        for child in method["children"]:
            key = to_key(child['text'])
            if key not in methods:
                methods[key] = []
            for method in child['concentrate']:
                methods[key].append(method)

    for method in next((v for v in doc["keys"].values() if v.get("ShortType") == "QCAlgorithm")).get("Methods"):
        doc_attrs = method['DocumentationAttributes']
        if not doc_attrs:
            continue

        key = to_key(method['Name'])
        if key not in methods:
            methods[key] = []
        # Avoid duplicates
        original = True
        for overload in methods[key]:
            for doc_attr in overload['DocumentationAttributes']:
                if doc_attr in doc_attrs:
                    original = False
        if original:
            methods[key].append(method)

    for key in doc["keys"].items():
        d = '['
        s =  [s+d for s in key[1]["Type"].split(d)]
        d = ','
        s = [s_.split(",") for s_ in s]

        tmp = []
        for s_ in s:
            if len(s_) > 1:
                x_ = []
                for i_, x in enumerate(s_):
                    if i_ != len(s_) - 1:
                        x_.append(x + ",")
                    else:
                        x_.append(x)
                tmp.append(x_)
            else:
                tmp.append(s_)

        s = [item.split(".")[-1] for sublist in tmp for item in sublist]

        t_ = []
        for s_ in s:
            if "`" in s_:
                t_.append(s_.split("`")[0] + "&lt;")
            else:
                t_.append(s_.replace("[", "").replace("]", "&gt;").replace(",", ", "))

        type_map[key[0]] = "".join(t_)

    path = Path('Resources/qcalgorithm-api')
    path.mkdir(parents=True, exist_ok=True)

    for key, overloads in methods.items():
        imax = len(overloads)
        html = f'''<a id="{overloads[0]['Name']}-header"></a>
<div class="method-container">
        '''
        for i, overload in enumerate(overloads):
            overload['Description'] = parse_description(overload.get('Description',''))
            doc_attrs = overload.get('DocumentationAttributes')
            for doc_attr in doc_attrs:
                tag = doc_attr['tag']
                if tag not in methods_by_tag:
                    methods_by_tag[tag] = {}
                methods_by_tag[tag][key] = overloads

            html += Box(overload, doc_attrs, type_map, i, imax)

        with open(f'{path}/{key}.html', 'w', encoding='utf-8') as fp:
            fp.write(html + '</div>')

    path = Path(API_REFERENCE)
    path.mkdir(parents=True, exist_ok=True)

    # ------------------
    # Method lookup list
    # ------------------
    with open(f'{path}/01 Available QCAlgorithm Methods.php', 'w', encoding='utf-8') as fp:

        def get_rows(methods: list) -> str:
            rows = ''
            for key in sorted(methods.keys()):
                method = methods[key][0]
                name = method['Name']
                rows += f'''
<tr>
<td width="33%"><a href="#{name}-header">{name}()</a></td>
<td>{method.get('Description','')}</td>
</tr>'''
            return rows

        content = f'''{CODE_GEN_TAG}
<?php echo file_get_contents(DOCS_RESOURCES."/qcalgorithm-api/_tablinks.html"); ?>

<div class="api-ref-tag-list">
  <div style="margin-right: 0.8rem;">
    <button id="All_button" class="tablinks ref-tag-active" onclick="openTab(event, 'All')">All</button>
  </div>  
  <div>'''

        categories = sorted(methods_by_tag.keys())
        for category in categories:
            content += f'''    <button id="{category}_button" class="tablinks" onclick="openTab(event, '{category}')">{category}</button>\n'''
        content += f'''  </div>
</div>

<div id="All" class="ref-table-container" style="display: block;">
<table cellspacing="0" cellpadding="0" width="100%">
<tbody>{get_rows(methods)}
</tbody></table>
</div>'''

        for tag in categories:
            content += f'''<div id="{tag}" class="ref-table-container">
<table cellspacing="0" cellpadding="0">
<tbody>{get_rows(methods_by_tag[tag])}
</tbody></table>
</div>'''

        fp.write(content)

    # ------------------
    # Method API (boxes)
    # ------------------
    with open(f"{path}/02.php", "w", encoding="utf-8") as fp:
        content = f"""{CODE_GEN_TAG}
<?php echo file_get_contents(DOCS_RESOURCES."/qcalgorithm-api/_method_container.html"); ?>             
<hr>
<?php
""" + '\n'.join([
        f'echo file_get_contents(DOCS_RESOURCES."/qcalgorithm-api/{key}.html");'
        for key in sorted(methods.keys())
     ]) + """
?>"""
        fp.write(content)